{@abstract(The main purpose of @name is to define @link(TScreenObject)
  which extends @link(TScreenObject) by adding boundary conditions and
  the ability to handle PHAST-style interpolation.  @link(TScreenObject)
  represents the objects that the user draws on the screen.  @name also
  defines a variety of related classes.)
  @name also defines @link(TCustomPhastBoundaryCondition) and a series of
  descendants.  The descendants represent boundary conditions in GoPhast.

  For MODFLOW models, transient data is defined in @link(TModflowBoundaries).

  Another class defined here is @link(TMultiValueScreenObject) which is used
  when importing zones from an existing PHAST model.

  Finally @link(TScreenObjectItem) and @link(TScreenObjectCollection)
  are used to save @link(TScreenObject)s to a file or read them from
  a file.

  See @link(TPhastInterpolationValues) for an explanation of
  PHAST-style interpolation.

@author(Richard B. Winston <rbwinst@usgs.gov>)}
unit ScreenObjectUnit;

interface

uses
  System.UITypes, ZLib, PhastDataSets,
  Windows, // Windows is included to allow AnsiCompareText to be inlined.
  GR32, // defines TBitmap32.
  GR32_Polygons, Types, SysUtils, Classes, Graphics, Dialogs,
  Controls, OpenGL, ZoomBox2, AbstractGridUnit, PhastGridUnit, SelectUnit,
  UndoItems, DataSetUnit, Contnrs, RbwParser, FastGEO, GoPhastTypes,
  SubscriptionUnit, SparseDataSets, ModflowConstantHeadBoundaryUnit,
  ModflowGhbUnit, ModflowWellUnit, OrderedCollectionUnit, ModflowBoundaryUnit,
  ModflowRivUnit, ModflowDrnUnit, ModflowDrtUnit, ModflowCellUnit,
  ModflowGridUnit, RealListUnit, IntervalTree, ModflowRchUnit, ModflowEvtUnit,
  ModflowEtsUnit, ModflowResUnit, ModflowLakUnit, ModflowSfrUnit,
  ModflowUzfUnit, ModflowHobUnit, ValueArrayStorageUnit, QuadTreeClass,
  ModflowHfbUnit, ModpathParticleUnit, GPC_Classes, ModflowGageUnit,
  FormulaManagerUnit, ModflowMnw2Unit, ModflowHydmodUnit, Mt3dmsChemUnit,
  Mt3dmsTobUnit, SutraBoundariesUnit, SutraMeshUnit, SubPolygonUnit,
  ModflowStrUnit, ModflowFhbUnit, ModflowFmpWellUnit,
  ModflowFmpPrecipitationUnit, ModflowFmpEvapUnit, ModflowFmpCropSpatialUnit,
  ModflowCfpPipeUnit, ModflowCfpFixedUnit, ModflowCfpRechargeUnit,
  ModflowSwrUnit, ModflowSwrDirectRunoffUnit, ModflowSwrReachUnit,
  ObjectLabelUnit, ModflowMnw1Unit, CacheableSparseDataSets,
  ModflowFmpFarmIdUnit, FootprintBoundary, System.Generics.Collections,
  ModflowSwiObsUnit, ModflowRipUnit, Mt3dUztRchUnit, Mt3dUztSatEtUnit,
  Mt3dUztUnsatEtUnit, Mt3dUzfSeepageUnit, ModflowSfr6Unit, ModflowMawUnit,
  MeshRenumberingTypes, Modflow6ObsUnit, ModflowLakMf6Unit, ModflowMvrUnit,
  ModflowUzfMf6Unit, Mt3dLktUnit, Mt3dSftUnit, ModflowCsubUnit,
  ModflowSubsidenceDefUnit, PointCollectionUnit, ModflowGwtSpecifiedConcUnit,
  ModflowFmp4EfficiencyUnit, ModflowFmp4EfficiencyImprovementUnit,
  ModflowFmp4BareRunoffFractionUnit, ModflowFmp4PotentialEvapBareUnit,
  ModflowFmp4BarePrecipitationConsumptionFractionUnit,
  ModflowFmp4DirectRechargeUnit, ModflowFmp4PrecipPotConsumptionUnit,
  ModflowFmp4NrdInfilLocationUnit, ModflowFmp4CropCoefficientUnit,
  ModflowFmp4LandUseAreaFractionUnit, ModflowFmp4ConsumptiveUseUnit,
  ModflowFmp4IrrigationSpatialUnit, ModflowFmp4RootDepthUnit,
  ModflowFmp4TranspirationFractionUnit,
  ModflowFmp4EvaporationIrrigationFractionUnit,
  ModflowFmp4FractionOfPrecipToSurfaceWaterUnit,
  ModflowFmp4FractionOfIrrigToSurfaceWaterUnit, ModflowFmp4AddedDemandUnit,
  ModflowFmp4CropHasSalinityDemandUnit, ModflowFmp4AddedDemandRunoffSplitUnit,
  OrderedCollectionInterfaceUnit, ScreenObjectInterfaceUnit,
  FormulaManagerInterfaceUnit, ModflowBoundaryInterfaceUnit,
  GlobalVariablesInterfaceUnit, Modflow6DynamicTimeSeriesUnit, CellLocationUnit,
  Modflow6DynamicTimeSeriesInterfaceUnit, ModflowTvkUnit, ModflowTvsUnit;

type
  //
  T2DRealPointArray6 = array[0..5] of TPoint2D;
  // @name is used when a @link(TScreenObject) to specify which one
  // is being handled in the current operation.
  TWhichElevation = (weHigher, weLower);

  // @abstract(@name is the class of errors related to @link(TScreenObject)s.)
  EScreenObjectError = class(Exception);
  ECircularRefScreenObjectError = class(EScreenObjectError);


  {@abstract(@name represents a point of intersection between a
   @link(TScreenObject) and a grid element or grid cell.)

  @longcode(#
  TEdgePoint = record
    Position: TEdgePosition;
    X: real;
    Y: real;
  end;
  #)
  }
  TEdgePoint = record
    {If @name = epFirst, this is a vertex of the @link(TScreenObject)
     or this point is at the edge of the grid and
     this is the first spot where the @link(TScreenObject)
     intersects the grid (or else the contour has left the grid and is just
     reentering it)

     If @name = epLast, this is a vertex of the @link(TScreenObject)
     or this point is at the edge of the grid
     and this is where the @link(TScreenObject) is exiting the grid.

     If @name = epMiddle, this point is in the interior of the grid
     and this point is at the edge of an element or cell.

     See @link(TEdgePosition).
     }
    Position: TEdgePosition;
    // @name is the X-coordinate of the point.
    X: real;
    // @name is the Y-coordinate of the point.
    Y: real;
    function Distance(AnotherPoint: TEdgePoint): double;
  end;

  // @name is a pointer to @link(TEdgePoint);
  PEdgePoint = ^TEdgePoint;

  // @name is an array of @link(TEdgePoint)s.
  TEdgePointArray = array of TEdgePoint;

  TPointValue = class(TOrderedItem)
  private
    FName: string;
    FValue: double;
    procedure SetName(const Value: string);
    procedure SetValue(const Value: double);
    procedure InvalidateSwrReach;
    function GetValue: double;
  public
    function IsSame(AnotherItem: TOrderedItem): boolean; override;
    procedure Assign(Source: TPersistent); override;
  published
    property Name: string read FName write SetName;
    property Value: double read GetValue write SetValue;
  end;

    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
  TPointValues = class(TEnhancedOrderedCollection)
  private
    function GetItems(Index: Integer): TPointValue;
    procedure SetItems(Index: Integer; const Value: TPointValue);
  public
    constructor Create(Model: IModelForTOrderedCollection);
    function Add: TPointValue;
    property Items[Index: Integer]: TPointValue read GetItems
      write SetItems; default;
  end;

  TPointValuesItem = class(TOrderedItem)
  private
    FValues: TPointValues;
    FPosition: integer;
    procedure SetPosition(const Value: integer);
    procedure SetValues(const Value: TPointValues);
    function GetValue(Index: integer): double;
    procedure SetValue(Index: integer; const Value: double);
  public
    function IsSame(AnotherItem: TOrderedItem): boolean; override;
    procedure Assign(Source: TPersistent); override;
    property Value[Index: integer]: double read GetValue write SetValue;
    function IndexOfName(AName: string): integer;
    constructor Create(Collection: TCollection); override;
    Destructor Destroy; override;
  published
    // @name is the vertex number with which this @classname is associated.
    property Position: integer read FPosition write SetPosition;
    property Values: TPointValues read FValues write SetValues;
  end;

  TPointPositionValues = class(TEnhancedOrderedCollection)
  private
    FItemArray: array of TPointValuesItem;
    function GetItem(Index: Integer): TPointValuesItem;
    procedure SetItem(Index: Integer; const Value: TPointValuesItem);
  public
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    constructor Create(Model: IModelForTOrderedCollection);
    function IndexOfPosition(APosition: integer): integer;
    function GetItemByPosition(APosition: integer): TPointValuesItem;
    procedure Sort;
    function Add: TPointValuesItem;
    property Items[Index: Integer]: TPointValuesItem read GetItem write SetItem; default;
    procedure RemoveUnusedItems;
  end;

  TLineSegment = class(TObject)
    Point1: TPoint2D;
    Point2: TPoint2D;
    function IsNextSegment(Seg: TLineSegment): boolean;
  end;

  TSelectedCells = class(TObject)
  private
    FLayerCount: integer;
    FRowCount: integer;
    FColCount: integer;
    FSelected: array of array of array of boolean;
    function GetSelected(Layer, Row, Col: integer): boolean;
    procedure SetSelected(Layer, Row, Col: integer; const Value: boolean);
    procedure ValidateIndicies(Col: Integer; Row: Integer; Layer: Integer);
    function GetHasCells: boolean;
  public
    procedure SetExtents(LayerCount, RowCount, ColCount: integer);
    property Selected[Layer, Row, Col: integer]: boolean read GetSelected
      write SetSelected; default;
    property HasCells: boolean read GetHasCells;
    procedure Clear;
  end;

  TScreenObject = class;

  TCellElementLeaf = class(TRangeTreeLeaf)
  private
    FX1, FX2, FY1, FY2: double;
    FSegment: TCellElementSegment;
  public
    Constructor Create(Segment: TCellElementSegment;
      ViewDirection: TViewDirection);
    function GetCoordinate(Depth: integer): double; override;
  end;


  TCellElementLeafList = class(TRangeTreeLeafList)
  public
    function CoordinateCount: integer; override;
    Constructor Create;
  end;

  TIntersectEdge = class(TObject)
    StartPoint: TPoint2D;
    EndPoint: TPoint2D;
    procedure  Assign(Segment: TCellElementSegment); overload;
    procedure  Assign(P1, P2: TPoint2D); overload;
    procedure Reverse;
  end;

  // @abstract(@name is a list of the @link(TCellElementSegment)s of a
  // @link(TScreenObject). Each segment is the 2D
  // intersection of one segment of the @link(TScreenObject)
  // with an individual cell or element in the grid.)
  TCellElementSegmentList = class(TObjectList)
  private
    FGettingSegments: Boolean;
    FHigher3DElevations: T3DSparseCacheableRealArray;
    // @name indicates whether or not @link(FHigher3DElevations) are
    // up-to-date.  If they aren't, they will be recalculated when needed.
    FHigher3DElevationsNeedsUpdating: boolean;
    FLower3DElevations: T3DSparseCacheableRealArray;
    // @name indicates whether or not @link(FLower3DElevations) are
    // up-to-date.  If they aren't, they will be recalculated when needed.
    FLower3DElevationsNeedsUpdating: boolean;
    FStartPoints: TRbwQuadTree;
    FEndPoints: TRbwQuadTree;
    FScreenObject: TScreenObject;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name is a @link(TPhastModel) or nil.
    FModel: TBaseModel;
    // See @link(UpToDate).
    FUpToDate: boolean;
    FTempMemoryStream: TMemoryStream;
    FCached: Boolean;
    FCleared: Boolean;
    // @name is set and used in @link(TCellElementSegmentList.ClosestSegment)
    // to help find the closest segment to the point of interest.
    FMinDistance: double;
    FRangeTree: TRbwRangeTree;
    // See @link(Items).
    // @param(Index indicates the position of the @link(TCellElementSegment).)
    function GetSegment(Index: NativeInt): TCellElementSegment;
    // See @link(Items).
    // @param(Index indicates the position of the @link(TCellElementSegment).)
    // @param(Value is the @link(TCellElementSegment) to be stored.)
    procedure SetSegment(Index: NativeInt; const Value: TCellElementSegment);
    // See @link(UpToDate).
    procedure SetUpToDate(const Value: boolean);
    procedure RestoreData;
  public
    procedure CacheData;
    // @name indicates that the @link(TCellElementSegment)s in this
    // class name are up-to-date and do not need to be recalculated.
    property UpToDate: boolean read FUpToDate write SetUpToDate;
    // @name adds a @link(TCellElementSegment) to the current @classname
    // and returns the position of it in the @classname.
    // @param(ASegment is the @link(TCellElementSegment) to be added.)
    function Add(ASegment: TCellElementSegment): Integer;
    // @name is used to access the @link(TCellElementSegment)s in the list.
    property Items[Index: NativeInt]: TCellElementSegment read GetSegment
      write SetSegment; default;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name creates an instance of @classname and assigns Model
    // to @link(FModel).
    constructor Create(Model: TBaseModel; ScreenObject: TScreenObject);
    destructor Destroy; override;
    // @name returns the TCellElementSegment that is closes to
    // Location.
    //
    // Location is in real-world coordinates;
    function ClosestSegment(Location: TPoint2D; Anisotropy: double):
      TCellElementSegment;
  end;

  TAssociateList = class(TObject)
  private
    FList: TList;
    FScreenObject: TScreenObject;
    FCachedValue: TCellElementSegmentList;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function GetSegmentList(Model: TBaseModel): TCellElementSegmentList;
    function GetItem(Index: integer): TCellElementSegmentList;
  public
    Constructor Create(ScreenObject: TScreenObject);
    Destructor Destroy; override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    property AssociatedSegmentList[Model: TBaseModel]: TCellElementSegmentList
      read GetSegmentList;
    function Count: integer;
    property Items[Index: integer]: TCellElementSegmentList
      read GetItem; default;
    procedure InvalidateAll;
  end;

  TIntersectionLocation = record
    // @name is the position in @link(TSubPolygon.FPoints)
    // before which the associated intersection point should
    // be inserted.
    Position: integer;
    // If @name is @true, the associated intersection point
    // must be inserted into @link(TSubPolygon.FPoints) as
    // @link(Position). Otherwise, it is a duplicate of a
    // point already at @link(Position).
    New: boolean;
  end;

  TIntersection = record
    Point: TPoint2D;
    Location1: TIntersectionLocation;
    Location2: TIntersectionLocation;
  end;

  TIntersectionArray = array of TIntersection;

  // @name is used to provide limited access to @link(TCellAssignment);
  // @name owns the @link(TCellAssignment)s stored in it.
  TCellAssignmentList = class(TObject)
  private
    FList : TList;
    FCached: Boolean;
    FMemoryStream: TMemoryStream;
    FCleared: Boolean;
    function GetItem(Index: integer): TCellAssignment;
    function GetCount: integer;
    procedure Restore(const EncloseAnnotation, IntersectAnnotation: string);
  public
    procedure Add(Item: TCellAssignment);
    procedure Assign(CachedList: TCellAssignmentList;
      const EncloseAnnotation, IntersectAnnotation: string);
    procedure Cache;
    property Count: integer read GetCount;
    property Items[Index: integer]: TCellAssignment read GetItem; default;
    Constructor Create;
    Destructor Destroy; override;
    procedure Clear;
    procedure Delete(Index: integer);
    procedure AssignCellLocationList(CellLocationList: TCellLocationList);
  end;


  TCachedCellArray = array[Low(TAssignmentLocation)..High(TAssignmentLocation)]
      of TCellAssignmentList;

  TCellListsModelAssociation = class(TObject)
  public
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    FModel: TBaseModel;
    FCachedLists: TCachedCellArray;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    Constructor Create(Model: TBaseModel);
    Destructor Destroy; override;
  end;

  TCMList = class(TObject)
  private
    FList: TList;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    FCachedModel: TBaseModel;
    FCachedResult:TCellListsModelAssociation;
  public
    Constructor Create;
    Destructor Destroy; override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetCachedLists(Model: TBaseModel; var result: TCellListsModelAssociation);
    procedure Invalidate;
  end;

  TCachedCells = class(TObject)
  private
    FCachedLists: TCMList;
    FEvalAt: TEvaluatedAt;
    FOrientation: TDataSetOrientation;
  public
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function RestoreFromCache(CellList: TCellAssignmentList;
      EvalAt: TEvaluatedAt; Orientation: TDataSetOrientation;
      AssignmentLocation: TAssignmentLocation; const EncloseAnnotation,
      IntersectAnnotation: string; AModel: TBaseModel): boolean;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateCache(CellList: TCellAssignmentList;
      EvalAt: TEvaluatedAt; Orientation: TDataSetOrientation;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
    Constructor Create;
    Destructor Destroy; override;
    procedure Invalidate;
  end;


  // @abstract(@name is an abstract base class.  Descendants are used for
  // assigning properties to @link(TDataArray)s from the front and side views.)
  TCustomScreenObjectDelegate = class abstract (TPersistent)
  strict protected
    FSelectedCells: TSelectedCells;
  protected
    // See @link(ModelSelection).
    FModelSelection: TModelSelection;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name is the @link(TPhastModel) that is being used.
    FModel: TBaseModel;
    // @name is the @link(TScreenObject) for which this
    // @classname will be used.
    FScreenObject: TScreenObject;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name initializes variables needed by the formula for the
    // @link(TDataArray) and then assigns values to the data set based
    // on that formula for intersected and enclosed cells or elements.
    // @name is only used when
    // @link(FScreenObject).@link(TScreenObject.ViewDirection)
    // = @link(TViewDirection vdFront).
    procedure AssignValuesToFrontDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation = alAll); virtual; abstract;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name initializes variables needed by the formula for the
    // @link(TDataArray) and then assigns values to the data set based
    // on that formula for intersected and enclosed cells or elements.
    // @name is only used when
    // link(FScreenObject).@link(TScreenObject.ViewDirection)
    // = @link(TViewDirection vdSide).
    procedure AssignValuesToSideDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation = alAll); virtual; abstract;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name initializes variables needed by the formula for the
    // @link(TDataArray) and then assigns values to the data set based
    // on that formula for intersected and enclosed cells or elements.
    // @name is only used when @link(FScreenObject).(TScreenObject.ViewDirection)
    // = @link(TViewDirection vdTop).
    procedure AssignValuesToTopDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation = alAll); virtual; abstract;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //@name updates the contents of
    // @link(FScreenObject).(TScreenObject.Segments) when
    // @link(FScreenObject).(TScreenObject.ViewDirection)
    // = @link(TViewDirection vdFront).
    procedure UpdateFrontSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt);virtual; abstract;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //@name updates the contents of
    // @link(FScreenObject).(TScreenObject.Segments) when when
    // @link(FScreenObject).(TScreenObject.ViewDirection)
    // = @link(TViewDirection vdSide).
    procedure UpdateSideSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt); virtual;abstract;
    function GetCompiler(const Orientation: TDataSetOrientation): TRbwParser;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    {@name fills CellList with instances of @link(TCellAssignment) on the front
    view of the model.}
    procedure GetFrontCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
      virtual; abstract;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    {@name fills CellList with instances of @link(TCellAssignment) on the side
    view of the model.}
    procedure GetSideCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
      virtual; abstract;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    {@name fills CellList with instances of @link(TCellAssignment) on the top
    view of the model.}
    procedure GetTopCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
      virtual; abstract;
    {@name assigns a value to a particular cell in DataSet.

      In @name:

      (1) If OtherData = nil
      or not @Link(TInterpValuesItem)(OtherData).Values.UsePHAST_Interpolation,
      the inherited AssignCellValue is called.

      (2) Otherwise,
      values are assigned to DataSet at the location
      LayerIndex, RowIndex, ColIndex using PHAST-style interpolation.
      (See @link(TPhastInterpolationValues).)
      Expression and Compiler are not used in this case and the variables
      listed in UsedVariables are not updated.

      OtherData is set in @Link(TScreenObject.IsBoundaryTimeDataSetUsed).
    }
    procedure AssignCellValue(const UsedVariables: TStringList;
      const DataSet: TDataArray;
      LayerIndex, RowIndex, ColIndex: integer;
      const Compiler: TRbwParser; const Annotation: string;
      var Expression: TExpression; const OtherData: TObject;
      SectionIndex: integer; ShouldZero: boolean); virtual;
    // @name returns an integer that indicates what
    // type of boundary condition,
    // if any, are specified by this @classname.
    function BoundaryType: integer; virtual;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name returns @true if DataSet is a
    // @link(TSparseArrayPhastInterpolationDataSet)
    // @name also returns @true if DataSet is a @link(TCustomPhastDataSet)
    // and DataSet is specified by this @classname. OtherData may be
    // changed DataSet is a @link(TCustomPhastDataSet).
    function DataSetUsed(const DataSet: TDataArray;
      var OtherData: TObject; AModel: TBaseModel): boolean; virtual;
    // @name returns a string that indicates that a location
    // was specified by being enclosed in this @classname and how the value
    // at that location was determined.
    function EncloseAnnotation(const DataSetFormula: string;
      const OtherData: TObject): string; virtual;
    {@name gets all the @link(TDataArray)s listed in UsedVariables and calls
    @link(TDataArray.Initialize) for each of them.}
    procedure InitializeVariables(const UsedVariables: TStringList;
      const DataSet: TDataArray; const Expression: TExpression;
      const Compiler: TRbwParser);
    // @name returns a string that indicates that a location
    // was specified by being intersected by this @classname and how the value
    // at that location was determined.
    function IntersectAnnotation(const DataSetFormula: string;
      const OtherData: TObject): string; virtual;
    // The purpose of @name is to get First and Last.  They are
    // the indices of the first and last layer, row, or column
    // perpendicular to the plain of @link(TViewDirection) that are
    // enclosed or intersected by the @classname.
    //
    // In commented-out code, First and Last and changed to
    // frmGoPhast.PhastGrid.@link(TCustomModelGrid.LayerCount) for river
    // data sets.  It has been commented-out because it
    // messes up the display of the river
    // data on the status bar.
    //
    // It would be good to find a way around
    // this problem. As it is, all @name really
    // does is call the inherited @name.
    procedure OtherIndex(const LayerOrRow, RowOrColumn: integer;
      out First, Last: integer; const DataSet: TDataArray; AModel: TBaseModel); virtual;
    { In preparation for evaluating a formula, @name updates the
      @link(TCustomValue)s whose names are listed in
      UsedVariables with their values at locations specifed by Layer, Row
      and Column.  DataSet is the @link(TDataArray) for which the
      @link(TCustomValue)s will be used. Compiler is the @link(TRbwParser)
      which will be used to evaluate a formula.}
    procedure UpdateVariables(const UsedVariables: TStringList;
      const DataSet: TDataArray; Layer, Row, Column: integer;
      const Compiler: TRbwParser);
    // @name creates an instance of @classname.
    Constructor Create(ScreenObject: TScreenObject); virtual;
    // @name indicates the model for which this delegate will be used.
    property ModelSelection: TModelSelection read FModelSelection;
    // @name is used to record the cells that are enclosed or intersected by
    // the @link(TScreenObject).
    property SelectedCells: TSelectedCells read FSelectedCells;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name sets @link(SelectedCells) to @true for each cells that is
    // enclosed or intersected by the @link(TScreenObject).
    procedure AssignSelectedCells(AModel: TBaseModel); virtual; abstract;
  public
     {@name (1) gets the proper DataSetFormula to apply to DataSet,
     (2) gets the proper TRbwParser for DataSet, and (3) compiles
     DataSetFormula to get Expression.  However, it doesn't need to do
     any of that is PHAST-style interpolation is used.
     See @link(TPhastInterpolationValues).
     If OtherData is a @link(TSutraDataObject), UsedFunction and UsedExpression
     are set bassed on @link(TSutraDataObject.UsedFunction).
    }
    procedure InitializeExpression(out Compiler: TRbwParser;
      out DataSetFunction: string; out Expression: TExpression;
      const DataSet: TDataArray; const OtherData: TObject; AModel: TBaseModel); virtual;
  end;

  TCustomScreenObjectDelegateClass = class of TCustomScreenObjectDelegate;

  TDelegateItem = class(TCollectionItem)
  private
    FDelegate: TCustomScreenObjectDelegate;
    function GetDelegateClass: string;
    procedure SetDelegate(const Value: TCustomScreenObjectDelegate);
    procedure SetDelegateClass(const Value: string);
  protected
    function ScreenObject: TScreenObject;
  public
    destructor Destroy; override;
  published
    // @name indicates the class of @link(Delegate).  @name
    // must be declared before @link(Delegate) in order for
    // @link(Delegate) to be read from a stream correctly.
    property DelegateClass: string read GetDelegateClass
      write SetDelegateClass;
    // @name is the @link(TCustomScreenObjectDelegate) stored in
    // an instance of @classname.
    property Delegate: TCustomScreenObjectDelegate read FDelegate
      write SetDelegate;
  end;

  TDelegateCollection = class(TCollection)
  private
    FOwnerScreenObject: TScreenObject;
    FCachedDelegate: TCustomScreenObjectDelegate;
  public
    Constructor Create(OwnerScreenObject: TScreenObject);
    function Delegate(
      ModelSelection: TModelSelection): TCustomScreenObjectDelegate;
  end;

  {@abstract(@name is an abstract base class.  Its descendants
    store a series of @link(TCustomPhastBoundaryCondition)s.
    The series define how one aspect of a boundary condition changes
    with time.)}
  TCustomPhastBoundaryCollection = class(TPhastCollection)
  strict private
    { TODO -cRefactor : Consider replacing FModel with a TNotifyEvent or interface. }
    //
    FModel: TBaseModel;
  private
    // See @link(ScreenObject).
    FScreenObject: TScreenObject;
    // See @link(TimeList).
    FTimeList: TPhastTimeList;
    // See @link(TimeList).
    procedure SetTimeList(const Value: TPhastTimeList);
  protected
    // @name specifies the type of data (real number, integer, boolean,
    // or string) stored in the @classname.  However, at the time this
    // was written only real numbers and integers were supported because
    // those were the only types supported in descendants of
    // @link(TSparseArrayPhastInterpolationDataSet).
    // See TCustomPhastBoundaryCondition.@link(
    // TCustomPhastBoundaryCondition.GetDataSet).
    function GetDatatype: TRbwDataType; virtual; abstract;
    // @name is the @link(TPhastTimeList) that stores the @link(TDataArray)s
    // for this boundary condition.
    property TimeList: TPhastTimeList read FTimeList write SetTimeList;
    // @name calls TCustomPhastBoundaryCondition.@link(
    // TCustomPhastBoundaryCondition.UpdateMixtureExpression) for each
    // of its Items.
    procedure UpdateMixtureExpression;
    procedure UpdateFormulaExpression;
  public
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    constructor Create(ItemClass: TCollectionItemClass; Model: TBaseModel);
    // @name removes all of the @classname items and invalidates
    // @link(TimeList).
    procedure Clear;
    // @name gets the @link(TSparseArrayPhastInterpolationDataSet) from
    // @link(TimeList)
    // that starts at ATime.  If there isn't such a data set already,
    // one is created.
    function GetDataSet(const ATime: double):
      TSparseArrayPhastInterpolationDataSet;
    // @name is the @link(TScreenObject) that owns this @classname.
    property ScreenObject: TScreenObject read FScreenObject write
      FScreenObject;
    { TODO -cRefactor : Consider replacing Model with a TNotifyEvent or interface. }
    //
    property Model: TBaseModel read FModel;
  end;

  {@abstract(@name stores a collection of
   @link(TRealPhastBoundaryCondition)s.)}
  TRealPhastBoundaries = class(TCustomPhastBoundaryCollection)
  protected
    // @name indicates that this boundary condition
    // represents a real number.
    function GetDatatype: TRbwDataType; override;
  public
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name creates an instance of @classname and sets the type of
    // @link(TCustomPhastBoundaryCondition) used by the @classname to be
    // @link(TRealPhastBoundaryCondition).
    constructor Create(Model: TBaseModel);
  end;

  {@abstract(@name stores a collection of
  // @link(TIntegerPhastBoundaryCondition)s.)}
  TIntegerPhastBoundaries = class(TCustomPhastBoundaryCollection)
  protected
    // @name indicates that this boundary condition
    // represents an integer.
    function GetDatatype: TRbwDataType; override;
  public
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name creates an instance of @classname and sets the type of
    // @link(TCustomPhastBoundaryCondition) used by the @classname to be
    // @link(TIntegerPhastBoundaryCondition).
    constructor Create(Model: TBaseModel);
  end;

  {@abstract(@name is an abstract base class.  Its descendants are used to
    define all aspects of one type of boundary condition for one
    @link(TScreenObject) including those aspects that vary with time.)}
  TCustomPhastBoundary = class(TPersistent)
  strict private
    { TODO -cRefactor : Consider replacing Model with a TNotifyEvent or interface. }
    //
    FModel: TBaseModel;
  private
    // See @link(ScreenObject).
    FScreenObject: TScreenObject;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure SetModel(const Value: TBaseModel);
  protected
    procedure InvalidateModel;
    // @name clears all the @link(TCustomPhastBoundaryCollection)s that are
    // part of the @classname.
    procedure Clear; virtual; abstract;
    // See @link(ScreenObject).
    procedure SetScreenObject(const Value: TScreenObject); virtual;
    // For boundary condition data sets that do not vary with time,
    // @name is used to set the formula to be applied to the data set
    // for this @classname.  If Formula = '', the data set specified
    // by DataSetName will no long be affected by the @link(ScreenObject).
    procedure UpdateBoundaryDataSet(const DataSetName: string; var Formula: string);
      overload;
    procedure UpdateBoundaryDataSet(const DataArray: TDataArray;
      var Formula: string); overload;
    // @name calls TCustomPhastBoundaryCollection.@link(
    // TCustomPhastBoundaryCollection.UpdateMixtureExpression) for each of
    // the @link(TCustomPhastBoundaryCollection) it owns.
    procedure UpdateMixtureExpression; virtual; abstract;
    procedure UpdateFormulaExpression; virtual; abstract;
  public
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    property Model: TBaseModel read FModel write SetModel;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    constructor Create(ScreenObject: TScreenObject; Model: TBaseModel);
    // @name is the @link(TScreenObject) that owns this @classname.
    property ScreenObject: TScreenObject read FScreenObject write
      SetScreenObject;
  end;

  TCustomInterpolatedBoundary = class(TCustomPhastBoundary)
  strict protected
    // See @link(BoundaryValue).
    FBoundaryValue: TRealPhastBoundaries;
    // See @link(Solution).
    FSolution: TIntegerPhastBoundaries;
    // See @link(BoundaryValue).
    procedure SetBoundaryValue(const Value: TRealPhastBoundaries);
    // See @link(Solution).
    procedure SetSolution(const Value: TIntegerPhastBoundaries);
  protected
    // See @link(TCustomPhastBoundary.ScreenObject).
    procedure SetScreenObject(const Value: TScreenObject); override;
    // @name calls @link(Solution).@link(
    // TCustomPhastBoundaryCollection.UpdateMixtureExpression) and
    // @link(BoundaryValue).@link(
    // TCustomPhastBoundaryCollection.UpdateMixtureExpression).
    procedure UpdateMixtureExpression; override;
    procedure UpdateFormulaExpression;  override;
    function BoundaryDataSetFormula(DataSetName: string): string;

  public
    // If Source is a @classname, @name copies @link(Solution) and
    // @link(BoundaryValue)
    procedure Assign(Source: TPersistent); override;
    // @name clears @link(Solution) and
    // @link(BoundaryValue).
    procedure Clear; override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name creates an instance of @classname.
    constructor Create(ScreenObject: TScreenObject; Model: TBaseModel);
    // @name destroys the current instance of @classname.
    // Do not call @name directly. Call Free instead.
    destructor Destroy; override;
  published
    // @name defines how the solution for this @classname
    // varies through time for its @link(TCustomPhastBoundary.ScreenObject).
    property Solution: TIntegerPhastBoundaries
      read FSolution write SetSolution;
    // @name defines how the main value for this @classname
    // varies through time for its @link(TCustomPhastBoundary.ScreenObject).
    property BoundaryValue: TRealPhastBoundaries read FBoundaryValue
      write SetBoundaryValue;
  end;

  {@abstract(@name represents a boundary condition that only applies to
    one @link(TViewDirection).)}
  TCustomOrientedPhastBoundary = class(TCustomInterpolatedBoundary)
  private
    // See @link(Orientation).
    FOrientation: TViewDirection;
    // See @link(Orientation).
    procedure SetOrientation(const Value: TViewDirection); virtual;
  protected
    // See @link(TCustomPhastBoundary.ScreenObject).
    procedure SetScreenObject(const Value: TScreenObject); override;
  public
    // If Source is a @classname, @name copies the @link(Orientation)
    // of Source.
    procedure Assign(Source: TPersistent); override;
  published
    // @name is the @link(TViewDirection) for this @classname.
    property Orientation: TViewDirection read FOrientation write SetOrientation
      stored False;
  end;

  {@abstract(@name represents a flux boundary in PHAST for one
    @link(TScreenObject).)}
  TFluxBoundary = class(TCustomOrientedPhastBoundary)
  private
    // See TCustomOrientedPhastBoundary.@link(
    // TCustomOrientedPhastBoundary.Orientation).
    // @name sets AssociatedSolution.@link(
    // TCustomPhastBoundaryCollection.TimeList) and
    // Flux.@link(TCustomPhastBoundaryCollection.TimeList).
    procedure SetOrientation(const Value: TViewDirection); override;
  protected
    // See @link(TCustomPhastBoundary.ScreenObject).
    procedure SetScreenObject(const Value: TScreenObject); override;
  public
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name creates an instance of @classname.
    constructor Create(ScreenObject: TScreenObject; Model: TBaseModel);
  published
    // @exclude
    // AssociatedSolution is used only for backwards compatibility.
    // AssociatedSolution represents how the solution associated with the
    // flux varies
    // through time in the current @link(TCustomPhastBoundary.ScreenObject).
    // See @link(Solution).
    property AssociatedSolution: TIntegerPhastBoundaries
      read FSolution write SetSolution stored False;
    // @exclude
    // @name is used only for backwards compatibility.
    // @name represents how the flux varies
    // through time in the current @link(TCustomPhastBoundary.ScreenObject).
    // See @link(BoundaryValue).
    property Flux: TRealPhastBoundaries read FBoundaryValue
      write SetBoundaryValue stored False;
  end;

  {@abstract(@name represents a leaky boundary in PHAST for one
    @link(TScreenObject).)}
  TLeakyBoundary = class(TCustomOrientedPhastBoundary)
  private
    // See @link(HydraulicConductivity).
    FHydraulicConductivity: string;
    // See @link(Thickness).
    FThickness: string;
    // See @link(HydraulicConductivity).
    function GetHydraulicConductivity: string;
    // See TCustomOrientedPhastBoundary.@link(
    // TCustomOrientedPhastBoundary.Orientation).
    // @name sets AssociatedSolution.@link(
    // TCustomPhastBoundaryCollection.TimeList) and
    // Head.@link(TCustomPhastBoundaryCollection.TimeList).
    procedure SetOrientation(const Value: TViewDirection); override;
    // See @link(HydraulicConductivity).
    procedure SetHydraulicConductivity(const Value: string);
    // See @link(Thickness).
    procedure SetThickness(const Value: string);
    function GetThickness: string;
    procedure Loaded;
  public
    // If Source is a @classname, @name copies @link(Solution),
    // @link(BoundaryValue), @link(HydraulicConductivity), and @link(Thickness).
    procedure Assign(Source: TPersistent); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name creates an instance of @classname.
    constructor Create(ScreenObject: TScreenObject; Model: TBaseModel);
    // If Source is a @classname, @name copies @link(Solution), and
    // @link(BoundaryValue) but not @link(HydraulicConductivity),
    // and @link(Thickness).
    // @name is used in @link(TUndoSetScreenObjectProperties).
    procedure PartialAssign(Source: TPersistent);
    // @name resets the formulas for @link(HydraulicConductivity) and
    // @link(Thickness) to '' if
    // (@link(BoundaryValue).Count = 0) and (@link(Solution).Count = 0).
    procedure Reset;
  published

    // @name is the formula for specifying the leaky boundary
    // hydraulic conductivity
    // for this @link(TCustomPhastBoundary.ScreenObject).
    property HydraulicConductivity: string read GetHydraulicConductivity
      write SetHydraulicConductivity;
    // @name is the formula for specifying the leaky boundary
    // thickness
    // for this @link(TCustomPhastBoundary.ScreenObject).
    property Thickness: string read GetThickness write SetThickness;
    // @exclude
    // @name is used only for backwards compatibility.
    // @name defines how the head for this @classname
    // varies through time for its @link(TCustomPhastBoundary.ScreenObject).
    // See @link(BoundaryValue).
    property Head: TRealPhastBoundaries read FBoundaryValue
      write SetBoundaryValue stored False;
    // @exclude
    // @name is used only for backwards compatibility.
    // @name defines how the associated solution for this @classname
    // varies through time for its @link(TCustomPhastBoundary.ScreenObject).
    // See @link(Solution).
    property AssociatedSolution: TIntegerPhastBoundaries
      read FSolution write SetSolution stored False;
  end;

  {@abstract(@name represents a river boundary in PHAST for one
    @link(TScreenObject).)}
  TRiverBoundary = class(TCustomInterpolatedBoundary)
  private
    // @name: string;
    // See @link(BedHydraulicConductivity).
    FBedHydraulicConductivity: string;
    // @name: string;
    // See @link(BedThickness).
    FBedThickness: string;
    // @name: string;
    // See @link(Depth).
    FDepth: string;
    // @name: string;
    // See @link(Description).
    FDescription: string;
    // @name: string;
    // See @link(Width).
    FWidth: string;
    // See @link(BedHydraulicConductivity).
    procedure SetBedHydraulicConductivity(const Value: string);
    // See @link(BedThickness).
    procedure SetBedThickness(const Value: string);
    // See @link(Depth).
    procedure SetDepth(const Value: string);
    // See @link(Description).
    procedure SetDescription(const Value: string);
    // See @link(Width).
    procedure SetWidth(const Value: string);
    function GetBedHydraulicConductivity: string;
    function GetBedThickness: string;
    function GetDepth: string;
    function GetWidth: string;
    procedure Loaded;
  public
    // If Source is a @classname, @name copies @link(AssociatedSolution),
    // @link(BedHydraulicConductivity), @link(BedThickness), @link(Depth),
    // @link(Description), @link(Head), and @link(Width).
    procedure Assign(Source: TPersistent); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name creates an instance of @classname.
    constructor Create(ScreenObject: TScreenObject; Model: TBaseModel);
    // @name returns true if all the published properties have been set
    // to values that indicate that a river boundary is present.
    function IsBoundary: boolean;
    // If Source is a @classname, @name copies @link(AssociatedSolution),
    // and @link(Head) but not @link(BedHydraulicConductivity),
    // @link(BedThickness), @link(Depth),
    // @link(Description), and @link(Width).
    // @name is used in @link(TUndoSetScreenObjectProperties).
    procedure PartialAssign(Source: TPersistent);
  published
    // @name is the formula for specifying the river bed
    // hydraulic conductivity
    // for this @link(TCustomPhastBoundary.ScreenObject).
    property BedHydraulicConductivity: string read GetBedHydraulicConductivity
      write SetBedHydraulicConductivity;
    // @name is the formula for specifying the river bed thickness
    // for this @link(TCustomPhastBoundary.ScreenObject).
    property BedThickness: string read GetBedThickness write SetBedThickness;
    // @name is the formula for specifying the river depth
    // for this @link(TCustomPhastBoundary.ScreenObject).
    property Depth: string read GetDepth write SetDepth;
    // @name is the name of the river
    // for this @link(TCustomPhastBoundary.ScreenObject).
    property Description: string read FDescription write SetDescription;
    // @name is the formula for specifying the river width
    // for this @link(TCustomPhastBoundary.ScreenObject).
    property Width: string read GetWidth write SetWidth;
    // @name defines how the associated solution for this @classname
    // varies through time for its @link(TCustomPhastBoundary.ScreenObject).
    property AssociatedSolution: TIntegerPhastBoundaries
      read FSolution write SetSolution;
    // @name defines how the head for this @classname
    // varies through time for its @link(TCustomPhastBoundary.ScreenObject).
    property Head: TRealPhastBoundaries read FBoundaryValue
      write SetBoundaryValue;
  end;

  // @name specifies the type of solution in a specified head
  // boundary condition. stAssociated means that the solution
  // is merely associated with the head.  stSpecified specifies
  /// that the solution also has a fixed value.
  TSolutionType = (stAssociated, stSpecified);

  {@abstract(@name represents a specified head boundary in PHAST for one
    @link(TScreenObject).)}
  TSpecifiedHeadBoundary = class(TCustomInterpolatedBoundary)
  private
    // See @link(Solution).
    // See @link(SolutionType).
    FSolutionType: TSolutionType;

    // See @link(Solution).
    // See @link(SolutionType).
    procedure SetSolutionType(const Value: TSolutionType);
    procedure Loaded;
  public
    // If Source is a @classname, @name copies @link(Solution),
    // @link(BoundaryValue), and @link(SolutionType).
    procedure Assign(Source: TPersistent); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name creates an instance of @classname.
    constructor Create(ScreenObject: TScreenObject; Model: TBaseModel);
  published
    // @name specifies whether @link(Solution) represents
    // a specified solution or an associated solution.
    property SolutionType: TSolutionType read FSolutionType write
      SetSolutionType;
    // @exclude
    // @name is used only for backwards compatibility.
    // @name defines how the solution for this @classname
    // varies through time for its @link(TCustomPhastBoundary.ScreenObject).
    property AssociatedSolution: TIntegerPhastBoundaries
      read FSolution write SetSolution stored False;
    // @exclude
    // @name is used only for backwards compatibility.
    // @name defines how the head for this @classname
    // varies through time for its @link(TCustomPhastBoundary.ScreenObject).
    property Head: TRealPhastBoundaries read FBoundaryValue
      write SetBoundaryValue stored False;
  end;

  {@exclude @abstract(@name is retained only for backwards compatibility.)}
  TSpecifiedSolutionBoundary = class(TCustomPhastBoundary)
  private
    FSolution: TIntegerPhastBoundaries;
    procedure SetSolution(const Value: TIntegerPhastBoundaries);
  protected
    procedure SetScreenObject(const Value: TScreenObject); override;
    procedure UpdateMixtureExpression; override;
    procedure UpdateFormulaExpression;  override;
  public
    procedure Assign(Source: TPersistent); override;
    procedure Clear; override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    constructor Create(ScreenObject: TScreenObject; Model: TBaseModel);
    destructor Destroy; override;
  published
    property Solution: TIntegerPhastBoundaries read FSolution
      write SetSolution;
  end;

  {@abstract(@name an open interval in a well boundary in PHAST.)}
  TWellInterval = class(TCollectionItem)
  private
    // @name: double;
    // See @link(FirstElevation).
    FFirstElevation: double;
    // @name: double;
    // See @link(SecondElevation).
    FSecondElevation: double;
    // See @link(FirstElevation).
    procedure SetFirstElevation(const Value: double);
    // See @link(SecondElevation).
    procedure SetSecondElevation(const Value: double);
    procedure InvalidateModel;
  public
    // If Source is a @classname, @name copies @link(FirstElevation) and
    // @link(SecondElevation) from Source.
    procedure Assign(Source: TPersistent); override;
  published
    // @name represents elevation or depth of one end of the well
    // screen in the open interval.
    property FirstElevation: double read FFirstElevation write
      SetFirstElevation;
    // @name represents elevation or depth of the end of the well
    // screen opposite @link(FirstElevation) in the open interval.
    property SecondElevation: double read FSecondElevation write
      SetSecondElevation;
  end;

  {@abstract(@name represents a series of @link(TWellInterval)s.)}
  TWellIntervals = class(TPhastCollection)
  private
    FScreenObject: TScreenObject;
  public
    // @name creates an instance of @classname and the type of the
    // Items to be @link(TWellInterval).
    constructor Create(ScreenObject: TScreenObject; InvalidateModelEvent: TNotifyEvent);
    property ScreenObject: TScreenObject read FScreenObject;
  end;

  {@abstract(@name represents a well in PHAST for one
    @link(TScreenObject).)}
  TWellBoundary = class(TCustomInterpolatedBoundary)
  private
    // See @link(AllocateByPressureAndMobility).
    FAllocateByPressureAndMobility: boolean;
    // See @link(Description).
    FDescription: string;
    // @name: double;
    // See @link(Diameter).
    FDiameter: double;
    // @name: @link(TWellIntervals);
    // See @link(Intervals).
    FIntervals: TWellIntervals;
    // @name: double;
    // See @link(LandSurfaceDatum).
    FLandSurfaceDatum: double;
    // @name: @link(TWellElevationFormat);
    // See @link(WellElevationFormat).
    FWellElevationFormat: TWellElevationFormat;
    // See @link(AllocateByPressureAndMobility).
    procedure SetAllocateByPressureAndMobility(const Value: boolean);
    // See @link(Description).
    procedure SetDescription(const Value: string);
    // See @link(Diameter).
    procedure SetDiameter(const Value: double);
    // See @link(Intervals).
    procedure SetIntervals(const Value: TWellIntervals);
    // See @link(LandSurfaceDatum).
    procedure SetLandSurfaceDatum(const Value: double);
    // See @link(WellElevationFormat).
    procedure SetWellElevationFormat(const Value: TWellElevationFormat);
  public
    // If Source is a @classname, @name copies
    // @link(AllocateByPressureAndMobility), @link(Description),
    // @link(Diameter), @link(InjectionOrPumpingRate), @link(Intervals),
    // @link(LandSurfaceDatum), @link(Solution), and @link(WellElevationFormat).
    procedure Assign(Source: TPersistent); override;
    // @name clears @link(InjectionOrPumpingRate) and
    // @link(Solution).
    procedure Clear; override;
    { TODO -cRefactor : Consider replacing Model with a TNotifyEvent or interface. }
    // @name creates an instance of @classname.
    constructor Create(ScreenObject: TScreenObject; Model: TBaseModel);
    // @name destroys the current instance of @classname.
    // Do not call @name directly. Call Free instead.
    destructor Destroy; override;
    // @name returns true if all the published properties have been set
    // to values that indicate that a well boundary is present.
    function IsBoundary: boolean;
    // If Source is a @classname, @name copies @link(Solution) and
    // @link(InjectionOrPumpingRate) but not
    // @link(AllocateByPressureAndMobility), @link(Description),
    // @link(Diameter), @link(Intervals),
    // @link(LandSurfaceDatum), and @link(WellElevationFormat).
    // @name is used in @link(TUndoSetScreenObjectProperties).
    procedure PartialAssign(Source: TPersistent);
  published
    // If @name is @true, PHAST will distribute the pumping amount
    // among layers by taking into account the pressure and permeability in
    // the layers in which the well has an open screen interval.
    // If @name is @false, PHAST will not consider the pressure
    // and permeability in the layers when distributing the pumping
    // amount among layers.
    property AllocateByPressureAndMobility: boolean read
      FAllocateByPressureAndMobility write SetAllocateByPressureAndMobility
      default True;
    // @name is the name of the well.
    property Description: string read FDescription write SetDescription;
    // @name is the diameter of the well.
    property Diameter: double read FDiameter write SetDiameter;
    // @name defines the open well intervals.
    // See @link(WellElevationFormat) and @link(LandSurfaceDatum).
    property Intervals: TWellIntervals read FIntervals write SetIntervals;
    // If @link(WellElevationFormat) = wefDepth, @name represents the datum
    // from which the elevations (really depths) in @link(Intervals) are
    // measured. If @link(WellElevationFormat) <> wefDepth. @name is ignored.
    property LandSurfaceDatum: double read FLandSurfaceDatum write
      SetLandSurfaceDatum;
    // @name determines whether elevations in @link(Intervals) represent
    // true elevations or depths below a datum. (see @link(LandSurfaceDatum).)
    property WellElevationFormat: TWellElevationFormat read FWellElevationFormat
      write SetWellElevationFormat;
    // @name is the rate at which water is pumped into or out of the porous
    // medium.
    // A positive @name means flow out of the porous medium.
    property InjectionOrPumpingRate: TRealPhastBoundaries read
      FBoundaryValue write SetBoundaryValue;
  end;


  { TODO : Allow the user to control visibility of TScreenObject via selected
  col, row, layer. }

  { TODO :
Replace the commands that do things on one view of the TScreenObject
a separate "strategy" object that is delegated with responsibility for one
view. }


  TModflowBoundaries = class(TObject)
  private
    // @name represents a Time-Variant Specified Head boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateChdBoundary)
    FModflowChdBoundary: TChdBoundary;
    // @name represents an Evapotranspiration Segments boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateEtsBoundary)
    FModflowEtsBoundary: TEtsBoundary;
    // @name represents an Evapotranspiration boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateEvtBoundary)
    FModflowEvtBoundary: TEvtBoundary;
    // @name represents a Drain boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateDrnBoundary)
    FModflowDrnBoundary: TDrnBoundary;
    // @name represents a Drain Return boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateDrtBoundary)
    FModflowDrtBoundary: TDrtBoundary;
    // @name represents a General Head boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateGhbBoundary)
    FModflowGhbBoundary: TGhbBoundary;
    // @name represents a Lake boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateLakBoundary)
    FModflowLakBoundary: TLakBoundary;
    // @name represents a Recharge boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateRchBoundary)
    FModflowRchBoundary: TRchBoundary;
    // @name represents a Reservoir boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateResBoundary)
    FModflowResBoundary: TResBoundary;
    // @name represents a River boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateRivBoundary)
    FModflowRivBoundary: TRivBoundary;
    // @name represents a Stream-Flow Routing boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateSfrBoundary)
    FModflowSfrBoundary: TSfrBoundary;
    FModflowStrBoundary: TStrBoundary;
    // @name represents a Well boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateWelBoundary)
    FModflowWellBoundary: TMfWellBoundary;
    // @name represents a UZF boundary.
    // @name is only created if needed.
    // @seealso(TScreenObject.CreateUzfBoundary)
    FModflowUzfBoundary: TUzfBoundary;
    FModflowHeadObservations: THobBoundary;
    FModflowHfbBoundary: THfbBoundary;
    FModflowGage: TStreamGage;
    FModflowMnw2Boundary: TMnw2Boundary;
    FModflowHydmodData: THydmodData;
    FMt3dmsConcBoundary: TMt3dmsConcBoundary;
    FMt3dmsTransObservations: TMt3dmsTransObservations;
    FModflowFhbHeadBoundary: TFhbHeadBoundary;
    FModflowFhbFlowBoundary: TFhbFlowBoundary;
    FFmpWellBoundary: TFmpWellBoundary;
    FFmpPrecipBoundary: TFmpPrecipBoundary;
    FFmpRefEvapBoundary: TFmpRefEvapBoundary;
    FFmpCropIDBoundary: TFmpCropIDBoundary;
    FFmpFarmIDBoundary: TFmpFarmIDBoundary;
    FCfpPipes: TCfpPipeBoundary;
    FCfpFixedHeads: TCfpFixedBoundary;
    FCfpRchFraction: TCfpRchFractionBoundary;
    FSwrRain: TSwrRainBoundary;
    FSwrEvap: TSwrEvapBoundary;
    FSwrLatInflow: TSwrLatInflowBoundary;
    FSwrStage: TSwrStageBoundary;
    FSwrDirectRunoff: TSwrDirectRunoffBoundary;
    FSwrReaches: TSwrReachBoundary;
    FModflowMnw1Boundary: TMnw1Boundary;
    FModflowSwiObsBoundary: TSwiObsBoundary;
    FModel: TBaseModel;
    FModflowRipBoundary: TRipBoundary;
    FMt3dUztRechConc: TMt3dUztRchConcBoundary;
    FMt3dUztSatEtConcBoundary: TMt3dUztSatEtConcBoundary;
    FMt3dUztUnsatEtConcBoundary: TMt3dUztUnsatEtConcBoundary;
    FMt3dUzSsmSinkConcBoundary: TMt3dUzSsmSinkConcBoundary;
    FModflowSfr6Boundary: TSfrMf6Boundary;
    FModflowMawBoundary: TMawBoundary;
    FModflow6Obs: TModflow6Obs;
    FModflowLak6: TLakeMf6;
    FModflowMvr: TMvrBoundary;
    FModflowUzfMf6Boundary: TUzfMf6Boundary;
    FMt3dLktConcBoundary: TMt3dLktConcBoundary;
    FMt3dSftConcBoundary: TMt3dSftBoundary;
    FModflowCSub: TCSubBoundary;
    FScreenObject: TObject;
    FModflowSubObservations: TSubObservations;
    FModflowSwtObservations: TSwtObservations;
    FGwtCncBoundary: TCncBoundary;
    FGwtSrcBoundary: TSrcBoundary;
    FFmp4EfficiencyBoundary: TFmp4EfficiencyBoundary;
    FFmp4EfficiencyImprovementBoundary: TFmp4EfficiencyImprovementBoundary;
    FFmp4BareRunoffFractionBoundary: TFmp4BareRunoffFractionBoundary;
    FFmp4BarePrecipitationConsumptionFractionBoundary: TFmp4BarePrecipitationConsumptionFractionBoundary;
    FFmp4BareEvap: TFmp4BareEvapBoundary;
    FFmp4DirectRechargeBoundary: TFmp4DirectRechargeBoundary;
    FFmp4PrecipPotConsumptionBoundary: TFmp4PrecipPotConsumptionBoundary;
    FFmp4NrdInfilLocationBoundary: TFmp4NrdInfilLocationBoundary;
    FFmp4CropCoefficientBoundary: TFmp4CropCoefficientBoundary;
    FFmp4LandUseAreaFractionBoundary: TFmp4LandUseAreaFractionBoundary;
    FFmp4MultLandUseAreaFractionBoundary: TFmp4MultLandUseAreaFractionBoundary;
    FFmpMultCropCoefficientBoundary: TFmp4MultCropCoefficientBoundary;
    FFmp4ConsumptiveUseBoundary: TFmp4ConsumptiveUseBoundary;
    FFmpMultConsumptiveUseBoundary: TFmp4MultConsumptiveUseBoundary;
    FFmp4IrrigationBoundary: TFmp4IrrigationBoundary;
    FFmpMultIrrigationBoundary: TFmp4MultIrrigationBoundary;
    FFmp4RootDepthBoundary: TFmp4RootDepthBoundary;
    FFmpMultRootDepthBoundary: TFmp4MultRootDepthBoundary;
    FFmp4TranspirationFractionBoundary: TFmp4TranspirationFractionBoundary;
    FFmpMultTranspirationFractionBoundary: TFmp4MultTranspirationFractionBoundary;
    FFmpMultEvaporationIrrigationFractionBoundary: TFmp4MultEvaporationIrrigationFractionBoundary;
    FFmp4EvaporationIrrigationFractionBoundary: TFmp4EvaporationIrrigationFractionBoundary;
    FFmpMultFractionOfPrecipToSurfaceWaterBoundary: TFmp4MultFractionOfPrecipToSurfaceWaterBoundary;
    FFmp4FractionOfPrecipToSurfaceWaterBoundary: TFmp4FractionOfPrecipToSurfaceWaterBoundary;
    FFmpMultFractionOfIrrigToSurfaceWaterBoundary: TFmp4MultFractionOfIrrigToSurfaceWaterBoundary;
    FFmp4FractionOfIrrigToSurfaceWaterBoundary: TFmp4FractionOfIrrigToSurfaceWaterBoundary;
    FFmp4AddedDemandBoundary: TFmp4AddedDemandBoundary;
    FFmpMultAddedDemandBoundary: TFmp4MultAddedDemandBoundary;
    FFmp4CropHasSalinityDemandBoundary: TFmp4CropHasSalinityDemandBoundary;
    FFmpMultCropHasSalinityDemandBoundary: TFmp4MultCropHasSalinityDemandBoundary;
    FFmp4AddedDemandRunoffSplitBoundary: TFmp4AddedDemandRunoffSplitBoundary;
    FTvkBoundary: TTvkBoundary;
    FTvsBoundary: TTvsBoundary;
  public
    property ModflowChdBoundary: TChdBoundary read FModflowChdBoundary
      write FModflowChdBoundary;
    property ModflowGhbBoundary: TGhbBoundary read FModflowGhbBoundary
      write FModflowGhbBoundary;
    property ModflowWellBoundary: TMfWellBoundary read FModflowWellBoundary
      write FModflowWellBoundary;
    property ModflowRivBoundary: TRivBoundary read FModflowRivBoundary
      write FModflowRivBoundary;
    property ModflowDrnBoundary: TDrnBoundary read FModflowDrnBoundary
      write FModflowDrnBoundary;
    property ModflowDrtBoundary: TDrtBoundary read FModflowDrtBoundary
      write FModflowDrtBoundary;
    property ModflowRchBoundary: TRchBoundary read FModflowRchBoundary
      write FModflowRchBoundary;
    property ModflowEvtBoundary: TEvtBoundary read FModflowEvtBoundary
      write FModflowEvtBoundary;
    property ModflowEtsBoundary: TEtsBoundary read FModflowEtsBoundary
      write FModflowEtsBoundary;
    property ModflowResBoundary: TResBoundary read FModflowResBoundary
      write FModflowResBoundary;
    property ModflowLakBoundary: TLakBoundary read FModflowLakBoundary
      write FModflowLakBoundary;
    property ModflowSfrBoundary: TSfrBoundary read FModflowSfrBoundary
      write FModflowSfrBoundary;
    property ModflowStrBoundary: TStrBoundary read FModflowStrBoundary
      write FModflowStrBoundary;
    property ModflowUzfBoundary: TUzfBoundary read FModflowUzfBoundary
      write FModflowUzfBoundary;
    property ModflowHeadObservations: THobBoundary read FModflowHeadObservations
      write FModflowHeadObservations;
    property ModflowHfbBoundary: THfbBoundary read FModflowHfbBoundary
      write FModflowHfbBoundary;
    property ModflowGage: TStreamGage read FModflowGage Write FModflowGage;
    property ModflowMnw1Boundary: TMnw1Boundary read FModflowMnw1Boundary
      write FModflowMnw1Boundary;
    property ModflowMnw2Boundary: TMnw2Boundary read FModflowMnw2Boundary
      write FModflowMnw2Boundary;
    property ModflowHydmodData: THydmodData read FModflowHydmodData
      write FModflowHydmodData;
    property Mt3dmsConcBoundary: TMt3dmsConcBoundary read FMt3dmsConcBoundary
      write FMt3dmsConcBoundary;
    property Mt3dmsTransObservations: TMt3dmsTransObservations read FMt3dmsTransObservations
      write FMt3dmsTransObservations;
    property ModflowFhbHeadBoundary: TFhbHeadBoundary read FModflowFhbHeadBoundary
      write FModflowFhbHeadBoundary;
    property ModflowFhbFlowBoundary: TFhbFlowBoundary read FModflowFhbFlowBoundary
      write FModflowFhbFlowBoundary;
    property FmpWellBoundary: TFmpWellBoundary read FFmpWellBoundary
      write FFmpWellBoundary;
    property FmpPrecipBoundary: TFmpPrecipBoundary read FFmpPrecipBoundary
      write FFmpPrecipBoundary;
    property FmpRefEvapBoundary: TFmpRefEvapBoundary read FFmpRefEvapBoundary
      write FFmpRefEvapBoundary;
    property FmpCropIDBoundary: TFmpCropIDBoundary read FFmpCropIDBoundary
      write FFmpCropIDBoundary;
    property FmpFarmIDBoundary: TFmpFarmIDBoundary read FFmpFarmIDBoundary
      write FFmpFarmIDBoundary;
    property CfpPipes: TCfpPipeBoundary read FCfpPipes write FCfpPipes;
    property CfpFixedHeads: TCfpFixedBoundary read FCfpFixedHeads
      write FCfpFixedHeads;
    property CfpRchFraction: TCfpRchFractionBoundary read FCfpRchFraction
      write FCfpRchFraction;

    property SwrRain: TSwrRainBoundary read FSwrRain write FSwrRain;
    property SwrEvap: TSwrEvapBoundary read FSwrEvap write FSwrEvap;
    property SwrLatInflow: TSwrLatInflowBoundary read FSwrLatInflow
      write FSwrLatInflow;
    property SwrStage: TSwrStageBoundary read FSwrStage write FSwrStage;
    property SwrDirectRunoff: TSwrDirectRunoffBoundary read FSwrDirectRunoff
      write FSwrDirectRunoff;
    property SwrReaches: TSwrReachBoundary read FSwrReaches write FSwrReaches;
    property ModflowSfr6Boundary: TSfrMf6Boundary read FModflowSfr6Boundary
      write FModflowSfr6Boundary;
    property ModflowSwiObsBoundary: TSwiObsBoundary read FModflowSwiObsBoundary
      write FModflowSwiObsBoundary;
    property ModflowRipBoundary: TRipBoundary read FModflowRipBoundary
      write FModflowRipBoundary;
    property ModflowMawBoundary: TMawBoundary read FModflowMawBoundary
      write FModflowMawBoundary;
    property Modflow6Obs: TModflow6Obs read FModflow6Obs write FModflow6Obs;
    property ModflowLak6: TLakeMf6 read FModflowLak6 write FModflowLak6;
    property ModflowMvr: TMvrBoundary read FModflowMvr write FModflowMvr;
    property ModflowUzfMf6Boundary: TUzfMf6Boundary read FModflowUzfMf6Boundary
      write FModflowUzfMf6Boundary;

    property Mt3dUtfRechConc: TMt3dUztRchConcBoundary read FMt3dUztRechConc
      write FMt3dUztRechConc;
    property Mt3dUztSatEtConcBoundary: TMt3dUztSatEtConcBoundary
      read FMt3dUztSatEtConcBoundary write FMt3dUztSatEtConcBoundary;
    property Mt3dUztUnsatEtConcBoundary: TMt3dUztUnsatEtConcBoundary
      read FMt3dUztUnsatEtConcBoundary write FMt3dUztUnsatEtConcBoundary;
    property Mt3dUzSsmSinkConcBoundary: TMt3dUzSsmSinkConcBoundary
      read FMt3dUzSsmSinkConcBoundary write FMt3dUzSsmSinkConcBoundary;
    property Mt3dLktConcBoundary: TMt3dLktConcBoundary
      read FMt3dLktConcBoundary write FMt3dLktConcBoundary;
    property Mt3dSftConcBoundary: TMt3dSftBoundary
      read FMt3dSftConcBoundary write FMt3dSftConcBoundary;

    property ModflowCSub: TCSubBoundary read FModflowCSub write FModflowCSub;

    property ModflowSubObservations: TSubObservations
      read FModflowSubObservations write FModflowSubObservations;
    property ModflowSwtObservations: TSwtObservations
      read FModflowSwtObservations write FModflowSwtObservations;
    property GwtCncBoundary: TCncBoundary read FGwtCncBoundary
      write FGwtCncBoundary;
    property GwtSrcBoundary: TSrcBoundary read FGwtSrcBoundary
      write FGwtSrcBoundary;

    // FMP4
    // FMP WBS: Efficiency
    property Fmp4EfficiencyBoundary: TFmp4EfficiencyBoundary
      read FFmp4EfficiencyBoundary write FFmp4EfficiencyBoundary;
    // FMP WBS: EFFICIENCY_IMPROVEMENT
    property Fmp4EfficiencyImprovementBoundary: TFmp4EfficiencyImprovementBoundary
      read FFmp4EfficiencyImprovementBoundary
      write FFmp4EfficiencyImprovementBoundary;
    // FMP WBS: BARE_RUNOFF_FRACTION
    property Fmp4BareRunoffFractionBoundary: TFmp4BareRunoffFractionBoundary
      read FFmp4BareRunoffFractionBoundary
      write FFmp4BareRunoffFractionBoundary;
    // FMP WBS: BARE_PRECIPITATION_CONSUMPTION_FRACTION
    property Fmp4BarePrecipitationConsumptionFractionBoundary:
      TFmp4BarePrecipitationConsumptionFractionBoundary
      read FFmp4BarePrecipitationConsumptionFractionBoundary
      write FFmp4BarePrecipitationConsumptionFractionBoundary;
    // FMP WBS: ADDED_DEMAND_RUNOFF_SPLIT
    property Fmp4AddedDemandRunoffSplitBoundary:
      TFmp4AddedDemandRunoffSplitBoundary
      read FFmp4AddedDemandRunoffSplitBoundary
      write FFmp4AddedDemandRunoffSplitBoundary;
    property Fmp4BareEvap: TFmp4BareEvapBoundary read FFmp4BareEvap
      write FFmp4BareEvap;
    property Fmp4DirectRechargeBoundary: TFmp4DirectRechargeBoundary
      read FFmp4DirectRechargeBoundary write FFmp4DirectRechargeBoundary;
    property Fmp4PrecipPotConsumptionBoundary: TFmp4PrecipPotConsumptionBoundary
      read FFmp4PrecipPotConsumptionBoundary write FFmp4PrecipPotConsumptionBoundary;
    property Fmp4NrdInfilLocationBoundary: TFmp4NrdInfilLocationBoundary
      read FFmp4NrdInfilLocationBoundary write FFmp4NrdInfilLocationBoundary;
    property Fmp4LandUseAreaFractionBoundary: TFmp4LandUseAreaFractionBoundary
      read FFmp4LandUseAreaFractionBoundary write FFmp4LandUseAreaFractionBoundary;
    property Fmp4MultLandUseAreaFractionBoundary: TFmp4MultLandUseAreaFractionBoundary
      read FFmp4MultLandUseAreaFractionBoundary write FFmp4MultLandUseAreaFractionBoundary;
    property Fmp4CropCoefficientBoundary: TFmp4CropCoefficientBoundary
      read FFmp4CropCoefficientBoundary write FFmp4CropCoefficientBoundary;
    property FmpMultCropCoefficientBoundary: TFmp4MultCropCoefficientBoundary
      read FFmpMultCropCoefficientBoundary write FFmpMultCropCoefficientBoundary;
    property Fmp4ConsumptiveUseBoundary: TFmp4ConsumptiveUseBoundary
      read FFmp4ConsumptiveUseBoundary write FFmp4ConsumptiveUseBoundary;
    property FmpMultConsumptiveUseBoundary: TFmp4MultConsumptiveUseBoundary
      read FFmpMultConsumptiveUseBoundary write FFmpMultConsumptiveUseBoundary;
    property Fmp4IrrigationBoundary: TFmp4IrrigationBoundary
      read FFmp4IrrigationBoundary write FFmp4IrrigationBoundary;
    property FmpMultIrrigationBoundary: TFmp4MultIrrigationBoundary
      read FFmpMultIrrigationBoundary write FFmpMultIrrigationBoundary;
    property Fmp4RootDepthBoundary: TFmp4RootDepthBoundary
      read FFmp4RootDepthBoundary write FFmp4RootDepthBoundary;
    property FmpMultRootDepthBoundary: TFmp4MultRootDepthBoundary
      read FFmpMultRootDepthBoundary write FFmpMultRootDepthBoundary;
    property Fmp4TranspirationFractionBoundary: TFmp4TranspirationFractionBoundary
      read FFmp4TranspirationFractionBoundary write FFmp4TranspirationFractionBoundary;
    property FmpMultTranspirationFractionBoundary: TFmp4MultTranspirationFractionBoundary
      read FFmpMultTranspirationFractionBoundary write FFmpMultTranspirationFractionBoundary;
    property Fmp4EvaporationIrrigationFractionBoundary: TFmp4EvaporationIrrigationFractionBoundary
      read FFmp4EvaporationIrrigationFractionBoundary write FFmp4EvaporationIrrigationFractionBoundary;
    property FmpMultEvaporationIrrigationFractionBoundary: TFmp4MultEvaporationIrrigationFractionBoundary
      read FFmpMultEvaporationIrrigationFractionBoundary write FFmpMultEvaporationIrrigationFractionBoundary;
    property Fmp4FractionOfPrecipToSurfaceWaterBoundary: TFmp4FractionOfPrecipToSurfaceWaterBoundary
      read FFmp4FractionOfPrecipToSurfaceWaterBoundary write FFmp4FractionOfPrecipToSurfaceWaterBoundary;
    property FmpMultFractionOfPrecipToSurfaceWaterBoundary: TFmp4MultFractionOfPrecipToSurfaceWaterBoundary
      read FFmpMultFractionOfPrecipToSurfaceWaterBoundary write FFmpMultFractionOfPrecipToSurfaceWaterBoundary;
    property Fmp4FractionOfIrrigToSurfaceWaterBoundary: TFmp4FractionOfIrrigToSurfaceWaterBoundary
      read FFmp4FractionOfIrrigToSurfaceWaterBoundary write FFmp4FractionOfIrrigToSurfaceWaterBoundary;
    property FmpMultFractionOfIrrigToSurfaceWaterBoundary: TFmp4MultFractionOfIrrigToSurfaceWaterBoundary
      read FFmpMultFractionOfIrrigToSurfaceWaterBoundary write FFmpMultFractionOfIrrigToSurfaceWaterBoundary;
    property Fmp4AddedDemandBoundary: TFmp4AddedDemandBoundary
      read FFmp4AddedDemandBoundary write FFmp4AddedDemandBoundary;
    property FmpMultAddedDemandBoundary: TFmp4MultAddedDemandBoundary
      read FFmpMultAddedDemandBoundary write FFmpMultAddedDemandBoundary;
    property Fmp4CropHasSalinityDemandBoundary: TFmp4CropHasSalinityDemandBoundary
      read FFmp4CropHasSalinityDemandBoundary write FFmp4CropHasSalinityDemandBoundary;
    property FmpMultCropHasSalinityDemandBoundary: TFmp4MultCropHasSalinityDemandBoundary
      read FFmpMultCropHasSalinityDemandBoundary write FFmpMultCropHasSalinityDemandBoundary;
    property TvkBoundary: TTvkBoundary read FTvkBoundary write FTvkBoundary;
    property TvsBoundary: TTvsBoundary read FTvsBoundary write FTvsBoundary;

    // When adding a new property, be sure to update
    // TModflowBoundaries.Invalidate,
    // TModflowBoundaries.FreeUnusedBoundaries,
    // TModflowBoundaries.StopTalkingToAnyone,
    // TModflowBoundaries.UsesATime,
    // TModflowBoundaries.ReplaceATime,
    // TModflowBoundaries.Destroy,
    // TModflowBoundaries.Assign,
    // TModflowBoundaries.RemoveModelLink,
    // TModflowBoundaries.Loaded (if Loaded is defined in the new property),
    // TScreenObject.Invalidate, and
    // TScreenObject.Assign
    // .

    procedure Assign(Source: TModflowBoundaries);
    procedure StopTalkingToAnyone;
    // @name returns @true if one of the MODFLOW boundary conditions uses
    // ATime.
    function UsesATime(ATime: Double): Boolean;
    function UsesAnMt3dTime(ATime: Double): Boolean;
    procedure ReplaceATime(OldTime, NewTime: Double);
    Procedure ReplaceAnMt3dTime(OldTime, NewTime: Double);
    property Model: TBaseModel read FModel write FModel;
    procedure Invalidate;
    procedure FreeUnusedBoundaries;
    constructor Create(ScreenObject: TObject);
    Destructor Destroy; override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name removes a link between a @link(TPhastModel) or @link(TChildModel)
    // and a @link(TModflowBoundary)
    procedure RemoveModelLink(AModel: TBaseModel);
    procedure Loaded;
    procedure ReplaceGUID;
    procedure CreateGwtTimeLists(AModel: TBaseModel);
  end;

  TUsedWithModelItem = class(TPhastCollectionItem)
  private
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    FUsedModel: TBaseModel;
    FModelName: string;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure SetUsedModel(const Value: TBaseModel);
    procedure SetModelName(const Value: string);
    function GetModelName: string;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function GetUsedModel: TBaseModel;
  public
    procedure Assign(Source: TPersistent); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    property UsedModel: TBaseModel read GetUsedModel write SetUsedModel;
    { TODO -cRefactor : Consider replacing Model with a TNotifyEvent or interface. }
    //
    function Model: TBaseModel;
  published
    property ModelName: string read GetModelName write SetModelName;
  end;

  TUsedWithModelCollection = class(TPhastCollection)
  strict private
    { TODO -cRefactor : Consider replacing FModel with a TNotifyEvent or interface. }
    //
    FModel: TBaseModel;
  private
    FUsedWithAllModels: boolean;
    procedure SetUsedWithAllModels(const Value: boolean);
    function GetItem(Index: Integer): TUsedWithModelItem;
    procedure SetItem(Index: Integer; const Value: TUsedWithModelItem);
  public
    procedure Assign(Source: TPersistent); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    constructor Create(Model: TBaseModel);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function UsesModel(AModel: TBaseModel): boolean;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AddModel(AModel: TBaseModel);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure RemoveModel(AModel: TBaseModel);
    property Items[Index: Integer]: TUsedWithModelItem read GetItem write SetItem; default;
  published
    property UsedWithAllModels: boolean read FUsedWithAllModels
      write SetUsedWithAllModels default True;
    { TODO -cRefactor : Consider replacing Model with a TNotifyEvent or interface. }
    //
    property Model: TBaseModel read FModel;
  end;

  TModflowDelegate = class;

  {
  @abstract(@name is the internal representation of an object on the screen.)
  @name has a series of 0 or more points that defines its location in two
  dimensions.  It may also have zero, one, or two associated elevation
  formulas that define its position in the third dimension.
  (See @link(TScreenObject.ElevationFormula),
  @link(TScreenObject.HigherElevationFormula),
  and @link(TScreenObject.LowerElevationFormula).)
  It can be used
  to set the values of zero or more @link(TDataArray)s.  For each
  such @link(TDataArray),
  it has a formula (See @link(TScreenObject.DataSetFormulas))
  that describes how it sets the values for them.
  The @link(TScreenObject.ViewDirection) of the @link(TScreenObject)
  determine whether the 2D location of
  the object is with respect to the top, front, or side view of the model.
  It has properties that define boundary conditions in
  PHAST and it has methods to deal with PHAST-style interpolation.
  (See the following list.)
  @unorderedList(
    @item(@link(TScreenObject.InterpValues))
    @item(FluxBoundary)
    @item(LeakyBoundary)
    @item(RiverBoundary)
    @item(SpecifiedHeadBoundary)
    @item(WellBoundary)
  )

  @seealso(TPhastInterpolationValues)
  }

  TScreenObject = class(TObserver, IScreenObject, IScreenObjectForDynamicTimeSeries)
  strict private
    FCachedCells: TCachedCells;
    FIntervalTree: TRbwIntervalTree;
    FDelegateCollection: TDelegateCollection;
    // @name returns @true if Location is outside a box surrounding
    // the @classname plus a buffer distance.
    // @seealso(IsOutsideSubPolygonBoxPlusBuffer)
    function IsOutsideBoxPlusBuffer(const Location: TPoint2D;
      const BufferDistance: real; const Anisotropy: real): boolean;
    // @name tests whether any point on the two @link(TSubPolygon)s
    // is closer to Location than Distance.  If so, @name returns @true
    // and Distance is set to the distance to the closest point on
    // The @classname and ClosestLocation
    // is set to the location whose point was closest to Location.
    function IsAnyPointInSubPolygonCloser(const Location: TPoint2D;
      var Distance: real; out ClosestLocation: TPoint2D;
      const Anisotropy: real; const ASubPolygon: TSubPolygon): boolean;
    // @name returns @true if Location is outside SubPolygon
    // plus a buffer distance.
    // @seealso(IsOutsideSubPolygonBoxPlusBuffer)
    function IsOutsideSubPolygonBoxPlusBuffer(const Location: TPoint2D;
      const BufferDistance: real; const Anisotropy: real;
      const SubPolygon: TSubPolygon): boolean;
    procedure UpdateUsedVariables(VariableList, DataSetList: TList; LayerIndex,
      RowIndex, ColIndex: Integer);
    procedure InitializeUsedDataSets(Model: TBaseModel; Compiler: TRbwParser;
      const Expression: TExpression; VariableList, DataSetList: TList);
  private
    FAssignmentLocation: TAssignmentLocation;
    FCanInvalidateModel: boolean;
    // @name holds all the subscriptions related to
    // mixtures for @link(TDataArray)s.
    FDataSetMixtureSubscriptions: TObjectList;
    // See @link(InterpValues).
    FInterpValues: TInterpValuesCollection;
    // @name is assigned in @link(AssignValuesToDataSet).
    FMixtureCompiler: TRbwParser;
    // @name is assigned in @link(AssignValuesToDataSet).
    FMixtureExpression: TExpression;
    // @name is assigned and Freed in @link(AssignValuesToDataSet).
    FMixtureVariables: TStringList;
    // See @link(FluxBoundary).
    FFluxBoundary: TFluxBoundary;
    // See @link(LeakyBoundary).
    FLeakyBoundary: TLeakyBoundary;
    // See @link(RiverBoundary).
    FRiverBoundary: TRiverBoundary;
    // See @link(SpecifiedHeadBoundary).
    FSpecifiedHeadBoundary: TSpecifiedHeadBoundary;
    // @exclude
    // See @link(SpecifiedSolutionBoundary).
    FSpecifiedSolutionBoundary: TSpecifiedSolutionBoundary;
    // See @link(WellBoundary).
    FWellBoundary: TWellBoundary;
    {
      @name is used to temporarily store the lower elevation
      of the @classname in current cell when the @classname has
      an upper and a lower elevation.
    }
    FBottomElevation: real;
    {
      @name is a @link(SubscriptionUnit.TObserver) that responds to changes
      in any of the data sets referenced in @link(LowerElevationFormula)
      by calling @link(Changed).}
    FBottomElevSubscription: TObserver;
    // See @link(BoundaryDataSetFormulas).
    FBoundaryDataSetFormulas: TIformulaList;
    // See @link(BoundaryDataSets).
    FBoundaryDataSets: TList;
    {
     @name holds a list of @link(SubscriptionUnit.TObserver)s
     related to boundary conditions set by this @classname.
     If this @classname changes, the @link(SubscriptionUnit.TObserver)s
     in @name will ensure that those boundary conditions
     get updated properly when needed.}
    FBoundaryDataSetSubscriptions: TObjectList;
    // See @link(CanvasCoordinates).
    FCanvasCoordinates: TPointArray;
    // See @link(Capacity).
    FCapacity: integer;
    // See @link(CellSize).
    FCellSize: real;
    // See @link(CellSizeUsed).
    FCellSizeUsed: boolean;
    // See @link(ColorLine).
    FColorLine: boolean;
    // See @link(Count).
    FCount: integer;
    // See @link(DataSetFormulas).
    FDataSetFormulas: TIformulaList;
    // See @link(DataSets).
    FDataSets: TDataArrayList;
    {
     @name holds a list of @link(SubscriptionUnit.TObserver)s
     related to @link(DataSetUnit.TDataArray)s set by this @classname.
     If this @classname changes, the @link(SubscriptionUnit.TObserver)s
     in @name will ensure that those @link(DataSetUnit.TDataArray)s
     get updated properly when needed.}
    FDataSetSubscriptions: TObjectList;
    // See @link(Deleted).
    FDeleted: boolean;
    // See @link(ElevationCount) and @link(TElevationCount).
    FElevationCount: TElevationCount;
    {
      @name is a @link(SubscriptionUnit.TObserver) that responds to changes
      in any of the data sets referenced in @link(ElevationFormula)
      by calling @link(Changed).}
    FElevSubscription: TObserver;
    // See @link(EvaluatedAt) and @link(TEvaluatedAt).
    FEvaluatedAt: TEvaluatedAt;
    // See @link(FillColor).
    FFillColor: TColor;
    // See @link(FillScreenObject).
    FFillScreenObject: boolean;
    // See @link(LineColor).
    FLineColor: TColor;
    // See @link(MaxX).
    FMaxX: real;
    // See @link(MaxY).
    FMaxY: real;
    // See @link(MinX).
    FMinX: real;
    // See @link(MinY).
    FMinY: real;
    {
      @name indicates whether or not @link(SelectLines) is
      up-to-date.  If it isn't, it will be recalculated when needed.}
    FNeedToUpdateLine: boolean;
    // @name: @link(TRealPointArray);
    // See @link(Points) and @link(GoPhastTypes.TRealPointArray).
    FPoints: TRealPointArray;
    {
      @name indicates whether or not @link(FScreenObjectArea) is
      up-to-date.  If it isn't, it will be recalculated when needed.
      See @link(ScreenObjectArea).}
    FRecalculateArea: boolean;
    {
      @name indicates whether or not @link(MinX), @link(MaxX),
      @link(MinY), and @link(MaxY) are
      up-to-date.  If the aren't, they will be recalculated when needed.}
    FRecalculateBox: boolean;
    {
      @name indicates whether or not @link(FCanvasCoordinates) is
      up-to-date.  If it isn't, it will be recalculated when needed.
      See @link(ScreenObjectArea).}
    FRecalculateCoordinates: boolean;
    {
      @name indicates whether or not @link(FScreenObjectLength) is
      up-to-date.  If it isn't, it will be recalculated when needed.
      See @link(ScreenObjectLength).}
    FRecalculateLength: boolean;
    // See @link(ScreenObjectArea).
    FScreenObjectArea: real;
    // See @link(ScreenObjectLength).
    FScreenObjectLength: real;
    // See @link(Segments) and @link(TCellElementSegmentList).
    FSegments: TCellElementSegmentList;
    FSegModelAssoc: TAssociateList;
    // See @link(Selected).
    FSelected: boolean;
    // See @link(SelectedVertexCount).
    FSelectedVertexCount: integer;
    // See @link(SelectedVertices).
    FSelectedVertices: TBooleanDynArray;
    // See @link(SelectLines) and @link(SelectUnit.TLine).
    FSelectLines: TLines;
    // See @link(SetValuesByInterpolation).
    FSetValuesByInterpolation: boolean;
    // See @link(SetValuesOfEnclosedCells).
    FSetValuesOfEnclosedCells: boolean;
    // See @link(SetValuesOfIntersectedCells).
    FSetValuesOfIntersectedCells: boolean;
    // @name is used to determine whether adding
    // a point to @classname will cause it to intersect an existing Segment.
    FLastSubPolygon: TSubPolygon;
    {
      @name is used to temporarily store the upper elevation
      of the @classname in current cell when the @classname has
      an upper and a lower elevation.}
    FTopElevation: real;
    {
      @name is a @link(SubscriptionUnit.TObserver) that responds to changes
      in any of the data sets referenced in @link(HigherElevationFormula)
      by calling @link(Changed).}
    FTopElevSubscription: TObserver;
    // See @link(ViewDirection) and @link(TViewDirection).
    FViewDirection: TViewDirection;
    // See @link(Visible).
    FVisible: boolean;
    // See @link(NeedToResetSelectedVertexCount).
    FNeedToResetSelectedVertexCount: boolean;
    // @name is actually a TObjectList.
    // @name holds instances of @link(TSubPolygon).
    // @seealso(CreateSubPolygons)
    // @seealso(SubPolygonCount)
    // @seealso(SubPolygons)
    // @seealso(IsAnyPointCloser)
    FSubPolygons: TList;
    FModflowBoundaries: TModflowBoundaries;
    FSectionStarts: TValueArrayStorage;
    FImportedSectionElevations: TValueArrayStorage;
    FCurrentValues: TValueArrayStorage;
    FImportedHigherSectionElevations: TValueArrayStorage;
    FImportedLowerSectionElevations: TValueArrayStorage;
    FImportedValues: TValueCollection;
    FIsClosedCached: Boolean;
    FCachedClosed: boolean;
    FGlListCreated: Boolean;
    FGlScreenObjectList: GLuint;
    FListUpToDate: Boolean;
    FIFACE: TIface;
    FModpathParticles: TParticleStorage;
    FUpdateCount: Integer;
    // each contour in @name contains one of the
    // closed sections of this instance of @classname.
    FGpcPolygons: TGpcPolygonClass;
    FPriorObjectIntersectLengthCol: Integer;
    FPriorObjectIntersectLengthRow: Integer;
    FPriorObjectIntersectLengthLayer: Integer;
    FPriorObjectIntersectLengthResult: Real;
    FCachedDataSetIndex: integer;
    FElevationFormulaObject: IFormulaObject;
    FHigherElevationFormulaObject: IFormulaObject;
    FLowerElevationFormulaObject: IFormulaObject;
    FPriorObjectSectionIntersectLengthCol: integer;
    FPriorObjectSectionIntersectLengthRow: integer;
    FPriorObjectSectionIntersectLengthLayer: integer;
    FPriorObjectSectionIntersectLengthResult: real;
    FPriorObjectSectionIntersectLengthSection: integer;
    FComment: string;
    FPointPositionValues: TPointPositionValues;
    FChildModelName: string;
    FChildModelDiscretization: integer;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    FChildModel: TBaseModel;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    FPriorObjectSectionIntersectLengthModel: TBaseModel;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    FPriorObjectIntersectLengthModel: TBaseModel;
    FUsedModels: TUsedWithModelCollection;
    FFullObjectIntersectLength: Boolean;
    FPriorFullObjectIntersectLength: Boolean;
    FPositionLocked: boolean;
    FStoredSutraAngle: TRealStorage;
    FSutraBoundaries: TSutraBoundaries;
    FDuplicatesAllowed: Boolean;
    FSfrSegmentNumber: integer;
    FObjectLabel: TObjectLabel;
    FObjectVertexLabel: TObjectVertexLabel;
    FFootprintWell: TFootprintWell;
    FStoredMinimumFraction: TRealStorage;
    FQuadtreeRefinementLevel: Integer;
    FSutraScheduleName: string;
    FDynamicTimesSeriesCollections: TDynamicTimesSeriesCollections;
    FSectionLabel: TSectionLabel;
    procedure CreateLastSubPolygon;
    procedure DestroyLastSubPolygon;
    function GetSubPolygonCount: integer;
    function GetSubPolygon(Index: integer): TSubPolygon;
    // See @link(FluxBoundary).
    procedure SetFluxBoundary(const Value: TFluxBoundary);
    // See @link(InterpValues).
    procedure SetInterpValues(const Value: TInterpValuesCollection);
    // See @link(LeakyBoundary).
    procedure SetLeakyBoundary(const Value: TLeakyBoundary);
    // See @link(RiverBoundary).
    procedure SetRiverBoundary(const Value: TRiverBoundary);
    // See @link(SpecifiedHeadBoundary).
    procedure SetSpecifiedHeadBoundary(
      const Value: TSpecifiedHeadBoundary);
    // @exclude
    // See @link(SpecifiedSolutionBoundary).
    procedure SetSpecifiedSolutionBoundary(
      const Value: TSpecifiedSolutionBoundary);
    // See @link(WellBoundary).
    procedure SetWellBoundary(const Value: TWellBoundary);
    // AddPointFromColumn creates a @link(TEdgePoint)
    // at the column boundary on Grid
    // indicated by ColIndex on the line defined by PreviousPoint and APoint.
    // If the new @link(TEdgePoint) is between PreviousPoint and APoint, it is
    // added at TempPoints1[Count] and then Count is incremented.  The Position
    // of the new @link(TEdgePoint) is set to Position.
    // AddPointFromColumn is called when updating @Link(Segments).
    // @param(ColIndex indicates the column boundary on the grid.  The new
    // point will be where the line intersects this column.)
    // @param(Grid is the @link(TPhastGrid) from which the point is being
    // added.)
    // @param(PreviousPoint is one of the points defining the line.)
    // @param(APoint is the other point defining the line.)
    // @param(TempPoints1 is the array to which the point is added.)
    // @param(Count is the new number of points in TempPoints1.)
    // @param(Position is the @link(TEdgePosition) for the new point.)
    procedure AddPointFromColumn(const ColIndex: integer;
      const Grid: TCustomModelGrid; const PreviousPoint, APoint: TEdgePoint;
      var TempPoints1: TEdgePointArray; var Count: integer;
      const Position: TEdgePosition);
    // AddPointFromLayer creates a @link(TEdgePoint)
    // at the layer boundary on Grid
    // indicated by LayerIndex on the line defined by PreviousPoint and APoint.
    // If the new @link(TEdgePoint) is between PreviousPoint and APoint, it is
    // added at TempPoints1[Count] and then Count is incremented.  The Position
    // of the new @link(TEdgePoint) is set to Position.
    // AddPointFromLayer is called when updating @Link(Segments).
    // @param(LayerIndex indicates the layer boundary on the grid.  The new
    // point will be where the line intersects this layer.)
    // @param(Grid is the @link(TPhastGrid) from which the point is being
    // added.)
    // @param(PreviousPoint is one of the points defining the line.)
    // @param(APoint is the other point defining the line.)
    // @param(TempPoints1 is the array to which the point is added.)
    // @param(Count is the new number of points in TempPoints1.)
    // @param(Position is the @link(TEdgePosition) for the new point.)
    procedure AddPointFromLayer(const LayerIndex: integer;
      const Grid: TCustomModelGrid; const PreviousPoint, APoint: TEdgePoint;
      var TempPoints1: TEdgePointArray; var Count: integer;
      const Position: TEdgePosition);
    // AddPointFromRow creates a @link(TEdgePoint) at the row boundary on Grid
    // indicated by RowIndex on the line defined by PreviousPoint and APoint.
    // If the new @link(TEdgePoint) is between PreviousPoint and APoint, it is
    // added at TempPoints1[Count] and then Count is incremented.  The Position
    // of the new @link(TEdgePoint) is set to Position.
    // AddPointFromRow is called when updating @Link(Segments).
    // @param(RowIndex indicates the row boundary on the grid.  The new
    // point will be where the line intersects this row.)
    // @param(Grid is the @link(TPhastGrid) from which the point is being
    // added.)
    // @param(PreviousPoint is one of the points defining the line.)
    // @param(APoint is the other point defining the line.)
    // @param(TempPoints1 is the array to which the point is added.)
    // @param(Count is the new number of points in TempPoints1.)
    // @param(Position is the @link(TEdgePosition) for the new point.)
    procedure AddPointFromRow(const RowIndex: integer;
      const Grid: TCustomModelGrid; const PreviousPoint, APoint: TEdgePoint;
      var TempPoints1: TEdgePointArray; var Count: integer;
      const Position: TEdgePosition);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure Assign3DElevations(Formula: string;
      const SparseArray: T3DSparseRealArray; AModel: TBaseModel);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    {@name fills @link(T3DSparseRealArray SparseArray)  with values based on
     Compiler.CurrentExpression.  Only cells
     whose values ought to be set by the @classname will be set.
     This procedure is only called if @link(ViewDirection) =
     @link(TViewDirection vdFront).
     @param(Compiler is the TRbwParser whose CurrentExpression will
     be used to assign values.)
     @param(SparseArray is a @link(T3DSparseRealArray) whose values
     will be set.)
     }
    procedure Assign3DElevationsFromFront(const Compiler: TRbwParser;
      const SparseArray: T3DSparseRealArray; AModel: TBaseModel);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    {@name fills @link(T3DSparseRealArray SparseArray)  with values based on
     Compiler.CurrentExpression.  Only cells
     whose values ought to be set by the @classname will be set.
     This procedure is only called if @link(ViewDirection)
     = @link(TViewDirection vdSide).
     @param(Compiler is the TRbwParser whose CurrentExpression will
     be used to assign values.)
     @param(SparseArray is a @link(T3DSparseRealArray) whose values
     will be set.)}
    procedure Assign3DElevationsFromSide(const Compiler: TRbwParser;
      const SparseArray: T3DSparseRealArray; AModel: TBaseModel);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    {@name fills @link(TCellElementSegmentList.FHigher3DElevations)
    with values based on either
    @link(HigherElevationFormula) or @link(ElevationFormula) depending on
    @link(ElevationCount).}
    procedure AssignHigher3DElevations(AModel: TBaseModel);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    {@name fills @link(TCellElementSegmentList.FLower3DElevations)
    with values based on
    @link(LowerElevationFormula).}
    procedure AssignLower3DElevations(AModel: TBaseModel);
    // CalculateCanvasCoordinates takes all the TPoint2Ds in
    // @Link(Points) and calculates the corresponding TPoints.  These are
    // stored in FCanvasCoordinates.  The TPoints are used when drawing
    // the ScreenObject on the screen.
    procedure CalculateCanvasCoordinates;
    // @name first calls @link(ClearSubPolygons) to get rid of existing
    // @link(TSubPolygon)s.  It then creates one @link(TSubPolygon) for
    // each section of the @classname. (See @link(SectionCount).)
    // Each @link(TSubPolygon) will have access to
    // the TPoint2Ds in its section @Link(Points).  Each @link(TSubPolygon)
    // will divide itself into two additional subcountours until the
    // number of points each has access to is small enough.
    // The @link(TSubPolygon)s are used in speeding up evaluation of whether a
    // point is inside the @classname.
    procedure CreateSubPolygons;
    // @name destroys @link(TSubPolygon)s in @link(FSubPolygons).
    procedure ClearSubPolygons;
    {@name is used to draw the @classname when Direction =
     @Link(ViewDirection).
     The elevation functions (if any) are not used.
     (To facilitated fast selection
     of objects, the selected objects are redrawn in an Image32
     after being in the normal fashion in a bitmap.
     @param(Bitmap32 is the TBitmap32 on which the @classname will be drawn.)
     @param(Direction is the @link(TViewDirection) for Bitmap32.)
     @param(DrawAsSelected is used to determine whether
     to draw the screen object in the
     normal fashion or as a selected screen object.)}
    procedure Draw0Elev(Const Bitmap32: TPersistent;
      const Direction: TViewDirection;
      const DrawAsSelected: Boolean = False);
     {@name is used to draw the @classname when @Link(ElevationCount) =
     ecOne.  if Direction = @Link(ViewDirection), @link(Draw0Elev) is
     called.  Otherwise @Link(ElevationFormula) is used to determine
     either the X or Y coordinates.
     @param(Bitmap32 is the TCanvas on which the @classname will be drawn.)
     @param(Direction is the @link(TViewDirection) for Bitmap32.)
     @param(DrawAsSelected is used to determine whether
     to draw the screen object in the
     normal fashion or as a selected screen object.
     (To facilitate fast selection
     of objects, the selected objects are redrawn in an Image32
     after being in the normal fashion in a bitmap.)) }
    procedure Draw1Elev(
      Const Bitmap32: TPersistent;
      const Direction: TViewDirection;
      const DrawAsSelected: Boolean = False);
    {@name is used to draw the @classname when @Link(ElevationCount) =
    ecTwo.  if Direction = @Link(ViewDirection), @Link(Draw0Elev) is
    called.  Otherwise @Link(HigherElevationFormula) and
    @Link(LowerElevationFormula) is used to determine either the
    X or Y coordinates.
     @param(Bitmap32 is the TBitmap32 on which the @classname will be drawn.)
     @param(Direction is the @link(TViewDirection) for Bitmap32.)
     @param(DrawAsSelected is used to determine whether
     to draw the screen object in the
     normal fashion or as a selected screen object.
     (To facilitate fast selection
     of objects, the selected objects are redrawn in an Image32
     after being in the normal fashion in a bitmap.)) }
    procedure Draw2Elev(Const Bitmap32: TPersistent;
      const Direction: TViewDirection;
      const DrawAsSelected: Boolean = False);
    // @name is used to help determine whether the point at
    // X, Y is inside the @classname. (See @Link(IsPointInside).)
    // IsInside is updated to reflect the effect of ASubPolygon on the final
    // result.  IsInside is not the final result.
    // @name calls itself recursively.
    // @param(ASubPolygon is the @link(TSubPolygon) which will be evaluated.)
    // @param(X is the X-coordinate of the location being tested.)
    // @param(Y is the Y-coordinate of the location being tested.)
    // @param(IsInside represents the effects of ASubPolygon on whether
    // the point (X, Y) is inside the polygon.)
    procedure EvaluateSubPolygon(const ASubPolygon: TSubPolygon;
      const X, Y: real; var IsInside: boolean);
    { TODO : Compare and possibly combine GetACol and GetColumn. }
    // If @Link(EvaluatedAt) = eaNodes, @name returns the
    // column whose center is closest to X.
    // except that it can return Grid.ColumnCount
    // for EvaluatedAt = eaBlocks.
    // If @Link(EvaluatedAt) = eaBlocks @name returns
    // the index of the column center that is closest to X.
    // @name is similar to @link(GetColumn).
    // (X is in a coordinates system parallel to the grid.)
    // @name is called by @link(UpdateTopSegments)
    // and @link(UpdateFrontSegments).
    // @param(Grid is the @link(TPhastGrid) from which the column boundary
    // will be extracted.)
    // @param(X is the X coordinate (in a coordinates system parallel
    // to the grid) of the location of interest.)
    function GetACol(const Grid: TCustomModelGrid; const X: double): integer;
    { TODO : Compare and possibly combine GetAPhastLayer and GetLayer. }
    // If @Link(EvaluatedAt) = eaNodes, @name returns the
    // layer boundary that is closest to Z.
    // If @Link(EvaluatedAt) = eaBlocks @name returns
    // the index of the layer center that is closest to Z
    // except that it can return Grid.LayerCount
    // for EvaluatedAt = eaBlocks.
    // @name is called by @link(UpdateFrontSegments)
    // and @link(UpdateSideSegments).
    // @param(Grid is the @link(TPhastGrid) from which the layer boundary
    // will be extracted.)
    // @param(Z is the Z coordinate (in a coordinates system parallel
    // to the grid) of the location of interest.)
    function GetAPhastLayer(const Grid: TCustomModelGrid; const Z: double): integer;
    { TODO : Compare and possibly combine GetARow and GetRow. }
    // If @Link(EvaluatedAt) = eaNodes, @name returns the
    // row boundary that is closest to Y (
    // except that it can return Grid.RowCount
    // for EvaluatedAt = eaBlocks.
    // If @Link(EvaluatedAt) = eaBlocks @name returns
    // the index of the row center that is closest to Y.
    // (Y is in a coordinates system parallel to the grid.)
    // @name is called by @link(UpdateTopSegments)
    // and @link(UpdateSideSegments).
    // @param(Grid is the @link(TPhastGrid) from which the layer boundary
    // will be extracted.)
    // @param(Y is the Y coordinate (in a coordinates system parallel
    // to the grid) of the location of interest.)
    function GetARow(const Grid: TCustomModelGrid; const Y: double): integer;
    // @name is the Read function for the
    // @Link(BoundaryDataSetFormulas) property.
    function GetBoundaryDataSetFormulas(const Index: integer): string;
    // @name is the Read function for the @Link(BoundaryDataSets) property.
    function GetBoundaryDataSets(const Index: integer): TDataArray;
    // @name is the Read function for the @Link(CanvasCoordinates) property.
    // It recalculates the coordinates when needed.
    function GetCanvasCoordinates: TPointArray;
    // @name returns the column number that contains X.
    // @name is similar to @link(GetACol).
    // @param(Grid is the @link(TPhastGrid) from which the column boundary
    // will be extracted.)
    // @param(X is the X coordinate (in a coordinates system parallel
    // to the grid) of the location of interest.)
    function GetColumn(const Grid: TCustomModelGrid; const X: real): integer;

    { @name sets FirstCol and LastCol to the range of columns intersected by
      the @classname.
      @param(Grid is the grid being tested)
      @param(TempMinX is the minimum X value in the grid coordinate system.)
      @param(TempMaxX is the maximum X value in the grid coordinate system.)
      @param(FirstCol is the first column intersected by TempMinX to TempMaxX.)
      @param(LastCol is the last column intersected by TempMinX to TempMaxX.)
      }
    procedure GetColumns(const Grid: TCustomModelGrid; TempMinX, TempMaxX:
      real; out FirstCol, LastCol: integer);
    // See @link(Count).
    function GetCount: integer;
    // See @link(DataSetCapacity).
    function GetDataSetCapacity: integer;
    // See @link(DataSetCount).
    function GetDataSetCount: integer;
    // See @link(DataSetFormulas).
    function GetDataSetFormulas(const Index: integer): string;
    // See @link(DataSets).
    function GetDataSets(const Index: integer): TDataArray;
    // See @link(EdgePoints).
    function GetEdgePoints(const Index: integer): TEdgePoint;
    // See @link(FillColor).
    function GetFillColor: TColor;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name sets XMin, XMax, YMin, and YMax to be the positions
    // of the grid cell or element specified by Col, Row, and Layer.
    // Which is used depends on @link(EvaluatedAt).
    procedure GetGridCellOrElementLimits(const Col, Row, Layer: integer;
      out XMin, XMax, YMin, YMax: double; AModel: TBaseModel);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name  calls @link(UpdateHigher3DElevations).  Then it returns
    // @link(TCellElementSegmentList.FHigher3DElevations).
    function GetHigher3DElevations(AModel: TBaseModel): T3DSparseRealArray;
    // @name returns the layer number that contains Z.
    // @name is similar to @link(GetAPhastLayer).
    // @param(Grid is the @link(TPhastGrid) from which the layer boundary
    // will be extracted.)
    // @param(Z is the Z coordinate (in a coordinates system parallel
    // to the grid) of the location of interest.)
    function GetLayer(const Grid: TCustomModelGrid; const Z: real): integer;

    { @name sets FirstLayer and LastLayer to the range of layers intersected by
      the @classname.
      @param(Grid is the grid being tested)
      @param(TempMinZ is the minimum Z value in the grid coordinate system.)
      @param(TempMaxZ is the maximum Z value in the grid coordinate system.)
      @param(FirstLayer is the first layer intersected by TempMinZ to TempMaxZ.)
      @param(LastRow is the last layer intersected by TempMinZ to TempMaxZ.)
      @param(LastLayer specifies how to interpret the columns.)
      }
    procedure GetLayers(const Grid: TCustomModelGrid; TempMinZ, TempMaxZ: real;
      out FirstLayer, LastLayer: integer);
    // See @link(LineColor).
    function GetLineColor: TColor;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name calls @link(UpdateLower3DElevations).  Then it returns
    // @link(TCellElementSegmentList.FLower3DElevations).
    function GetLower3DElevations(AModel: TBaseModel): T3DSparseRealArray;
    // See @link(MaxX).
    function GetMaxX: real;
    // See @link(MaxY).
    function GetMaxY: real;
    // See @link(MinX).
    function GetMinX: real;
    // See @link(MinY).
    function GetMinY: real;
    // See @link(Points).
    function GetPoints(const Index: integer): TPoint2D;
    // @name returns the row number that contains Y.
    // @name is similar to @link(GetARow).
    // @param(Grid is the @link(TPhastGrid) from which the row boundary
    // will be extracted.)
    // @param(Y is the Y coordinate (in a coordinates system parallel
    // to the grid) of the location of interest.)
    function GetRow(const Grid: TCustomModelGrid; const Y: real): integer;

    { @name sets FirstRow and LastRow to the range of rows intersected by
      the @classname.
      @param(Grid is the grid being tested)
      @param(TempMinY is the minimum Y value in the grid coordinate system.)
      @param(TempMaxY is the maximum Y value in the grid coordinate system.)
      @param(FirstRow is the first row intersected by TempMinY to TempMaxY.)
      @param(LastRow is the last row intersected by TempMinY to TempMaxY.)
      @param(EvaluatedAt specifies how to interpret the columns.)
      }
    procedure GetRows(const Grid: TCustomModelGrid; TempMinY, TempMaxY: real;
      out FirstRow, LastRow: integer);
    // See @link(SelectedVertexCount).
    function GetSelectedVertexCount: integer;
    // See @link(SelectedVertices).
    function GetSelectedVertices(const index: integer): boolean;
    // See @link(SelectLines).
    function GetSelectLines: TLines;
    // @name increases @link(Capacity).
    procedure Grow;
    // @name increases @link(Capacity) by Amount.
    procedure GrowBy(Amount: integer);
    // @name returns true if the point (X,Y) is inside the bounding
    // box for the @classname.
    function InsideBox(const X, Y: real): boolean;
    {@name calculates the distance between a point and a line segment.
     @param(P is the point.)
     @param(A is one of the points defining the line segment.)
     @param(B is the other point defining the line segment.)
     @param(Closest is the closest point on the line segment to P.)
     @param(Anisotropy is the Anisotropy used in calculating the distance.)}
    function MinDistPointLine(const P, A, B: TPoint2D;
      out Closest: TPoint2D; const Anisotropy: real): real;
    // @name returns the distance between points A and B taking into account
    // Anisotropy.
    function PointToPointDist(const A, B: TPoint2D;
      const Anisotropy: real): real;
    // @name is used if @link(LowerElevationFormula) has an error
    // to reset it to a default valid value.
    procedure ResetBottomElevationFormula(const Compiler: TRbwParser;
      const ErrorMessage: string);
    // @name is used if @link(ElevationFormula) has an error
    // to reset it to a default valid value.
    procedure ResetElevationFormula(const Compiler: TRbwParser;
      const ErrorMessage: string);
    // @name deselects all vertices in the @classname.
    procedure ResetSelectedVertexCount;
    // @name is used if @link(HigherElevationFormula) has an error
    // to reset it to a default valid value.
    procedure ResetTopElevationFormula(const Compiler: TRbwParser;
      const ErrorMessage: string);
    // See @link(BoundaryDataSetFormulas).
    procedure SetBoundaryDataSetFormulas(const Index: integer;
      const Value: string);
    // See @link(BoundaryDataSets).
    procedure SetBoundaryDataSets(const Index: integer;
      const DataSet: TDataArray);
    // See @link(Capacity).
    procedure SetCapacity(Value: integer);
    // See @link(CellSize).
    procedure SetCellSize(const Value: real);
    // See @link(CellSizeUsed).
    procedure SetCellSizeUsed(const Value: boolean);
    // See @link(ColorLine).
    procedure SetColorLine(const Value: boolean);
    // See @link(Count).
    procedure SetCount(const Value: integer);
    // See @link(DataSetCapacity).
    procedure SetDataSetCapacity(const Value: integer);
    // See @link(DataSetFormulas).
    procedure SetDataSetFormulas(const Index: integer; Value: string);
    // See @link(DataSets).
    procedure SetDataSets(const Index: integer; const DataSet: TDataArray);
    // See @link(Deleted).
    procedure SetDeleted(const Value: boolean);
    // See @link(EdgePoints).
    procedure SetEdgePoints(const Index: integer; const Value: TEdgePoint);
    // See @link(ElevationCount).
    procedure SetElevationCount(const Value: TElevationCount);
    // See @link(EvaluatedAt).
    procedure SetEvaluatedAt(const Value: TEvaluatedAt);
    // See @link(FillColor).
    procedure SetFillColor(const Value: TColor);
    // See @link(FillScreenObject).
    procedure SetFillScreenObject(const Value: boolean);
    // See @link(LineColor).
    procedure SetLineColor(const Value: TColor);
    // See @link(Points).
    procedure SetPoints(const Index: integer; const Value: TPoint2D);
    // See @link(Selected).
    procedure SetSelected(const Value: boolean);
    // See @link(SelectedVertices).
    procedure SetSelectedVertices(const index: integer; const Value: boolean);
    // See @link(SetValuesByInterpolation).
    procedure Set_SetValuesByInterpolation(const Value: boolean);
    // See @link(SetValuesOfEnclosedCells).
    procedure Set_SetValuesOfEnclosedCells(const Value: boolean);
    // See @link(SetValuesOfIntersectedCells).
    procedure Set_SetValuesOfIntersectedCells(const Value: boolean);
    // See @link(Visible).
    procedure SetVisible(const Value: boolean);
    {@name sorts the points in Input and returns the
     sorted points in SortedPoints. The points in Input lie along the line
     (PreviousPoint,APoint).  They are sorted so that they occur in order
     along that line.  Duplicate points are eliminated.
     @param(Input is an array of @link(TEdgePoint)s to be sorted.)
     @param(SortedPoints is an array of @link(TEdgePoint)s obtained by
     sorting Input.)
     @param(APoint is the end point of a line along
     which are all the points in Input.)
     @param(PreviousPoint is the beginning point of a line along
     which are all the points in Input.)
     @param(MaxLength is the number of points in Input to be sorted.)
     }
    procedure SortPoints(const Input: TEdgePointArray;
      out SortedPoints: TEdgePointArray; const APoint,
      PreviousPoint: TEdgePoint; const MaxLength: integer;
      Const EpsilonX: real = 0; Const EpsilonY: real = 0);
    // @name updates @link(MinX), @link(MaxX), @link(MinY), and @link(MaxY).
    procedure UpdateBox;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name calls @link(Delegate).@link(TCustomScreenObjectDelegate.
    // UpdateFrontSegments).
    procedure UpdateFrontSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name calls @link(Delegate).@link(TCustomScreenObjectDelegate.
    // UpdateSideSegments).
    procedure UpdateSideSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //@name updates the contents of @link(Segments) when
    // @link(ViewDirection) = @link(TViewDirection vdTop).
    procedure UpdateTopSegments(
      const EvaluatedAt: TEvaluatedAt; const PointsRotated: boolean;
      var RotatedPoints: TEdgePointArray; AModel: TBaseModel);
    // @name is used when accessing vertices to raise an exception if
    // Index is invalid.
    procedure ValidateIndex(const Index: integer); inline;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name returns false if Col, Row, Layer refer to an invalid
    // cell.  Only two of the three are checked.  The ones that are
    // checked depend on @link(ViewDirection)
    function ValidCell(const Col, Row, Layer: integer;
      Model: TBaseModel): boolean;
    // See @link(SetValuesOfEnclosedCells).
    function Get_SetValuesOfEnclosedCells: boolean;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name returns the proper @link(TCustomScreenObjectDelegate) for
    // the active @link(TPhastModel.ModelSelection TPhastModel.ModelSelection).
    procedure UpdateHigher3DElevations(AModel: TBaseModel);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateLower3DElevations(AModel: TBaseModel);
    // @name is used to assign data to a particular cell when PHAST-style
    // interpolation is used  and the data is integer data.
    // See @link(TPhastInterpolationValues).
    procedure AssignIntegerDataWithPhastInterpolation(const DataSet: TDataArray;
      const LayerIndex, RowIndex, ColIndex: integer; const Comment: string;
      const InterpValue: TInterpValuesItem);
    // @name is used to assign data to a particular cell when PHAST-style
    // interpolation is used  and the data is real-number data.
    // See @link(TPhastInterpolationValues).
    procedure AssignRealDataWithPhastInterpolation(const DataSet: TDataArray;
      const LayerIndex, RowIndex, ColIndex: integer; const Comment: string;
      const InterpValue: TInterpValuesItem);
    // See @link(MixtureDataSetFormula).
    function GetMixtureDataSetFormula(const Index: integer): string;
    // See @link(MixtureDataSetFormula).
    procedure SetMixtureDataSetFormula(const Index: integer;
      const Value: string);
    // The purpose of @name is to (1) determine the formula for
    // a mixture to use with using PHAST-style
    // interpolation, (2) determine the TRbwParser to use with that formula,
    // and (3) compile that formula into a
    // TExpression.  See @link(TPhastInterpolationValues).
    // @param(Compiler is set in @name to the correct TRbwParser to use
    // with the mixture formula.)
    // @param(MixtureFormula is set in @name to the formula for the mixture.)
    // @param(Expression is set in @name to the TExpression that results
    // from compiling MixtureFormula.)
    // @param(DataSet is the @link(TDataArray) to which the mixture formula
    // applies.)
    // @param(OtherData if DataSet is a normal data set, OtherData is
    // a @link(TInterpValuesItem). if DataSet represents a boundary condition,
    // OtherData is a @link(TCustomPhastBoundaryCondition).)
    procedure InitializeMixtureExpression(out Compiler: TRbwParser;
      out MixtureFormula: string; out Expression: TExpression;
      const DataSet: TDataArray; const OtherData: TObject);
    // @name returns a formula that can be used to identify the type of
    // 3D boundary condition (if any) that is assigned with this @classname.
    function ThreeDBoundaryFormula: string;
    // @name returns a formula that can be used to identify the type of
    // 2D boundary condition (if any) that is assigned with this @classname.
    function TwoDBoundaryFormula: string;
    function ZoomBox(VD: TViewDirection): TQrbwZoomBox2;
    function FrameScreenObject(VD: TViewDirection): TScreenObject;
    function IAmACurrentScreenObject: Boolean;
    // @name calls @link(TfrmGoPhast.ScreenObjectsChanged).
    procedure NotifyGuiOfChange(Sender: TObject);
    procedure SetModflowChdBoundary(const Value: TChdBoundary);
    procedure RefreshGui(Sender: TObject);
    procedure SetModflowGhbBoundary(const Value: TGhbBoundary);
    procedure SetModflowWellBoundary(const Value: TMfWellBoundary);
    procedure SetModflowRivBoundary(const Value: TRivBoundary);
    procedure SetModflowDrnBoundary(const Value: TDrnBoundary);
    procedure SetModflowDrtBoundary(const Value: TDrtBoundary);
    procedure SetModflowRchBoundary(const Value: TRchBoundary);
    procedure SetModflowEvtBoundary(const Value: TEvtBoundary);
    procedure SetModflowEtsBoundary(const Value: TEtsBoundary);
    procedure SetModflowResBoundary(const Value: TResBoundary);
    procedure SetModflowLakBoundary(const Value: TLakBoundary);
    procedure GetInterpDistance(const InterpValue: TInterpValuesItem;
      var Distance: Double; const DataSet: TDataArray;
      const LayerIndex, RowIndex, ColIndex: Integer);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignTopDataSetValues(
      Expression: TExpression; const DataSetFunction: string;
      Compiler: TRbwParser; UsedVariables: TStringList;
      OtherData: TObject; const DataSet: TDataArray; AModel: TBaseModel;
      AssignmentLocation: TAssignmentLocation = alAll);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function GetSegments(AModel: TBaseModel): TCellElementSegmentList;
    function CheckGetSegments(AModel: TBaseModel): TCellElementSegmentList;
    function GetSectionCount: integer;
    function GetSectionEnd(const Index: integer): integer;
    function GetSectionStart(const Index: integer): integer;
    function GetSectionClosed(const Index: integer): boolean;
    function GetSectionLength(const Index: integer): integer;
    procedure SetModflowSfrBoundary(const Value: TSfrBoundary);
    function GetModflowSfrBoundary: TSfrBoundary;
    function GetModflowLakBoundary: TLakBoundary;
    function GetModflowResBoundary: TResBoundary;
    function GetModflowEtsBoundary: TEtsBoundary;
    function GetModflowEvtBoundary: TEvtBoundary;
    function GetModflowRchBoundary: TRchBoundary;
    function GetModflowDrtBoundary: TDrtBoundary;
    function GetModflowDrnBoundary: TDrnBoundary;
    function GetModflowRivBoundary: TRivBoundary;
    function GetModflowWellBoundary: TMfWellBoundary;
    function GetModflowGhbBoundary: TGhbBoundary;
    function GetModflowChdBoundary: TChdBoundary;
    function GetFluxBoundary: TFluxBoundary;
    function GetLeakyBoundary: TLeakyBoundary;
    function GetRiverBoundary: TRiverBoundary;
    function GetSpecifiedHeadBoundary: TSpecifiedHeadBoundary;
    function GetSpecifiedSolutionBoundary: TSpecifiedSolutionBoundary;
    function GetWellBoundary: TWellBoundary;
    function GetModflowBoundaries: TModflowBoundaries;
    procedure SubPolygonXLimits(Subject: TObject; out LowerBoundary,
      UpperBoundary: double);
    procedure SubPolygonYLimits(Subject: TObject; out LowerBoundary,
      UpperBoundary: double);
    function GetModflowUzfBoundary: TUzfBoundary;
    procedure SetModflowUzfBoundary(const Value: TUzfBoundary);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure Draw1ElevModflow(const Direction: TViewDirection;
      const Bitmap32: TPersistent; const DrawAsSelected: Boolean; AModel: TBaseModel);
    function GetModflowHeadObservations: THobBoundary;
    procedure SetModflowHeadObservations(const Value: THobBoundary);
    procedure SetSectionStarts(const Value: TValueArrayStorage);
    function GetSectionStarts: TValueArrayStorage;
    procedure CreateSectionStarts;
    procedure SetImportedSectionElevations(const Value: TValueArrayStorage);
    procedure SetImportedHigherSectionElevations(
      const Value: TValueArrayStorage);
    procedure SetImportedLowerSectionElevations(
      const Value: TValueArrayStorage);
    function GetImportedHigherSectionElevations: TValueArrayStorage;
    function GetImportedLowerSectionElevations: TValueArrayStorage;
    function GetImportedSectionElevations: TValueArrayStorage;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    {@name fills @link(T2DSparseRealArray SparseArray) with values based on
     Compiler.CurrentExpression.  Only cells
     whose values ought to be set by the @classname will be set.
     This procedure is only called if @link(ViewDirection)
     = @link(TViewDirection vdTop).
     @param(Compiler is the TRbwParser whose CurrentExpression will
     be used to assign values.)
     @param(SparseArray is a @link(T3DSparseRealArray) whose values
     will be set.)}
    procedure Assign3DElevationsFromTop(const Compiler: TRbwParser;
      const SparseArray: T3DSparseRealArray; AModel: TBaseModel);
    procedure Draw1ElevPhast(const Direction: TViewDirection;
      const Bitmap32: TPersistent; const DrawAsSelected: Boolean);
    procedure Draw1ElevSutra(const Direction: TViewDirection;
      const Bitmap32: TPersistent; const DrawAsSelected: Boolean);
    procedure SetImportedValues(const Value: TValueCollection);
    procedure SetModflowHfbBoundary(const Value: THfbBoundary);
    function GetModflowHfbBoundary: THfbBoundary;
    function GetElevSubscription: TObserver;
    function GetTopElevSubscription: TObserver;
    function GetBottomElevSubscription: TObserver;
    procedure SetIFACE(const Value: TIface);
    procedure SetModpathParticles(const Value: TParticleStorage);
    function StoreImportedHigherSectionElevations: Boolean;
    function StoreImportedLowerSectionElevations: Boolean;
    function StoreImportedSectionElevations: Boolean;
    function StoreImportedValues: Boolean;
    function GetModflowStreamGage: TStreamGage;
    procedure SetModflowStreamGage(const Value: TStreamGage);
    function StoreModflowStreamGage: Boolean;
    procedure RemoveElevationSubscription(Sender: TObject; const AName: string);
    procedure RemoveHigherElevationSubscription(Sender: TObject;
      const AName: string);
    procedure RemoveLowerElevationSubscription(Sender: TObject;
      const AName: string);
    procedure RestoreElevationSubscription(Sender: TObject;
      const AName: string);
    procedure RestoreHigherElevationSubscription(Sender: TObject;
      const AName: string);
    procedure RestoreLowerElevationSubscription(Sender: TObject;
      const AName: string);
    procedure RemoveDataArraySubscription(Sender: TObject;
      const AName: string);
    procedure RestoreDataArraySubscription(Sender: TObject;
      const AName: string);
    function GetElevationFormula: string;
    function GetHigherElevationFormula: string;
    function GetLowerElevationFormula: string;
    procedure CreateOrRetrieveBoundaryFormulaObject(const Index: Integer;
      ADataSet: TDataArray; var FormulaObject: IFormulaObject);
    procedure RestoreBoundaryDataArraySubscription(Sender: TObject;
      const AName: string);
    procedure RemoveBoundaryDataArraySubscription(Sender: TObject;
      const AName: string);
    function GetModflowMnw2Boundary: TMnw2Boundary;
    procedure SetModflowMnw2Boundary(const Value: TMnw2Boundary);
    procedure CacheElevationArrays;
    procedure SetComment(const Value: string);
    procedure SetPointPositionValues(const Value: TPointPositionValues);
    function GetPointPositionValues: TPointPositionValues;
    function ShouldStorePointPositionValues: Boolean;
    function GetModflowHydmodData: THydmodData;
    procedure SetModflowHydmodData(const Value: THydmodData);
    function StoreModflowHydmodData: Boolean;
    procedure SetChildModelName(const Value: string);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function GetChildModel: TBaseModel;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure SetChildModel(const Value: TBaseModel);
    function GetChildModelName: string;
    procedure SetUsedModels(const Value: TUsedWithModelCollection);
    procedure RemoveLakeID_Connection;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // When a @link(TCellElementSegment) at a cell in the parent model
    // is at the interface with a child model, @name adds subsegments
    // that are in the unshared part of the cell.
    procedure AddTopSubSegments(var ASegment: TCellElementSegment;
      AModel: TBaseModel);
    procedure SetPositionLocked(const Value: boolean);
    function GetMt3dmsConcBoundary: TMt3dmsConcBoundary;
    procedure SetMt3dmsConcBoundary(const Value: TMt3dmsConcBoundary);
    function GetMt3dmsTransObservations: TMt3dmsTransObservations;
    procedure SetMt3dmsTransObservations(const Value: TMt3dmsTransObservations);
    function SaveSutraAngle: Boolean;
    procedure SetStoredSutraAngle(const Value: TRealStorage);
    procedure InvalidateModelEvent(Sender: TObject);
    function GetSutraAngle: Double;
    procedure SetSutraAngle(const Value: Double);
    procedure SetSutraBoundaries(const Value: TSutraBoundaries);
    function SaveSutraBoundaries: Boolean;
    procedure ResetFormula(const Compiler: TRbwParser;
      const ErrorMessage, Source: string; var Formula: string;
      DataType: TRbwDataType);
    procedure SetCanInvalidateModel(const Value: boolean);
//    procedure EliminateHoleCells(CellList: TCellAssignmentList);
    procedure SetDuplicatesAllowed(const Value: Boolean);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure EliminateDuplicates(CellList: TCellAssignmentList;
      AModel: TBaseModel);
    function GetModflowStrBoundary: TStrBoundary;
    procedure SetModflowStrBoundary(const Value: TStrBoundary);
    function GetModflowFhbHeadBoundary: TFhbHeadBoundary;
    procedure SetModflowFhbHeadBoundary(const Value: TFhbHeadBoundary);
    function GetModflowFhbFlowBoundary: TFhbFlowBoundary;
    procedure SetModflowFhbFlowBoundary(const Value: TFhbFlowBoundary);
    function Get_SetValuesByInterpolation: boolean;
    procedure SetModflowFmpWellBoundary(const Value: TFmpWellBoundary);
    function GetModflowFmpWellBoundary: TFmpWellBoundary;
    function StoreModflowFmpWellBoundary: Boolean;
    function GetModflowFmpPrecip: TFmpPrecipBoundary;
    procedure SetModflowFmpPrecip(const Value: TFmpPrecipBoundary);
    function StoreModflowFmpPrecip: Boolean;
    function GetModflowFmpRefEvap: TFmpRefEvapBoundary;
    procedure SetModflowFmpRefEvap(const Value: TFmpRefEvapBoundary);
    function StoreModflowFmpRefEvap: Boolean;
    function GetModflowFmpCropID: TFmpCropIDBoundary;
    procedure SetModflowFmpCropID(const Value: TFmpCropIDBoundary);
    function StoreModflowFmpCropID: Boolean;
    function GetModflowFmpFarmID: TFmpFarmIDBoundary;
    procedure SetModflowFmpFarmID(const Value: TFmpFarmIDBoundary);
    function StoreModflowFmpFarmID: Boolean;
    function GetModflowCfpPipes: TCfpPipeBoundary;
    procedure SetModflowCfpPipes(const Value: TCfpPipeBoundary);
    function StoreModflowCfpPipes: Boolean;
    function GetModflowCfpFixedHeads: TCfpFixedBoundary;
    procedure SetModflowCfpFixedHeads(const Value: TCfpFixedBoundary);
    function StoreModflowCfpFixedHeads: Boolean;
    function GetModflowCfpRchFraction: TCfpRchFractionBoundary;
    procedure SetModfloCfpRchFraction(const Value: TCfpRchFractionBoundary);
    function StoreModflowCfpRchFraction: Boolean;
    function GetModflowSwrRain: TSwrRainBoundary;
    procedure SetModflowSwrRain(const Value: TSwrRainBoundary);
    function StoreModflowSwrRain: Boolean;
    function GetModflowSwrEvap: TSwrEvapBoundary;
    procedure SetModflowSwrEvap(const Value: TSwrEvapBoundary);
    function StoreModflowSwrEvap: Boolean;
    function GetModflowSwrLatInflow: TSwrLatInflowBoundary;
    function GetModflowSwrStage: TSwrStageBoundary;
    procedure SetModflowSwrLatInflow(const Value: TSwrLatInflowBoundary);
    procedure SetModflowSwrStage(const Value: TSwrStageBoundary);
    function StoreModflowSwrLatInflow: Boolean;
    function StoreModflowSwrStage: Boolean;
    function GetModflowSwrDirectRunoff: TSwrDirectRunoffBoundary;
    procedure SetModflowSwrDirectRunoff(const Value: TSwrDirectRunoffBoundary);
    function StoreModflowSwrDirectRunoff: Boolean;
    function GetModflowSwrReaches: TSwrReachBoundary;
    procedure SetModflowSwrReaches(const Value: TSwrReachBoundary);
    function StoreModflowSwrReaches: Boolean;
    procedure SetObjectLabel(const Value: TObjectLabel);
    procedure SetObjectVertexLabel(const Value: TObjectVertexLabel);
    function GetModflowMnw1Boundary: TMnw1Boundary;
    procedure SetModflowMnw1Boundary(const Value: TMnw1Boundary);
    function StoreModflowMnw1Boundary: Boolean;
    function GetFootprintWell: TFootprintWell;
    procedure SetFootprintWell(const Value: TFootprintWell);
    function StoreFootprintWell: Boolean;
    procedure DrawVertexLabels(const Bitmap32: TBitmap32); overload;
    procedure DrawVertexLabels(const ACanvas: TCanvas); overload;
    procedure DrawVertexLabels(const Graphic: TPersistent); overload;
    procedure DrawSectionLabels(const Bitmap32: TBitmap32); overload;
    procedure DrawSectionLabels(const ACanvas: TCanvas); overload;
    procedure DrawSectionLabels(const Graphic: TPersistent); overload;
    procedure SetStoredMinimumFraction(const Value: TRealStorage);
    function GetMinimumFraction: double;
    procedure SetMinimumFraction(const Value: double);
    function CellReferenceLength(AModel: TBaseModel; TestSeg: TCellElementSegment): double;
    function GetModflowSwiObservations: TSwiObsBoundary;
    procedure SetModflowSwiObservations(const Value: TSwiObsBoundary);
    function StoreModflowSwiObservations: Boolean;
    function GetGettingSegments(AModel: TBaseModel): Boolean;
    function GetModflowRipBoundary: TRipBoundary;
    procedure SetModflowRipBoundary(const Value: TRipBoundary);
    function StoreModflowRipBoundary: Boolean;
    function GetVertexLabel(CoordIndex, SectionIndex: Integer): string;
    procedure SetMt3dUzfRechConc(const Value: TMt3dUztRchConcBoundary);
    procedure SetMt3dUztSatEtConcBoundary(const Value: TMt3dUztSatEtConcBoundary);
    procedure SetMt3dUztUnsatEtConcBoundary(const Value: TMt3dUztUnsatEtConcBoundary);
    function StoreMt3dUzfRechConc: Boolean;
    function StoreMt3dUztSatEtConcBoundary: Boolean;
    function StoreMt3dUztUnSatEtConcBoundary: Boolean;
    function GetMt3dUzfRechConc: TMt3dUztRchConcBoundary;
    function GetMt3dUztSatEtConcBoundary: TMt3dUztSatEtConcBoundary;
    function GetMt3dUztUnsatEtConcBoundary: TMt3dUztUnsatEtConcBoundary;
    function StoreMt3dUzSsmSinkConcBoundary: Boolean;
    function GetMt3dUzSsmSinkConcBoundary: TMt3dUzSsmSinkConcBoundary;
    procedure SetMt3dUzSsmSinkConcBoundary(
      const Value: TMt3dUzSsmSinkConcBoundary);
    function GetModflowSfr6Boundary: TSfrMf6Boundary;
    procedure SetModflowSfr6Boundary(const Value: TSfrMf6Boundary);
    function GetModflowMawBoundary: TMawBoundary;
    procedure SetModflowMawBoundary(const Value: TMawBoundary);
    procedure SetQuadtreeRefinementLevel(const Value: Integer);
    procedure SetModflow6Obs(const Value: TModflow6Obs);
    function GetModflow6Obs: TModflow6Obs;
    function GetModflowLak6: TLakeMf6;
    procedure SetModflowLak6(const Value: TLakeMf6);
    function StoreModflowLak6: Boolean;
    function StoreModflow6Obs: Boolean;
    function GetModflowMvr: TMvrBoundary;
    procedure SetModflowMvr(const Value: TMvrBoundary);
    function StoreModflowMvr: Boolean;
    function GetModflowUzfMf6Boundary: TUzfMf6Boundary;
    procedure SetModflowUzfMf6Boundary(const Value: TUzfMf6Boundary);
    function StoreModflowUzfMf6Boundary: Boolean;
    function GetMt3dLktConcBoundary: TMt3dLktConcBoundary;
    procedure SetMt3dLktConcBoundary(const Value: TMt3dLktConcBoundary);
    function StoreMt3dLktConcBoundary: Boolean;
    function GetMt3dSftConcBoundary: TMt3dSftBoundary;
    procedure SetMt3dSftConcBoundary(const Value: TMt3dSftBoundary);
    function StoreMt3dSftConcBoundary: Boolean;
    function GetModflowCSub: TCSubBoundary;
    procedure SetModflowCSub(const Value: TCSubBoundary);
    function StoreModflowCSub: Boolean;
    procedure SetModflowSubObservations(const Value: TSubObservations);
    procedure SetModflowSwtObservations(const Value: TSwtObservations);
    function GetModflowSubObservations: TSubObservations;
    function GetModflowSwtObservations: TSwtObservations;
    function StoreModflowSubObservations: Boolean;
    function StoreModflowSwtObservations: Boolean;
    function GetDeleted: boolean;
    function GetGwtCncBoundary: TCncBoundary;
    procedure SetGwtCncBoundary(const Value: TCncBoundary);
    function StoreGwtCncBoundary: Boolean;
    function GetGwtSrcBoundary: TSrcBoundary;
    procedure SetGwtSrcBoundary(const Value: TSrcBoundary);
    function StoreGwtSrcBoundary: Boolean;
    function GetFmp4EfficiencyBoundary: TFmp4EfficiencyBoundary;
    procedure SetFmp4EfficiencyBoundary(const Value: TFmp4EfficiencyBoundary);
    function StoreFmp4EfficiencyBoundary: Boolean;
    procedure CreateFmp4EfficiencyBoundary;
    function GetFmp4EfficiencyImprovementBoundary: TFmp4EfficiencyImprovementBoundary;
    procedure SetFmp4EfficiencyImprovementBoundary(
      const Value: TFmp4EfficiencyImprovementBoundary);
    function StoreFmp4EfficiencyImprovementBoundary: Boolean;
    procedure CreateFmp4EfficiencyImprovementBoundary;
    function GetFmp4BareRunoffFractionBoundary: TFmp4BareRunoffFractionBoundary;
    procedure SetFmp4BareRunoffFractionBoundary(
      const Value: TFmp4BareRunoffFractionBoundary);
    function StoreFmp4BareRunoffFractionBoundary: Boolean;
    procedure CreateFmp4BareRunoffFractionBoundary;

    function GetFmp4BarePrecipitationConsumptionFractionBoundary:
      TFmp4BarePrecipitationConsumptionFractionBoundary;
    procedure SetFmp4BarePrecipitationConsumptionFractionBoundary(
      const Value: TFmp4BarePrecipitationConsumptionFractionBoundary);
    function StoreFmp4BarePrecipitationConsumptionFractionBoundary: Boolean;
    procedure CreateFmp4BarePrecipitationConsumptionFractionBoundary;

    function GetModflowFmpBareEvap: TFmp4BareEvapBoundary;
    procedure SetModflowFmpBareEvap(const Value: TFmp4BareEvapBoundary);
    function StoreModflowFmpBareEvap: Boolean;
    procedure CreateModflowFmpBareEvap;

    function GetModflowFmpDirectRecharge: TFmp4DirectRechargeBoundary;
    procedure SetModflowFmpDirectRecharge(
      const Value: TFmp4DirectRechargeBoundary);
    function StoreModflowFmpDirectRecharge: Boolean;
    procedure CreateModflowFmpDirectRecharge;

    function GetModflowFmpPrecipPotConsumption: TFmp4PrecipPotConsumptionBoundary;
    procedure SetModflowFmpPrecipPotConsumption(
      const Value: TFmp4PrecipPotConsumptionBoundary);
    function StoreModflowFmpPrecipPotConsumption: Boolean;
    procedure CreateModflowFmpPrecipPotConsumption;

    function GetModflowFmp4NrdInfilLocationBoundary: TFmp4NrdInfilLocationBoundary;
    procedure SetModflowFmp4NrdInfilLocationBoundary(
      const Value: TFmp4NrdInfilLocationBoundary);
    function StoreModflowFmp4NrdInfilLocationBoundary: Boolean;
    procedure CreateModflowFmp4NrdInfilLocation;

    function GetModflowFmp4LandUseAreaFraction: TFmp4LandUseAreaFractionBoundary;
    procedure SetModflowFmp4LandUseAreaFraction(
      const Value: TFmp4LandUseAreaFractionBoundary);
    function StoreModflowFmp4LandUseAreaFraction: Boolean;
    procedure CreateModflowFmp4LandUseAreaFractionBoundary;

    function GetModflowFmp4MultLandUseAreaFraction: TFmp4MultLandUseAreaFractionBoundary;
    procedure SetModflowFmp4MultLandUseAreaFraction(
      const Value: TFmp4MultLandUseAreaFractionBoundary);
    function StoreModflowFmp4MultLandUseAreaFraction: Boolean;
    procedure CreateModflowMultFmp4LandUseAreaFractionBoundary;

    function GetModflowFmp4CropCoefficient: TFmp4CropCoefficientBoundary;
    procedure SetModflowFmp4CropCoefficient(
      const Value: TFmp4CropCoefficientBoundary);
    function StoreModflowFmp4CropCoefficient: Boolean;
    procedure CreateModflowFmp4CropCoefficientBoundary;

    function GetModflowFmp4MultCropCoefficient: TFmp4MultCropCoefficientBoundary;
    procedure SetModflowFmp4MultCropCoefficient(
      const Value: TFmp4MultCropCoefficientBoundary);
    function StoreModflowFmp4MultCropCoefficient: Boolean;
    procedure CreateModflowMultCropCoefficientBoundary;

    function GetModflowFmp4ConsumptiveUse: TFmp4ConsumptiveUseBoundary;
    procedure SetModflowFmp4ConsumptiveUse(
      const Value: TFmp4ConsumptiveUseBoundary);
    function StoreModflowFmp4ConsumptiveUse: Boolean;
    procedure CreateModflowConsumptiveUseBoundary;

    function GetModflowFmp4MultConsumptiveUse: TFmp4MultConsumptiveUseBoundary;
    procedure SetModflowFmp4MultConsumptiveUse(
      const Value: TFmp4MultConsumptiveUseBoundary);
    function StoreModflowFmp4MultConsumptiveUse: Boolean;
    procedure CreateModflowMultConsumptiveUseBoundary;

    function GetModflowFmp4Irrigation: TFmp4IrrigationBoundary;
    procedure SetModflowFmp4Irrigation(const Value: TFmp4IrrigationBoundary);
    function StoreModflowFmp4Irrigation: Boolean;
    procedure CreateModflowIrrigationBoundary;

    function GetModflowFmp4MultIrrigation: TFmp4MultIrrigationBoundary;
    procedure SetModflowFmp4MultIrrigation(
      const Value: TFmp4MultIrrigationBoundary);
    function StoreModflowFmp4MultIrrigation: Boolean;
    procedure CreateModflowMultIrrigationBoundary;

    function GetModflowFmp4RootDepth: TFmp4RootDepthBoundary;
    procedure SetModflowFmp4RootDepth(const Value: TFmp4RootDepthBoundary);
    function StoreModflowFmp4RootDepth: Boolean;
    procedure CreateModflowRootDepthBoundary;

    function GetModflowFmp4MultRootDepth: TFmp4MultRootDepthBoundary;
    procedure SetModflowFmp4MultRootDepth(
      const Value: TFmp4MultRootDepthBoundary);
    function StoreModflowFmp4MultRootDepth: Boolean;
    procedure CreateModflowMultRootDepthBoundary;

    function GetModflowFmp4TranspirationFraction: TFmp4TranspirationFractionBoundary;
    procedure SetModflowFmp4TranspirationFraction(
      const Value: TFmp4TranspirationFractionBoundary);
    function StoreModflowFmp4TranspirationFraction: Boolean;
    procedure CreateModflowTranspirationFractionBoundary;

    function GetModflowFmp4MultTranspirationFraction: TFmp4MultTranspirationFractionBoundary;
    procedure SetModflowFmp4MultTranspirationFraction(
      const Value: TFmp4MultTranspirationFractionBoundary);
    function StoreModflowFmp4MultTranspirationFraction: Boolean;
    procedure CreateModflowMultTranspirationFractionBoundary;

    function GetModflowFmp4EvaporationIrrigationFraction: TFmp4EvaporationIrrigationFractionBoundary;
    procedure SetModflowFmp4EvaporationIrrigationFraction(
      const Value: TFmp4EvaporationIrrigationFractionBoundary);
    function StoreModflowFmp4EvaporationIrrigationFraction: Boolean;
    procedure CreateModflowEvaporationIrrigationFractionBoundary;

    function GetModflowFmp4MultEvaporationIrrigationFraction: TFmp4MultEvaporationIrrigationFractionBoundary;
    procedure SetModflowFmp4MultEvaporationIrrigationFraction(
      const Value: TFmp4MultEvaporationIrrigationFractionBoundary);
    function StoreModflowFmp4MultEvaporationIrrigationFraction: Boolean;
    procedure CreateModflowMultEvaporationIrrigationFractionBoundary;

    function GetModflowFmp4FractionOfPrecipToSurfaceWater: TFmp4FractionOfPrecipToSurfaceWaterBoundary;
    procedure SetModflowFmp4FractionOfPrecipToSurfaceWater(
      const Value: TFmp4FractionOfPrecipToSurfaceWaterBoundary);
    function StoreModflowFmp4FractionOfPrecipToSurfaceWater: Boolean;
    procedure CreateModflowFractionOfPrecipToSurfaceWaterBoundary;

    function GetModflowFmp4MultFractionOfPrecipToSurfaceWater: TFmp4MultFractionOfPrecipToSurfaceWaterBoundary;
    procedure SetModflowFmp4MultFractionOfPrecipToSurfaceWater(
      const Value: TFmp4MultFractionOfPrecipToSurfaceWaterBoundary);
    function StoreModflowFmp4MultFractionOfPrecipToSurfaceWater: Boolean;
    procedure CreateModflowMultFractionOfPrecipToSurfaceWaterBoundary;

    function GetModflowFmp4FractionOfIrrigToSurfaceWater: TFmp4FractionOfIrrigToSurfaceWaterBoundary;
    procedure SetModflowFmp4FractionOfIrrigToSurfaceWater(
      const Value: TFmp4FractionOfIrrigToSurfaceWaterBoundary);
    function StoreModflowFmp4FractionOfIrrigToSurfaceWater: Boolean;
    procedure CreateModflowFractionOfIrrigToSurfaceWaterBoundary;

    function GetModflowFmp4MultFractionOfIrrigToSurfaceWater: TFmp4MultFractionOfIrrigToSurfaceWaterBoundary;
    procedure SetModflowFmp4MultFractionOfIrrigToSurfaceWater(
      const Value: TFmp4MultFractionOfIrrigToSurfaceWaterBoundary);
    function StoreModflowFmp4MultFractionOfIrrigToSurfaceWater: Boolean;
    procedure CreateModflowMultFractionOfIrrigToSurfaceWaterBoundary;

    function GetModflowFmp4AddedDemand: TFmp4AddedDemandBoundary;
    procedure SetModflowFmp4AddedDemand(const Value: TFmp4AddedDemandBoundary);
    function StoreModflowFmp4AddedDemand: Boolean;
    procedure CreateModflowAddedDemandBoundary;

    function GetModflowFmp4MultAddedDemand: TFmp4MultAddedDemandBoundary;
    procedure SetModflowFmp4MultAddedDemand(
      const Value: TFmp4MultAddedDemandBoundary);
    function StoreModflowFmp4MultAddedDemand: Boolean;
    procedure CreateModflowMultAddedDemandBoundary;

    function GetModflowFmp4CropHasSalinityDemand: TFmp4CropHasSalinityDemandBoundary;
    procedure SetModflowFmp4CropHasSalinityDemand(
      const Value: TFmp4CropHasSalinityDemandBoundary);
    function StoreModflowFmp4CropHasSalinityDemand: Boolean;
    procedure CreateModflowCropHasSalinityDemandBoundary;

    function GetModflowFmp4MultCropHasSalinityDemand: TFmp4MultCropHasSalinityDemandBoundary;
    procedure SetModflowFmp4MultCropHasSalinityDemand(
      const Value: TFmp4MultCropHasSalinityDemandBoundary);
    function StoreModflowFmp4MultCropHasSalinityDemand: Boolean;
    procedure CreateModflowMultCropHasSalinityDemandBoundary;

    function GetFmp4AddedDemandRunoffSplitBoundary: TFmp4AddedDemandRunoffSplitBoundary;
    procedure SetFmp4AddedDemandRunoffSplitBoundary(
      const Value: TFmp4AddedDemandRunoffSplitBoundary);
    function StoreFmp4AddedDemandRunoffSplitBoundary: Boolean;
    procedure CreateFmp4AddedDemandRunoffSplitBoundary;

    procedure SetDyanmicTimesSeriesCollection(
      const Value: TDynamicTimesSeriesCollections);
    function GetElevationCount: TElevationCount;
    function GetFullObjectIntersectLength: Boolean;
    procedure SetFullObjectIntersectLength(const Value: Boolean);

    function GetModflowTvkBoundary: TTvkBoundary;
    procedure SetModflowTvkBoundary(const Value: TTvkBoundary);
    function StoreModflowTvkBoundary: Boolean;

    function GetModflowTvsBoundary: TTvsBoundary;
    procedure SetModflowTvsBoundary(const Value: TTvsBoundary);
    function StoreModflowTvsBoundary: Boolean;
    procedure SetSectionLabel(const Value: TSectionLabel);

    property SubPolygonCount: integer read GetSubPolygonCount;
    property SubPolygons[Index: integer]: TSubPolygon read GetSubPolygon;
    procedure DeleteExtraSections;
    procedure CreatePhastFluxBoundary;
    procedure CreatePhastLeakyBoundary;
    procedure CreatePhastRiverBoundary;
    procedure CreatePhastSpecifiedHeadBoundary;
    procedure CreatePhastSpecifiedSolutionBoundary;
    procedure CreatePhastWellBoundary;
    procedure CreateElevationSubscription;
    procedure CreateTopElevationSubscription;
    procedure CreateBottomElevationSubscription;
    procedure CreateBoundaryDataSetFormulas;
    procedure CreateBoundaryDataSetSubscriptions;
    procedure CreateBoundaryDataSets;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure Draw2ElevModflow(const Direction: TViewDirection;
      const Bitmap32: TPersistent; AModel: TBaseModel);
    procedure Draw2ElevPhast(const Direction: TViewDirection;
      const Bitmap32: TPersistent);
    procedure Draw2ElevSutra(const Direction: TViewDirection;
      const Bitmap32: TPersistent);
    procedure SetValueStorageField(const Value: TValueArrayStorage;
      var StoredValues: TValueArrayStorage);
    procedure CreateValueArrayStorage(var StoredValues: TValueArrayStorage);
    procedure DrawModflowSideSegmentRightOutsideAbove(
      SidePoints: T2DRealPointArray; LocalDelegate: TCustomScreenObjectDelegate;
      ModflowGrid: TModflowGrid;
      LayerIndex: Integer; ColIndex: Integer; RowIndex: Integer;
      SegmentList: TList);
    procedure DrawModflowSideSegmentAboveOutsideRight(
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      SidePoints: T2DRealPointArray; SegmentList: TList);
    procedure DrawModflowSideSegmentAboveOutsideLeft(
      SidePoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      LocalDelegate: TCustomScreenObjectDelegate; SegmentList: TList);
    procedure DrawModflowSideSegmentLeftOutsideAbove(
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      LocalDelegate: TCustomScreenObjectDelegate; SidePoints: T2DRealPointArray;
      SegmentList: TList);
    procedure DrawModflowSideSegmentAboveRight(SidePoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      SegmentList: TList);
    procedure DrawModflowSideSegmentAboveLeft(
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      LocalDelegate: TCustomScreenObjectDelegate; SidePoints: T2DRealPointArray;
      SegmentList: TList);
    procedure DrawModflowSideSegmentBottomLeft(SidePoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      SegmentList: TList);
    procedure DrawModflowSideSegmentTopLeft(
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      LocalDelegate: TCustomScreenObjectDelegate; SidePoints: T2DRealPointArray;
      SegmentList: TList);
    procedure DrawModflowSideSegmentInsideTopRight(LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      SidePoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; SegmentList: TList);
    procedure DrawModflowSideSegmentInsideBottomRight(
      SidePoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      SegmentList: TList);
    procedure DrawModflowSideSegmentInsideBottomLeft(
      SidePoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      SegmentList: TList);
    procedure DrawModflowSideSegmentInsideTopLeft(ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate; var SidePoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      SegmentList: TList);
    procedure DrawModflowFrontSegmentRightOutsideAbove(
      FrontPoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      SegmentList: TList);
    procedure DrawModflowFrontSegmentAboveOutsideRight(
      LocalDelegate: TCustomScreenObjectDelegate;
      FrontPoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; SegmentList: TList);
    procedure DrawModflowFrontSegmentAboveOutsideLeft(
      FrontPoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      LocalDelegate: TCustomScreenObjectDelegate; SegmentList: TList);
    procedure DrawModflowFrontSegmentLeftOutsideAbove(
      FrontPoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      LocalDelegate: TCustomScreenObjectDelegate; SegmentList: TList);
    procedure DrawModflowFrontSegmentAboveRight(
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      FrontPoints: T2DRealPointArray; SegmentList: TList);
    procedure DrawModflowFrontSegmentAboveLeft(
      FrontPoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      LocalDelegate: TCustomScreenObjectDelegate; SegmentList: TList);
    procedure DrawModflowFrontSegmentBottomLeft(ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate; FrontPoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      SegmentList: TList);
    procedure DrawModflowFrontSegmentTopLeft(
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      LocalDelegate: TCustomScreenObjectDelegate; FrontPoints: T2DRealPointArray;
      SegmentList: TList);
    procedure DrawModflowFrontSegmentInsideTopRight(
      FrontPoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      SegmentList: TList);
    procedure DrawModflowFrontSegmentInsideBottomRight(
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      FrontPoints: T2DRealPointArray; SegmentList: TList);
    procedure DrawModflowFrontSegmentInsideBottomLeft(
      FrontPoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      SegmentList: TList);
    procedure DrawModflowFrontSegmentInsideTopLeft(
      var FrontPoints: T2DRealPointArray;
      RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
      SegmentList: TList);
    procedure DrawModflowTopSegmentRightOutsideAbove(
      RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
      LayerIndex: Integer; ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate);
    procedure DrawModflowTopSegmentAboveOutsideRight(
      RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
      LayerIndex: Integer; ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate);
    procedure DrawModflowTopSegmentAboveOutsideLeft(
      RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
      LayerIndex: Integer; ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate);
    procedure DrawModflowTopSegmentLeftOutsideAbove(
      RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
      LayerIndex: Integer; ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate);
    procedure DrawModflowTopSegmentAboveRight(
      RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
      LayerIndex: Integer; ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate);
    procedure DrawModflowTopSegmentAboveLeft(
      RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
      LayerIndex: Integer; ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate);
    procedure DrawModflowTopSegmentBottomLeft(
      RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
      LayerIndex: Integer; ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate);
    procedure DrawModflowTopSegmentTopLeft(
      RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
      LayerIndex: Integer; ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate);
    procedure DrawModflowTopSegmentInsideTopRight(ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate; RowIndex: Integer; ColIndex: Integer;
      SegmentList: TList; LayerIndex: Integer);
    procedure DrawModflowTopSegmentInsideBottomRight(RowIndex: Integer;
      ColIndex: Integer; SegmentList: TList; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate);
    procedure DrawModflowTopSegmentInsideBottomLeft(SegmentList: TList;
      LayerIndex: Integer; ModflowGrid: TModflowGrid;
      LocalDelegate: TCustomScreenObjectDelegate; RowIndex: Integer; ColIndex: Integer);
    procedure DrawModflowTopSegmentInsideTopLeft(RowIndex: Integer;
      ColIndex: Integer; SegmentList: TList; LayerIndex: Integer;
      ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate);
    procedure DrawSegmentList(const Direction: TViewDirection;
      const Bitmap32: TPersistent; SegmentList: TList);
    procedure UpdateHigherElevationSubscriptions(var NewFormula: string;
      OldFormula: string);
    procedure UpdateLowerElevationSubscriptions(var NewFormula: string;
      OldFormula: string);
    procedure UpdateElevationSubscriptions(var NewFormula: string; OldFormula: string);
    procedure CreateGpcPolygon;
    procedure EvaluateDataArrayExpression(const DataSet: TDataArray;
      var Expression: TExpression; const Compiler: TRbwParser; DataIdentifier: string = '');
    procedure DrawPointMarker(LineColor32: TColor32; FillColor32: TColor32;
      const Bitmap32: TPersistent; IntPoint: TPoint; LineWidth: Single;
      PointWithValue: boolean);
    procedure SetElevationFormulaParser;
    function GetElevationCompiler: TRbwParser;
    procedure SetHigherElevationFormulaParser;
    procedure SetLowerElevationFormulaParser;
    procedure CreateElevationFormulaObject;
    procedure CreateHigherElevationFormulaObject;
    procedure CreateLowerElevationFormulaObject;
    procedure CreateFormulaObjects;
    procedure SetFormulaParsers;
    procedure CreateOrRetrieveFormulaObject(const Index: Integer;
      ADataSet: TDataArray; var FormulaObject: IFormulaObject);
    procedure RemoveSubscriptionFromList(const AName: string; Sender: TObject;
      List: TIformulaList; SubscriptionList: TObjectList);
    procedure RestoreSubscriptionToList(List: TIformulaList; const AName: string;
      Sender: TObject; Subscriptions: TObjectList);
    function GetTestDataArray(const DataSet: TDataArray): TDataArray;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AddTopGridSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt; LowerElevDataSets: TList;
      HigherElevExpression: TExpression; LayerLimit: Integer;
      HigherElevDataSets: TList; LowerElevVariables: TList;
      const PointsRotated: Boolean; HigherElevVariables: TList;
      var RotatedPoints: TEdgePointArray; LowerElevExpression: TExpression);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AddTopMeshSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt; LowerElevDataSets: TList;
      HigherElevExpression: TExpression; LayerLimit: Integer;
      HigherElevDataSets: TList; LowerElevVariables: TList;
      HigherElevVariables: TList; LowerElevExpression: TExpression);
    procedure DrawLabel(const Bitmap32: TBitmap32); overload;
    procedure DrawLabel(const ACanvas: TCanvas); overload;
    procedure DrawLabel(const Graphic: TPersistent); overload;
    procedure InvalidateSelf(Sender: TObject);
    procedure EliminateShortSegments(AModel: TBaseModel);
    procedure UpdateTalksToActive;
    procedure UpdateTalksToWithdrawals;
    procedure UpdateTalksToLakeMf6;
    // functions for IScreenObject
    function RchParameters: IModflowParameters;
    function EvtParameters: IModflowParameters;
    function EtsParameters: IModflowParameters;
    function ChdParameters: IModflowParameters;
    function GhbParameters: IModflowParameters;
    function WelParameters: IModflowParameters;
    function RivParameters: IModflowParameters;
    function DrnParameters: IModflowParameters;
    function DrtParameters: IModflowParameters;
    procedure DeleteSfrParameter(const ParameterName: string);
    procedure DeleteHfbParameter(const ParameterName: string);
    function StrParameters: IModflowParameters;
    function FmpWellParameters: IModflowParameters;
    procedure HandleChangedHfbParameter(const ParameterName: string);
    procedure AssignMf6LakeDataSetValue;
  protected
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    FModel: TBaseModel;
    {
     @name is true during @link(TScreenObjectItem.UpdateScreenObject).}
    FIsUpdating: boolean;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateModel(Model: TBaseModel);
    procedure InvalidateModel;
    // @name indicates what sort of PHAST boundary (if any) is specified
    // by this @classname.
    function PhastBoundaryType: TPhastBoundaryTypes;
    {
    @name assigns a value to a particular cell in DataSet.

      In @name:

      (1) If OtherData = nil
      or not @Link(TInterpValuesItem)(OtherData).Values.UsePHAST_Interpolation,
      @name evaluates Expression using Compiler and assigns
      the result to DataSet
      at the location (LayerIndex, RowIndex, ColIndex).  The variables
      listed in UsedVariables are updated before Expression is evaluated.
      OtherData can be used when overriding AssignCellValue to pass additional
      data to the procedure. DataSet.Annotation at location
      (LayerIndex, RowIndex, ColIndex) is assigned the value of Annotation

      (2) Otherwise,
      values are assigned to DataSet at the location
      LayerIndex, RowIndex, ColIndex using PHAST-style interpolation.
      (See @link(TPhastInterpolationValues).)
      Expression and Compiler are not used in this case and the variables
      listed in UsedVariables are not updated.

      OtherData is set in @Link(IsBoundaryTimeDataSetUsed).

    }
    procedure AssignCellValue(const UsedVariables: TStringList;
      const DataSet: TDataArray; LayerIndex, RowIndex, ColIndex: integer;
      const Compiler: TRbwParser; const Annotation: string;
      var Expression: TExpression; const OtherData: TObject);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name calls (Delegate).@link(TCustomScreenObjectDelegate.
    // AssignValuesToFrontDataSet).
    procedure AssignValuesToFrontDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name calls (Delegate).@link(TCustomScreenObjectDelegate.
    // AssignValuesToSideDataSet).
    procedure AssignValuesToSideDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name initializes variables needed by the formula for the
    // @link(TDataArray) and then assigns values to the data set based
    // on that formula for intersected and enclosed cells or elements.
    // @name is only used when @link(ViewDirection)
    // = @link(TViewDirection vdTop).
    // See @link(AssignValuesToDataSet).
    procedure AssignValuesToTopDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel);
    // @name returns an integer that indicates what type of PHAST boundary
    // condition, if any, is specified by this @classname.
    function BoundaryType: integer;
    // @name returns @True if DataSet can be added to the @classname.
    function CanAddDataSet(const DataSet: TDataArray): boolean;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    {
     @name returns @true if

     @orderedlist(
     @item(DataSet is a @link(TSparseArrayPhastInterpolationDataSet),)

     @item(DataSet is a @link(TCustomPhastDataSet)
     and DataSet is specified by this @classname, or)

     @item(the value of DataSet is set by this @classname
     or if DataSet equals @link(TPhastModel.TopBoundaryType),
     @link(TPhastModel.FrontBoundaryType),
     @link(TPhastModel.SideBoundaryType),
     or @link(TPhastModel.Top2DBoundaryType).)
     )

     OtherData may be changed in @name.
    }

    function DataSetUsed(const DataSet: TDataArray; var OtherData: TObject; AModel: TBaseModel):
      boolean;
    // @name provides a way of accessing @link(Points) using @link(TEdgePoint)s
    // instead of  TPoint2Ds.
    property EdgePoints[const Index: integer]: TEdgePoint read GetEdgePoints
      write SetEdgePoints;
    // @name returns a string that indicates that the value of a cell or element
    // was specified by being enclosed in this @classname and how the value
    // at that location was determined.
    function EncloseAnnotation(const DataSetFormula: string;
      const OtherData: TObject): string;
    // @name gets a TRbwParser consistent with Orientation and
    // @link(EvaluatedAt).
    function GetCompiler(const Orientation: TDataSetOrientation): TRbwParser;
      overload;
    function GetCompiler(const Orientation: TDataSetOrientation;
      const EvaluatedAt: TEvaluatedAt): TRbwParser; overload;
    function Get1DCompiler: TRbwParser;
    // @name sets RotatedPoints to be an array of
    // TPoint2Ds in the coordinate system of the grid.
    procedure GetRotatedPoints(out RotatedPoints: TRealPointArray);

    {@name
     @orderedlist(
     @item(gets the proper DataSetFormula to apply to DataSet,)
     @item(gets the proper TRbwParser for DataSet, and)
     @item(compiles DataSetFormula to get Expression.)
     )
     However, it doesn't need to do
     any of that is PHAST-style interpolation is used.
     See @link(TPhastInterpolationValues).

     @param(Compiler is the correct TRbwParser to use with DataSet.)
     @param(DataSetFormula is the formula that will be used to assign
     values to DataSet.)
     @param(Expression is the TExpression that will be used to assign
     values to DataSet.)
     @param(DataSet is the @link(TDataArray) to which values will be assigned.)
     @param(OtherData can be used to pass other data to @name.
       It is an TInterpValuesItem)}
    procedure InitializeExpression(out Compiler: TRbwParser;
      out DataSetFormula: string; out Expression: TExpression;
      const DataSet: TDataArray; const OtherData: TObject);
    // Intersection is used when determining whether adding a point to a
    // @classname will cause it to intersect itself.
    // Point1 and Point2 define a line segment.
    // IntersectPoint is the point of intersection (if one exists) between
    // the last section of @classname and the line segment.
    // @name returns True if the line segment intersects the @classname.
    function Intersection(const Point1, Point2: TPoint2D; StartIndex: Integer;
      out IntersectPoint: TPoint2D): TIntersectResult;
    // @name returns @true if DataSet is specified by a boundary condition and,
    // if so, sets OtherData to the relevant
    // @link(TCustomPhastBoundaryCondition).
    // if @name returns @false, OtherData is set to nil.
    function IsBoundaryTimeDataSetUsed(const DataSet: TDataArray;
      out OtherData: TObject): boolean;
    procedure Loaded; override;
    // The purpose of @name is to get First and Last.  They are
    // the indices of the first and last layer, row, or column
    // perpendicular to the plain of @link(TViewDirection) that are
    // enclosed or intersected by the @classname.
    //
    // In commented-out code, First and Last and changed to
    // frmGoPhast.PhastGrid.@link(TCustomModelGrid.LayerCount) for river
    // data sets.  It has been commented-out because it
    // messes up the display of the river
    // data on the status bar.
    //
    // It would be good to find a way around
    // this problem.
    procedure OtherIndex(const LayerOrRow, RowOrColumn: integer;
      out First, Last: integer; const DataSet: TDataArray);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name sets RotatedPoints to be Points rotated to the grid coordinate
    // system. TempMinX, TempMinY, TempMaxX, TempMaxY are set to the minimum
    // and maximum X and Y coordinates of any of the points in the @classname
    //  in the Grid coordinate system.
    procedure RotatePoints(AModel: TBaseModel;
      out RotatedPoints: TEdgePointArray;
      out TempMinX, TempMinY, TempMaxX, TempMaxY: double);
    // See @link(ElevationFormula).
    // @name makes changes in the @link(TObserver)s as required.
    procedure SetElevationFormula(NewFormula: string); virtual;
    // @name sets @link(TObserver.UpToDate) to true as well as
    // @link(FElevSubscription), @link(FTopElevSubscription), and
    // @link(FBottomElevSubscription).
    procedure SetGeometryUpToDate; virtual;
    // See @link(HigherElevationFormula).
    // @name makes changes in the @link(TObserver)s as required.
    procedure SetHigherElevationFormula(NewFormula: string); virtual;
    // See @link(LowerElevationFormula).
    // @name makes changes in the @link(TObserver)s as required.
    procedure SetLowerElevationFormula(NewFormula: string); virtual;
    // See @link(SubscriptionUnit.TObserver.Name).
    procedure SetName(const Value: TComponentName); override;
    // @name calls inherited.  Then if Value is @True,
    // @unorderedList(
    // @item(@name sets all the TObserver.@link(TObserver.UpToDate)
    //   to @true for all @link(TObserver)s in @link(FDataSetSubscriptions).)
    // @item(@name sets all the TObserver.@link(TObserver.UpToDate)
    //   to @true for all @link(TObserver)s in
    //   @link(FDataSetMixtureSubscriptions).))
    procedure SetUpToDate(const Value: boolean); override;
    // See @link(ViewDirection).
    procedure SetViewDirection(const Value: TViewDirection); virtual;
    // @name is used to access the formula for the Mixture specified by
    // Index when PHAST style interpolation is used with a mixture.
    // See @link(TPhastInterpolationValues).
    property MixtureDataSetFormula[const Index: integer]: string
      read GetMixtureDataSetFormula write SetMixtureDataSetFormula;
    // @name calls TCustomPhastBoundary.@link(
    // TCustomPhastBoundary.UpdateMixtureExpression)
    // for @link(FluxBoundary), @link(LeakyBoundary),
    // @link(RiverBoundary), @link(SpecifiedHeadBoundary),
    // and @link(WellBoundary).
    procedure UpdateMixtureExpression;
    procedure UpdateFormulaExpression;
  public
    // @name provides a string that can be used in annotations to indicate
    // that the value of a cell or element has been set by virtue of being
    // intersected by a @classname and how the value
    // at that location was determined.
    function IntersectAnnotation(const DataSetFormula: string;
      const OtherData: TObject): string;
    // @name fills UsedVariables with the names of the variables
    // use by Expression.  It initializes the @link(TDataArray)s associated
    // with those variables.
    procedure InitializeVariables(const UsedVariables: TStringList;
      const DataSet: TDataArray; const Expression: TExpression;
      const Compiler: TRbwParser); virtual;
    // in @name, DataSet can be, but doesn't have to be, nil.
    // UsedVariables can be empty.
    procedure InitilizeVariablesWithNilDataSet(const Expression: TExpression;
      Model: TBaseModel; const DataSet: TDataArray;
      const UsedVariables: TStringList; const Compiler: TRbwParser);
    { @name gets the variables names from UsedVariables and gets the
      corresponding TCustomValues from Compiler.  It sets each TCustomValue
      to have the value of its corresponding data set at the location specified
      by Layer, Row, Column.  However, if the corresponding @link(TDataArray),
      is a 2D data set, either Layer, Row, or Column is changed to zero.}
    procedure UpdateVariables(const UsedVariables: TStringList;
      const DataSet: TDataArray; Layer, Row, Column: integer;
      const Compiler: TRbwParser; EvaluatedAt: TEvaluatedAt = eaBlocks;
      AModel: TBaseModel = nil);
    function CoordinateCaption: string;
    function HigherCoordinateCaption: string;
    function LowerCoordinateCaption: string;
    function StoreModflowHfbBoundary: Boolean;
    function StoreModflowMnw2Boundary: Boolean;
    function StoreMt3dmsConcBoundary: Boolean;
    function StoreMt3dmsTransObservations: Boolean;
    function StoreModflowUzfBoundary: Boolean;
    function StoreModflowHeadObservations: Boolean;
    function StoreModflowSfrBoundary: Boolean;
    function StoreModflowRchBoundary: Boolean;
    function StoreModflowEvtBoundary: Boolean;
    function StoreModflowEtsBoundary: Boolean;
    function StoreModflowResBoundary: Boolean;
    function StoreModflowLakBoundary: Boolean;
    function StoreModflowChdBoundary: Boolean;
    function StoreModflowDrnBoundary: Boolean;
    function StoreModflowDrtBoundary: Boolean;
    function StoreModflowGhbBoundary: Boolean;
    function StoreModflowRivBoundary: Boolean;
    function StoreModflowWellBoundary: Boolean;
    function StoreModflowStrBoundary: Boolean;
    function StoreModflowSfr6Boundary: Boolean;
    function StoreModflowMawBoundary: Boolean;
    function StoreModflowFhbHeadBoundary: Boolean;
    function StoreModflowFhbFlowBoundary: Boolean;
    // @name determines whether @link(WellBoundary) is stored.
    function StoreWell: boolean;
    // @name determines whether @link(FluxBoundary) is stored.
    function StoreFlux: boolean;
    // @name determines whether @link(RiverBoundary) is stored.
    function StoreRiver: boolean;
    // @name determines whether @link(SpecifiedHeadBoundary) is stored.
    function StoreSpecifiedHead: boolean;
    // @name determines whether @link(LeakyBoundary) is stored.
    function StoreLeaky: boolean;
    property ModflowBoundaries: TModflowBoundaries read GetModflowBoundaries;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name contains a set of higher elevations for points that
    // could be in the @classname.  It is indexed by [Layer, Row, Column].
    property Higher3DElevations[AModel: TBaseModel]: T3DSparseRealArray
      read GetHigher3DElevations;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function IsHigher3DElevationAssigned(Col, Row, Layer: integer;
      Model: TBaseModel): boolean;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name contains a set of lower elevations for points that
    // could be in the @classname.  It is indexed by [Layer, Row, Column].
    property Lower3DElevations[AModel: TBaseModel]: T3DSparseRealArray
      read GetLower3DElevations;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function IsLower3DElevationAssigned(Col, Row, Layer: integer;
      Model: TBaseModel): boolean;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
{    procedure GetCellsToAssign(const Mesh: IMesh3D;
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel); overload;}
    procedure GetModelDimensions(AModel: TBaseModel; var NumberOfLayers, NumberOfRows,
      NumberOfColumns: Integer);
  public
    property FullObjectIntersectLength: Boolean read GetFullObjectIntersectLength
      write SetFullObjectIntersectLength;
    procedure UpdateUzfGage1and2;
    procedure UpdateUzfGage3;
    procedure CacheSegments;
    procedure BeginUpdate;
    procedure EndUpdate;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetModpathCellList(CellList: TCellAssignmentList;
      AModel: TBaseModel);
    property ElevSubscription: TObserver read GetElevSubscription;
    property TopElevSubscription: TObserver read GetTopElevSubscription;
    property BottomElevSubscription: TObserver read GetBottomElevSubscription;

    function Delegate: TCustomScreenObjectDelegate;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignNumericValueToDataSet({const Grid: TCustomModelGrid;}
      const DataSet: TDataArray; Value: double; AModel: TBaseModel);
    procedure CreateChdBoundary;
    procedure CreateDrnBoundary;
    procedure CreateDrtBoundary;
    procedure CreateEtsBoundary;
    procedure CreateEvtBoundary;
    procedure CreateGhbBoundary;
    procedure CreateLakBoundary;
    procedure CreateRchBoundary;
    procedure CreateResBoundary;
    procedure CreateRivBoundary;
    procedure CreateSfrBoundary;
    procedure CreateSfr6Boundary;
    procedure CreateStrBoundary;
    procedure CreateWelBoundary;
    procedure CreateUzfBoundary;
    procedure CreateHfbBoundary;
    procedure CreateHeadObservations;
    procedure CreateGagBoundary;
    procedure CreateMnw1Boundary;
    procedure CreateMnw2Boundary;
    procedure CreateMt3dmsConcBoundary;
    procedure CreateMt3dmsTransObservations;
    procedure CreateMt3dUzfRchConcBoundary;
    procedure CreateMt3dUztSatEtConcBoundary;
    procedure CreateMt3dUztUnsatEtConcBoundary;
    procedure CreateMt3dUzSsmSinkConcBoundary;
    procedure CreateMt3dLktConcBoundary;
    procedure CreateMt3dSftConcBoundary;
    procedure CreateFhbHeadBoundary;
    procedure CreateFhbFlowBoundary;
    procedure CreateFarmWell;
    procedure CreateFarmPrecip;
    procedure CreateFarmRefEvap;
    procedure CreateFarmCropID;
    procedure CreateFarmID;
    procedure CreateCfpBoundary;
    procedure CreateCfpFixedHeads;
    procedure CreateCfpRchFraction;
    procedure CreateSwrRainBoundary;
    procedure CreateSwrEvapBoundary;
    procedure CreateSwrLatInflowBoundary;
    procedure CreateSwrStageBoundary;
    procedure CreateSwrDirectRunoffBoundary;
    procedure CreateSwrReachesBoundary;
    procedure CreateSwiObsBoundary;
    procedure CreateFootprintWell;
    procedure CreateRipBoundary;
    procedure CreateMawBoundary;
    procedure CreateMf6Obs;
    procedure CreateLakMf6Boundary;
    procedure CreateModflowMvr;
    procedure CreateUzfMf6Boundary;
    procedure CreateCSubBoundary;
    procedure CreateSubObservations;
    procedure CreateSwtObservations;
    procedure CreateGwtCncBoundary;
    procedure CreateGwtSrcBoundary;
    procedure CreateTvkBoundary;
    procedure CreateTvsBoundary;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function ModflowDataSetUsed(DataArray: TDataArray; AModel: TBaseModel): boolean;
    property SectionCount: integer read GetSectionCount;
    property SectionStart[const Index: integer]: integer read GetSectionStart;
    property SectionEnd[const Index: integer]: integer read GetSectionEnd;
    property SectionClosed[const Index: integer]: boolean read GetSectionClosed;
    property SectionLength[const Index: integer]: integer read GetSectionLength;
    procedure InvalidateSegments;
    procedure MovePointsWhenCreatingScreenObjectByDeletingEdge(
      DeletedEdge: integer; ExistingObject: TScreenObject);
    function AllSectionsClosed: boolean;
    {
      @name indicates whether or not @link(SelectedVertexCount) is
      up-to-date.  If it isn't, it will be recalculated when needed.}
    property NeedToResetSelectedVertexCount: boolean
      read FNeedToResetSelectedVertexCount
      write FNeedToResetSelectedVertexCount;
    Procedure DeleteEdge(EdgeToDelete: integer);
    // @name calls TCustomPhastBoundaryCondition.@link(
    // TCustomPhastBoundaryCondition.ResetMixtureSubscription)
    // for each solution boundary condition.
    procedure ResetBoundaryMixtureSubscriptions;
    // @name sets UpToDate to @true for all members of
    // @link(FDataSetMixtureSubscriptions)
    procedure ResetMixtureSubscriptions;
    procedure MovePoints(var Dest: TRealPointArray);
    procedure MoveToPoints(const SourcePoints: TRealPointArray);
    procedure MoveSelectedPoints(var Dest: TBooleanDynArray);
    procedure MoveToSelectedPoints(var Source: TBooleanDynArray);
    property BottomElevation: real read FBottomElevation;
    property TopElevation: real read FTopElevation;
    // @Link(BoundaryDataSets) are data sets associated with a boundary
    // condition whose values are set by the object.
    // An example is the hydraulic conductivity of a leaky boundary.
    // @name adds a boundary data set to @Link(BoundaryDataSets).
    // The position of the boundary data sets in @Link(BoundaryDataSets) is
    // the result of the function.  This result may then be used to set a
    // formula for the data set in @Link(BoundaryDataSetFormulas).
    // @SeeAlso(AddDataSet) @SeeAlso(DeleteBoundaryDataSet)
    function AddBoundaryDataSet(const DataSet: TDataArray): integer;
    // @Link(DataSets) are data sets whose values are set by the object.
    // An Example is Kx.
    // @name adds a data set to @Link(DataSets).
    // The position of the data sets in @Link(DataSets) is
    // the result of the function.  This result may then be used to set a
    // formula for the data set in @Link(DataSetFormulas).
    //
    // @name also does what it takes to ensure that
    // DataSet will be notified when there is a change to this
    // @classname.
    // @SeeAlso(AddBoundaryDataSet) @SeeAlso(DeleteDataSet)
    function AddDataSet(const DataSet: TDataArray): Integer; virtual;
    // @name adds a point to @Link(Points).  If CheckPoint is true,
    // each point is checked for
    // validity when added.  A point is invalid if it causes the @classname to
    // cross itself.
    procedure AddPoint(APoint: TPoint2D; NewPart: boolean);
    // In @name, if Source is a @classname, its properties are copied into
    // the current @classname.
    procedure Assign(Source: TPersistent); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToModflowDataSet(//const Grid: TCustomModelGrid;
      const DataSet: TDataArray; const Formula: string; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToSutraDataSet(const Mesh: TSutraMesh3D;
      const DataSet: TDataArray; const Formula: string; AModel: TBaseModel;
      const UsedFormula: string);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name is a key method of @classname.  It is used
    // to assign values to a data set based on the function for that data
    // set. @name first checks whether it should set the values
    // DataSet and if so, does.  It calls one of the protected
    // procedures  @Link(AssignValuesToTopDataSet),
    // @Link(AssignValuesToFrontDataSet),
    // or @Link(AssignValuesToSideDataSet)
    // to do most of the work.
    procedure AssignValuesToDataSet(const DataSet: TDataArray;
      AModel: TBaseModel; UseLgrEdgeCells: TLgrCellTreatment); virtual;
    // @name is used with MODFLOW 6 lakes and SUTRA PEST observations.
    procedure AssignValuesWithCellList(Formula: String;
      AModel: TBaseModel; CellList: TCellLocationList; Results: TRealList;
      var Annotation: string; DataIdentifier: string);
    // @name is the number of boundary @link(BoundaryDataSets) affected
    // by the @classname.
    function BoundaryDataSetCount: integer;
    // @name are data sets associated with a boundary
    // condition whose values are set by the object.
    // An example is the hydraulic conductivity of a leaky boundary.
    // @SeeAlso(AddBoundaryDataSet) @SeeAlso(BoundaryDataSetFormulas)
    // @SeeAlso(IndexOfBoundaryDataSet) @SeeAlso(InsertBoundaryDataSet)
    // @SeeAlso(RemoveDataSet)
    property BoundaryDataSets[const Index: integer]: TDataArray
      read GetBoundaryDataSets write SetBoundaryDataSets;
    // @name are the formulas associated with each
    // member of @Link(BoundaryDataSets).
    property BoundaryDataSetFormulas[const Index: integer]: string
      read GetBoundaryDataSetFormulas write SetBoundaryDataSetFormulas;
    // @name returns @True if this @classname
    // affects a boundary condition.
    function BoundaryTypeUsed: TPhastBoundaryTypes;
    property CanInvalidateModel: boolean read FCanInvalidateModel
      write SetCanInvalidateModel;
    // @name is an array of TPoints that represent the object.
    // These coordinates are recalculated as needed when the magnification or
    // view of the model changes.  For example, panning causes them to be
    // recalculated.
    property CanvasCoordinates: TPointArray read GetCanvasCoordinates;
    // @name is the number of points that the @classname can hold without
    // resizing the array that holds them.
    property Capacity: integer read FCapacity write SetCapacity;
    // @name is an event handler for TObserver.OnUpToDateSet for
    // @Link(FElevSubscription), @Link(FTopElevSubscription), and
    // @Link(FBottomElevSubscription). If Sender
    // ( = @link(SubscriptionUnit.TObserver)) isn't up to date, the
    // @classname is invalidated.  (See @link(Invalidate).)
    procedure Changed(Sender: TObject);
    // @name removes all the members from
    // @Link(BoundaryDataSets).
    procedure ClearBoundaryDataSets; virtual;
    // @name clears @link(InterpValues).
    // @name also unsubscribes to everything in
    // @link(FDataSetMixtureSubscriptions) and clears
    // @link(FDataSetMixtureSubscriptions).
    // @name removes all the members from
    // @Link(DataSets).
    // This involves unsubscribing to all the subscriptions related to
    // all members of @Link(DataSets)
    procedure ClearDataSets; virtual;
    // @name removes all the members from @Link(Points).
    procedure ClearPoints;
    // If any individual vertices in an object are selected, @name
    // unselects them.
    procedure ClearSelectedVertices;
    // @name returns true if an object is closed.
    function Closed: boolean;
    // @name copies TPoint2Ds from Points into Destination.
    // Position is the location in Destination where the first of the
    // Points will be copied.  Start is the location of the first point
    // in Points to be copied.  Count is the number of points to be copied.
    // However, the number of points actually copied may be less than Count
    // if there are not enough points in Count
    procedure CopyPoints(var Destination: TRealPointArray;
      const Position, Start: integer; var Count: integer);
    // @name is the number of vertices in an object.  Normally setting Count
    // to a value larger than the current value means that new vertices
    // will be written into the FPoints array by some mechanism other than
    // the @Link(AddPoint) method.  In such cases, it is important to make
    // sure that the added vertices are valid.
    property Count: integer read GetCount write SetCount;
    // @name creates a @classname.
    constructor Create(AnOwner: TComponent); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name creates a @classname, assigns it a name and if
    // UndoAble is true, creates a TUndoCreateScreenObject that may be used to
    // undo or redo creation of the @classname.
    constructor CreateWithViewDirection(const Model: TBaseModel;
      const AViewDirection: TViewDirection;
      out UndoCreateScreenObject: TCustomUndo; const UndoAble: boolean = True);
      virtual;
    // @name is the number of @link(TDataArray TDataArrays)
    // (and their associated
    // formulas) that can be held without increasing the size of the TList
    // that holds them.  See @Link(DataSets).
    property DataSetCapacity: integer read GetDataSetCapacity
      write SetDataSetCapacity;
    // @name is the number of @link(TDataArray TDataArrays)
    // (and their associated
    // formulas) whose properties will be set by the @classname.
    // See @Link(DataSets).
    property DataSetCount: integer read GetDataSetCount;
    // @name accesses the @link(TDataArray TDataArrays)
    // whose values will be set by the
    // @classname.  The number of members in DataSets is @Link(DataSetCount).
    // The number of @link(TDataArray TDataArrays)
    // that can be held in DataSets is
    // @Link(DataSetCapacity).
    // @SeeAlso(AddDataSet) @SeeAlso(DataSetFormulas)
    // @SeeAlso(IndexOfDataSet) @SeeAlso(RemoveDataSet)
    property DataSets[const Index: integer]: TDataArray read GetDataSets
      write SetDataSets;

    // @name contains the formulas used to set the values of
    // the corresponding member of @Link(DataSets).
    property DataSetFormulas[const Index: integer]: string
      read GetDataSetFormulas write SetDataSetFormulas;
    // @name removes a @link(TDataArray) from @Link(BoundaryDataSets)
    // and the corresponding formula from @Link(BoundaryDataSetFormulas).
    // @SeeAlso(AddBoundaryDataSet) @SeeAlso(DeleteDataSet)
    procedure DeleteBoundaryDataSet(const Index: Integer);
    // @name indicates whether or not the user has deleted the @classname.
    // Deleting a screen object does
    // not cause it to be destroyed.  It is merely
    // put in a state where it is not displayed and does not affect the values
    // of any @link(DataSetUnit.TDataArray).
    // This is accomplished by exiting immediately from
    // @Link(Draw) and @Link(AssignValuesToDataSet) if Deleted is true.
    property Deleted: boolean read GetDeleted write SetDeleted;
    // @abstract(@name deletes the @link(TDataArray) specified by Index from
    // the list of @link(TDataArray)s affected by this @classname.)
    // @name removes a @link(DataSetUnit.TDataArray)
    // from @Link(DataSets) and the
    // corresponding formula from @Link(DataSetFormulas).
    // @SeeAlso(AddDataSet) @SeeAlso(DeleteBoundaryDataSet)
    procedure DeleteDataSet(const Index: Integer); virtual;
    // @name removes the point at Index from @Link(Points).
    // It does not check that removing that point will still keep the Points
    // all valid.  For example, it does
    // not check that the screen object does not
    // cross itself after deleting a point.
    procedure DeletePoint(const Index: Integer);
    // @name destroys the @classname.  @name should not be called directly.
    // Call Free instead.
    destructor Destroy; override;
    // @name returns the distance from Location to the closest
    // point on the @classname.
    // ClosestLocation will be set to that location.
    // Anisotropy is taken into account when computing the distance.
    function DistanceToScreenObject(const Location: TPoint2D;
      out ClosestLocation: TPoint2D; const Anisotropy: real; out SectionIndex: integer): real;
    // @name is the primary routine for drawing a @classname.  Bitmap32 is the
    // TBitmap32 on which the @link(TScreenObject) should be drawn.  Direction
    // is the direction from which the @classname will be viewed.
    // DrawAsSelected indicates whether the screen object should be drawn as a
    // selected @classname. (See @Link(DrawSelected).)
    procedure Draw(Const Bitmap32: TPersistent;
      const Direction: TViewDirection;
      const DrawAsSelected: Boolean = False); virtual;
    procedure Draw3D;
    // If a @classname is @Link(Selected), @name calls @Link(Draw) with
    // DrawAsSelected = True.  DrawSelected is used for drawing just the
    // selected @classname so that the entire view of the model doesn't need
    // to be redrawn when just the selected screen objects have changed.
    procedure DrawSelected(
      const BitMap32: TPersistent;
      const Direction: TViewDirection);
    // @name returns the @link(TCustomPhastBoundaryCollection)
    // one of whose @link(TPhastTimeList)s is TimeList.
    function GetBoundaryCollection(const TimeList: TPhastTimeList):
      TCustomPhastBoundaryCollection;
    // @name returns the position of DataSet in
    // @Link(BoundaryDataSets).
    function IndexOfBoundaryDataSet(const DataSet: TDataArray): integer;
    // IndexOfDataSet returns the position of DataSet in
    // @Link(DataSets).
    function IndexOfDataSet(const DataSet: TDataArray): integer;
    function IndexOfDataSetName(const DataSetName: string): integer;
    // @name returns the first position of APoint in Points.
    // An exact match is required.
    function IndexOfPoint(const APoint: TPoint2D): integer;
    // @name inserts DataSet in @Link(BoundaryDataSets) at
    // Index if it is not already in @Link(BoundaryDataSets).
    procedure InsertBoundaryDataSet(const Index: Integer;
      const DataSet: TDataArray); virtual;
    // @name inserts APoint in @Link(Points) at Index. It does not
    // check that the point that is inserted will leave the @classname in
    // a valid state.  For instance, the @classname might cross itself after
    // @name.
    procedure InsertPoint(const Index: Integer; const APoint: TPoint2D);
    // @name is called when the @classname has been changed.  Everything
    // that depends on the @classname gets notified of the change
    procedure Invalidate;
    // @name is called when the @Link(CanvasCoordinates) need
    // to be recalculated.  The recalculation does not occur until the
    // next time the @Link(CanvasCoordinates) are needed.
    procedure InvalidateCoordinates;
    // @name returns true if (X, Y) is inside the @classname.
    function IsPointInside(const X, Y: real; out SectionIndex: integer):
      boolean; overload;
    // @name returns true if APoint is inside the @classname.
    function IsPointInside(const APoint: TPoint2D; out SectionIndex: integer):
      boolean; overload;
    // @name is the largest X coordinate of any of the points in @Link(Points).
    property MaxX: real read GetMaxX;
    // @name is the largest Y coordinate of any of the points in @Link(Points).
    property MaxY: real read GetMaxY;
    // @name returns the methods that the screen object uses to set the
    // properties of @link(TDataArray)s.
    function Methods: string;
    // @name is the smallest X coordinate of any of the points in @Link(Points).
    property MinX: real read GetMinX;
    // @name is the smallest Y coordinate of any of the points in @Link(Points).
    property MinY: real read GetMinY;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name is nil or the @link(TPhastModel) that owns this @classname.
    Property Model: TBaseModel read FModel;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name returns the 2D area of intersection between an
    // object and an individual cell or element.
    function ObjectIntersectArea(const Col, Row, Layer: integer;
      AModel: TBaseModel): real;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name returns the 2D length of intersection between an
    // object and an individual cell or element.
    function ObjectIntersectLength(const Col, Row, Layer: integer;
      AModel: TBaseModel): real;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function ObjectSectionIntersectLength(const Col, Row, Layer,
      Section: integer; AModel: TBaseModel): real;
    // @name gives the real-world coordinates of the vertices of the
    // @classname.
    // For a @classname whose @Link(ViewDirection)
    // = @link(TViewDirection vdTop),
    // @name gives the X and Y coordinates of the @classname.
    // For a @classname whose @Link(ViewDirection) =
    // @link(TViewDirection vdFront),
    // @name gives the X and Z coordinates of the @classname (with the Y of
    // each TPoint2D representing the Z coordinate).
    // For a @classname whose @Link(ViewDirection)
    // = @link(TViewDirection vdSide),
    // @name gives the Y and Z coordinates of the @classname (with the X of
    // each TPoint2D representing the Z coordinate).
    // @SeeAlso(SelectedVertices)
    property Points[const Index: integer]: TPoint2D read GetPoints
      write SetPoints;
    // @name removes DataSet from either @Link(DataSets) or
    // @Link(BoundaryDataSets).
    function RemoveDataSet(const DataSet: TDataArray): Integer; virtual;
    // @name sets the UpToDate property of
    // all subscriptions related to members of @Link(BoundaryDataSets) to @True;
    procedure ResetBoundaryDataSetSubscriptions;
    // @name sets the UpToDate property of
    // all subscriptions related to members of @Link(DataSets) to True;
    procedure ResetDataSetSubscriptions;
    {
     @name calls
     @unorderedlist(
     @item(@link(ResetBoundaryDataSetSubscriptions),)
     @item(@link(ResetDataSetSubscriptions),)
     @item(@link(ResetMixtureSubscriptions), and)
     @item(@link(ResetBoundaryMixtureSubscriptions)))
    }
    procedure ResetSubscriptions; 
    // @name is the area of the object.  The value is stored and only
    // recalculated when it is no longer up-to-date.
    function ScreenObjectArea: real;
    // @name is the 2D length of the object.  Its value is stored and
    // is only recalculated when it is no longer up-to-date.
    function ScreenObjectLength: real;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name is a list of the cell or element segments of the object.
    // Each segment is the intersection of one segment of the object with an
    // individual cell or element in the grid.
    // @Link(EvaluatedAt) determines whether the segments in Segments is
    // a cell segment or an element segment.
    property Segments[AModel: TBaseModel]: TCellElementSegmentList
      read CheckGetSegments;
    property GettingSegments[AModel: TBaseModel]: Boolean read GetGettingSegments;
    // If the mouse coordinates (X, Y) are inside the @classname, @name
    // returns True.  However, the @Link(Selected) property is not changed
    // by calling Select.
    function Select(const XScreenCoordinate, YScreenCoordinate: integer):
      boolean;
    // @name returns -1 if the mouse coordinates X,Y are not on any
    // edge of the @classname.  Otherwise it returns the index of the
    // edge on which the point X,Y lies.
    function SelectEdge(const X, Y: integer): integer;
    // @name tells how many points in @Link(Points) are selected.
    property SelectedVertexCount: integer read GetSelectedVertexCount;
    // For each member of @Link(Points), @name tells whether or not
    // that vertex is selected.
    property SelectedVertices[const Index: integer]: boolean
      read GetSelectedVertices write SetSelectedVertices;
    // @name is a representation of the @classname in canvas coordinates.
    // It is used when determining whether a "lasso" drawn by the user
    // intersects the @classname.
    property SelectLines: TLines read GetSelectLines;
    // @name sets the @link(SubscriptionUnit.TObserver.Name)
    // and @link(ViewDirection) of the @classname.
    // If UndoAble is true, it also creates a @link(TUndoCreateScreenObject).
    // It sets the elevation formulas to default values.
    procedure UpdateScreenObjectWithName(const AName: string;
      const AViewDirection: TViewDirection;
      out UndoCreateScreenObject: TCustomUndo; const UndoAble: boolean = True);
      reintroduce; virtual;
    // @name converts OriginalName to a name that is valid as a name for
    // a @classname. It does not ensure that the resulting name is unique.
    class function ValidName(const OriginalName: string): string;
    // @name tests whether any point in the @classname is closer to
    // Location than Distance.  If so, ClosestLocation and Distance
    // are updated to reflect the values for the @classname.
    // Distance and ClosestLocation are changed if and only
    // if @name returns @True.
    function IsAnyPointCloser(const Location: TPoint2D;
      var Distance: real; out ClosestLocation: TPoint2D; var SectionIndex: integer;
      const Anisotropy: real): boolean;
    function GetMfBoundary(ParamType: TParameterType): TModflowParamBoundary;
    function GetMfBoundaryI(ParamType: TParameterType): IModflowParamBoundary;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name returns a MODFLOW cell where @classname is located.
    // The cell numbers in the @link(TCellLocation) will be 1 based.
    // If the @link(TCellLocation.Layer TCellLocation.Layer) = 0,
    // the @name does not intersect the MODFLOW grid.
    function SingleCellLocation(AModel: TBaseModel): TCellLocation;
    procedure UpdateModflowTimes(ModflowTimes: TRealList;
      StartTestTime, EndTestTime: double;
      var StartRangeExtended, EndRangeExtended: boolean);
    property CurrentValues: TValueArrayStorage read FCurrentValues;
    procedure UpdateImportedValues(DataArray: TDataArray);
    procedure ReverseDirection;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function RestoreCellsFromCache(CellList: TCellAssignmentList;
      EvalAt: TEvaluatedAt; Orientation: TDataSetOrientation;
      AssignmentLocation: TAssignmentLocation; const EncloseAnnotation,
      IntersectAnnotation: string; AModel: TBaseModel): boolean;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateCellCache(CellList: TCellAssignmentList;
      EvalAt: TEvaluatedAt; Orientation: TDataSetOrientation;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
    procedure CreateHydmodData;
    procedure CacheValueArrays;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    property ChildModel: TBaseModel read GetChildModel write SetChildModel;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure RemoveModelLink(AModel: TBaseModel);
    // @name is measured in radians.
    property SutraAngle: Double read GetSutraAngle write SetSutraAngle;
    procedure InvalidateCachedCells;
    property SfrSegmentNumber: integer read FSfrSegmentNumber
      write FSfrSegmentNumber;
    procedure StopTalkingToAnyone; override;
    // @name returns @true if one of the MODFLOW boundary conditions uses
    // ATime.
    function UsesATime(ATime: Double): Boolean;
    function UsesAnMt3dTime(ATime: Double): Boolean;
    procedure ReplaceATime(OldTime, NewTime: Double);
    procedure ReplaceAnMt3dTime(OldTime, NewTime: Double);
    property MinimumFraction: double read GetMinimumFraction
      write SetMinimumFraction;
    // Assigns a MODFLOW-2005 SFR stream to a MODFLOW-6 SFR stream
    procedure ConvertSfr;
    // Assigns a MODFLOW-2005 STR stream to a MODFLOW-6 SFR stream
    procedure ConvertStr;
    procedure ClearModflowBoundaries;
    procedure SimplifyStraightEdges(AngleEpsilon, DistanceEpsilon: double);
    procedure ReplaceGUID;
    property SutraScheduleName: string read FSutraScheduleName write FSutraScheduleName;
    procedure CreateGwtTimeLists(AModel: TBaseModel);

    function GetDynamicTimeSeriesIByName(const Value: string): IDynamicTimeSeries;
  published
    // @name is deprecated.
    property ChildModelDiscretization: integer read FChildModelDiscretization
      write FChildModelDiscretization stored False;
    // If @Link(CellSizeUsed) is true, @name is the size of the cells
    // to be created in the vicinity of the object.
    property CellSize: real read FCellSize write SetCellSize;
    // During automatic generation of a grid, any objects for which
    // @name is true will be used to set the cell size of the grid.
    property CellSizeUsed: boolean read FCellSizeUsed write SetCellSizeUsed;
    // @name determines whether or not the line outlining the object
    // will be drawn in color.  See @Link(LineColor).
    property ColorLine: boolean read FColorLine write SetColorLine;
    // @name indicates the number of associated elevations of the @classname.
    // See @link(TElevationCount).
    property ElevationCount: TElevationCount read GetElevationCount
      write SetElevationCount;
    // If @Link(ElevationCount) = ecOne, @name is the
    // formula used to define the position of the object in the dimension
    // perpendicular to the plane of the @Link(ViewDirection).
    property ElevationFormula: string read GetElevationFormula write
      SetElevationFormula;
    // @name is only used for backwards compatibility.
    // See @link(ElevationFormula).
    property ElevationFunction: string read GetElevationFormula write
      SetElevationFormula stored False;
    // @name determines whether a data set is evaluated at nodes or
    // cell centers.  This also controls which data sets it can set the
    // values of. See @link(TEvaluatedAt).
    property EvaluatedAt: TEvaluatedAt read FEvaluatedAt write SetEvaluatedAt;
    // @name is the color used to draw the interior of objects.  It
    // only has an effect for closed objects.
    //@Seealso(FillScreenObject)
    //@Seealso(LineColor)
    property FillColor: TColor read GetFillColor write SetFillColor;
    // @exclude
    // @name is used for backwards compatibility only.
    property FillContour: boolean write SetFillScreenObject stored False;
    // @name determines whether the interior of an object is drawn in
    // color.  It only has an effect for closed objects.  See @Link(FillColor).
    property FillScreenObject: boolean read FFillScreenObject write
      SetFillScreenObject;
    // If @Link(ElevationCount) = ecTwo, @name is the
    // formula used to define the higher
    // position of the object in the dimension
    // perpendicular to the plane of the @Link(ViewDirection).
    property HigherElevationFormula: string read GetHigherElevationFormula
      write SetHigherElevationFormula;
    // @name is only used for backwards compatibility.
    // See @link(HigherElevationFormula).
    property HigherElevationFunction: string read GetHigherElevationFormula
      write SetHigherElevationFormula stored False;
    // @name is the color used to draw the line defining the object.
    // @Seealso(ColorLine)
    // @Seealso(FillColor)
    property LineColor: TColor read GetLineColor write SetLineColor;
    // If @Link(ElevationCount) = ecTwo, @name is the
    // formula used to define the lower position of the object in the dimension
    // perpendicular to the plane of the @Link(ViewDirection).
    property LowerElevationFormula: string read GetLowerElevationFormula
      write SetLowerElevationFormula;
    // @name is only used for backwards compatibility.
    // See @link(LowerElevationFormula).
    property LowerElevationFunction: string read GetLowerElevationFormula
      write SetLowerElevationFormula stored False;
    // @name indicates whether the object is currently selected or not.
    property Selected: boolean read FSelected write SetSelected;

    // If @name is true, the formula of the object for a
    // particular data set will set the values of elements or nodes
    // in the data according to the algorithm defined by the interpolator for
    // the data set.
    property SetValuesByInterpolation: boolean
      read Get_SetValuesByInterpolation write Set_SetValuesByInterpolation;

    // @exclude
    // SetPropertiesByInterpolation is maintained only for backwards
    // compatiblilty
    property SetPropertiesByInterpolation: boolean
      read FSetValuesByInterpolation write Set_SetValuesByInterpolation
      stored false;

    // If @name, the formula of the object for a
    // particular data set will set the values of all elements or nodes
    // in the data set that are located inside the object.
    // An object must be closed for this to have any effect.
    property SetValuesOfEnclosedCells: boolean
      read Get_SetValuesOfEnclosedCells write Set_SetValuesOfEnclosedCells;

    // @exclude
    // SetPropertiesOfEnclosedCells is maintained only for backwards
    // compatiblilty
    property SetPropertiesOfEnclosedCells: boolean
      read Get_SetValuesOfEnclosedCells write Set_SetValuesOfEnclosedCells
      stored false;

    // If @name is true, the formula of the object for a
    // particular data set will set the values of all elements or nodes
    // in the data set that are intersected by the object.
    property SetValuesOfIntersectedCells: boolean
      read FSetValuesOfIntersectedCells
      write Set_SetValuesOfIntersectedCells;

    // @exclude
    // SetPropertiesOfIntersectedCells is maintained only for backwards
    // compatiblilty
    property SetPropertiesOfIntersectedCells: boolean
      read FSetValuesOfIntersectedCells
      write Set_SetValuesOfIntersectedCells stored false;

    // @name indicates the direction from which the object is to be
    // viewed.
    // setting also sets the @link(TCustomOrientedPhastBoundary.Orientation)
    // of @link(FluxBoundary) and @link(LeakyBoundary).
    property ViewDirection: TViewDirection read FViewDirection write
      SetViewDirection;
    // @name indicates whether the @classname is visible to the user.
    property Visible: boolean read FVisible write SetVisible default True;
    // @name represents the flux boundary (if any) in this @classname.
    property FluxBoundary: TFluxBoundary read GetFluxBoundary write
      SetFluxBoundary stored StoreFlux;
    // @name represents the PHAST style interpolation parameters
    // for the data sets affected by this @classname.
    // See @link(TPhastInterpolationValues).
    property InterpValues: TInterpValuesCollection read FInterpValues write
      SetInterpValues;
    // @name represents the leaky boundary (if any) in this @classname.
    property LeakyBoundary: TLeakyBoundary read GetLeakyBoundary write
      SetLeakyBoundary stored StoreLeaky;
    // @name represents the river boundary (if any) in this @classname.
    property RiverBoundary: TRiverBoundary read GetRiverBoundary write
      SetRiverBoundary stored StoreRiver;
    // @name represents the specified head boundary (if any) in this @classname.
    property SpecifiedHeadBoundary: TSpecifiedHeadBoundary
      read GetSpecifiedHeadBoundary write SetSpecifiedHeadBoundary
      stored StoreSpecifiedHead;
    // @exclude
    // @name is retained only for backwards compatibility.
    property SpecifiedSolutionBoundary: TSpecifiedSolutionBoundary
      read GetSpecifiedSolutionBoundary write SetSpecifiedSolutionBoundary
      stored False;
    // @name represents the well boundary (if any) in this @classname.
    property WellBoundary: TWellBoundary read GetWellBoundary write
      SetWellBoundary stored StoreWell;
    // MODFLOW boundary conditions
    property ModflowChdBoundary: TChdBoundary read GetModflowChdBoundary
      write SetModflowChdBoundary stored StoreModflowChdBoundary;
    property ModflowGhbBoundary: TGhbBoundary read GetModflowGhbBoundary
      write SetModflowGhbBoundary stored StoreModflowGhbBoundary;
    property ModflowWellBoundary: TMfWellBoundary read GetModflowWellBoundary
      write SetModflowWellBoundary stored StoreModflowWellBoundary;
    property ModflowRivBoundary: TRivBoundary read GetModflowRivBoundary
      write SetModflowRivBoundary stored StoreModflowRivBoundary;
    property ModflowStrBoundary: TStrBoundary read GetModflowStrBoundary
      write SetModflowStrBoundary stored StoreModflowStrBoundary;
    property ModflowDrnBoundary: TDrnBoundary read GetModflowDrnBoundary
      write SetModflowDrnBoundary stored StoreModflowDrnBoundary;
    property ModflowDrtBoundary: TDrtBoundary read GetModflowDrtBoundary
      write SetModflowDrtBoundary stored StoreModflowDrtBoundary;
    property ModflowRchBoundary: TRchBoundary read GetModflowRchBoundary
      write SetModflowRchBoundary stored StoreModflowRchBoundary;
    property ModflowEvtBoundary: TEvtBoundary read GetModflowEvtBoundary
      write SetModflowEvtBoundary stored StoreModflowEvtBoundary;
    property ModflowEtsBoundary: TEtsBoundary read GetModflowEtsBoundary
      write SetModflowEtsBoundary stored StoreModflowEtsBoundary;
    property ModflowResBoundary: TResBoundary read GetModflowResBoundary
      write SetModflowResBoundary stored StoreModflowResBoundary;
    property ModflowLakBoundary: TLakBoundary read GetModflowLakBoundary
      write SetModflowLakBoundary stored StoreModflowLakBoundary;
    property ModflowLak6: TLakeMf6 read GetModflowLak6 write SetModflowLak6
      stored StoreModflowLak6;
    property ModflowSfrBoundary: TSfrBoundary read GetModflowSfrBoundary
      write SetModflowSfrBoundary stored StoreModflowSfrBoundary;
    property ModflowUzfBoundary: TUzfBoundary read GetModflowUzfBoundary
      write SetModflowUzfBoundary stored StoreModflowUzfBoundary;
    property ModflowHeadObservations: THobBoundary
      read GetModflowHeadObservations write SetModflowHeadObservations
      stored StoreModflowHeadObservations;
    property ModflowStreamGage: TStreamGage read GetModflowStreamGage
      write SetModflowStreamGage stored StoreModflowStreamGage;
    // @name is used only for backwards compatibility with versions of
    // ModelMuse predating the initial release of ModelMuse.
    property ModflowHfbBoundary: THfbBoundary read GetModflowHfbBoundary
      write SetModflowHfbBoundary stored StoreModflowHfbBoundary;
    property ModflowMnw1Boundary: TMnw1Boundary read GetModflowMnw1Boundary
      write SetModflowMnw1Boundary stored StoreModflowMnw1Boundary;
    property ModflowMnw2Boundary: TMnw2Boundary read GetModflowMnw2Boundary
      write SetModflowMnw2Boundary stored StoreModflowMnw2Boundary;
    property ModflowFhbHeadBoundary: TFhbHeadBoundary read GetModflowFhbHeadBoundary
      write SetModflowFhbHeadBoundary stored StoreModflowFhbHeadBoundary;
    property ModflowFhbFlowBoundary: TFhbFlowBoundary read GetModflowFhbFlowBoundary
      write SetModflowFhbFlowBoundary stored StoreModflowFhbFlowBoundary;

      // FMP SUPPLY_WELL
    property ModflowFmpWellBoundary: TFmpWellBoundary read GetModflowFmpWellBoundary
      write SetModflowFmpWellBoundary stored StoreModflowFmpWellBoundary;

    // FMP CLIMATE: PRECIPITATION
    property ModflowFmpPrecip: TFmpPrecipBoundary read GetModflowFmpPrecip
      write SetModflowFmpPrecip Stored StoreModflowFmpPrecip;
    // FMP CLIMATE: REFERENCE_ET
    property ModflowFmpRefEvap: TFmpRefEvapBoundary read GetModflowFmpRefEvap
      write SetModflowFmpRefEvap Stored StoreModflowFmpRefEvap;
    // FMP LAND_USE: Location
    property ModflowFmpCropID: TFmpCropIDBoundary read GetModflowFmpCropID
      write SetModflowFmpCropID Stored StoreModflowFmpCropID;
    // FMP WBS: Location
    property ModflowFmpFarmID: TFmpFarmIDBoundary read GetModflowFmpFarmID
      write SetModflowFmpFarmID Stored StoreModflowFmpFarmID;
    property ModflowCfpPipes: TCfpPipeBoundary read GetModflowCfpPipes
      write SetModflowCfpPipes stored StoreModflowCfpPipes;
    property ModflowCfpFixedHeads: TCfpFixedBoundary read GetModflowCfpFixedHeads
      write SetModflowCfpFixedHeads stored StoreModflowCfpFixedHeads;
    property ModflowCfpRchFraction: TCfpRchFractionBoundary read GetModflowCfpRchFraction
      write SetModfloCfpRchFraction stored StoreModflowCfpRchFraction;

    property ModflowSwrRain: TSwrRainBoundary read GetModflowSwrRain
      write SetModflowSwrRain stored StoreModflowSwrRain;
    property ModflowSwrEvap: TSwrEvapBoundary read GetModflowSwrEvap
      write SetModflowSwrEvap stored StoreModflowSwrEvap;
    property ModflowSwrLatInflow: TSwrLatInflowBoundary read GetModflowSwrLatInflow
      write SetModflowSwrLatInflow stored StoreModflowSwrLatInflow;
    property ModflowSwrStage: TSwrStageBoundary read GetModflowSwrStage
      write SetModflowSwrStage stored StoreModflowSwrStage;
    property ModflowSwrDirectRunoff: TSwrDirectRunoffBoundary
      read GetModflowSwrDirectRunoff write SetModflowSwrDirectRunoff
      stored StoreModflowSwrDirectRunoff;
    property ModflowSwrReaches: TSwrReachBoundary read GetModflowSwrReaches
      write SetModflowSwrReaches stored StoreModflowSwrReaches;

    property ModflowSwiObservations: TSwiObsBoundary read GetModflowSwiObservations
      write SetModflowSwiObservations stored StoreModflowSwiObservations;
    property ModflowRipBoundary: TRipBoundary read GetModflowRipBoundary
      write SetModflowRipBoundary stored StoreModflowRipBoundary;
    // SFR boundary in MODFLOW-6.
    property ModflowSfr6Boundary: TSfrMf6Boundary read GetModflowSfr6Boundary
      write SetModflowSfr6Boundary stored StoreModflowSfr6Boundary;
    property ModflowMawBoundary: TMawBoundary read GetModflowMawBoundary
      write SetModflowMawBoundary stored StoreModflowMawBoundary;

    property Mt3dmsConcBoundary: TMt3dmsConcBoundary read GetMt3dmsConcBoundary
      write SetMt3dmsConcBoundary stored StoreMt3dmsConcBoundary;
    property Mt3dmsTransObservations: TMt3dmsTransObservations
      read GetMt3dmsTransObservations
      write SetMt3dmsTransObservations stored StoreMt3dmsTransObservations;
    property ModflowMvr: TMvrBoundary read GetModflowMvr write SetModflowMvr
      stored StoreModflowMvr;
    property ModflowUzfMf6Boundary: TUzfMf6Boundary
      read GetModflowUzfMf6Boundary Write SetModflowUzfMf6Boundary
      stored StoreModflowUzfMf6Boundary;

    // @name is used for both CUZINF in the UZT package and CUZRCH in the SSM
    // package.
    property Mt3dUzfRechConc: TMt3dUztRchConcBoundary read GetMt3dUzfRechConc
      write SetMt3dUzfRechConc stored StoreMt3dUzfRechConc;
    property Mt3dUztSatEtConcBoundary: TMt3dUztSatEtConcBoundary read GetMt3dUztSatEtConcBoundary
      write SetMt3dUztSatEtConcBoundary stored StoreMt3dUztSatEtConcBoundary;
    property Mt3dUztUnsatEtConcBoundary: TMt3dUztUnsatEtConcBoundary
      read GetMt3dUztUnsatEtConcBoundary
      write SetMt3dUztUnsatEtConcBoundary stored StoreMt3dUztUnsatEtConcBoundary;
    // @name is used for CGWET in the SSM package.
    property Mt3dUzSsmSinkConcBoundary: TMt3dUzSsmSinkConcBoundary
      read GetMt3dUzSsmSinkConcBoundary write SetMt3dUzSsmSinkConcBoundary
      stored StoreMt3dUzSsmSinkConcBoundary;
    property Mt3dLktConcBoundary: TMt3dLktConcBoundary
      read GetMt3dLktConcBoundary write SetMt3dLktConcBoundary
      stored StoreMt3dLktConcBoundary;
    property Mt3dSftConcBoundary: TMt3dSftBoundary
      read GetMt3dSftConcBoundary write SetMt3dSftConcBoundary
      stored StoreMt3dSftConcBoundary;
    property Modflow6Obs: TModflow6Obs read GetModflow6Obs write SetModflow6Obs
      stored StoreModflow6Obs;

    property ModflowCSub: TCSubBoundary read GetModflowCSub Write SetModflowCSub
      stored StoreModflowCSub;
    property ModflowSubObservations: TSubObservations read GetModflowSubObservations
      write SetModflowSubObservations stored StoreModflowSubObservations;
    property ModflowSwtObservations: TSwtObservations read GetModflowSwtObservations
      write SetModflowSwtObservations stored StoreModflowSwtObservations;

    property GwtCncBoundary: TCncBoundary read GetGwtCncBoundary
      write SetGwtCncBoundary stored StoreGwtCncBoundary;
    property GwtSrcBoundary: TSrcBoundary read GetGwtSrcBoundary
      write SetGwtSrcBoundary stored StoreGwtSrcBoundary;

    // FMP4
    // FMP WBS: Efficiency
    property Fmp4EfficiencyBoundary: TFmp4EfficiencyBoundary
      read GetFmp4EfficiencyBoundary write SetFmp4EfficiencyBoundary
      stored StoreFmp4EfficiencyBoundary;
    // FMP WBS: EFFICIENCY_IMPROVEMENT
    property Fmp4EfficiencyImprovementBoundary: TFmp4EfficiencyImprovementBoundary
      read GetFmp4EfficiencyImprovementBoundary write SetFmp4EfficiencyImprovementBoundary
      stored StoreFmp4EfficiencyImprovementBoundary;
    // FMP WBS: BARE_RUNOFF_FRACTION
    property Fmp4BareRunoffFractionBoundary: TFmp4BareRunoffFractionBoundary
      read GetFmp4BareRunoffFractionBoundary write SetFmp4BareRunoffFractionBoundary
      stored StoreFmp4BareRunoffFractionBoundary;
    // FMP WBS: BARE_PRECIPITATION_CONSUMPTION_FRACTION
    property Fmp4BarePrecipitationConsumptionFractionBoundary:
      TFmp4BarePrecipitationConsumptionFractionBoundary
      read GetFmp4BarePrecipitationConsumptionFractionBoundary
      write SetFmp4BarePrecipitationConsumptionFractionBoundary
      stored StoreFmp4BarePrecipitationConsumptionFractionBoundary;
    // FMP WBS: ADDED_DEMAND_RUNOFF_SPLIT
    property Fmp4AddedDemandRunoffSplitBoundary:
      TFmp4AddedDemandRunoffSplitBoundary
      read GetFmp4AddedDemandRunoffSplitBoundary
      write SetFmp4AddedDemandRunoffSplitBoundary
      stored StoreFmp4AddedDemandRunoffSplitBoundary;
    // FMP CLIMATE: POTENTIAL_EVAPORATION_BARE
    property ModflowFmpBareEvap: TFmp4BareEvapBoundary
      read GetModflowFmpBareEvap write SetModflowFmpBareEvap
      Stored StoreModflowFmpBareEvap;
    // FMP CLIMATE: DIRECT_RECHARGE
    property ModflowFmpDirectRecharge: TFmp4DirectRechargeBoundary
      read GetModflowFmpDirectRecharge write SetModflowFmpDirectRecharge
      Stored StoreModflowFmpDirectRecharge;
    // FMP CLIMATE: PRECIPITATION_POTENTIAL_CONSUMPTION
    property ModflowFmpPrecipPotConsumption: TFmp4PrecipPotConsumptionBoundary
      read GetModflowFmpPrecipPotConsumption write SetModflowFmpPrecipPotConsumption
      Stored StoreModflowFmpPrecipPotConsumption;
    // FMP SURFACE_WATER: NRD_INFILTRATION_LOCATION
    property ModflowFmp4NrdInfilLocationBoundary: TFmp4NrdInfilLocationBoundary
      read GetModflowFmp4NrdInfilLocationBoundary write SetModflowFmp4NrdInfilLocationBoundary
      Stored StoreModflowFmp4NrdInfilLocationBoundary;
    // FMP LAND_USE: LAND_USE_AREA_FRACTION
    property ModflowFmp4LandUseAreaFraction: TFmp4LandUseAreaFractionBoundary
      read GetModflowFmp4LandUseAreaFraction
      write SetModflowFmp4LandUseAreaFraction
      stored StoreModflowFmp4LandUseAreaFraction;
    // FMP LAND_USE: LAND_USE_AREA_FRACTION
    property ModflowFmp4MultLandUseAreaFraction: TFmp4MultLandUseAreaFractionBoundary
      read GetModflowFmp4MultLandUseAreaFraction
      write SetModflowFmp4MultLandUseAreaFraction
      stored StoreModflowFmp4MultLandUseAreaFraction;
    // FMP LAND_USE: CROP_COEFFICIENT
    property ModflowFmp4CropCoefficient: TFmp4CropCoefficientBoundary
      read GetModflowFmp4CropCoefficient write SetModflowFmp4CropCoefficient
      Stored StoreModflowFmp4CropCoefficient;
    // FMP LAND_USE: CROP_COEFFICIENT
    property ModflowFmp4MultCropCoefficient: TFmp4MultCropCoefficientBoundary
      read GetModflowFmp4MultCropCoefficient write SetModflowFmp4MultCropCoefficient
      Stored StoreModflowFmp4MultCropCoefficient;
    // FMP LAND_USE: CONSUMPTIVE_USE
    property ModflowFmp4ConsumptiveUse: TFmp4ConsumptiveUseBoundary
      read GetModflowFmp4ConsumptiveUse write SetModflowFmp4ConsumptiveUse
      Stored StoreModflowFmp4ConsumptiveUse;
    // FMP LAND_USE: CONSUMPTIVE_USE
    property ModflowFmp4MultConsumptiveUse: TFmp4MultConsumptiveUseBoundary
      read GetModflowFmp4MultConsumptiveUse write SetModflowFmp4MultConsumptiveUse
      Stored StoreModflowFmp4MultConsumptiveUse;
    // FMP LAND_USE: IRRIGATION
    property ModflowFmp4Irrigation: TFmp4IrrigationBoundary
      read GetModflowFmp4Irrigation write SetModflowFmp4Irrigation
      Stored StoreModflowFmp4Irrigation;
    // FMP LAND_USE: IRRIGATION
    property ModflowFmp4MultIrrigation: TFmp4MultIrrigationBoundary
      read GetModflowFmp4MultIrrigation write SetModflowFmp4MultIrrigation
      Stored StoreModflowFmp4MultIrrigation;
    // FMP LAND_USE: ROOT_DEPTH
    property ModflowFmp4RootDepth: TFmp4RootDepthBoundary
      read GetModflowFmp4RootDepth write SetModflowFmp4RootDepth
      Stored StoreModflowFmp4RootDepth;
    // FMP LAND_USE: ROOT_DEPTH
    property ModflowFmp4MultRootDepth: TFmp4MultRootDepthBoundary
      read GetModflowFmp4MultRootDepth write SetModflowFmp4MultRootDepth
      Stored StoreModflowFmp4MultRootDepth;
    // FMP LAND_USE: TRANSPIRATION_FRACTION
    property ModflowFmp4TranspirationFraction: TFmp4TranspirationFractionBoundary
      read GetModflowFmp4TranspirationFraction write SetModflowFmp4TranspirationFraction
      Stored StoreModflowFmp4TranspirationFraction;
    // FMP LAND_USE: TRANSPIRATION_FRACTION
    property ModflowFmp4MultTranspirationFraction: TFmp4MultTranspirationFractionBoundary
      read GetModflowFmp4MultTranspirationFraction write SetModflowFmp4MultTranspirationFraction
      Stored StoreModflowFmp4MultTranspirationFraction;
    // FMP LAND_USE: EVAPORATION_IRRIGATION_FRACTION
    property ModflowFmp4EvaporationIrrigationFraction: TFmp4EvaporationIrrigationFractionBoundary
      read GetModflowFmp4EvaporationIrrigationFraction write SetModflowFmp4EvaporationIrrigationFraction
      Stored StoreModflowFmp4EvaporationIrrigationFraction;
    // FMP LAND_USE: EVAPORATION_IRRIGATION_FRACTION
    property ModflowFmp4MultEvaporationIrrigationFraction: TFmp4MultEvaporationIrrigationFractionBoundary
      read GetModflowFmp4MultEvaporationIrrigationFraction write SetModflowFmp4MultEvaporationIrrigationFraction
      Stored StoreModflowFmp4MultEvaporationIrrigationFraction;
    // FMP LAND_USE: SURFACEWATER_LOSS_FRACTION_PRECIPITATION
    property ModflowFmp4FractionOfPrecipToSurfaceWater: TFmp4FractionOfPrecipToSurfaceWaterBoundary
      read GetModflowFmp4FractionOfPrecipToSurfaceWater write SetModflowFmp4FractionOfPrecipToSurfaceWater
      Stored StoreModflowFmp4FractionOfPrecipToSurfaceWater;
    // FMP LAND_USE: SURFACEWATER_LOSS_FRACTION_PRECIPITATION
    property ModflowFmp4MultFractionOfPrecipToSurfaceWater: TFmp4MultFractionOfPrecipToSurfaceWaterBoundary
      read GetModflowFmp4MultFractionOfPrecipToSurfaceWater write SetModflowFmp4MultFractionOfPrecipToSurfaceWater
      Stored StoreModflowFmp4MultFractionOfPrecipToSurfaceWater;
    // FMP LAND_USE: SURFACEWATER_LOSS_FRACTION_IRRIGATION
    property ModflowFmp4FractionOfIrrigToSurfaceWater: TFmp4FractionOfIrrigToSurfaceWaterBoundary
      read GetModflowFmp4FractionOfIrrigToSurfaceWater write SetModflowFmp4FractionOfIrrigToSurfaceWater
      Stored StoreModflowFmp4FractionOfIrrigToSurfaceWater;
    // FMP LAND_USE: SURFACEWATER_LOSS_FRACTION_IRRIGATION
    property ModflowFmp4MultFractionOfIrrigToSurfaceWater: TFmp4MultFractionOfIrrigToSurfaceWaterBoundary
      read GetModflowFmp4MultFractionOfIrrigToSurfaceWater write SetModflowFmp4MultFractionOfIrrigToSurfaceWater
      Stored StoreModflowFmp4MultFractionOfIrrigToSurfaceWater;
    // FMP LAND_USE: ADDED_DEMAND
    property ModflowFmp4AddedDemand: TFmp4AddedDemandBoundary
      read GetModflowFmp4AddedDemand write SetModflowFmp4AddedDemand
      Stored StoreModflowFmp4AddedDemand;
    // FMP LAND_USE: ADDED_DEMAND
    property ModflowFmp4MultAddedDemand: TFmp4MultAddedDemandBoundary
      read GetModflowFmp4MultAddedDemand write SetModflowFmp4MultAddedDemand
      Stored StoreModflowFmp4MultAddedDemand;
    // FMP SALINITY_FLUSH_IRRIGATION: CROP_HAS_SALINITY_DEMAND
    property ModflowFmp4CropHasSalinityDemand: TFmp4CropHasSalinityDemandBoundary
      read GetModflowFmp4CropHasSalinityDemand write SetModflowFmp4CropHasSalinityDemand
      Stored StoreModflowFmp4CropHasSalinityDemand;
    // FMP SALINITY_FLUSH_IRRIGATION: CROP_HAS_SALINITY_DEMAND
    property ModflowFmp4MultCropHasSalinityDemand: TFmp4MultCropHasSalinityDemandBoundary
      read GetModflowFmp4MultCropHasSalinityDemand write SetModflowFmp4MultCropHasSalinityDemand
      Stored StoreModflowFmp4MultCropHasSalinityDemand;
    property ModflowTvkBoundary: TTvkBoundary
      read GetModflowTvkBoundary write SetModflowTvkBoundary
      Stored StoreModflowTvkBoundary;
    property ModflowTvsBoundary: TTvsBoundary
      read GetModflowTvsBoundary write SetModflowTvsBoundary
      Stored StoreModflowTvsBoundary;

    { TODO :
Consider making SectionStarts private and only exposing SectionStart,
SectionEnd etc. DefineProperties could be used to store and retrieve
SectionStarts.}

    // If a @classname has N parts, @name will have N-1 integer values.
    // Each i represents the index of a TPoint2D in
    // @link(Points). The starting points of each part of the @classname
    // except the first part will be represented in @name. (The starting point
    // of the first part is implicitly 0.
    // The values in @name must be sorted in ascending order.
    // before they are used.
    property SectionStarts: TValueArrayStorage read GetSectionStarts
      write SetSectionStarts;
    property ImportedSectionElevations: TValueArrayStorage
      read GetImportedSectionElevations write SetImportedSectionElevations
      stored StoreImportedSectionElevations;
    property ImportedHigherSectionElevations: TValueArrayStorage
      read GetImportedHigherSectionElevations
      write SetImportedHigherSectionElevations
      stored StoreImportedHigherSectionElevations;
    property ImportedLowerSectionElevations: TValueArrayStorage
      read GetImportedLowerSectionElevations
      write SetImportedLowerSectionElevations
      stored StoreImportedLowerSectionElevations;
    property ImportedValues: TValueCollection read FImportedValues
      write SetImportedValues stored StoreImportedValues;
    property IFACE: TIface read FIFACE write SetIFACE default iInternal;
    property ModpathParticles: TParticleStorage read FModpathParticles
      write SetModpathParticles;
    property Comment: string read FComment write SetComment;
    // @name associates a value with specific vertices of the @classname.
    property PointPositionValues: TPointPositionValues
      read GetPointPositionValues write SetPointPositionValues
      stored ShouldStorePointPositionValues;
    property ModflowHydmodData: THydmodData read GetModflowHydmodData
      write SetModflowHydmodData stored StoreModflowHydmodData;
    property ChildModelName: string read GetChildModelName
      write SetChildModelName;
    property UsedModels: TUsedWithModelCollection read FUsedModels
      write SetUsedModels stored  True;
    property PositionLocked: boolean read FPositionLocked
      write SetPositionLocked;
    // @name is measured in radians.
    property StoredSutraAngle: TRealStorage read FStoredSutraAngle write
      SetStoredSutraAngle stored SaveSutraAngle;
    property SutraBoundaries: TSutraBoundaries read FSutraBoundaries
      write SetSutraBoundaries stored SaveSutraBoundaries;
    // If @name is not @true, then in @link(GetCellsToAssign) multiple cells
    // at the same location are not allowed.
    property DuplicatesAllowed: Boolean read FDuplicatesAllowed
      write SetDuplicatesAllowed default True;
    // Name is used to display a label near an @classname.
    property ObjectLabel: TObjectLabel read FObjectLabel write SetObjectLabel;
    property ObjectVertexLabel: TObjectVertexLabel read FObjectVertexLabel
      write SetObjectVertexLabel;
    property SectionLabel: TSectionLabel read FSectionLabel write SetSectionLabel;
    property FootprintWell: TFootprintWell read GetFootprintWell
      write SetFootprintWell stored StoreFootprintWell;
    // @name stores the mininum ratio of the intersect length with a cell or
    // element compared to a representative length of the cell or element
    // that is required for a @classname to be considered to to have intersected
    // it.
    property StoredMinimumFraction: TRealStorage read FStoredMinimumFraction
      write SetStoredMinimumFraction;
    // Zero equals no refinement.
    property QuadtreeRefinementLevel: Integer read FQuadtreeRefinementLevel
      write SetQuadtreeRefinementLevel;
//    property VerticesArePilotPoints: Boolean read FVerticesArePilotPoints
//      write SetVerticesArePilotPoints;
    property DynamicTimesSeriesCollections: TDynamicTimesSeriesCollections
      read FDynamicTimesSeriesCollections write SetDyanmicTimesSeriesCollection;
    // @name is for backwards compatiblity.
    property DyanmicTimesSeriesCollections: TDynamicTimesSeriesCollections
      read FDynamicTimesSeriesCollections write SetDyanmicTimesSeriesCollection
      stored False;
  end;

  // @name does not own its @link(TScreenObject)s.
  TScreenObjectList = class(TObject)
  private
    FList: TList;
    function GetCount: integer;
    function GetItems(Index: integer): TScreenObject;
    function GetCapacity: integer;
    procedure SetCapacity(const Value: integer);
  public
    function  Add(ScreenObject: TScreenObject): integer;
    procedure Assign(AnotherList: TScreenObjectList);
    property Capacity: integer read GetCapacity write SetCapacity;
    property Count: integer read GetCount;
    property Items[Index: integer]: TScreenObject read GetItems; default;
    constructor Create;
    destructor Destroy; override;
    procedure Clear;
    function IndexOf(AScreenObject: TScreenObject): Integer;
  end;

  TObjectScreenObjectLists = TObjectList<TScreenObjectList>;
  TScreenObjectsList3DArray = array of array of array of TScreenObjectList;


  // @abstract(@name provides functionality used in storing multiple values
  // associated with a single screen object (a @Link(TMultiValueScreenObject));
  // It is used as an ancestor of @link(TRealDataListItem)
  // and @link(TIntegerDataListItem) which actually hold data.)
  TCustomDataListItem = class(TCollectionItem)
  private
    // See @link(DataSetName).
    FDataSetName: string;
    // See @link(FirstCol).
    FFirstCol: integer;
    // See @link(FirstLay).
    FFirstLay: integer;
    // See @link(FirstRow).
    FFirstRow: integer;
    // See @link(LastCol).
    FLastCol: integer;
    // See @link(LastLay).
    FLastLay: integer;
    // See @link(LastRow).
    FLastRow: integer;
  protected
    // @name retrieves the number of items stored in @classname.
    function GetValuesLength: integer; virtual; abstract;
    // @name sets the number of items stored in @classname.
    procedure SetValuesLength(const Value: integer); virtual; abstract;
  public
    // @name is the number of items stored in @classname.
    property Length: integer read GetValuesLength write SetValuesLength;
    // @name copies all the values from Source
    // (which must be a @classname)
    // to the object calling Assign
    procedure Assign(Source: TPersistent); override;
  published
    // @name is the name of the data set for which values are being
    // stored
    property DataSetName: string read FDataSetName write FDataSetName;
    // @name is the first column for which data is stored;
    property FirstCol: integer read FFirstCol write FFirstCol;
    // @name is the first layer for which data is stored;
    property FirstLay: integer read FFirstLay write FFirstLay;
    // @name is the first row for which data is stored;
    property FirstRow: integer read FFirstRow write FFirstRow;
    // @name is the last column for which data is stored;
    property LastCol: integer read FLastCol write FLastCol;
    // @name is the last layer for which data is stored;
    property LastLay: integer read FLastLay write FLastLay;
    // @name is the last row for which data is stored;
    property LastRow: integer read FLastRow write FLastRow;
    // @name is a function used to determine the position or a particular
    // data item within the array of data
    // items in descendants of TCustomDataListItem.
    function ValueIndex(const Col, Row, Lay: integer): integer;
  end;

  // @abstract(@name is a @link(TCustomDataListItem) specialized for
  // holding real numbers.)
  TRealDataListItem = class(TCustomDataListItem)
  private
    // @name: @link(GoPhastTypes.TOneDRealArray);
    // @name is the raw data stored by the @classname.  Normally,
    // these values are access through the @link(Values) property which
    // provides error checking.
    FValues: TOneDRealArray;
    // See @link(Values).
    function GetValues(const Index: Integer): double;
    // See @link(Values).
    procedure SetValues(const Index: Integer; const Value: double);
  protected
    // @name retrieves the number of items stored in @classname.
    function GetValuesLength: integer; Override;
    // @name is used to read the contents of @link(FValues) from a stream.
    procedure ReadValues(Reader: TReader);
    // @name sets the number of items stored in @classname.
    procedure SetValuesLength(const Value: integer); Override;
    // @name is used to write the contents of @link(FValues) to a stream.
    procedure WriteValues(Writer: TWriter);
    // @name causes @link(FValues) to be written to and read from a stream.
    procedure DefineProperties(Filer: TFiler); override;
  public
    // @name copies all the values from Source
    // (which must be a @link(TCustomDataListItem))
    // to the object calling Assign
    procedure Assign(Source: TPersistent); override;
    // @name is used to access the data stored in the @classname.
    // @SeeAlso(TCustomDataListItem.ValueIndex)
    property Values[const Index: Integer]: double read GetValues write
      SetValues;
  end;

  // @abstract(@name is a @link(TCustomDataListItem) specialized for
  // specialized for holding integers.)
  TIntegerDataListItem = class(TCustomDataListItem)
  private
    // @name: @link(GoPhastTypes.TOneDIntegerArray);
    // @name is the raw data stored by the @classname.  Normally,
    // these values are access through the @link(Values) property which
    // provides error checking.
    FValues: TOneDIntegerArray;
    // See @link(Values).
    function GetValues(const Index: Integer): Integer;
    // See @link(Values).
    procedure SetValues(const Index, Value: Integer);
  protected
    // @name retrieves the number of items stored in @classname.
    function GetValuesLength: integer; override;
    // @name is used to read the contents of @link(FValues) from a stream.
    procedure ReadValues(Reader: TReader);
    // @name sets the number of items stored in @classname.
    procedure SetValuesLength(const Value: integer); override;
    // @name is used to write the contents of @link(FValues) to a stream.
    procedure WriteValues(Writer: TWriter);
    // @name causes @link(FValues) to be written to and read from a stream.
    procedure DefineProperties(Filer: TFiler); override;
  public
    // Assign copies all the values from Source
    // (which must be a @link(TCustomDataListItem))
    // to the object calling Assign
    procedure Assign(Source: TPersistent); override;
    // Values is used to access the data stored in the @classname.
    // @SeeAlso(TCustomDataListItem.ValueIndex)
    property Values[const Index: Integer]: Integer read GetValues write
      SetValues;
  end;

  // @abstract(@name is a collection of @Link(TCustomDataListItem)'s.
  // It is used to store data by zones in a @Link(TMultiValueScreenObject).)
  // Normally, only the descendants of TDataListCollection are created.
  TDataListCollection = class(TPhastCollection)
  private
    // @name is the @link(TScreenObject) with which the data is associated.
    FScreenObject: TScreenObject;
    // @name is used to store the result of @link(GetItemByName).
    // Often, the next time @link(GetItemByName) is called, it will be with the
    // same name so storing the result can speed things up.
    PriorIndex: integer;
  public
    // @name creates and instance of @classname.
    constructor Create(ItemClass: TCollectionItemClass; const ScreenObject:
      TScreenObject; InvalidateModelEvent: TNotifyEvent);
    // @name is the TScreenObject with which the data is associated.
    property ScreenObject: TScreenObject read FScreenObject;
    // @name returns the TCustomDataListItem
    // whose name matches ADataSetName.
    function GetItemByName(ADataSetName: string): TCustomDataListItem;
  end;

  // @abstract(@name is a descendant of @link(TDataListCollection)
  // specialized for storing real numbers.)
  TRealDataListCollection = class(TDataListCollection)
    // @name creates an instance of @classname.
    // See @link(TRealDataListItem).
    constructor Create(const ScreenObject: TScreenObject; InvalidateModelEvent: TNotifyEvent);
  end;

  // @abstract(@name is a descendant of @link(TDataListCollection)
  // specialized for storing integers.)
  TIntegerDataListCollection = class(TDataListCollection)
    // @name creates an instance of @classname.
    // See @link(TIntegerDataListItem).
    constructor Create(const ScreenObject: TScreenObject; InvalidateModelEvent: TNotifyEvent);
  end;

  //@abstract(@name is used in creating descendants of @link(TScreenObject)
  // when reading a model from a file and when the user creates a new
  // @link(TScreenObject).)
  TScreenObjectClass = class of TScreenObject;

  {@abstract(@name is used to store or read whether
   a vertex in a @link(TScreenObject) is selected or not.)}
  TSelectedVertexItem = class(TCollectionItem)
  private
    // @name stores whether a vertex is selected.
    // See @link(VertexSelected).
    FVertexSelected: boolean;
  published
    // @name stores whether a vertex is selected.
    property VertexSelected: boolean read FVertexSelected
      write FVertexSelected;
    // @exclude
    // @name is an alias for @link(VertexSelected).  It is maintained for
    // backwards compatibility only.
    property NodeSelected: boolean read FVertexSelected write FVertexSelected
      stored False;
  end;

  {@abstract(@name is used to store or read which vertices
    in a @link(TScreenObject) are selected.)}
  TSelectedVertexCollection = class(TCollection)
    // @name creates an instance of @classname.
    // See @link(TSelectedVertexItem).
    constructor Create;
  end;

  // @exclude
  // @name is an alias of @link(TSelectedVertexCollection)
  // maintained for backwards compatibility.
  TSelectedNodeCollection = TSelectedVertexCollection;

  {@abstract(@name is used to store a TPoint2D.)}
//  TPointItem = class(TCollectionItem)
//  private
//    // See @link(X).
//    FX: double;
//    // See @link(Y).
//    FY: double;
//    function GetPoint2D: TPoint2D;
//    procedure SetPoint2D(const Value: TPoint2D);
//  public
//    property Point2D: TPoint2D read GetPoint2D write SetPoint2D;
//  published
//    // @name is the X coordinate of the point.
//    property X: double read FX write FX;
//    // @name is the Y coordinate of the point.
//    property Y: double read FY write FY;
//  end;

  {@abstract(@name is used to store a series of TPoint2Ds.)}
//  TPointCollection = class(TCollection)
//  private
//    FTempFileName: string;
//    FCaching: Boolean;
//    procedure StoreData(Stream: TStream);
//    procedure ReadData(DecompressionStream: TDecompressionStream); virtual;
//    function GetCount: Integer;
//  protected
//    procedure Cache;
//    procedure Restore;
//  public
//    property Count: Integer read GetCount;
//    // @name creates an instance of @classname.
//    // See @link(TPointItem).
//    constructor Create;
//    procedure EndUpdate; override;
//  end;

  {@abstract(@name is used in reading a @link(TScreenObject)
    from or writing it to a stream.)
   When saving data to a stream, the data is read from
   @link(TScreenObjectItem.FScreenObject).  When reading data from a stream,
   the data is stored in private fields.  It is transferred to a
   @link(TScreenObject) in @link(TScreenObjectItem.UpdateScreenObject).}
  TScreenObjectItem = class(TCollectionItem)
  private
    // See @link(DataSetNames).
    FDataSetNames: TStrings;
    // See @link(DataSetFormulas).
    FDataSetFormulas: TStrings;
    // See @link(ElevationFormula).
    FElevationFormula: string;
    // See @link(HigherElevationFormula).
    FHigherElevationFormula: string;
    // See @link(LowerElevationFormula).
    FLowerElevationFormula: string;
    // @name stores the formulas for mixtures in the @link(TScreenObject).
    FMixtureFormulas: TStrings;
    // See @link(Points).
    FPoints: TPointCollection;
    // See @link(ScreenObject).
    FScreenObject: TScreenObject;
    // See @link(SelectedVertices).
    FSelectedVertexCollection: TSelectedVertexCollection;
    // See @link(ClassTypeName).
    function GetClassType: string;
    // See @link(DataSetFormulas).
    function GetDataSetFormulas: TStrings;
    // See @link(DataSetNames).
    function GetDataSetNames: TStrings;
    // See @link(ElevationFormula).
    function GetElevationFormula: string;
    // See @link(HigherElevationFormula).
    function GetHigherElevationFormula: string;
    // See @link(LowerElevationFormula).
    function GetLowerElevationFormula: string;
    // @name fills @link(FMixtureFormulas) with the formulas for mixtures
    // in the @link(TScreenObject) and then
    // returns @link(FMixtureFormulas).
    function GetMixtureFormulas: TStrings;
    // See @link(ClassTypeName).
    procedure SetClassType(Value: string);
    function GetPoints: TPointCollection;
  protected
    // @name updates @link(ScreenObject) with the values read from
    // the stream and stored in private data fields.
    // After a @link(TScreenObject) has been read,
    // @name is called to update its formulas for mixtures.
    procedure UpdateScreenObject;
  public
    // @name creates an instance of @classname.
    constructor Create(Collection: TCollection); override;
    // @name destroys the current instance of @classname.
    // Do not call @name directly. Call Free instead.
    destructor Destroy; override;
    // see @link(ScreenObject).
    procedure SetScreenObject(const Value: TScreenObject);
  published
    // @name must be before @link(ScreenObject) or Contour.
    // Setting @name causes @link(ScreenObject) to be created.
    property ClassTypeName: string read GetClassType write SetClassType;
    // @exclude
    // @name is used for backwards compatibility only.
    // See @link(ScreenObject).
    property Contour: TScreenObject read FScreenObject stored False;
    // @name is the data sets whose values are set by @link(ScreenObject).
    property DataSetNames: TStrings read GetDataSetNames write FDataSetNames;
    // @name has the formulas for the data sets
    // whose values are set by @link(ScreenObject).
    property DataSetFormulas: TStrings read GetDataSetFormulas write
      FDataSetFormulas;
    // @name is the @link(TScreenObject.ElevationFormula)
    // of @link(ScreenObject).
    property ElevationFunction: string read GetElevationFormula write
      FElevationFormula stored False;
    property ElevationFormula: string read GetElevationFormula write
      FElevationFormula;
    // @name is the @link(TScreenObject.HigherElevationFormula)
    // formula of @link(ScreenObject).
    property HigherElevationFunction: string read GetHigherElevationFormula
      write FHigherElevationFormula stored False;
    property HigherElevationFormula: string read GetHigherElevationFormula
      write FHigherElevationFormula;
    // @name is the @link(TScreenObject.LowerElevationFormula)
    // formula of @link(ScreenObject).
    property LowerElevationFunction: string read GetLowerElevationFormula
      write FLowerElevationFormula stored False;
    property LowerElevationFormula: string read GetLowerElevationFormula
      write FLowerElevationFormula;
    // @name stores the @link(TScreenObject.Points) of @link(ScreenObject).
    property Points: TPointCollection read GetPoints write FPoints;
    // @name is set to a subcomponent in @link(SetScreenObject).
    // This is required
    // to have the properties of @link(TScreenObject) saved to file.
    // It can be set through @link(SetScreenObject).
    property ScreenObject: TScreenObject read FScreenObject;
    // @name stores the @link(TScreenObject.SelectedVertices)
    // of @link(ScreenObject).
    property SelectedVertices: TSelectedVertexCollection
      read FSelectedVertexCollection write FSelectedVertexCollection;
    // @exclude
    // @name is the same as @link(SelectedVertices).  It is used only
    // for backwards compatibility.
    property SelectedNodes: TSelectedVertexCollection
      read FSelectedVertexCollection write FSelectedVertexCollection
      stored False;
    // @name is used for reading and storing formulas for mixtures.
    // When it is being read, the value is read from the associated
    // @link(TScreenObject).  When it is being written,
    // it is stored in the private field (FMixtureFormulas) and is
    // later transfered to the @link(TScreenObject) in the protected
    // method @link(UpdateScreenObject).
    property MixtureFormulas: TStrings read GetMixtureFormulas write
      FMixtureFormulas;
  end;

  TCustomBlockGridDelegate = class(TCustomScreenObjectDelegate)
  strict protected
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetTopCellsToAssign(const DataSetFunction: string;
      OtherData: TObject; const DataSet: TDataArray;
      CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
      AModel: TBaseModel); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToDataSet(const DataSet: TDataArray;
      OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation = alAll);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetCellsToAssign(const DataSetFunction: string;
      OtherData: TObject; const EvaluatedAt: TEvaluatedAt;
      CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
      Orientation: TDataSetOrientation; AModel: TBaseModel);
    function GetPerpendiularLimit(const Grid: TCustomModelGrid): integer;
    {@name assigns values of ColIndex, RowIndex, LayerIndex based on the
    @link(FScreenObject).@link(TScreenObject.ViewDirection)
    and HorizontalIndex1, HorizontalIndex2, and
    PerpendicularIndex}
    procedure AssignColAndRowIndicies(var ColIndex, RowIndex,
      LayerIndex: Integer; const HorizontalIndex1, HorizontalIndex2,
      PerpendicularIndex: Integer);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    {@name returns the extent of the grid that should be searched for
    enclosed or intersected cells.}
    procedure AssignParallellLimits(AModel: TBaseModel; out FirstParallelIndexA,
      LastParallelIndexA, FirstParallelIndexB, LastParallelIndexB: Integer);
    // @name creates a set of segments for each cell intersected by
    // @link(FScreenObject) in front or side views.
    function IsPointInside(const CellLocation3D: TPoint3D;
      Grid: TCustomModelGrid; out SectionIndex: integer): boolean;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name assigns values to FTopElevation and FBottomElevation
    // based on the cell specified by ColIndex, RowIndex, and LayerIndex.
    function AssignElevations(const ColIndex, RowIndex, LayerIndex: integer;
      AModel: TBaseModel; AssignmentLocation: TAssignmentLocation): boolean;
    function ElevationOk(const Grid: TCustomModelGrid; const PerpendicularIndex,
      ColIndex, RowIndex: integer): boolean; virtual; abstract;
  public
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignSelectedCells(AModel: TBaseModel); override;
  end;


  TFootprintDelegate = class(TCustomBlockGridDelegate)
  strict protected
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToFrontDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation = alAll);override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToSideDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation = alAll); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToTopDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation = alAll); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateFrontSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt);override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateSideSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt);override;
    function ElevationOk(const Grid: TCustomModelGrid; const PerpendicularIndex,
      ColIndex, RowIndex: integer): boolean; override;
  protected
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetSideCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetFrontCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel); override;
  public
//    constructor Create(ScreenObject: TScreenObject); override;
//    destructor Destroy; override;
  end;

  TPhastDelegate = class(TCustomScreenObjectDelegate)
  strict private
    FMixtureVariables: TStringList;
    FMixtureCompiler: TRbwParser;
    FMixtureExpression: TExpression;
    function PhastBoundaryType: TPhastBoundaryTypes;
    function ThreeDBoundaryFormula: string;
    function TwoDBoundaryFormula: string;
    procedure AssignIntegerDataWithPhastInterpolation(const DataSet: TDataArray;
      const LayerIndex, RowIndex, ColIndex: integer; const Comment: string;
      const InterpValue: TInterpValuesItem);
    procedure AssignRealDataWithPhastInterpolation(const DataSet: TDataArray;
      const LayerIndex, RowIndex, ColIndex: integer; const Comment: string;
      const InterpValue: TInterpValuesItem);
  strict protected
    procedure AssignCellValue(const UsedVariables: TStringList;
      const DataSet: TDataArray;
      LayerIndex, RowIndex, ColIndex: integer;
      const Compiler: TRbwParser; const Annotation: string;
      var Expression: TExpression; const OtherData: TObject;
      SectionIndex: integer; ShouldZero: boolean); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToFrontDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation = alAll);override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToSideDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation = alAll); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToTopDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation = alAll); override;
    function BoundaryType: integer; override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function DataSetUsed(const DataSet: TDataArray;
      var OtherData: TObject; AModel: TBaseModel): boolean; override;
    function EncloseAnnotation(const DataSetFormula: string;
      const OtherData: TObject): string; override;
    function IntersectAnnotation(const DataSetFormula: string;
      const OtherData: TObject): string; override;
    procedure OtherIndex(const LayerOrRow, RowOrColumn: integer;
      out First, Last: integer; const DataSet: TDataArray; AModel: TBaseModel); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateFrontSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt);override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateSideSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt);override;
  protected
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetSideCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetFrontCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetTopCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const EvaluatedAt: TEvaluatedAt; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
  public
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignSelectedCells(AModel: TBaseModel); override;
    procedure InitializeExpression(out Compiler: TRbwParser;
      out DataSetFormula: string; out Expression: TExpression;
      const DataSet: TDataArray; const OtherData: TObject; AModel: TBaseModel); override;
    constructor Create(ScreenObject: TScreenObject); override;
    destructor Destroy; override;
  end;

  TModflowDataObject = class(TObject)
    Compiler: TRbwParser;
    DataSetFunction: string;
    AlternateName: string;
    AlternateDataType: TRbwDataType;
  end;
  
  TSutraDataObject = class(TModflowDataObject)
    UsedFunction: string;
  end;

  TModflowDelegate = class(TCustomBlockGridDelegate)
  strict private
    // @name is used with the front and side views of the model.
    // It returns the layer number of the cell containing Location.
    function FindLayer(const ColOrRow: integer; const Location: TEdgePoint;
      const CellOutlines: T2DRealPointArray; const MovingUp: boolean): integer;
    // @name counts the number of times a line segment defined by
    // FirstPoint and SecondPoint intersects the edge of a cell outline
    // specified by EdgeIndex. The result can be 0, 1 or 2.  The latter occurs
    // if the cell edge is colinear with the line and overlaps it.
    function CountIntersectPointsOnEdge(const ColOrRow, Layer,
      EdgeIndex: integer; const FirstPoint, SecondPoint: TPoint2D;
      const CellOutlines: T2DRealPointArray;
      out PointsOnEdge: TRealPointArray): integer;
    // @name returns @True if a line segment defined by PreviousPoint and APoint
    // intersects a cell boundary between two layers between  FirstCol
    // and LastCol. If it does, IntersectionLocation is set to the place
    // where they first intersect.
    function FindIntersectionSurface(const FirstCol, LastCol,
      LayerIndex: integer; const PreviousPoint, APoint: TEdgePoint;
      var IntersectionLocation: TEdgePoint;
      const CellOutlines: T2DRealPointArray; out Col: integer): boolean;
    {@name is used when a line segment defined by APoint and PreviousPoint
     intersect the vertical edge of the grid. @name is used to find the layer
     which the grid is intersected.}
    function FindLayerOnEdge(const APoint, PreviousPoint: TEdgePoint;
      var IntersectionLocation: TEdgePoint;
      const CellOutline: T2DRealPointArray; const EdgeIndex: integer): integer;
    // @name returns a point on the outline of a cell.
    function OutlineVertex(const ColOrRow, Layer, PointIndex: integer;
      const CellOutlines: T2DRealPointArray): TPoint2D;
    // @name returns @true if TestPoint is inside a cell.
    function InCell(const ColOrRow, Layer: integer; const TestPoint: TEdgePoint;
      const CellOutlines: T2DRealPointArray): boolean;
    // @name returns the extent of the grid along either columns or rows
    // depending on @link(FScreenObject).@link(TScreenObject.ViewDirection)
    procedure GetHorizontalLimitsOfGrid(const Grid: TCustomModelGrid;
      out GridMinHorizontal, GridMaxHorizontal: real);
    // @name returns the lowest and highest grid locations.
    procedure GetVerticalLimitsOfGrid(const Grid: TCustomModelGrid;
      out GridMinZ, GridMaxZ: Real);
    // @name returns the column or row in the grid where APoint is located.
    function GetColOrRow(const Grid: TCustomModelGrid;
      const APoint: TEdgePoint;
      const GridMinHorizontal, GridMaxHorizontal: Real): integer;
    // @name returns the maximum extent of the grid depending
    // on @link(FScreenObject).@link(TScreenObject.ViewDirection).
    procedure GetHorizontalLimits(const Grid: TCustomModelGrid;
      var HorizontalLimit: Integer; var PerpendicularLimit: Integer);
    // @name sets RotatedPoints from
    // @link(FScreenObject).@link(TScreenObject.EdgePoints).
    // @name depends on @link(FScreenObject).@link(TScreenObject.ViewDirection).
    procedure GetRotatedPoints(var RotatedPoints: TEdgePointArray);
    function GetHorizontalIndexFromLocation(const X: Real;
      const Grid: TCustomModelGrid): integer;
    procedure CreateSegment(const Point1,Point2: TEdgePoint;
      const LayerIndex, PerpendicularIndex, HorizontalIndex,
      VertexIndex, SectionIndex: Integer; var ASegment: TCellElementSegment);
    procedure UpdateHorizontalRangeOfCellsToCheck(
      var FirstHorizontalIndex, LastHorizontalIndex: Integer;
      const HorizontalIndex, HorizontalLimit: Integer;
      const APoint, PreviousPoint: TEdgePoint);
  private
    function GetCellOutlines(const Grid: TCustomModelGrid;
      const RowOrCol: integer): T2DRealPointArray;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AddFrontSideSubSegments(var ASegment: TCellElementSegment;
      AModel: TBaseModel; const CellOutlines: T2DRealPointArray);
  strict protected
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function DataSetUsed(const DataSet: TDataArray;
      var OtherData: TObject; AModel: TBaseModel): boolean; override;
    function ElevationOk(const Grid: TCustomModelGrid; const PerpendicularIndex,
      ColIndex, RowIndex: integer): boolean; override;
  protected
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetFrontCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetSideCellsToAssign(
      const DataSetFunction: string; OtherData: TObject;
      const DataSet: TDataArray; CellList: TCellAssignmentList;
      AssignmentLocation: TAssignmentLocation; AModel: TBaseModel); override;
  public
    procedure InitializeExpression(out Compiler: TRbwParser;
      out DataSetFunction: string; out Expression: TExpression;
      const DataSet: TDataArray; const OtherData: TObject; AModel: TBaseModel); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // See @link(AssignValuesToDataSet).
    procedure AssignValuesToFrontDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll);override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // See @link(AssignValuesToDataSet).
    procedure AssignValuesToSideDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // See @link(AssignValuesToDataSet).
    procedure AssignValuesToTopDataSet(
      const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    constructor Create(ScreenObject: TScreenObject); override;
    procedure UpdateFrontSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateSideSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt);override;
    destructor Destroy; override;
  end;

  TModflowLGRDelegate = class(TModflowDelegate)
    constructor Create(ScreenObject: TScreenObject); override;
  end;

  TModflowLGR2Delegate = class(TModflowDelegate)
    constructor Create(ScreenObject: TScreenObject); override;
  end;

  TModflowNWTDelegate = class(TModflowDelegate)
    constructor Create(ScreenObject: TScreenObject); override;
  end;

  TModflowFmpDelegate = class(TModflowDelegate)
    constructor Create(ScreenObject: TScreenObject); override;
  end;

  TModflowCfpDelegate = class(TModflowDelegate)
    constructor Create(ScreenObject: TScreenObject); override;
  end;

  TModflowFmp4Delegate = class(TModflowDelegate)
    constructor Create(ScreenObject: TScreenObject); override;
  end;

  TCustomMeshDelegate = class(TCustomScreenObjectDelegate)
  private
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetCellsToAssign(const DataSetFunction: string;
      OtherData: TObject; const EvaluatedAt: TEvaluatedAt;
      CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
      AModel: TBaseModel);
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    function AssignElevations(const ColIndex, RowIndex, LayerIndex: integer;
      AModel: TBaseModel): boolean;
    procedure ShowWarningNoCells(CellList: TCellAssignmentList);
  protected
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToFrontDataSet(const DataSet: TDataArray;
      OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToSideDataSet(const DataSet: TDataArray;
      OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToTopDataSet(const DataSet: TDataArray;
      OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateFrontSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateSideSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetFrontCellsToAssign(const DataSetFunction: string;
      OtherData: TObject; const DataSet: TDataArray;
      CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
      AModel: TBaseModel); override;
   { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetSideCellsToAssign(const DataSetFunction: string;
      OtherData: TObject; const DataSet: TDataArray;
      CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
      AModel: TBaseModel); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetTopCellsToAssign(const DataSetFunction: string;
      OtherData: TObject; const DataSet: TDataArray;
      CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
      AModel: TBaseModel); override;
    procedure AssignSelectedCells(AModel: TBaseModel); override;
    procedure OtherIndex(const LayerOrRow, RowOrColumn: integer; out First,
      Last: integer; const DataSet: TDataArray; AModel: TBaseModel); override;
  public
    procedure InitializeExpression(out Compiler: TRbwParser;
      out DataSetFunction: string; out Expression: TExpression;
      const DataSet: TDataArray; const OtherData: TObject; AModel: TBaseModel); override;
  end;

  TDisvDelegate = class(TCustomMeshDelegate)
  public
    constructor Create(ScreenObject: TScreenObject); override;
    destructor Destroy; override;
    procedure InitializeExpression(out Compiler: TRbwParser;
      out DataSetFunction: string; out Expression: TExpression;
      const DataSet: TDataArray; const OtherData: TObject; AModel: TBaseModel); override;
  end;

  TModflow6Delegate = class(TCustomScreenObjectDelegate)
  private
    FDisvDelegate: TDisvDelegate;
    FDisDelegate: TModflowDelegate;
    function Subdelegate(AModel: TBaseModel): TCustomScreenObjectDelegate;
  protected
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToFrontDataSet(const DataSet: TDataArray;
      OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToSideDataSet(const DataSet: TDataArray;
      OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure AssignValuesToTopDataSet(const DataSet: TDataArray;
      OtherData: TObject; AModel: TBaseModel;
      UseLgrEdgeCells: TLgrCellTreatment;
      AssignmentLocation: TAssignmentLocation); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateFrontSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateSideSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetFrontCellsToAssign(const DataSetFunction: string;
      OtherData: TObject; const DataSet: TDataArray;
      CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
      AModel: TBaseModel); override;
   { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetSideCellsToAssign(const DataSetFunction: string;
      OtherData: TObject; const DataSet: TDataArray;
      CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
      AModel: TBaseModel); override;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure GetTopCellsToAssign(const DataSetFunction: string;
      OtherData: TObject; const DataSet: TDataArray;
      CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
      AModel: TBaseModel); override;
    procedure AssignSelectedCells(AModel: TBaseModel); override;
    procedure OtherIndex(const LayerOrRow, RowOrColumn: integer; out First,
      Last: integer; const DataSet: TDataArray; AModel: TBaseModel); override;
  public
    constructor Create(ScreenObject: TScreenObject); override;
    destructor Destroy; override;
    procedure InitializeExpression(out Compiler: TRbwParser;
      out DataSetFunction: string; out Expression: TExpression;
      const DataSet: TDataArray; const OtherData: TObject; AModel: TBaseModel); override;
  end;

  TSutra22Delegate = class(TCustomMeshDelegate)
  public
    constructor Create(ScreenObject: TScreenObject); override;
  end;

  TSutra30Delegate = class(TCustomMeshDelegate)
  public
    constructor Create(ScreenObject: TScreenObject); override;
  end;

  TSutra40Delegate = class(TCustomMeshDelegate)
  public
    constructor Create(ScreenObject: TScreenObject); override;
  end;

  TResetProcedure = procedure(Compiler: TRbwParser) of object;

  {@abstract(@name is and abstract base class.  Its descendants,
    @link(TIntegerPhastBoundaryCondition) and
    @link(TRealPhastBoundaryCondition), are
    used to define the value of one aspect of a boundary
    condition for one time period.)}
  TCustomPhastBoundaryCondition = class(TInterpValuesItem)
  private
    // See @link(Formula).
    FFormula: string;
    // @name is a list of the @link(TObserver)s that are directly used in
    // @link(MixtureFormula).
    FMixtureDataSetList: TList;
    FFormulaDataSetList: TList;
    // See @link(MixtureFormula).
    FMixtureFormula: string;
    // @name is used to monitor changes to the @link(TDataArray)s that are
    // used in @link(MixtureFormula).
    FMixtureObserver: TObserver;
    // See @link(Time).
    FTime: double;
    FFormulaObserver: TObserver;
    FFormulaObject: IFormulaObject;
    // @name determines the @link(TDataArray)s that are used in
    // @link(MixtureFormula) and has @link(FMixtureObserver) listen to
    // each of them.  See (TObserver.TalksTo).
    procedure AddMixtureSubscriptions;
    // See @link(Distance1).
    function GetDistance1: double;
    // See @link(Distance2).
    function GetDistance2: double;
    // See @link(InterpolationDirection).
    function GetInterpolationDirection: TInterpolationDirection;
    // See @link(MixtureExpression).
    function GetMixtureFormula: string;
    // See @link(ScreenObject).
    function GetScreenObject: TScreenObject;
    // See @link(UsePHAST_Interpolation).
    function GetUsePHAST_Interpolation: boolean;
    // @name causes @link(FMixtureObserver) to stop listening to
    // every @link(TDataArray) that it is observing.
    // See @link(TObserver.StopsTalkingTo).
    procedure RemoveMixtureSubscriptions;
    // See @link(Distance1).
    procedure SetDistance1(const Value: double);
    // See @link(Distance2).
    procedure SetDistance2(const Value: double);
    // See @link(Expression).
    procedure SetFormula(const Value: string);
    // See @link(InterpolationDirection).
    procedure SetInterpolationDirection(const Value: TInterpolationDirection);
    // See @link(MixtureExpression).
    procedure SetMixtureExpression(const Value: string);
    // See @link(MixtureFormula).
    procedure SetMixtureFormula(const Value: string);
    // See @link(Time).
    procedure SetTime(const Value: double);
    // See @link(UsePHAST_Interpolation).
    procedure SetUsePHAST_Interpolation(const Value: boolean);
    function GetFormulaExpression: string;
    procedure SetFormulaExpression(const Value: string);
    procedure RemoveDataSetSubscriptions(DataSetList: TList; Observer: TObserver);
    procedure AddDataSetSubscriptions(DataSetList: TList; Observer: TObserver;
      Reset: TResetProcedure; NewFormula: string);
    procedure RemoveFormulaSubscriptions;
    procedure AddFormulaSubscriptions;
    procedure RemoveSubscription(Sender: TObject;
      const AName: string);
    procedure RestoreSubscription(Sender: TObject;
      const AName: string);
    procedure ResetMixtureFormula(Compiler: TRbwParser);
    procedure ResetFormulaExpression(Compiler: TRbwParser);
  protected
    // See @link(Datatype).
    function GetDatatype: TRbwDataType; virtual; abstract;
    // @name sets @link(FMixtureObserver).UpToDate := True;
    procedure ResetMixtureSubscription;
    // @name transfers the value stored in @link(FMixtureFormula) to
    // @link(MixtureExpression).  See @link(MixtureFormula).
    procedure UpdateMixtureExpression;
    procedure UpdateFormulaExpression;
    procedure InvalidateModel;
  public
    // @name copies values from @classname or @link(TInterpValuesItem)
    // to the object calling @name.
    procedure Assign(Source: TPersistent); override;
    // @name creates an instance of @classname.
    constructor Create(Collection: TCollection); override;
    // @name destroys the current instance of @classname.
    destructor Destroy; override;
    // @name gets the @link(TSparseArrayPhastInterpolationDataSet) to which
    // this @classname applies.
    function GetDataSet: TSparseArrayPhastInterpolationDataSet;
    // See TInterpValuesItem.Values.@link(
    // TPhastInterpolationValues.MixtureFormula).
    // Mixture Expression can not be set until the entire model has
    // been loaded.  See @link(MixtureFormula).
    // See @link(TPhastInterpolationValues).
    property MixtureExpression: string read GetMixtureFormula write
      SetMixtureExpression;
    // @name is used to read the @link(TScreenObject) to which
    // this @classname applies.
    property ScreenObject: TScreenObject read GetScreenObject;
    property FormulaExpression: string read GetFormulaExpression
      write SetFormulaExpression;
  published
    // @name specifies the type of data (real number, integer, boolean,
    // or string) stored in the @classname.  However, at the time this
    // was written only real numbers and integers were supported because
    // those were the only types supported in descendants of
    // @link(TSparseArrayPhastInterpolationDataSet). See @link(GetDataSet).
    property DataType: TRbwDataType read GetDatatype;
    // See TInterpValuesItem.Values.@link(TPhastInterpolationValues.Distance1).
    // See @link(TPhastInterpolationValues).
    property Distance1: double read GetDistance1 write SetDistance1;
    // See TInterpValuesItem.Values.@link(TPhastInterpolationValues.Distance2).
    // See @link(TPhastInterpolationValues).
    property Distance2: double read GetDistance2 write SetDistance2;
    // @name is only for backwards compatibility.
    property Expression: string read GetFormulaExpression write SetFormula stored False;
    // @name is the formula used to set the value of the @classname when
    // PHAST style interpolation is not used (that is:
    // @link(UsePHAST_Interpolation) = @false).
    // See @link(TPhastInterpolationValues).

    property Formula: string read GetFormulaExpression write SetFormula;
    // See TInterpValuesItem.Values.@link(
    // TPhastInterpolationValues.InterpolationDirection).
    property InterpolationDirection: TInterpolationDirection
      read GetInterpolationDirection write SetInterpolationDirection;
    // See TInterpValuesItem.Values.@link(
    // TPhastInterpolationValues.MixtureFormula).
    // @name is used to read and write @link(MixtureExpression).
    // After the model is loaded, @link(UpdateMixtureExpression) is called
    // to transfer the value saved in @link(FMixtureFormula) to
    // @link(MixtureExpression).
    // See @link(TPhastInterpolationValues).
    property MixtureFormula: string read GetMixtureFormula write
      SetMixtureFormula;
    // @name is the time at which this @classname takes effect.
    property Time: double read FTime write SetTime;
    // @name indicates whether or not PHAST-style interpolation will be used.
    // See @link(TPhastInterpolationValues).
    property UsePHAST_Interpolation: boolean read GetUsePHAST_Interpolation
      write SetUsePHAST_Interpolation;
  end;

  {@abstract(@name is used to define the value of one aspect of a boundary
    condition for one time period.  The aspect of the boundary condition
    must be a real number.  An example is the head in a specified head
    boundary.)}
  TRealPhastBoundaryCondition = class(TCustomPhastBoundaryCondition)
  private
    // See @link(Value1).
    function GetValue1: double;
    // See @link(Value2).
    function GetValue2: double;
    // See @link(Value1).
    procedure SetValue1(const Value: double);
    // See @link(Value2).
    procedure SetValue2(const Value: double);
  protected
    // @name indicates that this boundary condition
    // represents a real number.
    function GetDatatype: TRbwDataType; override;
  public
    // If PHAST-style interpolation will be used, @name indicates the first
    // value for the interpolation.
    // See @link(TCustomPhastBoundaryCondition.UsePHAST_Interpolation)
    // and @link(TPhastInterpolationValues).
    property Value1: double read GetValue1 write SetValue1;
    // If PHAST-style interpolation will be used, @name indicates the second
    // value for the interpolation.
    // See @link(TCustomPhastBoundaryCondition.UsePHAST_Interpolation)
    // and @link(TPhastInterpolationValues).
    property Value2: double read GetValue2 write SetValue2;
  end;

  {@abstract(@name is used to define the value of one aspect of a boundary
    condition for one time period.  The aspect of the boundary condition
    must be an integer.  An example is the associated solution
    in a specified head boundary.)}
  TIntegerPhastBoundaryCondition = class(TCustomPhastBoundaryCondition)
  private
    // See @link(Value1).
    function GetValue1: integer;
    // See @link(Value2).
    function GetValue2: integer;
    // See @link(Value1).
    procedure SetValue1(const Value: integer);
    // See @link(Value2).
    procedure SetValue2(const Value: integer);
  protected
    // @name indicates that this boundary condition
    // represents an integer.
    function GetDatatype: TRbwDataType; override;
  public
    // If PHAST-style interpolation will be used, @name indicates the first
    // value for the interpolation.
    // See @link(TCustomPhastBoundaryCondition.UsePHAST_Interpolation)
    // and @link(TPhastInterpolationValues).
    property Value1: integer read GetValue1 write SetValue1;
    // If PHAST-style interpolation will be used, @name indicates the second
    // value for the interpolation.
    // See @link(TCustomPhastBoundaryCondition.UsePHAST_Interpolation)
    // and @link(TPhastInterpolationValues).
    property Value2: integer read GetValue2 write SetValue2;
  end;




  { TODO : Replace TScreenObject with a generic property of
    TScreenObject that can hold everything that is currently in
    TScreenObject and can be replaced with something else for a different
    model. }


  {@abstract(@name is a @link(TScreenObject) that can store a
    series of integer or real number values associated with a data set.
    @name is used when importing a zone from an existing PHAST model.)}
  TMultiValueScreenObject = class(TScreenObject)
  private
    // See @link(IntegerValues).
    FIntegerValues: TIntegerDataListCollection;
    // See @link(RealValues).
    FRealValues: TRealDataListCollection;
    // See @link(IntegerValues).
    procedure SetIntegerValues(const Value: TIntegerDataListCollection);
    // See @link(RealValues).
    procedure SetRealValues(const Value: TRealDataListCollection);
  public
    procedure Assign(Source: TPersistent); override;
   // @name creates an instance of @classname.
    constructor Create(AnOwner: TComponent); override;
    // @name destroys the current instance of @classname.
    // Do not call @name directly. Call Free instead.
    destructor Destroy; override;
  published
    // @name stores integer values associated with one or more data sets.
    property IntegerValues: TIntegerDataListCollection read FIntegerValues
      write SetIntegerValues;
    // @name stores real number values associated with one or more data sets.
    property RealValues: TRealDataListCollection read FRealValues write
      SetRealValues;
  end;

  {@abstract(@name is used for reading a series of @link(TScreenObject)s
    from or writing them to a file or the clipboard.)}
  TScreenObjectCollection = class(TCollection)
  private
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    FModel: TBaseModel;
  public
    { TODO -cRefactor : Consider replacing Model with an interface. }
    // @name creates an instance of @classname.
    constructor Create(Model: TBaseModel);
    // @name calls @link(TScreenObjectItem.UpdateScreenObject) for
    // each @link(TScreenObjectItem).
    procedure UpdateScreenObjects;
  end;

  TScreenObjectClipboard = class(TComponent)
  private
    FScreenObjects: TScreenObjectCollection;
    procedure SetScreenObjects(const Value: TScreenObjectCollection);
  published
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    property ScreenObjects: TScreenObjectCollection read FScreenObjects
      write SetScreenObjects;
    { TODO -cRefactor : Consider replacing Model with an interface. }
    //
    procedure UpdateModel(Model: TBaseModel);
  end;

{@abstract(If the formula for a @link(TDataArray) in a @link(TScreenObject)
  is incorrect, @name is used to change it to a default value.)}
procedure ResetScreenObjectFunction(const DataSetIndex: integer;
  const ScreenObject: TScreenObject; const Compiler: TRbwParser;
  const DataSetDataType: TRbwDataType; const ErrorMessage: string;
  const IsBoundary: boolean; const ErrorFormula: string);

  // @abstract(Point1 and Point2 define a non-horizontal line.
  // Given Y, @name returns the
  // X value for this point along the line.)
function XIntersection(const Point1, Point2: TEdgePoint;
  const Y: real): real;

  // @abstract(Point1 and Point2 define a non-vertical line.
  // Given X, @name returns the
  // Y value for this point.)
function YIntersection(const Point1, Point2: TEdgePoint;
  const X: real): real; overload;
function YIntersection(const Point1, Point2: TPoint2D;
  const X: real): real; overload;

// @name is a comparison function for List.Sort.  It ensures that
// the @link(TScreenObject)s in the list will be sorted propertly.
// The @link(TScreenObject)s are sorted first by their root name
// (without case sensitivity) and then by the number following the
// root name.
function ScreenObjectCompare(Item1, Item2: Pointer): Integer;

    { TODO -cRefactor : Consider replacing Model with an interface. }
// result.Column and result.Row must have already been set when @name is called.
procedure GetLayerFromZ(Z: Double; var CellLocation: TCellLocation;
  Grid: TModflowGrid; Model: TBaseModel);

procedure SelectAScreenObject(ScreenObject: TScreenObject);
procedure SelectMultipleScreenObjects(ScreenObjects: TScreenObjectList);
procedure HideMultipleScreenObjects(ScreenObjects: TScreenObjectList);
procedure DeselectAScreenObject(ScreenObject: TScreenObject);
procedure AddAScreenObjectToSelection(ScreenObject: TScreenObject);

function FindIntersectionPoints(Poly1, Poly2: TSubPolygon;
  var Intersections: TIntersectionArray; 
  var Count: integer): boolean;

procedure GlobalRemoveScreenObjectDataArraySubscription(Sender: TObject; Subject: TObject;
  const AName: string);

procedure GlobalRestoreScreenObjectDataArraySubscription(Sender: TObject; Subject: TObject;
  const AName: string);

procedure GlobalRemoveElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
procedure GlobalRestoreElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
procedure GlobalRemoveHigherElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
procedure GlobalRestoreHigherElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
procedure GlobalRemoveLowerElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
procedure GlobalRestoreLowerElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
procedure GlobalRemoveBoundaryDataArraySubscription(Sender: TObject; Subject: TObject;
  const AName: string);
procedure GlobalRestoreBoundaryDataArraySubscription(Sender: TObject; Subject: TObject;
  const AName: string);
procedure GlobalRemovePhastBoundarySubscription(Sender: TObject; Subject: TObject;
  const AName: string);
procedure GlobalRestorePhastBoundarySubscription(Sender: TObject; Subject: TObject;
  const AName: string);
procedure GlobalRemoveFormulaObjectSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
procedure GlobalRestoreFormulaObjectSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
function IsValueInside(const First, Middle, Last: real): boolean;

const
  ObjectPrefix = 'Object';
  StrInvalidScreenObjec = 'Invalid screen object vertex index.';
  StrParentModel = 'Parent Model';

resourcestring
  StrErrorInTheFormula = 'Error in the formula for %0:s. Error message was "' +
  '%1:s". "0" will be used instead.';

implementation

uses Math, UndoItemsScreenObjects, BigCanvasMethods,
  GIS_Functions, frmFormulaErrorsUnit, SparseArrayUnit, ModelMuseUtilities,
  InteractiveTools, PhastModelUnit, CountObjectsUnit, GlobalVariablesUnit,
  frmGoPhastUnit, IsosurfaceUnit, LayerStructureUnit,
  gpc, frmGridValueUnit, frmErrorsAndWarningsUnit,
  frmScreenObjectPropertiesUnit, OctTreeClass,
  ModflowIrregularMeshUnit, DataArrayManagerUnit, DataSetNamesUnit;

resourcestring
  StrInvalidVertex0 = 'Invalid vertex (#%0:d) in "%1:s". %2:s';
  StrErrorInObjectS = 'Error in object %s. There is a circular reference in '
  + 'a formula defining the third dimension of the object. This is usually '
  + 'caused by an object both defining and using the layer boundaries. It may '
  + 'be defining the layer boundaries indirectly.';
  StrInvalidDataType = 'Invalid data type.';
  StrElevationFormula = '(X, Y, or Z coordinate formula)';
  StrLowerXYOrZCo = '(Lower X, Y, or Z coordinate formula)';
  StrHigherXYOrZC = '(Higher X, Y, or Z coordinate formula)';
  Str0sTreatedAs1s = '%0:s treated as %1:s';
  StrInvalidFormula = 'Invalid Formula';
  StrThereWasAnErrorR = 'There was an error reading elevation data for %s. P' +
  'lease contact the ModelMuse developer at rbwinst@usgs.gov regarding this ' +
  'problem.';
  StrThereWasAnErrorImported = 'There was an error reading imported data in ' +
  '%s.';
  StrTheFollowingObject = 'The following objects do not assign values to any' +
  ' %s. Check that the object is not above, below, or outside the mesh.';
  StrElements = 'elements';
  StrNodes = 'nodes';
  StrAssignedBy0sUsi = 'Assigned by %0:s using the formula "%1:s".';
  StrThereWasAProblemCircRef = 'There was a problem using %0:s. The error me' +
  'ssage was "%1:s". The number of elevation formulas has been changed to ze' +
  'ro in an attempt to avoid this problem.';
  StrThereIsAnErrorInUsed = 'There is an error in a formula in %0:s. The for' +
  'mula should result in either "True" or "False". The formula is for "%1:s.';
  StrTheFormula0sIn = 'The formula %0:s in object %1:s gives a result of the' +
  ' wrong type.';
  StrTheFormulaForUse = 'The formula for "Used" must result in a Boolean val' +
  'ue.';
  StrTheDataSet0s = 'The data set "%0:s" does not have the correct data type' +
  ' where it is being used by the object "%1:s."';
  StrTheGlobalVariable = 'The global variable "%0:s" does not have the corre' +
  'ct data type where it is being used by the object "%1:s."';

const
  SquareSize = 3;
  DiamondSize = 5;
//  MaxPointsInSubPolygon = 4;
  MaxReal = 3.4E38;
  ErrorMessageFormulaUnNamed = 'An invalid value assigned by a formula for '
    + 'an unamed data set in Object "%s" '
    + 'has been replaced by the maximum  single-precision real number.';
  ErrorMessageFormulaNamed = 'An invalid value assigned by a formula for '
    + 'Data Set "%0:s" in Object "%1:s" '
    + 'has been replaced by the maximum  single-precision real number.';
  ErrorString ='Layer: %0:d; Row: %1:d; Column: %2:d.';
  StrNoEdgeOfAnObject = sLineBreak + 'No edge of an object may cross another edge of '
    + 'the same object unless the two edges are in different "sections" of the '
    + 'object.';

type
  // @name is used when intersecting @link(TScreenObject)s with a
  // @link(TModflowGrid) in front or side views.
  TSegmentDirection = (sdUpRight, sdUpLeft, sdUp, sdDownRight,
    sdDownLeft, sdDown);

  TTempSeg = class(TObject)
    FSeg: TSegment2D;
    procedure Assign(Source: TTempSeg);
  end;


procedure GetLayerFromZ(Z: Double; var CellLocation: TCellLocation;
  Grid: TModflowGrid; Model: TBaseModel);
var
  LayerIndex: Integer;
  LocalLayer: integer;
begin
  // result.Column and result.Row must have already been set when
  // GetLayerFromZ is called.
  CellLocation.Layer := 0;
  if Grid.LayerElevations[CellLocation.Column, CellLocation.Row, 0] < Z then
  begin
    CellLocation.Layer := 0;
    CellLocation.Row := 1;
    CellLocation.Column := 1;
  end
  else if Grid.LayerElevations[CellLocation.Column, CellLocation.Row, 0] = Z
    then
  begin
    CellLocation.Layer := 1;
    Inc(CellLocation.Column);
    Inc(CellLocation.Row);
  end
  else
  begin
    for LayerIndex := 1 to Grid.LayerCount do
    begin
      if Grid.LayerElevations[CellLocation.Column, CellLocation.Row,
        LayerIndex] < Z then
      begin
        LocalLayer := (Model as TCustomModel).
          DataSetLayerToModflowLayer(LayerIndex-1);
        CellLocation.Layer := LocalLayer;
        Inc(CellLocation.Column);
        Inc(CellLocation.Row);
        break;
      end;
    end;
  end;
end;


function ScreenObjectCompare(Item1, Item2: Pointer): Integer;
var
  ScreenObject1: TScreenObject;
  ScreenObject2: TScreenObject;
  Name1, Name2: string;
  Number1, Number2: string;
  N1, N2: Int64;
  procedure ProcessName(var AName, ANumber: string);
  const
    Digits = ['0'..'9'];
  var
    Index: integer;
    LastDigit: integer;
  begin
    LastDigit := Length(AName) + 1;
    for Index := Length(AName) downto 1 do
    begin
      if CharInSet(AName[Index], Digits) then
      begin
        LastDigit := Index;
      end
      else
      begin
        break;
      end;
    end;
    ANumber := Copy(AName, LastDigit, MAXINT);
    SetLength(AName, LastDigit-1);
  end;
begin
  ScreenObject1 := Item1;
  ScreenObject2 := Item2;
  Name1 := ScreenObject1.Name;
  Name2 := ScreenObject2.Name;
  ProcessName(Name1, Number1);
  ProcessName(Name2, Number2);
  result := AnsiCompareText(Name1, Name2);
  if result = 0 then
  begin
    if Number1 = Number2 then
    begin
      Exit;
    end
    else if Number1 = '' then
    begin
      result := -1
    end
    else if Number2 = '' then
    begin
      result := 1
    end
    else
    begin
      result := Length(Number1) - Length(Number2);
      if result = 0 then
      begin
        while (not TryStrToInt64(Number1, N1))
          or (not TryStrToInt64(Number2, N2)) do
        begin
          N1 := StrToInt64(Copy(Number1, 1, 15));
          N2 := StrToInt64(Copy(Number2, 1, 15));
          result := Sign(N1 - N2);
          if Result = 0 then
          begin
            Number1 := Copy(Number1, 16, MAXINT);
            Number2 := Copy(Number2, 16, MAXINT);
            if Number1 = Number2 then
            begin
              Result := 0;
              Exit;
            end
            else if Number1 = '' then
            begin
              result := -1;
              Exit;
            end
            else if Number2 = '' then
            begin
              result := 1;
              Exit;
            end
          end
          else
          begin
            Exit;
          end;
        end;
        result := Sign(N1 - N2);
      end;
    end;
  end;
end;

procedure ResetScreenObjectFunction(const DataSetIndex: integer;
  const ScreenObject: TScreenObject; const Compiler: TRbwParser;
  const DataSetDataType: TRbwDataType; const ErrorMessage: string;
  const IsBoundary: boolean; const ErrorFormula: string);
var
  ScreenObjectFunction: string;
begin
  if IsBoundary then
  begin
    if DataSetIndex >= 0 then
    begin
      ScreenObjectFunction :=
        ScreenObject.BoundaryDataSetFormulas[DataSetIndex];
      frmFormulaErrors.AddFormulaError(ScreenObject.Name,
        ScreenObject.BoundaryDataSets[DataSetIndex].Name,
        ScreenObjectFunction, ErrorMessage);
    end
    else
    begin
      ScreenObjectFunction := ErrorFormula;
      frmFormulaErrors.AddFormulaError(ScreenObject.Name,
        '', ScreenObjectFunction, ErrorMessage);
    end;
  end
  else
  begin
    ScreenObjectFunction := ScreenObject.DataSetFormulas[DataSetIndex];
    frmFormulaErrors.AddFormulaError(ScreenObject.Name,
      ScreenObject.DataSets[DataSetIndex].Name,
      ScreenObjectFunction, ErrorMessage);
  end;

  case DataSetDataType of
    rdtDouble, rdtInteger:
      begin
        ScreenObjectFunction := '0';
      end;
    rdtBoolean:
      begin
        ScreenObjectFunction := 'False';
      end;
    rdtString:
      begin
        ScreenObjectFunction := '"0"';
      end;
  else
    Assert(False);
  end;
  if IsBoundary then
  begin
    if DataSetIndex >= 0 then
    begin
      ScreenObject.BoundaryDataSetFormulas[DataSetIndex] :=
        ScreenObjectFunction;
    end;
  end
  else
  begin
    ScreenObject.DataSetFormulas[DataSetIndex] := ScreenObjectFunction;
  end;

  Compiler.Compile(ScreenObjectFunction);
end;

// @abstract(@name returns true if Middle is between First and Last.
// First and Last do not need to be in order.  @name will
// also return true if it is just barely outside First to Last.)
function IsValueInside(const First, Middle, Last: real): boolean;
var
  Epsilon: double;
begin
  Epsilon := Abs(First - Last) / 1E8;
  // This function returns True if Middle is between First and Last.
  result := ((First - Epsilon <= Middle) and (Middle <= Last + Epsilon))
    or ((First + Epsilon >= Middle) and (Middle >= Last - Epsilon));
end;

// @abstract(@name is used in sorting TPoint2Ds
// along a line segment so that the
// points are arranged in order from lower left to upper right.)
function SortPointsRightUp(Item1, Item2: Pointer): Integer;
  // This function is used in sorting points along a line segment so that the
  // points are arranged in order from lower left to upper right.
var
  Point1, Point2: TPoint2D;
  doubleResult: real;
begin
  Point1 := P2DRealPoint(Item1)^;
  Point2 := P2DRealPoint(Item2)^;
  doubleResult := Point1.X - Point2.X;
  if doubleResult > 0 then
  begin
    result := 1;
  end
  else if doubleResult < 0 then
  begin
    result := -1
  end
  else
  begin
    doubleResult := Point1.Y - Point2.Y;
    if doubleResult > 0 then
    begin
      result := 1;
    end
    else if doubleResult < 0 then
    begin
      result := -1
    end
    else
    begin
      result := 0;
    end;
  end;
end;

// @abstract(@name is used in sorting TPoint2Ds
// along a line segment so that the
// points are arranged in order from upper left to lower right.)
function SortPointsRightDown(Item1, Item2: Pointer): Integer;
  // This function is used in sorting points along a line segment so that the
  // points are arranged in order from upper left to lower right.
var
  Point1, Point2: TPoint2D;
  doubleResult: real;
begin
  Point1 := P2DRealPoint(Item1)^;
  Point2 := P2DRealPoint(Item2)^;
  doubleResult := Point1.X - Point2.X;
  if doubleResult > 0 then
  begin
    result := 1;
  end
  else if doubleResult < 0 then
  begin
    result := -1
  end
  else
  begin
    doubleResult := Point2.Y - Point1.Y;
    if doubleResult > 0 then
    begin
      result := 1;
    end
    else if doubleResult < 0 then
    begin
      result := -1
    end
    else
    begin
      result := 0;
    end;
  end;
end;

// @abstract(@name is used in sorting TPoint2Ds
// along a line segment so that the
// points are arranged in order from lower right to upper left.)
function SortPointsLeftUp(Item1, Item2: Pointer): Integer;
  // This function is used in sorting points along a line segment so that the
  // points are arranged in order from lower right to upper left.
var
  Point1, Point2: TPoint2D;
  doubleResult: real;
begin
  Point1 := P2DRealPoint(Item1)^;
  Point2 := P2DRealPoint(Item2)^;
  doubleResult := Point2.X - Point1.X;
  if doubleResult > 0 then
  begin
    result := 1;
  end
  else if doubleResult < 0 then
  begin
    result := -1
  end
  else
  begin
    doubleResult := Point1.Y - Point2.Y;
    if doubleResult > 0 then
    begin
      result := 1;
    end
    else if doubleResult < 0 then
    begin
      result := -1
    end
    else
    begin
      result := 0;
    end;
  end;
end;

// @abstract(@name is used in sorting TPoint2Ds
// along a line segment so that the
// points are arranged in order from upper right to lower left.)
function SortPointsLeftDown(Item1, Item2: Pointer): Integer;
  // This function is used in sorting points along a line segment so that the
  // points are arranged in order from upper right to lower left.
var
  Point1, Point2: TPoint2D;
  doubleResult: real;
begin
  Point1 := P2DRealPoint(Item1)^;
  Point2 := P2DRealPoint(Item2)^;
  doubleResult := Point2.X - Point1.X;
  if doubleResult > 0 then
  begin
    result := 1;
  end
  else if doubleResult < 0 then
  begin
    result := -1
  end
  else
  begin
    doubleResult := Point2.Y - Point1.Y;
    if doubleResult > 0 then
    begin
      result := 1;
    end
    else if doubleResult < 0 then
    begin
      result := -1
    end
    else
    begin
      result := 0;
    end;
  end;
end;

function SortByEdgePostion(const Point1, Point2: TEdgePoint): integer;
begin
  result := 0;
  if Point1.Position = Point2.Position then
  begin
    result := 0;
  end
  else if Point1.Position = epFirst then
  begin
    result := -1;
  end
  else if Point2.Position = epFirst then
  begin
    result := 1;
  end
  else if Point1.Position = epLast then
  begin
    result := -1;
  end
  else if Point2.Position = epLast then
  begin
    result := 1;
  end
  else Assert(False);
end;



function SortEdgePointsRightUp(Item1, Item2: Pointer): Integer;
  // This function is used in sorting points along a line segment so that the
  // points are arranged in order from lower left to upper right.
var
  Point1, Point2: TEdgePoint;
  doubleResult: real;
begin
  Point1 := PEdgePoint(Item1)^;
  Point2 := PEdgePoint(Item2)^;
  doubleResult := Point1.X - Point2.X;
  if doubleResult > 0 then
  begin
    result := 1;
  end
  else if doubleResult < 0 then
  begin
    result := -1
  end
  else
  begin
    doubleResult := Point1.Y - Point2.Y;
    if doubleResult > 0 then
    begin
      result := 1;
    end
    else if doubleResult < 0 then
    begin
      result := -1
    end
    else
    begin
      result := SortByEdgePostion(Point1, Point2);
    end;
  end;
end;

function SortEdgePointsRightDown(Item1, Item2: Pointer): Integer;
  // This function is used in sorting points along a line segment so that the
  // points are arranged in order from upper left to lower right.
var
  Point1, Point2: TEdgePoint;
  doubleResult: real;
begin
  Point1 := PEdgePoint(Item1)^;
  Point2 := PEdgePoint(Item2)^;
  doubleResult := Point1.X - Point2.X;
  if doubleResult > 0 then
  begin
    result := 1;
  end
  else if doubleResult < 0 then
  begin
    result := -1
  end
  else
  begin
    doubleResult := Point2.Y - Point1.Y;
    if doubleResult > 0 then
    begin
      result := 1;
    end
    else if doubleResult < 0 then
    begin
      result := -1
    end
    else
    begin
      result := SortByEdgePostion(Point1, Point2);
    end;
  end;
end;

function SortEdgePointsLeftUp(Item1, Item2: Pointer): Integer;
  // This function is used in sorting points along a line segment so that the
  // points are arranged in order from lower right to upper left.
var
  Point1, Point2: TEdgePoint;
  doubleResult: real;
begin
  Point1 := PEdgePoint(Item1)^;
  Point2 := PEdgePoint(Item2)^;
  doubleResult := Point2.X - Point1.X;
  if doubleResult > 0 then
  begin
    result := 1;
  end
  else if doubleResult < 0 then
  begin
    result := -1
  end
  else
  begin
    doubleResult := Point1.Y - Point2.Y;
    if doubleResult > 0 then
    begin
      result := 1;
    end
    else if doubleResult < 0 then
    begin
      result := -1
    end
    else
    begin
      result := SortByEdgePostion(Point1, Point2);
    end;
  end;
end;

function SortEdgePointsLeftDown(Item1, Item2: Pointer): Integer;
  // This function is used in sorting points along a line segment so that the
  // points are arranged in order from upper right to lower left.
var
  Point1, Point2: TEdgePoint;
  doubleResult: real;
begin
  Point1 := PEdgePoint(Item1)^;
  Point2 := PEdgePoint(Item2)^;
  doubleResult := Point2.X - Point1.X;
  if doubleResult > 0 then
  begin
    result := 1;
  end
  else if doubleResult < 0 then
  begin
    result := -1
  end
  else
  begin
    doubleResult := Point2.Y - Point1.Y;
    if doubleResult > 0 then
    begin
      result := 1;
    end
    else if doubleResult < 0 then
    begin
      result := -1
    end
    else
    begin
      result := SortByEdgePostion(Point1, Point2);
    end;
  end;
end;

function Distance(const Point1, Point2: TEdgePoint): real; inline;
begin
  result := Sqrt(sqr(Point1.X - Point2.X) + sqr(Point1.Y - Point2.Y));
end;

function MidPoint(const Point1, Point2: TEdgePoint): TEdgePoint; inline;
begin
  result.X := (Point1.X + Point2.X)/2;
  result.Y := (Point1.Y + Point2.Y)/2;
end;

function YIntersection(const Point1, Point2: TEdgePoint; const X: real):
  real;
var
  Slope: real;
  Intercept: real;
begin
  // Point1 and Point2 define a non-vertical line.  Given X, return the
  // Y value for this point.
  Assert(Point1.X <> Point2.X);
  Slope := (Point2.Y - Point1.Y) / (Point2.X - Point1.X);
  Intercept := Point1.Y - Slope * Point1.X;
  result := Slope * X + Intercept;
end;

function YIntersection(const Point1, Point2: TPoint2D;
  const X: real): real; overload;
var
  Slope: real;
  Intercept: real;
begin
  // Point1 and Point2 define a non-vertical line.  Given X, return the
  // Y value for this point.
  Assert(Point1.X <> Point2.X);
  Slope := (Point2.Y - Point1.Y) / (Point2.X - Point1.X);
  Intercept := Point1.Y - Slope * Point1.X;
  result := Slope * X + Intercept;
end;

function XIntersection(const Point1, Point2: TEdgePoint; const Y: real):
  real;
var
  // Point1 and Point2 define a non-horizontal line.  Given Y, return the
  // X value for this point along the line.
  Slope: real;
  Intercept: real;
begin
  Assert(Point1.Y <> Point2.Y);
  Slope := (Point2.X - Point1.X) / (Point2.Y - Point1.Y);
  Intercept := Point1.X - Slope * Point1.Y;
  result := Slope * Y + Intercept;
end;

procedure TScreenObject.UpdateUsedVariables(VariableList, DataSetList: TList;
  LayerIndex, RowIndex, ColIndex: Integer);
var
  VarIndex: Integer;
  AnotherDataSet: TDataArray;
  Variable: TCustomValue;
  Temp: TValueArrayStorage;
begin
  Temp := FCurrentValues;
  try
    for VarIndex := 0 to VariableList.Count - 1 do
    begin
      Variable := VariableList[VarIndex];
      AnotherDataSet := DataSetList[VarIndex];
      if AnotherDataSet <> nil then
      begin
        case AnotherDataSet.Orientation of
          dsoTop:
            begin
              LayerIndex := 0;
            end;
          dsoFront:
            begin
              RowIndex := 0;
            end;
          dsoSide:
            begin
              ColIndex := 0;
            end;
          dso3D:
            begin
            end;
        else
          Assert(False);
        end;
        case Variable.ResultType of
          rdtDouble:
            begin
              TRealVariable(Variable).Value :=
                AnotherDataSet.RealData[LayerIndex, RowIndex, ColIndex];
            end;
          rdtInteger:
            begin
              TIntegerVariable(Variable).Value :=
                AnotherDataSet.IntegerData[LayerIndex, RowIndex, ColIndex];
            end;
          rdtBoolean:
            begin
              TBooleanVariable(Variable).Value :=
                AnotherDataSet.BooleanData[LayerIndex, RowIndex, ColIndex];
            end;
          rdtString:
            begin
              TStringVariable(Variable).Value :=
                AnotherDataSet.StringData[LayerIndex, RowIndex, ColIndex];
            end;
        else
          Assert(False);
        end;
      end;
    end;
  finally
    FCurrentValues := Temp;
  end;
end;

procedure TScreenObject.InitializeUsedDataSets(Model: TBaseModel; Compiler: TRbwParser;
  const Expression: TExpression; VariableList, DataSetList: TList);
var
  VarIndex: integer;
  VarName: string;
  VarPosition: integer;
  Variable: TCustomValue;
  AnotherDataSet: TDataArray;
  UsedVariables: TStringList;
  LocalModel: TCustomModel;
  TempAssignmentLocation: TAssignmentLocation;
  Temp: TValueArrayStorage;
begin
  Temp := FCurrentValues;
  TempAssignmentLocation := FAssignmentLocation;
  UsedVariables := TStringList.Create;
  try
    LocalModel := Model as TCustomModel;
    UsedVariables.Assign(Expression.VariablesUsed);

    for VarIndex := 0 to UsedVariables.Count - 1 do
    begin
      VarName := UsedVariables[VarIndex];
      VarPosition := Compiler.IndexOfVariable(VarName);
      if VarPosition >= 0 then
      begin
        Variable := Compiler.Variables[VarPosition];
        VariableList.Add(Variable);
        AnotherDataSet := LocalModel.DataArrayManager.GetDataSetByName(VarName);
        if AnotherDataSet = nil then
        begin
          DataSetList.Add(nil);
        end
        else
        begin
          DataSetList.Add(AnotherDataSet);
          Assert(AnotherDataSet.DataType = Variable.ResultType);
          AnotherDataSet.Initialize;
          LocalModel.DataArrayManager.AddDataSetToCache(AnotherDataSet);
        end;
      end;
    end;
  finally
    FCurrentValues := Temp;
    FAssignmentLocation := TempAssignmentLocation;
    UsedVariables.Free;
  end;
end;


{ TScreenObject }

function TScreenObject.AddBoundaryDataSet(const DataSet: TDataArray): integer;
var
  Subscription: TObserver;
begin
  CreateBoundaryDataSets;
  result := FBoundaryDataSets.IndexOf(DataSet);
  if result < 0 then
  begin
    Subscription := nil;
    if FCanInvalidateModel then
    begin

      InvalidateModel;
      Subscription := TObserver.Create(nil);
      Subscription.UpdateWithName(DataSet.Name + Name);
      CreateBoundaryDataSetSubscriptions;
      FBoundaryDataSetSubscriptions.Add(Subscription);
    end;
    result := FBoundaryDataSets.Add(DataSet);
    CreateBoundaryDataSetFormulas;
    FBoundaryDataSetFormulas.Add(nil);
    if FCanInvalidateModel then
    begin
      self.TalksTo(DataSet);
      Subscription.TalksTo(DataSet);
      self.TalksTo(Subscription);
      case ElevationCount of
        ecZero:
          begin
            // do nothing
          end;
        ecOne:
          begin
            if not (csReading in FModel.ComponentState) then
            begin
              if FElevSubscription = nil then
              begin
                CreateElevationSubscription;
              end;
              FElevSubscription.TalksTo(DataSet);
            end;
          end;
        ecTwo:
          begin
            if not (csReading in FModel.ComponentState) then
            begin
              if FTopElevSubscription = nil then
              begin
                CreateTopElevationSubscription
              end;
              FTopElevSubscription.TalksTo(DataSet);

              if FBottomElevSubscription = nil then
              begin
                CreateBottomElevationSubscription
              end;
              FBottomElevSubscription.TalksTo(DataSet);
            end;
          end;
      else
        Assert(False);
      end;
      DataSet.Invalidate;
    end;
  end;
end;

function TScreenObject.CanAddDataSet(const DataSet: TDataArray): boolean;
begin
  result := DataSet <> nil;
  if not result then
  begin
    Exit;
  end;
  if DataSet.Orientation <> dso3D then
  begin
    case ViewDirection of
      vdTop:
        begin
          if DataSet.Orientation <> dsoTop then
          begin
            result := False;
          end;
        end;
      vdFront:
        begin
          if DataSet.Orientation <> dsoFront then
          begin
            result := False;
          end;
        end;
      vdSide:
        begin
          if DataSet.Orientation <> dsoSide then
          begin
            result := False;
          end;
        end;
    else
      Assert(False);
    end;
  end;
end;

procedure TScreenObject.AddPoint(APoint: TPoint2D; NewPart: boolean);
var
  IntersectPoint: TPoint2D;
  Epsilon: real;
  SubPolygonList: TList;
  SubIndex: Integer;
  SubPolygon: TSubPolygon;
  PointIndex: Integer;
  StartIndex: Integer;
  function NearlyTheSame(const A, B: real): boolean;
  begin
    result := A = B;
    if not result then
    begin
      result := Abs(A - B) / (Abs(A) + Abs(B)) < Epsilon;
    end;
  end;
  function PointsNearlyTheSame(Point1, Point2: TPoint2D): boolean;
  begin
    result := NearlyTheSame(Point1.X, Point2.X) and
      NearlyTheSame(Point1.Y, Point2.Y);
  end;
begin
  // 1.7e+308 is the value of MaxDouble from System.SysUtils
  if APoint.x > 1.7e+308 then
  begin
    APoint.x := 1.7e+308;
  end;
  if APoint.y > 1.7e+308 then
  begin
    APoint.y := 1.7e+308;
  end;
  if APoint.x < -1.7e+308 then
  begin
    APoint.x := -1.7e+308;
  end;
  if APoint.y < -1.7e+308 then
  begin
    APoint.y := -1.7e+308;
  end;
  BeginUpdate;
  try
    FIsClosedCached := False;
    if NewPart and (Count > 0) then
    begin
      SectionStarts.Add;
      SectionStarts.IntValues[SectionStarts.Count -1] := Count;
      DestroyLastSubPolygon;
    end;
    // Check to make sure that this won't
    // cause the screen object to intersect itself.
    if SectionLength[SectionCount-1] >= 2 then
    begin
      if FLastSubPolygon = nil then
      begin
        CreateLastSubPolygon;
      end;
      SubPolygonList := TList.Create;
      try
        Epsilon := Abs(FMaxX);
        Epsilon := Max(Epsilon, Abs(FMinX));
        Epsilon := Max(Epsilon, Abs(FMaxY));
        Epsilon := Max(Epsilon, Abs(FMinY));
        Epsilon := Epsilon / 1E14;

        FLastSubPolygon.BoxIntersect(Points[Count - 1], APoint, SubPolygonList);
        for SubIndex := 0 to SubPolygonList.Count - 1 do
        begin
          SubPolygon := SubPolygonList[SubIndex];
          for PointIndex := 0 to SubPolygon.Count - 2 do
          begin
            StartIndex := SubPolygon.Start + PointIndex;
            if StartIndex >= Count-2 then
            begin
              break;
            end;
            if Intersection(Points[Count - 1], APoint, StartIndex,
              IntersectPoint) = irDoIntersect then
            begin
              if not PointsNearlyTheSame(IntersectPoint, Points[Count - 1])
                and not PointsNearlyTheSame(IntersectPoint, Points[FLastSubPolygon.Start])
                and not PointsNearlyTheSame(IntersectPoint, APoint)
                then
              begin
                if FIsUpdating then
                begin
                  APoint := IntersectPoint;
                end
                else
                begin
                  raise EScreenObjectError.Create(Format(StrInvalidVertex0,
                    [Count+1, Name, StrNoEdgeOfAnObject]));
                end;
              end;
//              if PointsNearlyTheSame(IntersectPoint, APoint) then
//              begin
//                APoint := IntersectPoint;
//              end;
            end;
          end;
        end;
      finally
        SubPolygonList.Free;
      end;
    end;
    // Check to make sure that this won't
    // cause the screen object to intersect itself.
  //  if (SectionLength[SectionCount-1] >= 2) then
  //  begin
  //    if Intersection(Points[Count - 1], APoint, IntersectPoint) = irDoIntersect
  //      then
  //    begin
  //      Epsilon := 0;
  //      for Index := 0 to Count - 1 do
  //      begin
  //        TempPoint := Points[Index];
  //        Epsilon := Max(Epsilon, Abs(TempPoint.X));
  //        Epsilon := Max(Epsilon, Abs(TempPoint.Y));
  //      end;
  //      Epsilon := Epsilon / 1E14;
  //
  //      if not PointsNearlyTheSame(IntersectPoint, Points[Count - 1])
  //        and not PointsNearlyTheSame(IntersectPoint, Points[SectionStart[SectionCount-1]]) then
  //      begin
  //        raise EScreenObjectError.Create('Invalid vertex (#' + IntToStr(Count+1)
  //          + ') in "' + Name + '".');
  //      end;
  //    end;
  //  end;

    // Check that the array is big enough.  If it isn't, make it bigger.
    if FCount = FCapacity then
    begin
      Grow;
    end;
    FPoints[FCount] := APoint;
    FSelectedVertices[FCount] := False;
    Inc(FCount);
    if FLastSubPolygon <> nil then
    begin
      FLastSubPolygon.GrowByOne;
    end;

    // update the variables that stores the extent of the screen object.
    if FCount = 1 then
    begin
      FMaxX := APoint.X;
      FMinX := APoint.X;
      FMaxY := APoint.Y;
      FMinY := APoint.Y;
      FRecalculateBox := False
    end
    else if not FRecalculateBox then
    begin
      // there is no point in doing this if RecalculateBox indicates
      // that the values are invalid anyway.  Instead, defer recalculating them
      // until they are needed.
      if APoint.X > FMaxX then
      begin
        FMaxX := APoint.X;
      end
      else if APoint.X < FMinX then
      begin
        FMinX := APoint.X;
      end;

      if APoint.Y > FMaxY then
      begin
        FMaxY := APoint.Y;
      end
      else if APoint.Y < FMinY then
      begin
        FMinY := APoint.Y;
      end;
    end;

    // indicate that the screen object has
    // changed so internal data will be updated
    // when it is needed.
  //  Invalidate;
  finally
    EndUpdate;
  end;

end;

procedure TScreenObject.Assign(Source: TPersistent);
var
  Index: integer;
  AScreenObject: TScreenObject;
  DataSetIndex: Integer;
  DataArray: TDataArray;
  DSIndex: Integer;
  AssignModelToBoundary: boolean;
  DataSet: TDataArray;
  BoundarArray: TDataArray;
  AChildModel: TChildModel;
  ABaseModel: TBaseModel;
begin
  if Source is TScreenObject then
  begin
    AScreenObject := TScreenObject(Source);
  end
  else
  begin
    inherited Assign(Source);
    Exit;
  end;
  if not FCanInvalidateModel then
  begin
    FModel := AScreenObject.FModel;
  end;

  ObjectLabel := AScreenObject.ObjectLabel;
  ObjectVertexLabel := AScreenObject.ObjectVertexLabel;
  SectionLabel := AScreenObject.SectionLabel;
  // copy the data of the other screen object.
  ChildModelName := AScreenObject.ChildModelName;
//  ChildModelDiscretization := AScreenObject.ChildModelDiscretization;
  Comment := AScreenObject.Comment;
  CellSize := AScreenObject.CellSize;
  CellSizeUsed := AScreenObject.CellSizeUsed;
  EvaluatedAt := AScreenObject.EvaluatedAt;
  Visible := AScreenObject.Visible;
  Capacity := AScreenObject.Capacity;
  Count := AScreenObject.Count;
  Name := AScreenObject.Name;
  FViewDirection := AScreenObject.FViewDirection;
  MoveToPoints(AScreenObject.FPoints);
  MoveToSelectedPoints(AScreenObject.FSelectedVertices);
  DuplicatesAllowed := AScreenObject.DuplicatesAllowed;
  MinimumFraction := AScreenObject.MinimumFraction;

  FillColor := AScreenObject.FillColor;
  LineColor := AScreenObject.LineColor;
  SetValuesOfEnclosedCells := AScreenObject.SetValuesOfEnclosedCells;
  SetValuesOfIntersectedCells :=
    AScreenObject.SetValuesOfIntersectedCells;
  SetValuesByInterpolation := AScreenObject.SetValuesByInterpolation;
  ColorLine := AScreenObject.ColorLine;
  FillScreenObject := AScreenObject.FillScreenObject;
  QuadtreeRefinementLevel := AScreenObject.QuadtreeRefinementLevel;
//  VerticesArePilotPoints := AScreenObject.VerticesArePilotPoints;

  AScreenObject.ImportedSectionElevations.RestoreData;
  ImportedSectionElevations := AScreenObject.ImportedSectionElevations;
  AScreenObject.ImportedHigherSectionElevations.RestoreData;
  ImportedHigherSectionElevations := AScreenObject.ImportedHigherSectionElevations;
  AScreenObject.ImportedLowerSectionElevations.RestoreData;
  ImportedLowerSectionElevations := AScreenObject.ImportedLowerSectionElevations;
  if AScreenObject.ImportedSectionElevations.ErrorRestoringData
    or AScreenObject.ImportedHigherSectionElevations.ErrorRestoringData
    or AScreenObject.ImportedLowerSectionElevations.ErrorRestoringData
    then
  begin
    MessageDlg(Format(StrThereWasAnErrorR, [AScreenObject.Name]),
      mtError, [mbOK], 0);
  end;

  if AScreenObject.ImportedValues.ErrorRestoringData then
  begin
    MessageDlg(Format(StrThereWasAnErrorImported, [AScreenObject.Name]),
      mtError, [mbOK], 0);
  end;
  AScreenObject.ImportedValues.RestoreData;
  ImportedValues := AScreenObject.ImportedValues;
  PositionLocked := AScreenObject.PositionLocked;
  StoredSutraAngle := AScreenObject.StoredSutraAngle;
//  ModflowSubObservations := AScreenObject.ModflowSubObservations;
//  LinkedChildModels := AScreenObject.LinkedChildModels;

  for Index := DataSetCount - 1 downto 0 do
  begin
    DataSet := DataSets[Index];
    if AScreenObject.IndexOfDataSet(DataSet) < 0 then
    begin
      DeleteDataSet(Index);
    end;
  end;

  ElevationCount := AScreenObject.ElevationCount;
  ElevationFormula := AScreenObject.ElevationFormula;
  HigherElevationFormula := AScreenObject.HigherElevationFormula;
  LowerElevationFormula := AScreenObject.LowerElevationFormula;

  for Index := 0 to AScreenObject.DataSetCount - 1 do
  begin
    DataSet := AScreenObject.DataSets[Index];
    DSIndex := IndexOfDataSet(DataSet);
    if DSIndex < 0 then
    begin
      DSIndex := AddDataSet(DataSet);
    end;
    if DSIndex >= 0 then
    begin
      DataSetFormulas[DSIndex] := AScreenObject.DataSetFormulas[Index];
    end;
  end;


  Selected := AScreenObject.Selected;
  if Selected and (AScreenObject.SelectedVertexCount > 0) then
  begin
    for Index := 0 to Count - 1 do
    begin
      SelectedVertices[Index] := AScreenObject.SelectedVertices[Index];
    end;
  end
  else
  begin
    ClearSelectedVertices;
  end;

  // All PHAST boundaries are evaluated at nodes.
  InterpValues := AScreenObject.InterpValues;
  if AScreenObject.EvaluatedAt = eaNodes then
  begin
    FluxBoundary := AScreenObject.FluxBoundary;
  end
  else
  begin
    FluxBoundary.Clear;
  end;

  AssignModelToBoundary := (LeakyBoundary.Model = nil);
  if AssignModelToBoundary then
  begin
    LeakyBoundary.Model := AScreenObject.LeakyBoundary.Model;
  end;
  if AScreenObject.EvaluatedAt = eaNodes then
  begin
    LeakyBoundary := AScreenObject.LeakyBoundary;
  end
  else
  begin
    LeakyBoundary.Clear
  end;
  if AssignModelToBoundary then
  begin
    LeakyBoundary.Model := nil;
  end;

  AssignModelToBoundary := (RiverBoundary.Model = nil);
  if AssignModelToBoundary then
  begin
    RiverBoundary.Model := AScreenObject.RiverBoundary.Model;
  end;
  if AScreenObject.EvaluatedAt = eaNodes then
  begin
    RiverBoundary := AScreenObject.RiverBoundary;
  end
  else
  begin
    RiverBoundary.Clear;
  end;
  if AssignModelToBoundary then
  begin
    RiverBoundary.Model := nil;
  end;

  AssignModelToBoundary := (SpecifiedHeadBoundary.Model = nil);
  if AssignModelToBoundary then
  begin
    SpecifiedHeadBoundary.Model := AScreenObject.SpecifiedHeadBoundary.Model;
  end;
  if AScreenObject.EvaluatedAt = eaNodes then
  begin
    SpecifiedHeadBoundary := AScreenObject.SpecifiedHeadBoundary;
  end
  else
  begin
    SpecifiedHeadBoundary.Clear;
  end;
  if AssignModelToBoundary then
  begin
    SpecifiedHeadBoundary.Model := nil;
  end;

  if AScreenObject.EvaluatedAt = eaNodes then
  begin
    SpecifiedSolutionBoundary := AScreenObject.SpecifiedSolutionBoundary;
  end
  else
  begin
    SpecifiedSolutionBoundary.Clear;
  end;

  if AScreenObject.EvaluatedAt = eaNodes then
  begin
    WellBoundary := AScreenObject.WellBoundary;
  end
  else
  begin
    WellBoundary.Clear;
  end;

  if not FCanInvalidateModel then
  begin
    FModel := nil;
  end;

  ModflowChdBoundary := AScreenObject.ModflowChdBoundary;
  ModflowGhbBoundary := AScreenObject.ModflowGhbBoundary;
  ModflowWellBoundary := AScreenObject.ModflowWellBoundary;
  ModflowRivBoundary := AScreenObject.ModflowRivBoundary;
  ModflowDrnBoundary := AScreenObject.ModflowDrnBoundary;
  ModflowDrtBoundary := AScreenObject.ModflowDrtBoundary;
  ModflowRchBoundary := AScreenObject.ModflowRchBoundary;
  ModflowEvtBoundary := AScreenObject.ModflowEvtBoundary;
  ModflowEtsBoundary := AScreenObject.ModflowEtsBoundary;
  ModflowResBoundary := AScreenObject.ModflowResBoundary;
  ModflowLakBoundary := AScreenObject.ModflowLakBoundary;
  ModflowSfrBoundary := AScreenObject.ModflowSfrBoundary;
  ModflowStrBoundary := AScreenObject.ModflowStrBoundary;
  ModflowUzfBoundary := AScreenObject.ModflowUzfBoundary;
  ModflowHeadObservations := AScreenObject.ModflowHeadObservations;
  ModflowHfbBoundary := AScreenObject.ModflowHfbBoundary;
  ModflowStreamGage := AScreenObject.ModflowStreamGage;
  ModflowMnw2Boundary := AScreenObject.ModflowMnw2Boundary;
  ModflowMnw1Boundary := AScreenObject.ModflowMnw1Boundary;
  Mt3dmsConcBoundary := AScreenObject.Mt3dmsConcBoundary;
  Mt3dmsTransObservations := AScreenObject.Mt3dmsTransObservations;
  Mt3dUzfRechConc := AScreenObject.Mt3dUzfRechConc;
  Mt3dUztSatEtConcBoundary := AScreenObject.Mt3dUztSatEtConcBoundary;
  Mt3dUztUnsatEtConcBoundary := AScreenObject.Mt3dUztUnsatEtConcBoundary;
  Mt3dUzSsmSinkConcBoundary := AScreenObject.Mt3dUzSsmSinkConcBoundary;
  Mt3dLktConcBoundary := AScreenObject.Mt3dLktConcBoundary;
  Mt3dSftConcBoundary := AScreenObject.Mt3dSftConcBoundary;
  ModflowHydmodData := AScreenObject.ModflowHydmodData;
  ModflowFhbHeadBoundary := AScreenObject.ModflowFhbHeadBoundary;
  ModflowFhbFlowBoundary := AScreenObject.ModflowFhbFlowBoundary;
  ModflowFmpWellBoundary := AScreenObject.ModflowFmpWellBoundary;
  ModflowFmpPrecip := AScreenObject.ModflowFmpPrecip;
  ModflowFmpRefEvap := AScreenObject.ModflowFmpRefEvap;
  ModflowFmpCropID := AScreenObject.ModflowFmpCropID;
  ModflowFmpFarmID := AScreenObject.ModflowFmpFarmID;
  ModflowCfpPipes := AScreenObject.ModflowCfpPipes;
  ModflowCfpFixedHeads := AScreenObject.ModflowCfpFixedHeads;
  ModflowCfpRchFraction := AScreenObject.ModflowCfpRchFraction;
  ModflowSwrRain := AScreenObject.ModflowSwrRain;
  ModflowSwrEvap := AScreenObject.ModflowSwrEvap;
  ModflowSwrLatInflow := AScreenObject.ModflowSwrLatInflow;
  ModflowSwrStage := AScreenObject.ModflowSwrStage;
  ModflowSwrDirectRunoff := AScreenObject.ModflowSwrDirectRunoff;
  ModflowSwrReaches := AScreenObject.ModflowSwrReaches;
  ModflowSwiObservations := AScreenObject.ModflowSwiObservations;
  ModflowRipBoundary := AScreenObject.ModflowRipBoundary;
  ModflowSfr6Boundary := AScreenObject.ModflowSfr6Boundary;
  ModflowMawBoundary := AScreenObject.ModflowMawBoundary;
  Modflow6Obs := AScreenObject.Modflow6Obs;
  ModflowLak6 := AScreenObject.ModflowLak6;
  ModflowMvr := AScreenObject.ModflowMvr;
  ModflowUzfMf6Boundary := AScreenObject.ModflowUzfMf6Boundary;
  ModflowCSub := AScreenObject.ModflowCSub;
  ModflowSubObservations := AScreenObject.ModflowSubObservations;
  ModflowSwtObservations := AScreenObject.ModflowSwtObservations;
  GwtCncBoundary := AScreenObject.GwtCncBoundary;
  GwtSrcBoundary := AScreenObject.GwtSrcBoundary;
  Fmp4EfficiencyBoundary := AScreenObject.Fmp4EfficiencyBoundary;
  Fmp4EfficiencyImprovementBoundary := AScreenObject.Fmp4EfficiencyImprovementBoundary;
  Fmp4BareRunoffFractionBoundary := AScreenObject.Fmp4BareRunoffFractionBoundary;
  Fmp4BarePrecipitationConsumptionFractionBoundary := AScreenObject.Fmp4BarePrecipitationConsumptionFractionBoundary;
  ModflowFmpBareEvap := AScreenObject.ModflowFmpBareEvap;
  ModflowFmpDirectRecharge := AScreenObject.ModflowFmpDirectRecharge;
  ModflowFmpPrecipPotConsumption := AScreenObject.ModflowFmpPrecipPotConsumption;
  ModflowFmp4NrdInfilLocationBoundary := AScreenObject.ModflowFmp4NrdInfilLocationBoundary;
  ModflowFmp4LandUseAreaFraction := AScreenObject.ModflowFmp4LandUseAreaFraction;
  ModflowFmp4MultLandUseAreaFraction := AScreenObject.ModflowFmp4MultLandUseAreaFraction;
  ModflowFmp4CropCoefficient := AScreenObject.ModflowFmp4CropCoefficient;
  ModflowFmp4MultCropCoefficient := AScreenObject.ModflowFmp4MultCropCoefficient;
  ModflowFmp4ConsumptiveUse := AScreenObject.ModflowFmp4ConsumptiveUse;
  ModflowFmp4MultConsumptiveUse := AScreenObject.ModflowFmp4MultConsumptiveUse;
  ModflowFmp4Irrigation := AScreenObject.ModflowFmp4Irrigation;
  ModflowFmp4MultIrrigation := AScreenObject.ModflowFmp4MultIrrigation;
  ModflowFmp4RootDepth := AScreenObject.ModflowFmp4RootDepth;
  ModflowFmp4MultRootDepth := AScreenObject.ModflowFmp4MultRootDepth;
  ModflowFmp4TranspirationFraction := AScreenObject.ModflowFmp4TranspirationFraction;
  ModflowFmp4MultTranspirationFraction := AScreenObject.ModflowFmp4MultTranspirationFraction;
  ModflowFmp4EvaporationIrrigationFraction := AScreenObject.ModflowFmp4EvaporationIrrigationFraction;
  ModflowFmp4MultEvaporationIrrigationFraction := AScreenObject.ModflowFmp4MultEvaporationIrrigationFraction;
  ModflowFmp4FractionOfPrecipToSurfaceWater := AScreenObject.ModflowFmp4FractionOfPrecipToSurfaceWater;
  ModflowFmp4MultFractionOfPrecipToSurfaceWater := AScreenObject.ModflowFmp4MultFractionOfPrecipToSurfaceWater;
  ModflowFmp4FractionOfIrrigToSurfaceWater := AScreenObject.ModflowFmp4FractionOfIrrigToSurfaceWater;
  ModflowFmp4MultFractionOfIrrigToSurfaceWater := AScreenObject.ModflowFmp4MultFractionOfIrrigToSurfaceWater;
  ModflowFmp4AddedDemand := AScreenObject.ModflowFmp4AddedDemand;
  ModflowFmp4MultAddedDemand := AScreenObject.ModflowFmp4MultAddedDemand;
  ModflowFmp4CropHasSalinityDemand := AScreenObject.ModflowFmp4CropHasSalinityDemand;
  ModflowFmp4MultCropHasSalinityDemand := AScreenObject.ModflowFmp4MultCropHasSalinityDemand;
  Fmp4AddedDemandRunoffSplitBoundary := AScreenObject.Fmp4AddedDemandRunoffSplitBoundary;
  ModflowTvkBoundary := AScreenObject.ModflowTvkBoundary;
  ModflowTvsBoundary := AScreenObject.ModflowTvsBoundary;

  SutraBoundaries := AScreenObject.SutraBoundaries;

  FootprintWell := AScreenObject.FootprintWell;
  DynamicTimesSeriesCollections := AScreenObject.DynamicTimesSeriesCollections;

  // avoid creating AScreenObject.FPointPositionValues if it
  // hasn't been created yet.
  PointPositionValues := AScreenObject.FPointPositionValues;

  if not FCanInvalidateModel then
  begin
    FModel := AScreenObject.FModel;
  end;
  
  SectionStarts := AScreenObject.SectionStarts;

  FRecalculateBox := True;
  Invalidate;

  IFACE := AScreenObject.IFACE;
  ModpathParticles := AScreenObject.ModpathParticles;

  for DataSetIndex := DataSetCount -1 downto 0 do
  begin
    DataArray := DataSets[DataSetIndex];
    if AScreenObject.IndexOfDataSet(DataArray) < 0 then
    begin
      DeleteDataSet(DataSetIndex);
    end;
  end;

  for DataSetIndex := 0 to AScreenObject.DataSetCount - 1 do
  begin
    DataArray := AScreenObject.DataSets[DataSetIndex];
    DSIndex := IndexOfDataSet(DataArray);
    if DSIndex < 0 then
    begin
      DSIndex := AddDataSet(DataArray);
    end;
    if DSIndex >= 0 then
    begin
      DataSetFormulas[DSIndex] := AScreenObject.DataSetFormulas[DataSetIndex];
    end;
  end;

  for DataSetIndex := BoundaryDataSetCount -1 downto 0 do
  begin
    DataArray := BoundaryDataSets[DataSetIndex];
    if AScreenObject.IndexOfBoundaryDataSet(DataArray) < 0 then
    begin
      DeleteBoundaryDataSet(DataSetIndex);
    end;
  end;

  for DataSetIndex := 0 to AScreenObject.BoundaryDataSetCount - 1 do
  begin
    DataArray := AScreenObject.BoundaryDataSets[DataSetIndex];
    DSIndex := IndexOfBoundaryDataSet(DataArray);
    if DSIndex < 0 then
    begin
      DSIndex := AddBoundaryDataSet(DataArray);
    end;
    BoundaryDataSetFormulas[DSIndex] :=
      AScreenObject.BoundaryDataSetFormulas[DataSetIndex];
  end;

  BoundarArray :=
    frmGoPhast.PhastModel.DataArrayManager.GetDataSetByName(rsModflowSpecifiedHead);
  if ((ModflowChdBoundary <> nil) and ModflowChdBoundary.Used)
    or ((frmGoPhast.ModelSelection <> msModflow2015)
      and (ModflowFhbHeadBoundary <> nil)
      and ModflowFhbHeadBoundary.Used) then
  begin
    DSIndex := IndexOfDataSet(BoundarArray);
    if DSIndex < 0 then
    begin
      DSIndex := AddDataSet(BoundarArray);
    end;
    if DSIndex >= 0 then
    begin
      DataSetFormulas[DSIndex] := 'True';
    end;
  end
  else
  begin
    DSIndex := IndexOfDataSet(BoundarArray);
    if DSIndex >= 0 then
    begin
      DeleteDataSet(DSIndex);
    end;
  end;

  AssignMf6LakeDataSetValue;


  UpdateUzfGage1and2;
  UpdateUzfGage3;

  UsedModels := AScreenObject.UsedModels;

  if not FCanInvalidateModel then
  begin
    FModel := nil;
  end;
  ABaseModel := ChildModel;
  if (ABaseModel <> nil) and (FModel <> nil) then
  begin
    AChildModel := ABaseModel as TChildModel;
    AChildModel.HorizontalPositionScreenObject := self;
  end;
end;

procedure TScreenObject.Assign3DElevationsFromFront(const Compiler: TRbwParser;
  const SparseArray: T3DSparseRealArray; AModel: TBaseModel);
var
  TempMinX, TempMaxX: double;
  FirstLayer, LastLayer, FirstCol, LastCol, FirstRow, LastRow: integer;
  ColIndex, LayerIndex: integer;
  CellLocation3D: T3DRealPoint;
  Expression: TExpression;
  SegmentIndex: NativeInt;
  ASegment: TCellElementSegment;
  RowIndex: Integer;
  Grid: TCustomModelGrid;
  SectionIndex: integer;
  TempImportedElevations : TValueArrayStorage;
  VariableList, DataSetList: TList;
  ColLimit: Integer;
  LayerLimit: Integer;
  CenterPoint3D: TPoint3D;
  PointDistance: Extended;
  PointAngle: Extended;
  RotatedX: Extended;
  Mesh: IMesh3D;
  Element: IElement3D;
  Node: INode3D;
begin
  VariableList := TList.Create;
  DataSetList := TList.Create;
  TempImportedElevations := CurrentValues;
  try
  //  Assert(EvaluatedAt = eaBlocks);
    Expression := Compiler.CurrentExpression;
    InitializeUsedDataSets(AModel as TCustomModel, Compiler, Expression,
      VariableList, DataSetList);
    if (SetValuesOfEnclosedCells or SetValuesOfIntersectedCells)
      and Closed then
    begin

      // Get the coordinates of the points.
      TempMinX := MinX;
      TempMaxX := MaxX;

      Grid := (AModel as TCustomModel).Grid;
      if Grid <> nil then
      begin


        GetColumns(Grid, TempMinX, TempMaxX,
          FirstCol, LastCol);

        if FirstCol > Grid.ColumnCount then
        begin
          FirstCol := Grid.ColumnCount;
        end;
        if LastCol > Grid.ColumnCount then
        begin
          LastCol := Grid.ColumnCount;
        end;

        FirstLayer := -1;
        LastLayer := -1;
        case EvaluatedAt of
          eaBlocks:
            begin
              FirstLayer := 0;
              LastLayer := Grid.LayerCount -1;
            end;
          eaNodes:
            begin
              FirstLayer := 0;
              LastLayer := Grid.LayerCount;
            end;
          else Assert(False);
        end;
        FirstRow := -1;
        LastRow := -1;
        case EvaluatedAt of
          eaBlocks:
            begin
              FirstRow := 0;
              LastRow := Grid.RowCount -1;
            end;
          eaNodes:
            begin
              FirstRow := 0;
              LastRow := Grid.RowCount;
            end;
          else Assert(False);
        end;

        // Find the cells inside the screen object and assign values to them.
        Assert((FirstCol >= 0) and (LastCol >= 0)
          and (FirstLayer >= 0) and (LastLayer >= 0));
        for RowIndex := FirstRow to LastRow do
        begin
          for ColIndex := FirstCol to LastCol do
          begin
            for LayerIndex := FirstLayer to LastLayer do
            begin
              case EvaluatedAt of
                eaBlocks:
                  begin
                    CellLocation3D := Grid.ThreeDElementCenter(ZeroBasedID(
                      LayerIndex, RowIndex, ColIndex));
                  end;
                eaNodes:
                  begin
                    CellLocation3D := Grid.ThreeDElementCorner(ZeroBasedID(
                      LayerIndex, RowIndex, ColIndex));
                  end;
              else
                Assert(False);
              end;

              if IsPointInside(CellLocation3D.X, CellLocation3D.Z,
                SectionIndex) then
              begin
                UpdateUsedVariables(VariableList, DataSetList,
                  LayerIndex, RowIndex, ColIndex);
                UpdateCurrentScreenObject(self);
                UpdateGlobalLocations(ColIndex, RowIndex,
                  LayerIndex, EvaluatedAt, AModel);
                UpdateCurrentSection(SectionIndex);
                FCurrentValues := TempImportedElevations;
                Expression.Evaluate;

                SparseArray.Items[LayerIndex, RowIndex, ColIndex] :=
                  Expression.DoubleResult;
              end;
            end;
          end
        end;
      end
      else
      begin
        FirstCol := 0;
        FirstLayer := 0;
        LayerLimit := 0;
        ColLimit := 0;
        Mesh := (AModel as TCustomModel).Mesh3D;
        case EvaluatedAt of
          eaBlocks:
            begin
              ColLimit := Mesh.Mesh2DI.ElementCount;
              LayerLimit := Mesh.LayerCount;
            end;
          eaNodes:
            begin
              ColLimit := Mesh.Mesh2DI.NodeCount;
              LayerLimit := Mesh.LayerCount+1;
            end;
          else Assert(False);
        end;
        for ColIndex := FirstCol to ColLimit-1 do
        begin
          for LayerIndex := FirstLayer to LayerLimit-1 do
          begin
            case EvaluatedAt of
              eaBlocks:
                begin
                  Element := Mesh.ElementArrayI[LayerIndex,ColIndex];
                  CenterPoint3D := Element.CenterLocation;
                end;
              eaNodes:
                begin
                  Node := Mesh.NodeArrayI[LayerIndex,ColIndex];
                  CenterPoint3D := Node.NodeLocation;
                end;
              else Assert(False);
            end;
            PointDistance := sqrt(Sqr(CenterPoint3D.x) + Sqr(CenterPoint3D.y));
            PointAngle := ArcTan2(CenterPoint3D.y,CenterPoint3D.x);
            RotatedX := Cos(PointAngle-SutraAngle)*PointDistance;
//            RotatedY := Sin(PointAngle-SutraAngle)*PointDistance;
            if IsPointInside(RotatedX, CenterPoint3D.Z,
              SectionIndex) then
            begin
              UpdateUsedVariables(VariableList, DataSetList,
                LayerIndex, 0, ColIndex);
              UpdateCurrentScreenObject(self);
              UpdateGlobalLocations(ColIndex, 0,
                LayerIndex, EvaluatedAt, AModel);
              UpdateCurrentSection(SectionIndex);
              FCurrentValues := TempImportedElevations;
              Expression.Evaluate;

              SparseArray.Items[LayerIndex, 0, ColIndex] :=
                Expression.DoubleResult;
            end;
          end;
        end;
      end;
    end;
    if SetValuesOfIntersectedCells then
    begin
//      if not Segments[Model].UpToDate then
//      begin
//        UpdateFrontSegments((FModel as TCustomModel).Grid, EvaluatedAt);
//      end;
      // Assign values here.
      for SegmentIndex := 0 to Segments[AModel].Count - 1 do
      begin
        ASegment := Segments[AModel][SegmentIndex];
        begin
          UpdateCurrentSegment(ASegment);

          if not SparseArray.IsValue[ASegment.Layer, ASegment.Row,
            ASegment.Col] or (FAssignmentLocation = alLastVertex) then
          begin
            UpdateUsedVariables(VariableList, DataSetList,
              ASegment.Layer, ASegment.Row, ASegment.Col);
            UpdateCurrentScreenObject(self);
            UpdateCurrentSegment(ASegment);
            UpdateGlobalLocations(ASegment.Col, ASegment.Row, ASegment.Layer,
              EvaluatedAt, AModel);
            UpdateCurrentSection(ASegment.SectionIndex);
            FCurrentValues := TempImportedElevations;
            Expression.Evaluate;

            SparseArray.Items[ASegment.Layer, ASegment.Row, ASegment.Col] :=
              Expression.DoubleResult;
          end;
        end;
      end;
    end;
  finally
    FCurrentValues := TempImportedElevations;
    VariableList.Free;
    DataSetList.Free;
  end;
end;

procedure TScreenObject.Assign3DElevationsFromTop(const Compiler: TRbwParser;
  const SparseArray: T3DSparseRealArray; AModel: TBaseModel);
var
  TempMinX, TempMaxX: double;
  FirstLayer, LastLayer, FirstCol, LastCol, FirstRow, LastRow: integer;
  ColIndex, LayerIndex: integer;
  CellLocation3D: T3DRealPoint;
  Expression: TExpression;
  SegmentIndex: NativeInt;
  ASegment: TCellElementSegment;
  RowIndex: Integer;
  Grid: TCustomModelGrid;
  SectionIndex: integer;
  TempMinY: double;
  TempMaxY: double;
  RotatedPoints: TEdgePointArray;
  APoint: TPoint2D;
  VariableList, DataSetList: TList;
  LocalModel: TCustomModel;
  Mesh: IMesh3D;
begin
  VariableList := TList.Create;
  DataSetList := TList.Create;
  try
    Expression := Compiler.CurrentExpression;
    InitializeUsedDataSets(AModel as TCustomModel, Compiler, Expression,
      VariableList, DataSetList);
    if (SetValuesOfEnclosedCells or SetValuesOfIntersectedCells)
      and Closed then
    begin
      // Get the coordinates of the points.

      LocalModel := AModel as TCustomModel;
      Grid := LocalModel.Grid;
      if Grid <> nil then
      begin
        RotatePoints(AModel, RotatedPoints, TempMinX, TempMinY, TempMaxX, TempMaxY);
        GetColumns(Grid, TempMinX, TempMaxX,
          FirstCol, LastCol);

        if FirstCol > Grid.ColumnCount then
        begin
          FirstCol := Grid.ColumnCount;
        end;
        if LastCol > Grid.ColumnCount then
        begin
          LastCol := Grid.ColumnCount;
        end;

        FirstLayer := -1;
        LastLayer := -1;
        case EvaluatedAt of
          eaBlocks:
            begin
              FirstLayer := 0;
              LastLayer := Grid.LayerCount -1;
            end;
          eaNodes:
            begin
              FirstLayer := 0;
              LastLayer := Grid.LayerCount;
            end;
          else Assert(False);
        end;

        GetRows(Grid, TempMinY, TempMaxY, FirstRow, LastRow);
        if FirstRow > Grid.RowCount then
        begin
          FirstRow := Grid.RowCount;
        end;
        if LastRow > Grid.RowCount then
        begin
          LastRow := Grid.RowCount;
        end;

        // Find the cells inside the screen object and assign values to them.
        Assert((FirstCol >= 0) and (LastCol >= 0)
          and (FirstLayer >= 0) and (LastLayer >= 0));
        for RowIndex := FirstRow to LastRow do
        begin
          for ColIndex := FirstCol to LastCol do
          begin
            for LayerIndex := FirstLayer to LastLayer do
            begin
              case EvaluatedAt of
                eaBlocks:
                  begin
                    CellLocation3D := Grid.ThreeDElementCenter(ZeroBasedID(
                      LayerIndex, RowIndex, ColIndex));
                  end;
                eaNodes:
                  begin
                    CellLocation3D := Grid.ThreeDElementCorner(ZeroBasedID(
                      LayerIndex, RowIndex, ColIndex));
                  end;
              else
                Assert(False);
              end;

              APoint.x := CellLocation3D.X;
              APoint.y := CellLocation3D.Y;
              APoint := Grid.
                RotateFromGridCoordinatesToRealWorldCoordinates(APoint);

              if IsPointInside(APoint.x, APoint.y,
                SectionIndex) then
              begin
                UpdateUsedVariables(VariableList, DataSetList,
                  LayerIndex, RowIndex, ColIndex);
                UpdateCurrentScreenObject(self);
                UpdateGlobalLocations(ColIndex, RowIndex, LayerIndex, EvaluatedAt,
                  AModel);
                UpdateCurrentSection(SectionIndex);
                Expression.Evaluate;

                SparseArray.Items[LayerIndex, RowIndex, ColIndex] :=
                  Expression.DoubleResult;
              end;
            end;
          end
        end;
      end
      else
      begin
        Mesh := LocalModel.Mesh3D;
        Assert(Mesh <> nil);
//        FirstLayer := -1;
        LastLayer := -1;
        case EvaluatedAt of
          eaBlocks:
            begin
//              FirstLayer := 0;
              LastLayer := Mesh.LayerCount -1;
              LastCol := Mesh.Mesh2DI.ElementCount-1;
            end;
          eaNodes:
            begin
//              FirstLayer := 0;
              LastLayer := Mesh.LayerCount;
              LastCol := Mesh.Mesh2DI.NodeCount-1;
            end;
          else Assert(False);
        end;

        for ColIndex := 0 to LastCol do
        begin
          case EvaluatedAt of
            eaBlocks: APoint := Mesh.Mesh2DI.ElementsI2D[ColIndex].Center;
            eaNodes: APoint := Mesh.Mesh2DI.Nodes[ColIndex].Location;
          end;
          if IsPointInside(APoint.x, APoint.y,
            SectionIndex) then
          begin
            for LayerIndex := 0 to LastLayer do
            begin
              UpdateUsedVariables(VariableList, DataSetList,
                LayerIndex, 0, ColIndex);
              UpdateCurrentScreenObject(self);
              UpdateGlobalLocations(ColIndex, 0, LayerIndex, EvaluatedAt,
                AModel);
              UpdateCurrentSection(SectionIndex);
              Expression.Evaluate;

              SparseArray.Items[LayerIndex, 0, ColIndex] :=
                Expression.DoubleResult;
            end;
          end;
        end;
      end;
    end;
    if SetValuesOfIntersectedCells then
    begin
//      if not Segments.UpToDate then
//      begin
//        UpdateTopSegments((FModel as TPhastModel).Grid, EvaluatedAt, False,
//          RotatedPoints);
//      end;
      // Assign values here.
      for SegmentIndex := 0 to Segments[AModel].Count - 1 do
      begin
        ASegment := Segments[AModel][SegmentIndex];
        begin
          UpdateCurrentSegment(ASegment);

          if not SparseArray.IsValue[ASegment.Layer, ASegment.Row,
            ASegment.Col] or (FAssignmentLocation = alLastVertex) then
          begin
            UpdateUsedVariables(VariableList, DataSetList,
              ASegment.Layer, ASegment.Row, ASegment.Col);
            UpdateCurrentScreenObject(self);
            UpdateCurrentSegment(ASegment);
            UpdateCurrentSection(ASegment.SectionIndex);
            UpdateGlobalLocations(ASegment.Col, ASegment.Row, ASegment.Layer,
              EvaluatedAt, AModel);
            Expression.Evaluate;

            SparseArray.Items[ASegment.Layer, ASegment.Row, ASegment.Col] :=
              Expression.DoubleResult;
          end;
        end;
      end;
    end;
  finally
    VariableList.Free;
    DataSetList.Free;
  end;
end;

function TScreenObject.ZoomBox(VD: TViewDirection): TQrbwZoomBox2;
begin
  // use the correct zoombox depending on which way you are viewing the
  // screen object from.
  Assert(FModel <> nil);
  result := (FModel as TPhastModel).ZoomBox(VD);
end;

procedure TScreenObject.CalculateCanvasCoordinates;
var
  AZoomBox: TQrbwZoomBox2;
  PointIndex: integer;
  APoint: TPoint2D;
begin
  if not FRecalculateCoordinates then
    Exit;
  // use the correct zoombox depending on which way you are viewing the
  // screen object from.
  AZoomBox := ZoomBox(ViewDirection);
  SetLength(FCanvasCoordinates, Count);
  // calculate the coordinates.
  with AZoomBox do
  begin
    for PointIndex := 0 to Count - 1 do
    begin
      APoint := Points[PointIndex];
      with FCanvasCoordinates[PointIndex] do
      begin
        X := XCoord(APoint.X);
        Y := YCoord(APoint.Y);
      end;
    end;
  end;
  // Next time, we won't have to do this again.
  FRecalculateCoordinates := False;
end;

procedure GlobalRemoveScreenObjectDataArraySubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TScreenObject).RemoveDataArraySubscription(Sender, AName);
end;

procedure GlobalRestoreScreenObjectDataArraySubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TScreenObject).RestoreDataArraySubscription(Sender, AName);
end;  

procedure TScreenObject.ClearDataSets;
var
  Index: integer;
  ADataSet: TDataArray;
  Observer: TObserver;
  FormulaIndex: Integer;
  FormulaObject: IFormulaObject;
begin
  Assert(FDataSetMixtureSubscriptions.Count = DataSetCount);
  for Index := 0 to FDataSetMixtureSubscriptions.Count -1 do
  begin
    MixtureDataSetFormula[Index] := '0';
    ADataSet := DataSets[Index];
    Observer := FDataSetMixtureSubscriptions[Index] as TObserver;
    StopsTalkingTo(Observer);
    Observer.StopsTalkingTo(ADataSet);
  end;
  if not FIsUpdating then
  begin
    FInterpValues.Clear;
  end;

  FDataSetMixtureSubscriptions.Clear;

  Assert(FDataSets.Count = FDataSetSubscriptions.Count);
  for Index := 0 to FDataSets.Count - 1 do
  begin
    // Get rid of any subscriptions due to the formula.
    DataSetFormulas[Index] := '0';
    ADataSet := FDataSets[Index];
    if FElevSubscription <> nil then
    begin
      FElevSubscription.StopsTalkingTo(ADataSet);
    end;
    if FTopElevSubscription <> nil then
    begin
      FTopElevSubscription.StopsTalkingTo(ADataSet);
    end;
    if FBottomElevSubscription <> nil then
    begin
      FBottomElevSubscription.StopsTalkingTo(ADataSet);
    end;
    self.StopsTalkingTo(ADataSet);
    Observer := FDataSetSubscriptions[Index] as TObserver;
    Observer.StopsTalkingTo(ADataSet);
  end;

  UpToDate := False;
  FDataSets.Clear;
  for FormulaIndex := 0 to FDataSetFormulas.Count - 1 do
  begin
    FormulaObject := FDataSetFormulas[FormulaIndex];
    frmGoPhast.PhastModel.FormulaManager.Remove(FormulaObject,
      GlobalRemoveScreenObjectDataArraySubscription, GlobalRestoreScreenObjectDataArraySubscription, self);
  end;
  FDataSetFormulas.Clear;
  for Index := 0 to FDataSetSubscriptions.Count -1 do
  begin
    Observer := FDataSetSubscriptions[Index] as TObserver;
    self.StopsTalkingTo(Observer);
  end;

  FDataSetSubscriptions.Clear;
  InvalidateModel;
end;

procedure TScreenObject.ClearModflowBoundaries;
begin
  FreeAndNil(FModflowBoundaries);
end;

procedure TScreenObject.UpdateTalksToLakeMf6;
var
  LocalModel: TCustomModel;
  LakeDataArray: TDataArray;
begin
  if (Model <> nil) and (ModflowLak6 <> nil) and ModflowLak6.Used then
  begin
    LocalModel := Model as TCustomModel;
    LakeDataArray := LocalModel.DataArrayManager.GetDataSetByName(KLake_Bed_Leakance);
    if LakeDataArray <> nil then
    begin
      self.TalksTo(LakeDataArray);
    end;
    LakeDataArray := LocalModel.DataArrayManager.GetDataSetByName(KLake_Bed_Thickness);
    if LakeDataArray <> nil then
    begin
      self.TalksTo(LakeDataArray);
    end;
    LakeDataArray := LocalModel.DataArrayManager.GetDataSetByName(KLake_Bottom_Elevation);
    if LakeDataArray <> nil then
    begin
      self.TalksTo(LakeDataArray);
    end;
    LakeDataArray := LocalModel.DataArrayManager.GetDataSetByName(KLake_Top_Elevation);
    if LakeDataArray <> nil then
    begin
      self.TalksTo(LakeDataArray);
    end;
    LakeDataArray := LocalModel.DataArrayManager.GetDataSetByName(KLake_Connection_Length);
    if LakeDataArray <> nil then
    begin
      self.TalksTo(LakeDataArray);
    end;
    LakeDataArray := LocalModel.DataArrayManager.GetDataSetByName(KLake_Connection_Width);
    if LakeDataArray <> nil then
    begin
      self.TalksTo(LakeDataArray);
    end;
  end;
end;

procedure TScreenObject.ClearPoints;
begin
  // setting the capacity to 0 also sets the count to 0.
  // It also releases memory.
  FIsClosedCached := False;
  Capacity := 0;
  FRecalculateBox := True;
  Invalidate;
end;

procedure TScreenObject.UpdateScreenObjectWithName(const AName: string;
  const AViewDirection: TViewDirection;
  out UndoCreateScreenObject: TCustomUndo;
  const UndoAble: boolean = True);
begin
  inherited UpdateWithName(AName);
  // initialize the object.
  if UndoAble then
  begin
    UndoCreateScreenObject := TUndoCreateScreenObject.Create(self);
  end
  else
  begin
    UndoCreateScreenObject := nil;
  end;
  FRecalculateLength := True;
  FRecalculateArea := True;
  IncrementObjectsCreated;
  SetViewDirection(AViewDirection);
  Invalidate;

  // 1 elev
  if ElevationFormula = '' then
  begin
    ElevationFormula := '0';
  end;

  // 2 elev
  if HigherElevationFormula = '' then
  begin
    HigherElevationFormula := '0';
  end;
  if LowerElevationFormula = '' then
  begin
    LowerElevationFormula := '0';
  end;
end;

procedure TScreenObject.Changed(Sender: TObject);
begin
  if not (Sender as TObserver).UpToDate then
  begin
    Invalidate;
  end;
  NotifyGuiOfChange(Sender);
end;

function TScreenObject.ChdParameters: IModflowParameters;
begin
  result := nil;
  if ModflowChdBoundary <> nil then
  begin
    result := ModflowChdBoundary.Parameters;
  end;
end;

constructor TScreenObject.CreateWithViewDirection(const Model: TBaseModel;
  const AViewDirection: TViewDirection;
  out UndoCreateScreenObject: TCustomUndo;
  const UndoAble: boolean = True);
var
  AName: string;
  LocalModel: TPhastModel;
begin
  AName := ObjectPrefix + IntToStr(ObjectsCreated);
  Name := AName;
  Create(Model);
  Name := '';
  UpdateScreenObjectWithName(AName, AViewDirection,
    UndoCreateScreenObject, UndoAble);
  if Model <> nil then
  begin
    LocalModel := FModel as TPhastModel;
    if ViewDirection = vdFront then
    begin
      if LocalModel.ModelSelection in SutraSelection then
      begin
        SutraAngle := LocalModel.SutraMesh.CrossSection.Angle;
      end
      else if LocalModel.DisvUsed then
      begin
        SutraAngle := LocalModel.DisvGrid.CrossSection.Angle;
      end
      else
      begin
        SutraAngle := LocalModel.Grid.GridAngle;
      end;
    end;
    LocalModel.ResetSelectedScreenObjects;
  end;
  Selected := True;
end;

procedure GlobalRemoveBoundaryDataArraySubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TScreenObject).RemoveBoundaryDataArraySubscription(Sender, AName);
end;

procedure GlobalRestoreBoundaryDataArraySubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TScreenObject).RestoreBoundaryDataArraySubscription(Sender, AName);
end;

procedure TScreenObject.DeleteBoundaryDataSet(const Index: Integer);
var
  DataSet: TDataArray;
  Subscription: TObserver;
  FormulaObject: IFormulaObject;
begin
  // Get rid of any subscriptions due to the formula.
  BoundaryDataSetFormulas[Index] := '0';

  DataSet := nil;
  if FCanInvalidateModel then
  begin
    Assert(FBoundaryDataSetSubscriptions <> nil);
    Subscription := FBoundaryDataSetSubscriptions[Index] as TObserver;
    DataSet := BoundaryDataSets[Index];
    self.StopsTalkingTo(DataSet);
    Subscription.StopsTalkingTo(DataSet);
    self.StopsTalkingTo(Subscription);
    FBoundaryDataSetSubscriptions.Delete(Index);
    DataSet.Invalidate;
  end;
  FBoundaryDataSets.Delete(Index);
  Assert(FBoundaryDataSetFormulas <> nil);
  FormulaObject := FBoundaryDataSetFormulas[Index];
  frmGoPhast.PhastModel.FormulaManager.Remove(FormulaObject,
    GlobalRemoveBoundaryDataArraySubscription, GlobalRestoreBoundaryDataArraySubscription, self);
  FBoundaryDataSetFormulas.Delete(Index);
  if FCanInvalidateModel then
  begin
    if FElevSubscription <> nil then
    begin
      FElevSubscription.StopsTalkingTo(DataSet);
    end;
    if FTopElevSubscription <> nil then
    begin
      FTopElevSubscription.StopsTalkingTo(DataSet);
    end;
    if FBottomElevSubscription <> nil then
    begin
      FBottomElevSubscription.StopsTalkingTo(DataSet);
    end;
  end;
  InvalidateModel;
end;

procedure TScreenObject.DeletePoint(const Index: Integer);
var
  VertexIsSelected: boolean;
  SectionIndex: Integer;
  Value: integer;
  NeedToDestroyLastSubPolygon: boolean;
  Item: TPointValuesItem;
  LocalPPV: TPointPositionValues;
  LpvIndex: Integer;
begin
  FIsClosedCached := False;
  // make sure that the index is valid.  If it isn't, an exception will
  // be raised.
  ValidateIndex(Index);

  SectionIndex := SectionCount -1;
  NeedToDestroyLastSubPolygon := Index >= SectionStart[SectionIndex];

  // if we know the box around the screen object is invalid, there is no
  // point in doing checking whether deleting this point will make
  // the box invalid.
  if not FRecalculateBox then
  begin
    // see if this invalidates the range of the box around the screen object.
    if FPoints[Index].X = FMaxX then
    begin
      FRecalculateBox := True;
    end
    else if FPoints[Index].X = FMinX then
    begin
      FRecalculateBox := True;
    end;

    if FPoints[Index].Y = FMaxY then
    begin
      FRecalculateBox := True;
    end
    else if FPoints[Index].Y = FMinY then
    begin
      FRecalculateBox := True;
    end;
  end;
  InvalidateModel;

  if Index = Pred(FCount) then
  begin
    // If the point to be deleted is the last point, just reduce
    // the count by 1.
    Count := Pred(FCount);
    LocalPPV := PointPositionValues;
    if (PointPositionValues <> nil) then
    begin
      if (LocalPPV.Count > 0) then
      begin
        Item := LocalPPV.Items[LocalPPV.Count-1] as TPointValuesItem;
        if Item.Position = Index then
        begin
          LocalPPV.Delete(LocalPPV.Count-1);
        end;
      end;
      if LocalPPV.Count = 0 then
      begin
        PointPositionValues := nil;
      end;
    end;
  end
  else
  begin
    LocalPPV := PointPositionValues;
    if LocalPPV <> nil then
    begin
      for LpvIndex := LocalPPV.Count - 1 downto 0 do
      begin
        Item := LocalPPV.Items[LpvIndex] as TPointValuesItem;
        if Item.Position > Index then
        begin
          Item.Position := Item.Position -1
        end
        else if Item.Position = Index then
        begin
          LocalPPV.Delete(LpvIndex);
          break;
        end;
      end;
      if LocalPPV.Count = 0 then
      begin
        PointPositionValues := nil;
      end;
    end;
    // Otherwise, you need to move the points to fill the space left
    // by the deleted point.
    Dec(FCount);
    Move(FPoints[Index + 1], FPoints[Index],
      (FCount - Index) * SizeOf(TPoint2D));
    // If the vertex that is being deleted is a selected vertex, then
    // it is also necessary to decrement the number of selected vertices.
    VertexIsSelected := False;
    if SelectedVertices[Index] then
    begin
      Dec(FSelectedVertexCount);
      VertexIsSelected := True;
    end;
    // Move the selected vertex information to fill the space left
    // by the deleted vertex.
    // However if nothing was selected, this can be skipped.
    if VertexIsSelected or (FSelectedVertexCount > 0) then
    begin
      Move(FSelectedVertices[Index + 1], FSelectedVertices[Index],
        (FCount - Index) * SizeOf(boolean));
    end;
  end;
  for SectionIndex := 0 to SectionStarts.Count - 1 do
  begin
    Value := SectionStarts.IntValues[SectionIndex];
    if Value > Index  then
    begin
      SectionStarts.IntValues[SectionIndex] := Value -1;
    end;
  end;
  DeleteExtraSections;
  if NeedToDestroyLastSubPolygon then
  begin
    DestroyLastSubPolygon;
  end;
  Invalidate;
end;

procedure TScreenObject.DeleteSfrParameter(const ParameterName: string);
begin
  if ModflowSfrBoundary <> nil then
  begin
    ModflowSfrBoundary.DeleteSfrParameter(ParameterName);
  end;
end;

procedure TScreenObject.Draw3D;
var
  Red, Green, Blue: GLubyte;
  Colors: array[0..3] of GLfloat;
  GlGridValues: TGrid;
  LocalModel: TPhastModel;
  CellsToDraw: TSelectedCells;
  ColLimit: Integer;
  RowLimit: Integer;
  LayerLimit: Integer;
  ShouldDraw: Boolean;
  ColIndex: Integer;
  RowIndex: Integer;
  LayerIndex: Integer;
begin
  if Deleted or not Visible or (ElevationCount = ecZero) then
    Exit;

  LocalModel := Model as TPhastModel;
  With LocalModel.Grid do
  begin
    if (LayerCount <= 0) or (RowCount <= 0) or (ColumnCount <= 0) then
    begin
      Exit;
    end;
  end;

  if not FGlListCreated then
  begin
    FGlScreenObjectList := glGenLists(1);
    if FGlScreenObjectList <> 0 then
    begin
      FGlListCreated := True;
    end
    else
    begin
      Exit;
    end;
  end;
  if not FListUpToDate then
  begin
    glNewList(FGlScreenObjectList, GL_COMPILE);
    try
      glPushMatrix;
      try
        glEnable(GL_LINE_SMOOTH);
        glShadeModel(GL_SMOOTH);

        if FillScreenObject then
        begin
          ExtractColorComponents(FillColor, Red, Green, Blue);
        end
        else if ColorLine then
        begin
          ExtractColorComponents(LineColor, Red, Green, Blue);
        end
        else
        begin
          Red := 64;
          Green := 64;
          Blue := 64;
        end;

        Colors[0] := Red / 255;
        Colors[1] := Green / 255;
        Colors[2] := Blue / 255;
        Colors[3] := 1;

        glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, @Colors);
        glMaterialf(GL_FRONT_AND_BACK, GL_SHININESS, 0.7);
        glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, @Colors);

        glLineWidth(2);
        glPointSize(5);
        //  glColor3ub(Red, Green, Blue);

        GlGridValues := LocalModel.Grid.GlGrid(EvaluatedAt,
          LocalModel.ModelSelection);
        if GlGridValues = nil then
        begin
          Exit;
        end;

        try
          Delegate.AssignSelectedCells(LocalModel);
          CellsToDraw := Delegate.SelectedCells;
          if CellsToDraw.HasCells then
          begin
            ColLimit:= -1;
            RowLimit:= -1;
            LayerLimit:= -1;
            case EvaluatedAt of
              eaBlocks:
                begin
                  ColLimit := LocalModel.Grid.ColumnCount -1;
                  RowLimit := LocalModel.Grid.RowCount -1;
                  LayerLimit := LocalModel.Grid.LayerCount -1;
                end;
              eaNodes:
                begin
                  ColLimit := LocalModel.Grid.ColumnCount;
                  RowLimit := LocalModel.Grid.RowCount;
                  LayerLimit := LocalModel.Grid.LayerCount;
                end;
              else Assert(False);
            end;
            ShouldDraw := False;
            for ColIndex := 0 to ColLimit do
            begin
              for RowIndex := 0 to RowLimit do
              begin
                for LayerIndex := 0 to LayerLimit do
                begin
                  if CellsToDraw.Selected[LayerIndex, RowIndex, ColIndex] then
                  begin
                    GlGridValues[ColIndex+1, RowIndex+1, LayerIndex+1].Value := 1;
                    ShouldDraw := True;
                  end
                  else
                  begin
                    GlGridValues[ColIndex+1, RowIndex+1, LayerIndex+1].Value := -1;
                  end;
                end;
              end;
            end;
            if ShouldDraw then
            begin
              DrawIsoSurface(GlGridValues, 0.0);
            end;
          end;
        finally
          Delegate.SelectedCells.Clear;
        end;
      finally
        glPopMatrix;
      end;
    finally
      glEndList;
    end;
    FListUpToDate := True;
  end;
  glCallList(FGlScreenObjectList);
end;

procedure TScreenObject.Draw(Const Bitmap32: TPersistent;
  const Direction: TViewDirection; const DrawAsSelected: Boolean = False);
var
  Mesh3D: TSutraMesh3D;
  LocalModel: TCustomModel;
  DisvGrid: TModflowDisvGrid;
begin
  if Deleted or not Visible then
    Exit;
  if not frmGoPhast.tb3DObjects.Down
    and (Direction <> ViewDirection) then
  begin
      Exit;
  end;
  if (ViewDirection = vdFront) then
  begin
    LocalModel :=  Model as TCustomModel;
    if (LocalModel.ModelSelection in SutraSelection) then
    begin
      Mesh3D := LocalModel.Mesh as TSutraMesh3D;
      if Abs(Mesh3D.CrossSection.Angle - self.SutraAngle) > 1e-6 then
      begin
        Exit;
      end;
    end;
    if LocalModel.DisvUsed then
    begin
      DisvGrid :=  LocalModel.DisvGrid;
      if Abs(DisvGrid.CrossSection.Angle - self.SutraAngle) > 1e-6 then
      begin
        Exit;
      end;
    end;
  end;
  case ElevationCount of
    ecZero:
      begin
        Draw0Elev(Bitmap32, Direction, DrawAsSelected);
      end;
    ecOne:
      begin
        Draw1Elev(Bitmap32, Direction, DrawAsSelected);
      end;
    ecTwo:
      begin
        Draw2Elev(Bitmap32, Direction, DrawAsSelected);
      end;
  else
    Assert(False);
  end;
end;

procedure TScreenObject.DrawSelected(
  const BitMap32: TPersistent; const Direction:
  TViewDirection);
begin
  if not Selected or not Visible then
  begin
    Exit;
  end;
  Draw(BitMap32, Direction, True);
end;

procedure TScreenObject.Draw1Elev(Const Bitmap32: TPersistent;
  const Direction: TViewDirection; const DrawAsSelected: Boolean = False);
var
  ModSelect: TModelSelection;
begin
  if Deleted then
    Exit;
  if Direction = ViewDirection then
  begin
    Draw0Elev(Bitmap32, Direction, DrawAsSelected);
  end
  else
  begin
    if Model = nil then
    begin
      ModSelect := msModflow;
    end
    else
    begin
      ModSelect := (Model as TPhastModel).ModelSelection;
    end;
    case ModSelect of
      msPhast:
        begin
          Draw1ElevPhast(Direction, Bitmap32, DrawAsSelected);
        end;
      msModflow, msModflowLGR, msModflowLGR2, msModflowNWT,
        msModflowFmp, msModflowCfp, msModflowOwhm2:
        begin
          Draw1ElevModflow(Direction, Bitmap32, DrawAsSelected,
            (Model as TPhastModel).SelectedModel);
        end;
      msModflow2015:
        begin
          Assert(Model <> nil);
          if not (Model as TCustomModel).DisvUsed then
          begin
            Draw1ElevModflow(Direction, Bitmap32, DrawAsSelected,
              (Model as TPhastModel).SelectedModel);
          end;
        end;
      msSutra22, msSutra30, msSutra40:
        begin
          Draw1ElevSutra(Direction, Bitmap32, DrawAsSelected);
        end;
      msFootPrint: ; // do nothing.
      else
        Assert(False);
    end;
  end;
end;

procedure TScreenObject.Draw0Elev(
  Const Bitmap32: TPersistent; const Direction:
  TViewDirection; const DrawAsSelected: Boolean = False);
const
  SelectedOpacity = 192;
  UnselectedOpacity = 125;
var
  IntPoint: TPoint;
  Index: integer;
  FillColor32, LineColor32: TColor32;
  LineWidth: single;
  SectionIndex: Integer;
  SectionPoints: TPointArray;
  SLength: integer;
  P: TPolygon32;
  MultiplePolygons: boolean;
  LastClosedSection: integer;
  PointWithValue: boolean;
  PointIndex: Integer;
  SinglePoint: Boolean;
begin
  P := nil;
  if Deleted or (ViewDirection <> Direction) then
    Exit;


  // initialize the variables.
  FillColor32 := Color32(FillColor);
  if ColorLine then
  begin
    LineColor32 := Color32(LineColor);
  end
  else
  begin
    LineColor32 := clBlack32;
  end;
  if (Count <> 1) then
  begin
    if FillScreenObject then
    begin
      if DrawAsSelected then
      begin
        FillColor32 := SetAlpha(FillColor32, SelectedOpacity);
      end
      else
      begin
        FillColor32 := SetAlpha(FillColor32, UnselectedOpacity);
      end;
    end
    else
    begin
      if DrawAsSelected then
      begin
        FillColor32 := Color32(clSilver);
        FillColor32 := SetAlpha(FillColor32, UnselectedOpacity);
      end
      else
      begin
        FillColor32 := clTransparent32;
      end;
    end;
  end;

  if DrawAsSelected then
  begin
    LineWidth := 3;
  end
  else
  begin
    LineWidth := 2;
  end;
  if (Count = 1) then
  begin
    // draw a point
    if DrawAsSelected then
    begin
      if ColorLine then
      begin
        FillColor32 := LineColor32;
      end
      else
      begin
        FillColor32 := clBlack32;
      end;
    end
    else
    begin
      FillColor32 := clTransparent32;
    end;
    for Index := 0 to Count - 1 do
    begin
      IntPoint := CanvasCoordinates[Index];
      PointWithValue := (FPointPositionValues <> nil)
        and (FPointPositionValues.IndexOfPosition(Index) >= 0);
      DrawPointMarker(LineColor32, FillColor32, Bitmap32, IntPoint, LineWidth, PointWithValue);
    end;
  end
  else
  begin
    if Count > 0 then
    begin
      if IAmACurrentScreenObject then
      begin
        // make the current screen object look a little different while it is
        // being drawn.
        LineWidth := 1;
      end;

      MultiplePolygons := SectionCount > 1;
      try
        LastClosedSection := -1;
        for SectionIndex := SectionCount - 1 downto 0 do
        begin
          if SectionClosed[SectionIndex] then
          begin
            LastClosedSection := SectionIndex;
            break;
          end;
        end;
        for SectionIndex := 0 to SectionCount - 1 do
        begin
          if SectionCount = 1 then
          begin
            SectionPoints := CanvasCoordinates;
          end
          else
          begin
            SLength := SectionLength[SectionIndex];
            SetLength(SectionPoints, SLength);
            if SLength > 0 then
            begin
              Move(CanvasCoordinates[SectionStart[SectionIndex]],
                SectionPoints[0], SLength*SizeOf(TPoint));
            end;
          end;

          SinglePoint := False;
          if Length(SectionPoints) > 1 then
          begin
            for PointIndex := 1 to Length(SectionPoints) - 1 do
            begin
              SinglePoint := (SectionPoints[0].X = SectionPoints[PointIndex].X)
                and (SectionPoints[0].Y = SectionPoints[PointIndex].Y);
              if not SinglePoint then
              begin
                Break;
              end;
            end;
          end;

          if SectionClosed[SectionIndex] and not SinglePoint then
          begin
            // draw a closed screen object
            DrawBigPolygon32(Bitmap32, LineColor32, FillColor32, LineWidth,
              SectionPoints, P, MultiplePolygons,
              (SectionIndex = LastClosedSection));
          end
          else if (SectionLength[SectionIndex] = 1) or SinglePoint then
          begin
            PointIndex := SectionStart[SectionIndex];
            PointWithValue := (FPointPositionValues <> nil)
              and (FPointPositionValues.IndexOfPosition(PointIndex) >= 0);
            IntPoint := CanvasCoordinates[PointIndex];
            DrawPointMarker(LineColor32, FillColor32, BitMap32, IntPoint,
              LineWidth, PointWithValue);
          end
          else
          begin
            // draw an open screen object.
            DrawBigPolyline32(Bitmap32, LineColor32, LineWidth,
              SectionPoints, True);
          end;

        end;
      finally
        P.Free;
      end;
        // for screen objects that are selected, draw a square at each vertex.
      if DrawAsSelected and not IAmACurrentScreenObject then
      begin
        LineWidth := 1;
        for Index := 0 to Count - 1 do
        begin
          IntPoint := CanvasCoordinates[Index];
          if SelectedVertices[Index] then
          begin
            FillColor32 := clWhite32;
          end
          else
          begin
            if ColorLine then
            begin
              FillColor32 := LineColor32;
            end
            else
            begin
              FillColor32 := clBlack32;
            end;
          end;
          PointWithValue := (FPointPositionValues <> nil)
            and (FPointPositionValues.IndexOfPosition(Index) >= 0);
          DrawPointMarker(LineColor32, FillColor32, BitMap32, IntPoint,
            LineWidth, PointWithValue);
        end;
      end;
    end;
  end;
  DrawVertexLabels(Bitmap32);
  DrawSectionLabels(Bitmap32);
  DrawLabel(Bitmap32);
end;

function TScreenObject.GetCanvasCoordinates: TPointArray;
begin
  // CalculateCanvasCoordinates exits quickly if nothing needs to be
  // done.  Otherwise, it recalculates the coordinates at which the
  // screen object should be drawn on the screeen.
  CalculateCanvasCoordinates;
  result := FCanvasCoordinates;
end;

procedure TScreenObject.EliminateDuplicates(CellList: TCellAssignmentList;
  AModel: TBaseModel);
var
  OctTree: TRbwOctTree;
//  Mesh: TSutraMesh3D;
  CellIndex: Integer;
  ACell: TCellAssignment;
  X, Y, Z: double;
  LocalModel: TCustomModel;
  Mesh: IMesh3D;
  function CellFound: Boolean;
  var
    Data: Pointer;
  begin
    result := False;
    if OctTree.Count > 0 then
    begin
      X := ACell.Column;
      Y := ACell.Row;
      Z := ACell.Layer;
      OctTree.FirstNearestPoint(X, Y, Z, Data);
      Result := (X = ACell.Column) and (Y = ACell.Row) and (Z = ACell.Layer);
    end;
  end;
begin
  OctTree := TRbwOctTree.Create(nil);
  try
    LocalModel := AModel as TCustomModel;
    if LocalModel.Grid <> nil then
    begin
      OctTree.XMax := LocalModel.Grid.ColumnCount;
      OctTree.YMax := LocalModel.Grid.RowCount;
      OctTree.ZMax := LocalModel.Grid.LayerCount;
    end
    else
    begin
      Mesh := LocalModel.Mesh3D;
      OctTree.XMax := Max(Mesh.Mesh2DI.ElementCount, Mesh.Mesh2DI.NodeCount);
      OctTree.YMax := 1;
      if Mesh.Is3DMesh then
      begin
        OctTree.ZMax := Mesh.LayerCount+1;
      end
      else
      begin
        OctTree.ZMax := 1;
      end;
    end;
    for CellIndex := CellList.Count - 1 downto 0 do
    begin
      ACell := CellList[CellIndex];
      if CellFound then
      begin
        CellList.Delete(CellIndex);
      end
      else
      begin
        OctTree.AddPoint(ACell.Column, ACell.Row, ACell.Layer, ACell);
      end;
    end;
  finally
    OctTree.Free;
  end;
end;

{procedure TScreenObject.GetCellsToAssign(const Mesh: IMesh3D;
  const DataSetFunction: string; OtherData: TObject; const DataSet: TDataArray;
  CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
  AModel: TBaseModel);
begin
  Assert(CellList.Count = 0);
  case ViewDirection of
    vdTop: Delegate.GetTopCellsToAssign(DataSetFunction, OtherData,
      DataSet, CellList, AssignmentLocation, AModel);
    vdFront: Delegate.GetFrontCellsToAssign(DataSetFunction, OtherData,
      DataSet, CellList, AssignmentLocation, AModel);
    vdSide: Delegate.GetSideCellsToAssign(DataSetFunction, OtherData,
      DataSet, CellList, AssignmentLocation, AModel);
    else Assert(False);
  end;

  if DuplicatesAllowed then
  begin
    EliminateHoleCells(CellList);
  end
  else
  begin
    EliminateDuplicates(CellList,Model)
  end;
end;   }

function TScreenObject.GetPointPositionValues: TPointPositionValues;
begin
  if FPointPositionValues = nil then
  begin
    if (frmGoPhast.PhastModel <> nil) then
//      and (frmGoPhast.PhastModel.ComponentState <> []) then
    begin
      FPointPositionValues := TPointPositionValues.Create(Model as TCustomModel);
    end;
  end;
  result := FPointPositionValues;
end;

function TScreenObject.GetPoints(const Index: integer): TPoint2D;
begin
  // Test that the index is valid.  Raise an exception if it isn't.
  ValidateIndex(Index);
  // Get the point.
  result := FPoints[Index];
end;

procedure TScreenObject.Grow;
begin
  // For just a few points, don't allocate a lot of space.
  if FCapacity < 16 then
  begin
    GrowBy(4);
  end
  else
  begin
    // for larger numbers of points, allocate a larger block of data.
    GrowBy(FCapacity div 4);
  end;
end;

procedure TScreenObject.GrowBy(Amount: integer);
begin
  // never make the capacity bigger by too small an amount.
  if Amount < FCapacity div 4 then
  begin
    Amount := FCapacity div 4
  end;
  Capacity := FCapacity + Amount;
end;

procedure TScreenObject.HandleChangedHfbParameter(const ParameterName: string);
begin
  if (ModflowHfbBoundary <> nil)
    and (ModflowHfbBoundary.ParameterName = ParameterName) then
  begin
    ModflowHfbBoundary.HandleChangedParameterValue;
  end;
end;

function TScreenObject.HigherCoordinateCaption: string;
begin
  case ViewDirection of
    vdTop:
      begin
        result := StrHigherZcoordinate;
      end;
    vdFront:
      begin
        result := StrHigherYcoordinate;
      end;
    vdSide:
      begin
        result := StrHigherXcoordinate;
      end;
  else
    begin
      Assert(False);
    end;
  end;
end;

function TScreenObject.IsHigher3DElevationAssigned(Col, Row,
  Layer: integer; Model: TBaseModel): boolean;
begin
  result := Higher3DElevations[Model].IsValue[Layer,Row,Col];
end;

function TScreenObject.IsLower3DElevationAssigned(Col, Row,
  Layer: integer; Model: TBaseModel): boolean;
begin
  result := Lower3DElevations[Model].IsValue[Layer, Row, Col];
end;

function TScreenObject.IndexOfBoundaryDataSet(const DataSet: TDataArray):
  integer;
begin
  if FBoundaryDataSets = nil then
  begin
    result := -1;
  end
  else
  begin
    result := FBoundaryDataSets.IndexOf(DataSet);
  end;
end;

function TScreenObject.IndexOfDataSet(const DataSet: TDataArray): integer;
var
  ADataArray: TDataArray;
  Index: Integer;
begin
  result := -1;
  if DataSet = nil then
  begin
    Exit;
  end;
  if (FCachedDataSetIndex >= 0)
    and (FCachedDataSetIndex < FDataSets.Count) then
//    and (FDataSets[FCachedDataSetIndex] = DataSet) then
  begin
    ADataArray := FDataSets[FCachedDataSetIndex];
    if ADataArray.Name = DataSet.Name then
    begin
      result := FCachedDataSetIndex;
      Exit;
    end;
  end;
  for Index := 0 to FDataSets.Count - 1 do
  begin
    ADataArray := FDataSets[Index];
    if ADataArray.Name = DataSet.Name then
    begin
      result := Index;
      FCachedDataSetIndex := result;
    end;
  end;
end;

function TScreenObject.IndexOfDataSetName(const DataSetName: string): integer;
var
  ADataArray: TDataArray;
  Index: Integer;
begin
  result := -1;
  if DataSetName = '' then
  begin
    Exit;
  end;
  if (FCachedDataSetIndex >= 0)
    and (FCachedDataSetIndex < FDataSets.Count) then
//    and (FDataSets[FCachedDataSetIndex] = DataSet) then
  begin
    ADataArray := FDataSets[FCachedDataSetIndex];
    if SameText(ADataArray.Name, DataSetName) then
    begin
      result := FCachedDataSetIndex;
      Exit;
    end;
  end;
  for Index := 0 to FDataSets.Count - 1 do
  begin
    ADataArray := FDataSets[Index];
    if SameText(ADataArray.Name, DataSetName) then
    begin
      result := Index;
      FCachedDataSetIndex := result;
    end;
  end;
end;

function TScreenObject.IndexOfPoint(const APoint: TPoint2D): integer;
var
  Index: integer;
  Point: TPoint2D;
begin
  // find a point that matches APoint if there is one.
  // Otherwise, return -1.
  result := -1;
  for Index := 0 to FCount - 1 do
  begin
    Point := FPoints[Index];
    if (APoint.X = Point.X) and (APoint.Y = Point.Y) then
    begin
      result := Index;
      Exit;
    end;
  end;
end;

procedure TScreenObject.InsertPoint(const Index: Integer;
  const APoint: TPoint2D);
var
  SectionIndex: Integer;
  Value: integer;
  LocalPPV: TPointPositionValues;
  LPPVIndex: Integer;
  Item: TPointValuesItem;
begin
  FIsClosedCached := False;
  InvalidateModel;
  if Index = FCount then
  begin
    // If you are inserting a new point at the end of the array,
    // just make the array bigger.
    AddPoint(APoint, False);
  end
  else
  begin
    // Otherwise check the index and see if it is OK.
    ValidateIndex(Index);
    if not FRecalculateBox then
    begin
      // there is no point in doing this if the values are invalid anyway.
      if APoint.X > FMaxX then
      begin
        FMaxX := APoint.X;
      end
      else if APoint.X < FMinX then
      begin
        FMinX := APoint.X;
      end;

      if APoint.Y > FMaxY then
      begin
        FMaxY := APoint.Y;
      end
      else if APoint.Y < FMinY then
      begin
        FMinY := APoint.Y;
      end;
    end;
    // If required, make the array bigger.
    if FCount = FCapacity then
    begin
      Grow;
    end;
    LocalPPV := PointPositionValues;
    if LocalPPV <> nil then
    begin
      for LPPVIndex := LocalPPV.Count - 1 downto 0 do
      begin
        Item := LocalPPV.Items[LPPVIndex] as TPointValuesItem;
        if Item.Position >= Index then
        begin
          Item.Position := Item.Position + 1;
        end
        else
        begin
          break;
        end;
      end;
    end;
    // Move subsequent points out of the way.
    Move(FPoints[Index], FPoints[Index + 1],
      (FCount - Index) * SizeOf(TPoint2D));
    // move the selection information too.
    if SelectedVertexCount > 0 then
    begin
      Move(FSelectedVertices[Index], FSelectedVertices[Index + 1],
        (FCount - Index) * SizeOf(boolean));
      FSelectedVertices[Index] := False;
    end
    else
    begin
      FSelectedVertices[FCount] := False;
    end;
    for SectionIndex := 0 to SectionStarts.Count - 1 do
    begin
      Value := SectionStarts.IntValues[SectionIndex];
      if Value >= Index then
      begin
        SectionStarts.IntValues[SectionIndex] := Value + 1;
      end;
    end;

    // Update the count.
    Inc(FCount);
    // Insert the new point.
    FPoints[Index] := APoint;
  end;
  Invalidate;
end;

procedure TScreenObject.InvalidateModelEvent(Sender: TObject);
begin
  InvalidateModel
end;

procedure TScreenObject.InvalidateModel;
begin
  if FCanInvalidateModel and (FModel <> nil) then
  begin
    { TODO -cRefactor : Consider replacing FModel with a TNotifyEvent. }
    FModel.DoInvalidate(self);
  end;
end;

procedure TScreenObject.InvalidateSegments;
var
  Index: Integer;
  SegList: TCellElementSegmentList;
begin
  for Index := 0 to FSegModelAssoc.Count - 1 do
  begin
    SegList := FSegModelAssoc[Index];
    SegList.UpToDate := False;
    SegList.FHigher3DElevationsNeedsUpdating := True;
    SegList.FLower3DElevationsNeedsUpdating := True;
  end;
  FCachedCells.Invalidate;
//  FSegments.UpToDate := False;
end;

procedure TScreenObject.InvalidateSelf(Sender: TObject);
begin
 Invalidate;
end;

procedure TScreenObject.InvalidateCachedCells;
begin
  FCachedCells.Invalidate;
end;

function TScreenObject.GetVertexLabel(CoordIndex, SectionIndex: Integer): string;
  function GetValueLabel(Vertex: Integer): String;
  var
    ItemIndex: Integer;
    Item: TPointValuesItem;
    NameIndex: Integer;
    ValueItem: TPointValue;
  begin
    result := '';
    for ItemIndex := 0 to PointPositionValues.Count - 1 do
    begin
      Item := PointPositionValues.Items[ItemIndex]
        as TPointValuesItem;
      if Item.Position = Vertex then
      begin
        for NameIndex := 0 to Item.Values.Count - 1 do
        begin
          ValueItem := Item.Values.Items[NameIndex] as TPointValue;
          if SameText(ObjectVertexLabel.VertexValueKey, ValueItem.Name) then
          begin
            result := FloatToStr(ValueItem.Value);
            Exit;
          end;
        end;
        break;
      end;
    end;
  end;
var
  VertexLabel: string;
  ValueLabel: string;
  ValueLabel1: string;
  ValueLabel2: string;
begin
  result := '';
  if (SectionStart[SectionIndex] = CoordIndex) and SectionClosed[SectionIndex] then
  begin
    // do nothing
    VertexLabel := '';
    ValueLabel := '';
  end
  else if (SectionEnd[SectionIndex] = CoordIndex) and SectionClosed[SectionIndex] then
  begin
    if ObjectVertexLabel.Visible then
    begin
      VertexLabel := IntToStr(SectionStart[SectionIndex]+1)
        + ', ' + IntToStr(CoordIndex+1);
    end
    else
    begin
      VertexLabel := '';
    end;
    if (ObjectVertexLabel.VertexValueKey <> '') then
    begin
      ValueLabel1 := GetValueLabel(SectionStart[SectionIndex]);
      ValueLabel2 := GetValueLabel(CoordIndex);
      if (ValueLabel1 <> '') and (ValueLabel2 <> '') then
      begin
        ValueLabel := ValueLabel1 + ', ' + ValueLabel2;
      end
      else
      begin
        ValueLabel := ValueLabel1 + ValueLabel2;
      end;
    end
    else
    begin
      ValueLabel := '';
    end;
  end
  else
  begin
    if ObjectVertexLabel.Visible then
    begin
      VertexLabel := IntToStr(CoordIndex+1);
    end
    else
    begin
      VertexLabel := '';
    end;
    if (ObjectVertexLabel.VertexValueKey <> '') then
    begin
      ValueLabel := GetValueLabel(CoordIndex)
    end
    else
    begin
      ValueLabel := '';
    end;
  end;
  if (VertexLabel <> '') and (ValueLabel <> '') then
  begin
    VertexLabel := VertexLabel + '; ' + ValueLabel;
  end
  else
  begin
    VertexLabel := VertexLabel + ValueLabel;
  end;
  result := VertexLabel;
end;

procedure TScreenObject.DrawVertexLabels(const Bitmap32: TBitmap32);
var
  StartPoint: TPoint;
  AZoomBox: TQRbwZoomBox2;
  CoordIndex: Integer;
  ExistingFont: TFont;
  SectionIndex: Integer;
  VertexLabel: string;
begin
  if ObjectVertexLabel.Visible or (ObjectVertexLabel.VertexValueKey <> '') then
  begin
    ExistingFont := TFont.Create;
    try
      ExistingFont.Assign(Bitmap32.Font);
      Bitmap32.Font := ObjectVertexLabel.Font;
      SectionIndex := 0;
      for CoordIndex := 0 to Length(CanvasCoordinates) - 1 do
      begin
        StartPoint := CanvasCoordinates[CoordIndex];
        AZoomBox := ZoomBox(ViewDirection);
        if (StartPoint.X >= 0) and (StartPoint.Y >= 0)
          and (StartPoint.X < AZoomBox.Image32.Width)
          and (StartPoint.Y < AZoomBox.Image32.Height) then
        begin
          StartPoint.X := StartPoint.X + ObjectVertexLabel.OffSet.X;
          StartPoint.Y := StartPoint.Y - ObjectVertexLabel.OffSet.Y;
          VertexLabel := GetVertexLabel(CoordIndex, SectionIndex);
          if VertexLabel <> '' then
          begin
            Bitmap32.Textout(StartPoint.X, StartPoint.Y, VertexLabel);
          end;
        end;
        if SectionEnd[SectionIndex] = CoordIndex then
        begin
          Inc(SectionIndex);
        end;
      end;
    finally
      Bitmap32.Font := ExistingFont;
      ExistingFont.Free;
    end;
  end;
end;


procedure TScreenObject.DrawVertexLabels(const Graphic: TPersistent);
begin
  if Graphic is TBitmap32 then
  begin
    DrawVertexLabels(TBitmap32(Graphic));
  end
  else
  begin
   DrawVertexLabels(Graphic as TCanvas);
  end;
end;

function TScreenObject.DrnParameters: IModflowParameters;
begin
  result := nil;
  if ModflowDrnBoundary <> nil then
  begin
    result := ModflowDrnBoundary.Parameters
  end;
end;

function TScreenObject.DrtParameters: IModflowParameters;
begin
  result := nil;
  if ModflowDrtBoundary <> nil then
  begin
    result := ModflowDrtBoundary.Parameters
  end;
end;

procedure TScreenObject.DrawVertexLabels(const ACanvas: TCanvas);
var
  StartPoint: TPoint;
  AZoomBox: TQRbwZoomBox2;
  CoordIndex: Integer;
  ExistingFont: TFont;
  SectionIndex: Integer;
  VertexLabel: string;
begin
  if ObjectVertexLabel.Visible or (ObjectVertexLabel.VertexValueKey <> '') then
  begin
    ExistingFont := TFont.Create;
    try
      ExistingFont.Assign(ACanvas.Font);
      ACanvas.Font := ObjectVertexLabel.Font;
      SectionIndex := 0;
      for CoordIndex := 0 to Length(CanvasCoordinates) - 1 do
      begin
        StartPoint := CanvasCoordinates[CoordIndex];
        AZoomBox := ZoomBox(ViewDirection);
        if (StartPoint.X >= 0) and (StartPoint.Y >= 0)
          and (StartPoint.X < AZoomBox.Image32.Width)
          and (StartPoint.Y < AZoomBox.Image32.Height) then
        begin
          StartPoint.X := StartPoint.X + ObjectVertexLabel.OffSet.X;
          StartPoint.Y := StartPoint.Y - ObjectVertexLabel.OffSet.Y;
          if VertexLabel <> '' then
          begin
            ACanvas.Textout(StartPoint.X, StartPoint.Y, VertexLabel);
          end;
        end;
        if SectionEnd[SectionIndex] = CoordIndex then
        begin
          Inc(SectionIndex);
        end;
      end;
    finally
      ACanvas.Font := ExistingFont;
      ExistingFont.Free;
    end;
  end;
end;

procedure TScreenObject.DrawLabel(const Graphic: TPersistent);
begin
  if Graphic is TBitmap32 then
  begin
    DrawLabel(TBitmap32(Graphic));
  end
  else
  begin
    DrawLabel(Graphic as TCanvas);
  end;
end;

procedure TScreenObject.DrawLabel(const ACanvas: TCanvas);
var
  LineIndex: Integer;
  StartPoint: TPoint;
  CaptionLines: TStringList;
  YHeight: Integer;
  ACaptionLine: string;
  AZoomBox: TQRbwZoomBox2;
  CoordIndex: Integer;
  ExistingFont: TFont;
begin
  if ObjectLabel.Visible then
  begin
    for CoordIndex := 0 to Length(CanvasCoordinates) - 1 do
    begin
      StartPoint := CanvasCoordinates[CoordIndex];
      AZoomBox := ZoomBox(ViewDirection);
      if (StartPoint.X >= 0) and (StartPoint.Y >= 0)
        and (StartPoint.X < AZoomBox.Image32.Width)
        and (StartPoint.Y < AZoomBox.Image32.Height) then
      begin
        StartPoint.X := StartPoint.X + ObjectLabel.OffSet.X;
        StartPoint.Y := StartPoint.Y - ObjectLabel.OffSet.Y;
        ExistingFont := TFont.Create;
        try
          ExistingFont.Assign(ACanvas.Font);
          ACanvas.Font := ObjectLabel.Font;
          CaptionLines := TStringList.Create;
          try
            if ObjectLabel.Caption = '' then
            begin
              CaptionLines.Text := Name;
            end
            else
            begin
              CaptionLines.Text := ObjectLabel.Caption;
            end;
            YHeight := ACanvas.TextHeight('M');
            for LineIndex := 0 to CaptionLines.Count - 1 do
            begin
              ACaptionLine := CaptionLines[LineIndex];
              ACanvas.Textout(StartPoint.X, StartPoint.Y, ACaptionLine);
              StartPoint.Y := StartPoint.Y + YHeight;
            end;
          finally
            CaptionLines.Free;
          end;
          ACanvas.Font := ExistingFont;
        finally
          ExistingFont.Free;
        end;
        break;
      end;
    end;
  end;
end;

procedure TScreenObject.DrawLabel(const Bitmap32: TBitmap32);
var
  LineIndex: Integer;
  StartPoint: TPoint;
  CaptionLines: TStringList;
  YHeight: Integer;
  ACaptionLine: string;
  AZoomBox: TQRbwZoomBox2;
  CoordIndex: Integer;
  ExistingFont: TFont;
begin
  if ObjectLabel.Visible then
  begin
    for CoordIndex := 0 to Length(CanvasCoordinates) - 1 do
    begin
      StartPoint := CanvasCoordinates[CoordIndex];
      AZoomBox := ZoomBox(ViewDirection);
      if (StartPoint.X >= 0) and (StartPoint.Y >= 0)
        and (StartPoint.X < AZoomBox.Image32.Width)
        and (StartPoint.Y < AZoomBox.Image32.Height) then
      begin
        StartPoint.X := StartPoint.X + ObjectLabel.OffSet.X;
        StartPoint.Y := StartPoint.Y - ObjectLabel.OffSet.Y;
        ExistingFont := TFont.Create;
        try
          ExistingFont.Assign(Bitmap32.Font);
          Bitmap32.Font := ObjectLabel.Font;
          CaptionLines := TStringList.Create;
          try
            if ObjectLabel.Caption = '' then
            begin
              CaptionLines.Text := Name;
            end
            else
            begin
              CaptionLines.Text := ObjectLabel.Caption;
            end;
            YHeight := Bitmap32.TextHeight('M');
            for LineIndex := 0 to CaptionLines.Count - 1 do
            begin
              ACaptionLine := CaptionLines[LineIndex];
              Bitmap32.Textout(StartPoint.X, StartPoint.Y, ACaptionLine);
              StartPoint.Y := StartPoint.Y + YHeight;
            end;
          finally
            CaptionLines.Free;
          end;
          Bitmap32.Font := ExistingFont;
        finally
          ExistingFont.Free;
        end;
        break;
      end;
    end;
  end;
end;

procedure TScreenObject.InvalidateCoordinates;
begin
  FRecalculateCoordinates := True;
end;

function TScreenObject.FmpWellParameters: IModflowParameters;
begin
  result := nil;
  if ModflowFmpWellBoundary <> nil then
  begin
    result := ModflowFmpWellBoundary.Parameters;
  end;
end;

function TScreenObject.FrameScreenObject(VD: TViewDirection): TScreenObject;
begin
  if FModel = nil then
  begin
    result := nil;
  end
  else if FModel is TPhastModel then
  begin
    result := TPhastModel(FModel).GetCurrentScreenObject(VD);
  end
  else
  begin
    result := ((FModel as TChildModel).ParentModel as TPhastModel).GetCurrentScreenObject(VD);
  end;
end;

procedure TScreenObject.Invalidate;
var
  DataSet: TDataArray;
  Index: integer;
  DataArrayManager: TDataArrayManager;
  LocalModel: TPhastModel;
begin
  if (csDestroying in ComponentState) then
  begin
    Exit;
  end;
  if (FModel <> nil) and (FModel as TCustomModel).Clearing then
  begin
    Exit;
  end;
  FPriorObjectIntersectLengthCol := -1;
  FPriorObjectIntersectLengthRow := -1;
  FPriorObjectIntersectLengthLayer := -1;

  FreeAndNil(FGpcPolygons);
  FListUpToDate := False;
  ClearSubPolygons;
  FRecalculateCoordinates := True;
  FRecalculateLength := True;
  FRecalculateArea := True;
  FNeedToUpdateLine := True;
  FreeAndNil(FSelectLines);
  InvalidateSegments;

  UpToDate := False;
  NotifyGuiOfChange(self);

  if FrameScreenObject(ViewDirection) = self then
  begin
    ZoomBox(ViewDirection).InvalidateImage32;
  end;

  if (FModel <> nil) and CanInvalidateModel then
  begin
    LocalModel := (FModel as TPhastModel);
    if (LocalModel.Grid <> nil) then
    begin
      if (LocalModel.Grid.TopDataSet <> nil) and
        not LocalModel.Grid.TopDataSet.UpToDate then
      begin
        LocalModel.Grid.NeedToRecalculateTopCellColors := True;
        ZoomBox(vdTop).InvalidateImage32;
      end;

      if (LocalModel.Grid.FrontDataSet <> nil) and
        not LocalModel.Grid.FrontDataSet.UpToDate then
      begin
        LocalModel.Grid.NeedToRecalculateFrontCellColors := True;
        ZoomBox(vdFront).InvalidateImage32;
      end;

      if (LocalModel.Grid.SideDataSet <> nil) and
        not LocalModel.Grid.SideDataSet.UpToDate then
      begin
        LocalModel.Grid.NeedToRecalculateSideCellColors := True;
        ZoomBox(vdSide).InvalidateImage32;
      end;

      if (LocalModel.ThreeDDataSet <> nil) and
        not LocalModel.ThreeDDataSet.UpToDate then
      begin
        LocalModel.Grid.NeedToRecalculate3DCellColors := True;
        LocalModel.DiscretizationChanged;
      end;
    end;

    LocalModel.Notify3DViewChanged;
    InvalidateModel;
  end;

  if (FFluxBoundary <> nil)
    and (FluxBoundary.BoundaryValue.Count > 0) and FCanInvalidateModel then
  begin
    FluxBoundary.BoundaryValue.TimeList.Invalidate
  end;
  if (FFluxBoundary <> nil)
    and (FluxBoundary.Solution.Count > 0) and FCanInvalidateModel then
  begin
    FluxBoundary.Solution.TimeList.Invalidate
  end;
  if (FLeakyBoundary <> nil)
    and (LeakyBoundary.BoundaryValue.Count > 0) and FCanInvalidateModel then
  begin
    LeakyBoundary.BoundaryValue.TimeList.Invalidate;
  end;
  if (FLeakyBoundary <> nil)
    and (LeakyBoundary.Solution.Count > 0) and FCanInvalidateModel then
  begin
    LeakyBoundary.Solution.TimeList.Invalidate;
  end;
  if FCanInvalidateModel and (FLeakyBoundary <> nil) then
  begin
    DataArrayManager := (FModel as TPhastModel).DataArrayManager;
    if (LeakyBoundary.BoundaryValue.Count > 0)
      or (LeakyBoundary.Solution.Count > 0) then
    begin
      Index := -1;
      case ViewDirection of
        vdTop:
          begin
            Index := DataArrayManager.IndexOfBoundaryDataSet(
              rsTopLeakyHydraulicConductivity);
          end;
        vdFront:
          begin
            Index := DataArrayManager.IndexOfBoundaryDataSet(
              rsFrontLeakyHydraulicConductivity);
          end;
        vdSide:
          begin
            Index := DataArrayManager.IndexOfBoundaryDataSet(
              rsSideLeakyHydraulicConductivity);
          end;
      else
        Assert(False);
      end;
      if Index >= 0 then
      begin
        DataSet := DataArrayManager.BoundaryDataSets[Index];
        DataSet.Invalidate;
      end;
      case ViewDirection of
        vdTop:
          begin
            Index := DataArrayManager.IndexOfBoundaryDataSet(
              rsTopLeakyThickness);
          end;
        vdFront:
          begin
            Index := DataArrayManager.IndexOfBoundaryDataSet(
              rsFrontLeakyThickness);
          end;
        vdSide:
          begin
            Index := DataArrayManager.IndexOfBoundaryDataSet(
              rsSideLeakyThickness);
          end;
      else
        Assert(False);
      end;
      if Index >= 0 then
      begin
        DataSet := DataArrayManager.BoundaryDataSets[Index];
        DataSet.Invalidate;
      end;
    end;
  end;

  if (FRiverBoundary <> nil)
    and (RiverBoundary.BoundaryValue.Count > 0) and FCanInvalidateModel then
  begin
    RiverBoundary.BoundaryValue.TimeList.Invalidate;
  end;
  if (FRiverBoundary <> nil)
    and (RiverBoundary.Solution.Count > 0) and FCanInvalidateModel then
  begin
    RiverBoundary.Solution.TimeList.Invalidate;
  end;
  if FCanInvalidateModel and (FRiverBoundary <> nil) then
  begin
    if (RiverBoundary.BoundaryValue.Count > 0)
      or (RiverBoundary.Solution.Count > 0) then
    begin
      DataArrayManager := (FModel as TPhastModel).DataArrayManager;
      Index := DataArrayManager.IndexOfBoundaryDataSet(
        rsRiverHydraulicConductivity);
      if Index >= 0 then
      begin
        DataSet := DataArrayManager.BoundaryDataSets[Index];
        DataSet.Invalidate;
      end;
      Index := DataArrayManager.IndexOfBoundaryDataSet(rsRiverWidth);
      if Index >= 0 then
      begin
        DataSet := DataArrayManager.BoundaryDataSets[Index];
        DataSet.Invalidate;
      end;
      Index := DataArrayManager.IndexOfBoundaryDataSet(rsRiverDepth);
      if Index >= 0 then
      begin
        DataSet := DataArrayManager.BoundaryDataSets[Index];
        DataSet.Invalidate;
      end;
      Index := DataArrayManager.IndexOfBoundaryDataSet(
        rsRiverBedThickness);
      if Index >= 0 then
      begin
        DataSet := DataArrayManager.BoundaryDataSets[Index];
        DataSet.Invalidate;
      end;
    end;
  end;

  if (FSpecifiedHeadBoundary <> nil)
    and (SpecifiedHeadBoundary.BoundaryValue.Count > 0)
    and FCanInvalidateModel then
  begin
    SpecifiedHeadBoundary.BoundaryValue.TimeList.Invalidate;
  end;
  if (FSpecifiedHeadBoundary <> nil)
    and (SpecifiedHeadBoundary.Solution.Count > 0) and FCanInvalidateModel then
  begin
    SpecifiedHeadBoundary.Solution.TimeList.Invalidate;
  end;
  {if SpecifiedSolutionBoundary.Solution.Count > 0 then
  begin
    SpecifiedSolutionBoundary.Solution.TimeList.Invalidate;
  end;}
  if (FWellBoundary <> nil)
    and (WellBoundary.BoundaryValue.Count > 0) and FCanInvalidateModel then
  begin
    WellBoundary.BoundaryValue.TimeList.Invalidate
  end;
  if (FWellBoundary <> nil)
    and (WellBoundary.Solution.Count > 0) and FCanInvalidateModel then
  begin
    WellBoundary.Solution.TimeList.Invalidate;
  end;

  if (FModflowBoundaries <> nil) and CanInvalidateModel then
  begin
    if ModflowChdBoundary <> nil then
    begin
      ModflowChdBoundary.InvalidateDisplay;
    end;
    if ModflowGhbBoundary <> nil then
    begin
      ModflowGhbBoundary.InvalidateDisplay;
    end;
    if ModflowWellBoundary <> nil then
    begin
      ModflowWellBoundary.InvalidateDisplay;
    end;
    if ModflowRivBoundary <> nil then
    begin
      ModflowRivBoundary.InvalidateDisplay;
    end;
    if ModflowDrnBoundary <> nil then
    begin
      ModflowDrnBoundary.InvalidateDisplay;
    end;
    if (ModflowDrtBoundary <> nil) then
    begin
      ModflowDrtBoundary.InvalidateDisplay;
    end;
    if ModflowRchBoundary <> nil then
    begin
      ModflowRchBoundary.InvalidateDisplay;
    end;
    if ModflowEvtBoundary <> nil then
    begin
      ModflowEvtBoundary.InvalidateDisplay;
    end;
    if ModflowEtsBoundary <> nil then
    begin
      ModflowEtsBoundary.InvalidateDisplay;
    end;
    if ModflowResBoundary <> nil then
    begin
      ModflowResBoundary.InvalidateDisplay;
    end;
    if ModflowLakBoundary <> nil then
    begin
      ModflowLakBoundary.InvalidateDisplay;
    end;
    if ModflowSfrBoundary <> nil then
    begin
      ModflowSfrBoundary.InvalidateDisplay;
    end;
    if ModflowStrBoundary <> nil then
    begin
      ModflowStrBoundary.InvalidateDisplay;
    end;
    if ModflowUzfBoundary <> nil then
    begin
      ModflowUzfBoundary.InvalidateDisplay;
    end;
//    if ModflowHeadObservations <> nil then
//    begin
//      ModflowHeadObservations.InvalidateDisplay;
//    end;
//    if ModflowStreamGage <> nil then
//    begin
//      ModflowStreamGage.InvalidateDisplay;
//    end;
    if ModflowFhbHeadBoundary <> nil then
    begin
      ModflowFhbHeadBoundary.InvalidateDisplay;
    end;
    if ModflowFhbFlowBoundary <> nil then
    begin
      ModflowFhbFlowBoundary.InvalidateDisplay;
    end;
    if ModflowFmpWellBoundary <> nil then
    begin
      ModflowFmpWellBoundary.InvalidateDisplay;
    end;
    if ModflowFmpPrecip <> nil then
    begin
      ModflowFmpPrecip.InvalidateDisplay;
    end;
    if ModflowFmpRefEvap <> nil then
    begin
      ModflowFmpRefEvap.InvalidateDisplay;
    end;
    if ModflowFmpCropID <> nil then
    begin
      ModflowFmpCropID.InvalidateDisplay;
    end;
    if ModflowFmpFarmID <> nil then
    begin
      ModflowFmpFarmID.InvalidateDisplay;
    end;
//    if ModflowCfpPipes <> nil then
//    begin
//      ModflowCfpPipes.InvalidateDisplay;
//    end;
//    if ModflowCfpFixedHeads <> nil then
//    begin
//      ModflowCfpFixedHeads.InvalidateDisplay;
//    end;
    if ModflowCfpRchFraction <> nil then
    begin
      ModflowCfpRchFraction.InvalidateDisplay;
    end;
    if ModflowSwrRain <> nil then
    begin
      ModflowSwrRain.InvalidateDisplay;
    end;
    if ModflowSwrEvap <> nil then
    begin
      ModflowSwrEvap.InvalidateDisplay;
    end;
    if ModflowSwrLatInflow <> nil then
    begin
      ModflowSwrLatInflow.InvalidateDisplay;
    end;
    if ModflowSwrStage <> nil then
    begin
      ModflowSwrStage.InvalidateDisplay;
    end;
    if ModflowSwrDirectRunoff <> nil then
    begin
      ModflowSwrDirectRunoff.InvalidateDisplay;
    end;
    if ModflowSwrReaches <> nil then
    begin
      ModflowSwrReaches.InvalidateDisplay;
    end;
    if Mt3dmsConcBoundary <> nil then
    begin
      Mt3dmsConcBoundary.InvalidateDisplay;
    end;
    if ModflowRipBoundary <> nil then
    begin
      ModflowRipBoundary.InvalidateDisplay;
    end;
    if Mt3dUzfRechConc <> nil then
    begin
      Mt3dUzfRechConc.InvalidateDisplay;
    end;
    if Mt3dUztSatEtConcBoundary <> nil then
    begin
      Mt3dUztSatEtConcBoundary.InvalidateDisplay;
    end;
    if Mt3dUztUnsatEtConcBoundary <> nil then
    begin
      Mt3dUztUnsatEtConcBoundary.InvalidateDisplay;
    end;
    if Mt3dUzSsmSinkConcBoundary <> nil then
    begin
      Mt3dUzSsmSinkConcBoundary.InvalidateDisplay;
    end;
    if Mt3dLktConcBoundary <> nil then
    begin
      Mt3dLktConcBoundary.InvalidateDisplay;
    end;
    if Mt3dSftConcBoundary <> nil then
    begin
      Mt3dSftConcBoundary.InvalidateDisplay;
    end;

    if ModflowSfr6Boundary <> nil then
    begin
      ModflowSfr6Boundary.InvalidateDisplay;
    end;

    if ModflowMawBoundary <> nil then
    begin
      ModflowMawBoundary.InvalidateDisplay;
    end;

    if ModflowLak6 <> nil then
    begin
      ModflowLak6.InvalidateDisplay;
    end;

    if ModflowMvr <> nil then
    begin
      ModflowMvr.InvalidateDisplay;
    end;

    if ModflowUzfMf6Boundary <> nil then
    begin
      ModflowUzfMf6Boundary.InvalidateDisplay;
    end;

    if ModflowCSub <> nil then
    begin
      ModflowCSub.InvalidateDisplay;
    end;

    if GwtCncBoundary <> nil then
    begin
      GwtCncBoundary.InvalidateDisplay;
    end;

    if GwtSrcBoundary <> nil then
    begin
      GwtSrcBoundary.InvalidateDisplay;
    end;

    if Fmp4EfficiencyBoundary <> nil then
    begin
      Fmp4EfficiencyBoundary.InvalidateDisplay;
    end;
    
    if Fmp4EfficiencyImprovementBoundary <> nil then
    begin
      Fmp4EfficiencyImprovementBoundary.InvalidateDisplay;
    end;

    if Fmp4BareRunoffFractionBoundary <> nil then
    begin
      Fmp4BareRunoffFractionBoundary.InvalidateDisplay;
    end;

    if Fmp4BarePrecipitationConsumptionFractionBoundary <> nil then
    begin
      Fmp4BarePrecipitationConsumptionFractionBoundary.InvalidateDisplay;
    end;

    if ModflowFmpBareEvap <> nil then
    begin
      ModflowFmpBareEvap.InvalidateDisplay;
    end;

    if ModflowFmpDirectRecharge <> nil then
    begin
      ModflowFmpDirectRecharge.InvalidateDisplay;
    end;

    if ModflowFmpPrecipPotConsumption <> nil then
    begin
      ModflowFmpPrecipPotConsumption.InvalidateDisplay;
    end;

    if ModflowFmp4NrdInfilLocationBoundary <> nil then
    begin
      ModflowFmp4NrdInfilLocationBoundary.InvalidateDisplay;
    end;

    if ModflowFmp4LandUseAreaFraction <> nil then
    begin
      ModflowFmp4LandUseAreaFraction.InvalidateDisplay;
    end;

    if ModflowFmp4MultLandUseAreaFraction <> nil then
    begin
      ModflowFmp4MultLandUseAreaFraction.InvalidateDisplay;
    end;

    if ModflowFmp4CropCoefficient <> nil then
    begin
      ModflowFmp4CropCoefficient.InvalidateDisplay;
    end;

    if ModflowFmp4MultCropCoefficient <> nil then
    begin
      ModflowFmp4MultCropCoefficient.InvalidateDisplay;
    end;

    if ModflowFmp4ConsumptiveUse <> nil then
    begin
      ModflowFmp4ConsumptiveUse.InvalidateDisplay;
    end;

    if ModflowFmp4MultConsumptiveUse <> nil then
    begin
      ModflowFmp4MultConsumptiveUse.InvalidateDisplay;
    end;

    if ModflowFmp4Irrigation <> nil then
    begin
      ModflowFmp4Irrigation.InvalidateDisplay;
    end;

    if ModflowFmp4MultIrrigation <> nil then
    begin
      ModflowFmp4MultIrrigation.InvalidateDisplay;
    end;

    if ModflowFmp4RootDepth <> nil then
    begin
      ModflowFmp4RootDepth.InvalidateDisplay;
    end;

    if ModflowFmp4MultRootDepth <> nil then
    begin
      ModflowFmp4MultRootDepth.InvalidateDisplay;
    end;

    if ModflowFmp4TranspirationFraction <> nil then
    begin
      ModflowFmp4TranspirationFraction.InvalidateDisplay;
    end;

    if ModflowFmp4MultTranspirationFraction <> nil then
    begin
      ModflowFmp4MultTranspirationFraction.InvalidateDisplay;
    end;

    if ModflowFmp4EvaporationIrrigationFraction <> nil then
    begin
      ModflowFmp4EvaporationIrrigationFraction.InvalidateDisplay;
    end;

    if ModflowFmp4MultEvaporationIrrigationFraction <> nil then
    begin
      ModflowFmp4MultEvaporationIrrigationFraction.InvalidateDisplay;
    end;

    if ModflowFmp4FractionOfPrecipToSurfaceWater <> nil then
    begin
      ModflowFmp4FractionOfPrecipToSurfaceWater.InvalidateDisplay;
    end;

    if ModflowFmp4MultFractionOfPrecipToSurfaceWater <> nil then
    begin
      ModflowFmp4MultFractionOfPrecipToSurfaceWater.InvalidateDisplay;
    end;

    if ModflowFmp4FractionOfIrrigToSurfaceWater <> nil then
    begin
      ModflowFmp4FractionOfIrrigToSurfaceWater.InvalidateDisplay;
    end;

    if ModflowFmp4MultFractionOfIrrigToSurfaceWater <> nil then
    begin
      ModflowFmp4MultFractionOfIrrigToSurfaceWater.InvalidateDisplay;
    end;

    if ModflowFmp4AddedDemand <> nil then
    begin
      ModflowFmp4AddedDemand.InvalidateDisplay;
    end;

    if ModflowFmp4MultAddedDemand <> nil then
    begin
      ModflowFmp4MultAddedDemand.InvalidateDisplay;
    end;

    if ModflowFmp4CropHasSalinityDemand <> nil then
    begin
      ModflowFmp4CropHasSalinityDemand.InvalidateDisplay;
    end;

    if ModflowFmp4MultCropHasSalinityDemand <> nil then
    begin
      ModflowFmp4MultCropHasSalinityDemand.InvalidateDisplay;
    end;

    if Fmp4AddedDemandRunoffSplitBoundary <> nil then
    begin
      Fmp4AddedDemandRunoffSplitBoundary.InvalidateDisplay;
    end;

    if ModflowTvkBoundary <> nil then
    begin
      ModflowTvkBoundary.InvalidateDisplay;
    end;

    if ModflowTvsBoundary <> nil then
    begin
      ModflowTvsBoundary.InvalidateDisplay;
    end;
    //    if Mt3dmsTransObservations <> nil then
//    begin
//      Mt3dmsTransObservations.InvalidateDisplay;
//    end;

    if not (FModel as TPhastModel).ImportingModel then
    begin
      FModflowBoundaries.FreeUnusedBoundaries;
    end;

//    if ModflowHfbBoundary <> nil then
//    begin
//      // causes access violations when creating new objects
//      // if the grid is colored with the HFB boundary
//      ModflowHfbBoundary.InvalidateDisplay
//    end;
//    if ModflowMnw2Boundary <> nil then
//    begin
//      // not finished.
////      ModflowMnw2Boundary.InvalidateDisplay
//    end;
  end;
end;

procedure TScreenObject.SetCanInvalidateModel(const Value: boolean);
begin
  FCanInvalidateModel := Value;
end;

procedure TScreenObject.SetCapacity(Value: integer);
begin
  if Value < 0 then
  begin
    Value := 0;
  end;
  if FCapacity <> Value then
  begin
    DestroyLastSubPolygon;
    FCapacity := Value;
    SetLength(FPoints, FCapacity);
    SetLength(FSelectedVertices, FCapacity);
    if FCapacity < FCount then
    begin
      FCount := FCapacity;
      ResetSelectedVertexCount;
    end;
  end;
end;

procedure TScreenObject.ResetSelectedVertexCount;
var
  Index: integer;
begin
  FSelectedVertexCount := 0;
  for Index := 0 to FCount - 1 do
  begin
    if SelectedVertices[Index] then
    begin
      Inc(FSelectedVertexCount);
    end;
  end;
end;

procedure TScreenObject.SetCount(const Value: integer);
var
  Index: integer;
  OldCount: integer;
begin
  if FCount <> Value then
  begin
    FIsClosedCached := False;
    if (FCount > Value) and (FSelectedVertexCount > 0) then
    begin
      FNeedToResetSelectedVertexCount := True;
    end;
    if Capacity < Value then
    begin
      Capacity := Value;
    end;
    OldCount := FCount;
    FCount := Value;
    for Index := OldCount to Count - 1 do
    begin
      SelectedVertices[Index] := False;
    end;
    if FNeedToResetSelectedVertexCount then
    begin
      ResetSelectedVertexCount;
    end;
    DeleteExtraSections;
    if OldCount > FCount then
    begin
      DestroyLastSubPolygon;
    end;
    FRecalculateBox := True;
    Invalidate;
  end;
end;

procedure TScreenObject.SetDataSetCapacity(const Value: integer);
begin
  FDataSets.Capacity := Value;
  FDataSetFormulas.Capacity := Value;
end;

procedure TScreenObject.SetDataSetFormulas(const Index: integer; Value:
  string);
var
  Observer: TObserver;
  OldUseList: TStringList;
  NewUseList: TStringList;
  UseIndex: integer;
  OtherIndex: integer;
  AFunction, OldFunction: string;
  Compiler: TRbwParser;
  ADataSet: TDataArray;
  DS: TObserver;
  AFormulaObject: IFormulaObject;
  FormulaObject: IFormulaObject;
begin
  if (Value = rsObjectImportedValuesR)
    or (Value = rsObjectImportedValuesI)
    or (Value = rsObjectImportedValuesB)
    or (Value = rsObjectImportedValuesT)
    then
  begin
    ADataSet := self.DataSets[Index];
    Value := Value + '("' + ADataSet.Name + '")';
  end;
  AFormulaObject := FDataSetFormulas[Index];
  if AFormulaObject = nil then
  begin
    AFunction := '';
  end
  else
  begin
    AFunction := AFormulaObject.Formula;
  end;
  Observer := nil;
  if (AFunction <> Value) then
  begin
    if FCanInvalidateModel then
    begin
      InvalidateModel;
      OldFunction := AFunction;
      try
        ADataSet := DataSets[Index];
        Observer := FDataSetSubscriptions[Index] as TObserver;
        OldUseList := TStringList.Create;
        NewUseList := TStringList.Create;
        try
          Compiler := GetCompiler(ADataSet.Orientation,
            ADataSet.EvaluatedAt);
          if AFunction = '' then
          begin
            AFunction := '0'
          end;
          try
            Compiler.Compile(AFunction);
            OldUseList.Assign(Compiler.CurrentExpression.VariablesUsed);
          except on E: ERbwParserError do
              OldUseList.Clear;
          end;

          AFunction := Value;
          try
            Compiler.Compile(AFunction);
          except on E: ERbwParserError do
            begin
              frmFormulaErrors.AddFormulaError(Name, ADataSet.Name, Value, E.Message);
              case ADataSet.DataType of
                rdtDouble, rdtInteger:
                  begin
                    AFunction := '0';
                  end;
                rdtBoolean:
                  begin
                    AFunction := 'False';
                  end;
                rdtString:
                  begin
                    AFunction := '""';
                  end;
              end;
              Compiler.Compile(AFunction);
            end;
          end;
          NewUseList.Assign(Compiler.CurrentExpression.VariablesUsed);
          CreateOrRetrieveFormulaObject(Index, ADataSet, FormulaObject);
          frmGoPhast.PhastModel.FormulaManager.ChangeFormula(
            FormulaObject, Compiler.CurrentExpression.Decompile, Compiler,
            GlobalRemoveScreenObjectDataArraySubscription,
            GlobalRestoreScreenObjectDataArraySubscription, self);
          FDataSetFormulas[Index] := FormulaObject;
          for UseIndex := OldUseList.Count - 1 downto 0 do
          begin
            OtherIndex := NewUseList.IndexOf(OldUseList[UseIndex]);
            if OtherIndex >= 0 then
            begin
              OldUseList.Delete(UseIndex);
              NewUseList.Delete(OtherIndex);
            end;
          end;
          for UseIndex := 0 to OldUseList.Count - 1 do
          begin
            DS := (FModel as TPhastModel).GetObserverByName(
              OldUseList[UseIndex]);
            Assert(DS <> nil);
            DS.StopsTalkingTo(Observer);
          end;
          for UseIndex := 0 to NewUseList.Count - 1 do
          begin
            DS := (FModel as TPhastModel).GetObserverByName(
              NewUseList[UseIndex]);
            Assert(DS <> nil);
            DS.TalksTo(Observer);
          end;
          Invalidate;
        finally
          OldUseList.Free;
          NewUseList.Free;
        end;

        if not (csDestroying in Model.ComponentState)
          and not (FModel as TPhastModel).Clearing then
        begin
          Observer.UpToDate := True;
          Observer.UpToDate := False;
          ADataSet.Invalidate;
          Observer.UpToDate := True;
        end;
      finally
        if not (csDestroying in Model.ComponentState)
          and not (FModel as TPhastModel).Clearing
          and not (FModel as TPhastModel).FixingModel
          then
        begin
          if Observer.IsRecursive then
          begin
            if OldFunction <> '' then
            begin
              DataSetFormulas[Index] := OldFunction;
            end;
          end;
        end;
      end;
    end
    else
    begin
      ADataSet := DataSets[Index];
      Compiler := frmGoPhast.PhastModel.GetCompiler(ADataSet.Orientation,
        ADataSet.EvaluatedAt);
      CreateOrRetrieveFormulaObject(Index, ADataSet, FormulaObject);
      frmGoPhast.PhastModel.FormulaManager.ChangeFormula(FormulaObject, Value,
        Compiler, GlobalRemoveScreenObjectDataArraySubscription,
        GlobalRestoreScreenObjectDataArraySubscription, self);
      FDataSetFormulas[Index] := FormulaObject;
    end;
  end;
end;

procedure TScreenObject.SetDataSets(const Index: integer; const DataSet:
  TDataArray);
var
  OldIndex: integer;
  FormulaObject: IFormulaObject;
begin
  // Determine the position of DataSet in FDataSets.
  // If OldIndex < 0, DataSet is not in FDataSets.
  OldIndex := FDataSets.IndexOf(DataSet);

  // Store DataSet.
  FDataSets[Index] := DataSet;
  if (OldIndex >= 0) and (OldIndex <> Index) then
  begin
    // If DataSet was already in FDataSets, move it's funciton
    // to the new position and delete the old copy of both the
    // data set and the function.
    FDataSetFormulas[Index] := FDataSetFormulas[OldIndex];
    FDataSets.Delete(OldIndex);
    FormulaObject := FDataSetFormulas[OldIndex];
    frmGoPhast.PhastModel.FormulaManager.Remove(FormulaObject,
      GlobalRemoveScreenObjectDataArraySubscription, GlobalRestoreScreenObjectDataArraySubscription, self);
    FDataSetFormulas.Delete(OldIndex);
  end;
  InvalidateModel;
end;

procedure TScreenObject.SetPointPositionValues(
  const Value: TPointPositionValues);
begin
  if (Value = nil) or (Value.Count= 0) then
  begin
    if (FPointPositionValues <> nil) and (FPointPositionValues.Count > 0) then
    begin
      Invalidate;
    end;
    FreeAndNil(FPointPositionValues);
  end
  else
  begin
    if FPointPositionValues = nil then
    begin
      FPointPositionValues := TPointPositionValues.Create(Model as TCustomModel);
    end;
    FPointPositionValues.Assign(Value);
    FPointPositionValues.Sort;
    Invalidate;
  end;
end;

procedure TScreenObject.SetPoints(const Index: integer;
  const Value: TPoint2D);
begin
  ValidateIndex(Index);
  if (FPoints[Index].X <> Value.X) or (FPoints[Index].Y <> Value.Y) then
  begin
    BeginUpdate;
    try
    FIsClosedCached := False;
//    InvalidateModel;
//    NotifyGuiOfChange(self);

    FRecalculateLength := True;
    FRecalculateArea := True;
    if not FRecalculateBox then
    begin
      // There is no point in doing this if the values are
      // invalid anyway.
      // if you are replacing a point that is at the edge of the box
      // surrounding the screen object, the box may need to be updated.
      if FPoints[Index].X = FMaxX then
      begin
        FRecalculateBox := True;
      end
      else if FPoints[Index].X = FMinX then
      begin
        FRecalculateBox := True;
      end;

      if FPoints[Index].Y = FMaxY then
      begin
        FRecalculateBox := True;
      end
      else if FPoints[Index].Y = FMinY then
      begin
        FRecalculateBox := True;
      end;
    end;
    FPoints[Index] := Value;
    if not FRecalculateBox then
    begin
      // There is no point in doing this if the box is invalid anyway.
      if Value.X > FMaxX then
      begin
        FMaxX := Value.X;
      end
      else if Value.X < FMinX then
      begin
        FMinX := Value.X;
      end;

      if Value.Y > FMaxY then
      begin
        FMaxY := Value.Y;
      end
      else if Value.Y < FMinY then
      begin
        FMinY := Value.Y;
      end;
    end;
    finally
      EndUpdate;
    end;
  end;
end;

procedure TScreenObject.SetPositionLocked(const Value: boolean);
begin
  if FPositionLocked <> Value then
  begin
    FPositionLocked := Value;
    InvalidateModel;
  end;
end;

procedure TScreenObject.SetQuadtreeRefinementLevel(const Value: Integer);
begin
  if FQuadtreeRefinementLevel <> Value then
  begin
    FQuadtreeRefinementLevel := Value;
    InvalidateModel;
  end;
end;

procedure TScreenObject.SetViewDirection(const Value: TViewDirection);
var
  OldViewDirection: TViewDirection;
begin
  OldViewDirection := FViewDirection;
  FViewDirection := Value;
  if OldViewDirection <> Value then
  begin
    InvalidateModel;
    if FrameScreenObject(OldViewDirection) = self then
    begin
      ZoomBox(OldViewDirection).InvalidateImage32;
    end;
//    if FViewDirection <> vdTop then
//    begin
//      ChildModel := nil;
//    end;
  end;
  if FFluxBoundary <> nil then
  begin
    FluxBoundary.Orientation := Value;
  end;
  if FLeakyBoundary <> nil then
  begin
    LeakyBoundary.Orientation := Value;
  end;
  SetFormulaParsers;
  Invalidate;
end;

procedure TScreenObject.ValidateIndex(const Index: integer);
begin
  if (Index < 0) or (Index >= FCount) then
  begin
    raise EScreenObjectError.Create(StrInvalidScreenObjec);
  end;
end;

// based partly on CACM 112

procedure TScreenObject.EvaluateSubPolygon(const ASubPolygon: TSubPolygon;
  const X, Y: real; var IsInside: boolean);
begin
  ASubPolygon.EvaluateSubPolygon(X, Y, IsInside);
end;

function TScreenObject.EvtParameters: IModflowParameters;
begin
  result := nil;
  if ModflowRchBoundary <> nil then
  begin
    result := ModflowRchBoundary.Parameters;
  end;
end;

procedure TScreenObject.SetGeometryUpToDate;
begin
  UpToDate := True;
  if FElevSubscription <> nil then
  begin
    FElevSubscription.UpToDate := True;
  end;
  if FTopElevSubscription <> nil then
  begin
    FTopElevSubscription.UpToDate := True;
  end;
  if FBottomElevSubscription <> nil then
  begin
    FBottomElevSubscription.UpToDate := True;
  end;
end;

procedure TScreenObject.SetGwtCncBoundary(const Value: TCncBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FGwtCncBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FGwtCncBoundary);
  end
  else
  begin
    CreateGwtCncBoundary;
    ModflowBoundaries.FGwtCncBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetGwtSrcBoundary(const Value: TSrcBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FGwtSrcBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FGwtSrcBoundary);
  end
  else
  begin
    CreateGwtSrcBoundary;
    ModflowBoundaries.FGwtSrcBoundary.Assign(Value);
  end;
end;

function TScreenObject.ScreenObjectLength: real;
var
  Index: integer;
  First, Second: TPoint2D;
  SectionIndex: integer;
begin
  if FRecalculateLength then
  begin
    SectionIndex := 1;
    FScreenObjectLength := 0;
    if Count > 1 then
    begin
      First := Points[0];
      for Index := 1 to Count - 1 do
      begin
        Second := Points[Index];
        if (SectionCount > 1) and (SectionIndex < SectionCount) then
        begin
          if SectionStart[SectionIndex] = Index then
          begin
            Inc(SectionIndex);
            First := Second;
            Continue;
          end;
        end;
        FScreenObjectLength := FScreenObjectLength
          + Sqrt(Sqr(Second.X - First.X)
          + Sqr(Second.Y - First.Y));
        First := Second;
      end;
    end;
    FRecalculateLength := false;
  end;
  result := FScreenObjectLength;
end;

function TScreenObject.SaveSutraAngle: Boolean;
begin
  Result := ViewDirection = vdFront;
end;

function TScreenObject.SaveSutraBoundaries: Boolean;
begin
  Result := True;
end;

function TScreenObject.ScreenObjectArea: real;
var
  EmptyPolygon: TGpcPolygonClass;
  IntersectionPolygon: TGpcPolygonClass;
  ContourIndex: Integer;
begin
  if FRecalculateArea then
  begin
    FScreenObjectArea := 0;
    if Closed then
    begin
      try
        if FGpcPolygons = nil then
        begin
          CreateGpcPolygon;
        end;

        if FGpcPolygons.NumberOfContours = 1 then
        begin
          FScreenObjectArea := Abs(FGpcPolygons.ContourArea(0));
        end
        else
        begin
          EmptyPolygon := TGpcPolygonClass.Create;
          try
            EmptyPolygon.NumberOfContours := 0;
            IntersectionPolygon := nil;
            try
              IntersectionPolygon := TGpcPolygonClass.CreateFromOperation(
                GPC_DIFF, FGpcPolygons, EmptyPolygon);
              for ContourIndex := 0 to IntersectionPolygon.NumberOfContours - 1 do
              begin
                if IntersectionPolygon.Holes[ContourIndex] then
                begin
                  FScreenObjectArea := FScreenObjectArea
                    - Abs(IntersectionPolygon.ContourArea(ContourIndex));
                end
                else
                begin
                  FScreenObjectArea := FScreenObjectArea
                    + Abs(IntersectionPolygon.ContourArea(ContourIndex));
                end;
              end;
            finally
              IntersectionPolygon.Free;
            end;
          finally
            EmptyPolygon.Free;
          end;

        end;
      except on EExternal do
        begin
          FreeAndNil(FGpcPolygons);
          raise;
        end;
      end;

    end;
    FRecalculateArea := False;
  end;
  result := FScreenObjectArea;
end;

function TScreenObject.GetRiverBoundary: TRiverBoundary;
begin
  CreatePhastRiverBoundary;
  result := FRiverBoundary
end;

procedure TScreenObject.GetRotatedPoints(out RotatedPoints: TRealPointArray);
var
  Index: integer;
begin
  RotatedPoints := FPoints;
  SetLength(RotatedPoints, Count);
  if (ViewDirection = vdTop) and ((FModel as TPhastModel).
    Grid.GridAngle <> 0) then
  begin
    for Index := 0 to Count - 1 do
    begin
      RotatedPoints[Index] := (FModel as TPhastModel).Grid.
        RotateFromRealWorldCoordinatesToGridCoordinates(RotatedPoints[Index]);
    end;
  end;
end;

function TScreenObject.ValidCell(const Col, Row, Layer: integer;
  Model: TBaseModel): boolean;
var
  LocalGrid : TCustomModelGrid;
  LocalMesh: IMesh3D;
//  LocalMesh: TSutraMesh3D;
begin
  Result := True;
  LocalGrid := (Model as TCustomModel).Grid;
  if LocalGrid <> nil then
  begin
    case ViewDirection of
      vdTop:
        begin
          if (Col < 0) or (Row < 0)
            or (Col > LocalGrid.ColumnCount)
            or (Row > LocalGrid.RowCount) then
          begin
            Result := False;
          end;
        end;
      vdFront:
        begin
          if (Col < 0) or (Layer < 0)
            or (Col > LocalGrid.ColumnCount)
            or (Layer > LocalGrid.LayerCount) then
          begin
            Result := False;
          end;
        end;
      vdSide:
        begin
          if (Row < 0) or (Layer < 0)
            or (Row > LocalGrid.RowCount)
            or (Layer > LocalGrid.LayerCount) then
          begin
            Result := False;
          end;
        end;
    else
      Assert(False);
    end;
  end
  else
  begin
    result := False;
    LocalMesh := (Model as TCustomModel).Mesh3D;
    if LocalMesh <> nil then
    begin
      case EvaluatedAt of
        eaBlocks:
          begin
            case ViewDirection of
              vdTop:
                begin
                  result := (Col >= 0) and (Row = 0)
                    and (Col < LocalMesh.Mesh2DI.ElementCount)
                end;
              vdFront:
                begin
                  result := (Col >= 0) and (Layer >= 0)
                    and (Col < LocalMesh.Mesh2DI.ElementCount)
                    and (Layer < LocalMesh.LayerCount);
                end;
              vdSide: ;
              else Assert(False);
            end;
          end;
        eaNodes:
          begin
            case ViewDirection of
              vdTop:
                begin
                  result := (Col >= 0) and (Row = 0)
                    and (Col < LocalMesh.Mesh2DI.NodeCount)
                end;
              vdFront:
                begin
                  result := (Col >= 0) and (Layer >= 0)
                    and (Col < LocalMesh.Mesh2DI.NodeCount)
                    and (Layer <= LocalMesh.LayerCount);
                end;
              vdSide: ;
              else Assert(False);
            end;
          end;
        else Assert(False);
      end;
    end;
  end;
end;

function TScreenObject.GetGettingSegments(AModel: TBaseModel): Boolean;
begin
//  result := True;
  PushGlobalStack;
  try
    Assert(AModel is TCustomModel);
    FSegments := FSegModelAssoc.AssociatedSegmentList[AModel];
    result := FSegments.FGettingSegments;
  finally
    PopGlobalStack;
  end;
end;

procedure TScreenObject.GetGridCellOrElementLimits(const Col, Row, Layer:
  integer; out XMin, XMax, YMin, YMax: double; AModel: TBaseModel);
var
  PhastGrid: TPhastGrid;
  Grid: TCustomModelGrid;
begin
  PhastGrid := (AModel as TCustomModel).PhastGrid;
  Grid := (AModel as TCustomModel).Grid;
  case EvaluatedAt of
    eaBlocks:
      begin
        case ViewDirection of
          vdTop:
            begin
              case Grid.ColumnDirection of
                cdWestToEast:
                  begin
                    XMin := Grid.ColumnPosition[Col];
                    XMax := Grid.ColumnPosition[Col + 1];
                  end;
                cdEastToWest:
                  begin
                    XMin := Grid.ColumnPosition[Col + 1];
                    XMax := Grid.ColumnPosition[Col];
                  end;
              end;
              case Grid.RowDirection of
                rdSouthToNorth:
                  begin
                    YMin := Grid.RowPosition[Row];
                    YMax := Grid.RowPosition[Row + 1];
                  end;
                rdNorthToSouth:
                  begin
                    YMin := Grid.RowPosition[Row + 1];
                    YMax := Grid.RowPosition[Row];
                  end;
              end;
            end;
          vdFront:
            begin
              XMin := PhastGrid.ColumnPosition[Col];
              XMax := PhastGrid.ColumnPosition[Col + 1];
              YMin := PhastGrid.LayerElevation[Layer];
              YMax := PhastGrid.LayerElevation[Layer + 1];
            end;
          vdSide:
            begin
              XMin := PhastGrid.RowPosition[Row];
              XMax := PhastGrid.RowPosition[Row + 1];
              YMin := PhastGrid.LayerElevation[Layer];
              YMax := PhastGrid.LayerElevation[Layer + 1];
            end;
        else
          Assert(False);
        end;
      end;
    eaNodes:
      begin
        case ViewDirection of
          vdTop:
            begin
              if Col = 0 then
              begin
                XMin := PhastGrid.ColumnPosition[Col];
              end
              else
              begin
                XMin := (PhastGrid.ColumnPosition[Col - 1]
                  + PhastGrid.ColumnPosition[Col]) / 2;
              end;
              if Col = PhastGrid.ColumnCount then
              begin
                XMax := PhastGrid.ColumnPosition[Col];
              end
              else
              begin
                XMax := (PhastGrid.ColumnPosition[Col + 1]
                  + PhastGrid.ColumnPosition[Col]) / 2;
              end;
              if Row = 0 then
              begin
                YMin := PhastGrid.RowPosition[Row];
              end
              else
              begin
                YMin := (PhastGrid.RowPosition[Row - 1]
                  + PhastGrid.RowPosition[Row]) / 2;
              end;
              if Row = PhastGrid.RowCount then
              begin
                YMax := PhastGrid.RowPosition[Row];
              end
              else
              begin
                YMax := (PhastGrid.RowPosition[Row + 1]
                  + PhastGrid.RowPosition[Row]) / 2;
              end;
            end;
          vdFront:
            begin
              if Col = 0 then
              begin
                XMin := PhastGrid.ColumnPosition[Col];
              end
              else
              begin
                XMin := (PhastGrid.ColumnPosition[Col - 1]
                  + PhastGrid.ColumnPosition[Col]) / 2;
              end;
              if Col = PhastGrid.ColumnCount then
              begin
                XMax := PhastGrid.ColumnPosition[Col];
              end
              else
              begin
                XMax := (PhastGrid.ColumnPosition[Col + 1]
                  + PhastGrid.ColumnPosition[Col]) / 2;
              end;
              if Layer = 0 then
              begin
                YMin := PhastGrid.LayerElevation[Layer];
              end
              else
              begin
                YMin := (PhastGrid.LayerElevation[Layer - 1]
                  + PhastGrid.LayerElevation[Layer]) / 2;
              end;
              if Layer = PhastGrid.LayerCount then
              begin
                YMax := PhastGrid.LayerElevation[Layer];
              end
              else
              begin
                YMax := (PhastGrid.LayerElevation[Layer + 1]
                  + PhastGrid.LayerElevation[Layer]) / 2;
              end;
            end;
          vdSide:
            begin
              if Row = 0 then
              begin
                XMin := PhastGrid.RowPosition[Row];
              end
              else
              begin
                XMin := (PhastGrid.RowPosition[Row - 1]
                  + PhastGrid.RowPosition[Row]) / 2;
              end;
              if Row = PhastGrid.RowCount then
              begin
                XMax := PhastGrid.RowPosition[Row];
              end
              else
              begin
                XMax := (PhastGrid.RowPosition[Row + 1]
                  + PhastGrid.RowPosition[Row]) / 2;
              end;
              if Layer = 0 then
              begin
                YMin := PhastGrid.LayerElevation[Layer];
              end
              else
              begin
                YMin := (PhastGrid.LayerElevation[Layer - 1]
                  + PhastGrid.LayerElevation[Layer]) / 2;
              end;
              if Layer = PhastGrid.LayerCount then
              begin
                YMax := PhastGrid.LayerElevation[Layer];
              end
              else
              begin
                YMax := (PhastGrid.LayerElevation[Layer + 1]
                  + PhastGrid.LayerElevation[Layer]) / 2;
              end;
            end;
        else
          Assert(False);
        end;
      end;
  else
    Assert(False);
  end;
end;

function TScreenObject.GetGwtCncBoundary: TCncBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateGwtCncBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FGwtCncBoundary;
  end;
end;

function TScreenObject.GetGwtSrcBoundary: TSrcBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateGwtSrcBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FGwtSrcBoundary;
  end;
end;

function TScreenObject.ObjectIntersectArea(const Col, Row,
  Layer: integer; AModel: TBaseModel): real;
  function InvertPoint(APoint: TPoint2D): TPoint2D;
  begin
    result.x := APoint.y;
    result.y := APoint.x;
  end;
  procedure HandleFrontSideLGR(var TempPoints: TRealPointArray);
  var
    PhastModel: TPhastModel;
    CModel: TBaseModel;
    ChildModel: TChildModel;
    BottomLayer: integer;
    NewTempPoints: TRealPointArray;
    procedure TopRightRemoved;
    begin
      //  0----1----.
      //  |    | XX |
      //  |    2----3
      //  |         |
      //  6----5----4
      SetLength(NewTempPoints, 7);
      NewTempPoints[0] := TempPoints[0];
      NewTempPoints[1] := TempPoints[1];
      NewTempPoints[2].x := TempPoints[1].x;
      NewTempPoints[2].y := (TempPoints[1].y + TempPoints[4].y)/2;
      NewTempPoints[3].x := TempPoints[2].x;
      NewTempPoints[3].y := (TempPoints[2].y + TempPoints[3].y)/2;
      NewTempPoints[4] := TempPoints[3];
      NewTempPoints[5] := TempPoints[4];
      NewTempPoints[6] := TempPoints[5];
    end;
    procedure RightRemoved;
    begin
      //  0----1----.
      //  |    | XX |
      //  |    | XX |
      //  |    | XX |
      //  3----2----.
      SetLength(NewTempPoints, 4);
      NewTempPoints[0] := TempPoints[0];
      NewTempPoints[1] := TempPoints[1];
      NewTempPoints[2] := TempPoints[4];
      NewTempPoints[3] := TempPoints[5];
    end;
    procedure TopLeftRemoved;
    begin
      //  .----2----3
      //  | XX |    |
      //  0----1    |
      //  |         |
      //  6----5----4
      SetLength(NewTempPoints, 7);
      NewTempPoints[0].x := TempPoints[0].x;
      NewTempPoints[0].y := (TempPoints[0].y + TempPoints[5].y)/2;
      NewTempPoints[1].x := TempPoints[1].x;
      NewTempPoints[1].y := (TempPoints[1].y + TempPoints[4].y)/2;
      NewTempPoints[2] := TempPoints[1];
      NewTempPoints[3] := TempPoints[2];
      NewTempPoints[4] := TempPoints[3];
      NewTempPoints[5] := TempPoints[4];
      NewTempPoints[6] := TempPoints[5];
    end;
    procedure LeftRemoved;
    begin
      //  .----0----1
      //  | XX |    |
      //  | XX |    |
      //  | XX |    |
      //  .----3----2
      SetLength(NewTempPoints, 4);
      NewTempPoints[0] := TempPoints[1];
      NewTempPoints[1] := TempPoints[2];
      NewTempPoints[2] := TempPoints[3];
      NewTempPoints[3] := TempPoints[4];
    end;
    procedure TopRemoved;
    begin
      Assert(Layer <> PhastModel.ModflowGrid.LayerCount-1);
        //  .----.----.
        //  | XX | XX |
        //  0----1----2
        //  |         |
        //  5----4----3
      SetLength(NewTempPoints, 6);
      NewTempPoints[0].x := TempPoints[0].x;
      NewTempPoints[0].y := (TempPoints[0].y + TempPoints[5].y)/2;
      NewTempPoints[1].x := TempPoints[1].x;
      NewTempPoints[1].y := (TempPoints[1].y + TempPoints[4].y)/2;
      NewTempPoints[2].x := TempPoints[2].x;
      NewTempPoints[2].y := (TempPoints[2].y + TempPoints[3].y)/2;
      NewTempPoints[3] := TempPoints[3];
      NewTempPoints[4] := TempPoints[4];
      NewTempPoints[5] := TempPoints[5];
    end;
  begin
  //  Arrangements of cell definition points on input
      //  0----1----2
      //  |         |
      //  |         |
      //  |         |
      //  5----4----3
    Assert(Length(TempPoints) = 6);
    if AModel is TPhastModel then
    begin
      PhastModel := TPhastModel(AModel);
      if PhastModel.IsChildModelEdgeCell(Col, Row, Layer, CModel) then
      begin
        ChildModel := CModel as TChildModel;
        BottomLayer := ChildModel.Discretization.BottomLayerIndex;
        case ViewDirection of
          vdFront:
            begin
              if Col = ChildModel.FirstCol then
              begin
                if (Layer = BottomLayer)
                  and (Layer <> PhastModel.ModflowGrid.LayerCount-1) then
                begin
                  TopRightRemoved;
                end
                else
                begin
                  RightRemoved;
                end;
              end
              else if Col = ChildModel.LastCol then
              begin
                if (Layer = BottomLayer)
                  and (Layer <> PhastModel.ModflowGrid.LayerCount-1) then
                begin
                  TopLeftRemoved;
                end
                else
                begin
                  LeftRemoved;
                end;
              end
              else if Layer = BottomLayer then
              begin
                TopRemoved;
              end
              else
              begin
                Exit;
              end;
            end;
          vdSide:
            begin
              if Row = ChildModel.FirstRow then
              begin
                if (Layer = BottomLayer)
                  and (Layer <> PhastModel.ModflowGrid.LayerCount-1) then
                begin
                  TopRightRemoved;
                end
                else
                begin
                  RightRemoved;
                end;
              end
              else if Row = ChildModel.LastRow then
              begin
                if (Layer = BottomLayer)
                  and (Layer <> PhastModel.ModflowGrid.LayerCount-1) then
                begin
                  TopLeftRemoved;
                end
                else
                begin
                  LeftRemoved;
                end;
              end
              else if Layer = BottomLayer then
              begin
                TopRemoved;
              end
              else
              begin
                Exit;
              end;
            end;
          else Assert(False);
        end;
        TempPoints := NewTempPoints;
      end;
    end;
  end;
  procedure HandleTopLGR(var TempPoints: TRealPointArray);
  var
    PhastModel: TPhastModel;
    CModel: TBaseModel;
    ChildModel: TChildModel;
    NewTempPoints: TRealPointArray;
    MiddleX, MiddleY: TFloat;
  begin
  //  Arrangements of cell definition points on input
      //  1---------2
      //  |         |
      //  |         |
      //  |         |
      //  0---------3
    Assert(Length(TempPoints) = 4);
    if AModel is TPhastModel then
    begin
      PhastModel := TPhastModel(AModel);
      if PhastModel.IsChildModelEdgeCell(Col, Row, Layer, CModel) then
      begin
        MiddleX := (TempPoints[1].x + TempPoints[2].x)/2;
        MiddleY := (TempPoints[0].y + TempPoints[1].y)/2;
        ChildModel := CModel as TChildModel;
        if Col = ChildModel.FirstCol then
        begin
          if Row = ChildModel.FirstRow then
          begin
            //  1---------2
            //  |         |
            //  |    4----3
            //  |    | XX |
            //  0----5----.
            SetLength(NewTempPoints, 6);
            NewTempPoints[0] := TempPoints[0];
            NewTempPoints[1] := TempPoints[1];
            NewTempPoints[2] := TempPoints[2];
            NewTempPoints[3].x := TempPoints[2].x;
            NewTempPoints[3].y := MiddleY;
            NewTempPoints[4].x := MiddleX;
            NewTempPoints[4].y := MiddleY;
            NewTempPoints[5].x := MiddleX;
            NewTempPoints[5].y := TempPoints[0].y;
          end
          else if Row = ChildModel.LastRow then
          begin
            //  1----2----.
            //  |    | XX |
            //  |    3----4
            //  |         |
            //  0---------5
            SetLength(NewTempPoints, 6);
            NewTempPoints[0] := TempPoints[0];
            NewTempPoints[1] := TempPoints[1];
            NewTempPoints[2].x := MiddleX;
            NewTempPoints[2].y := TempPoints[1].y;
            NewTempPoints[3].x := MiddleX;
            NewTempPoints[3].y := MiddleY;
            NewTempPoints[4].x := TempPoints[2].x;
            NewTempPoints[4].y := MiddleY;
            NewTempPoints[5] := TempPoints[3];
          end
          else
          begin
            //  1----2----.
            //  |    | XX |
            //  |    | XX |
            //  |    | XX |
            //  0----3----.
            SetLength(NewTempPoints, 4);
            NewTempPoints[0] := TempPoints[0];
            NewTempPoints[1] := TempPoints[1];
            NewTempPoints[2].x := MiddleX;
            NewTempPoints[2].y := TempPoints[1].y;
            NewTempPoints[3].x := MiddleX;
            NewTempPoints[3].y := TempPoints[0].y;
          end;
        end
        else if Col = ChildModel.LastCol then
        begin
          if Row = ChildModel.FirstRow then
          begin
            //  1---------2
            //  |         |
            //  0----5    |
            //  | XX |    |
            //  .----4----3
            SetLength(NewTempPoints, 6);
            NewTempPoints[0].x := TempPoints[0].x;
            NewTempPoints[0].y := MiddleY;
            NewTempPoints[1] := TempPoints[1];
            NewTempPoints[2] := TempPoints[2];
            NewTempPoints[3] := TempPoints[3];
            NewTempPoints[4].x := MiddleX;
            NewTempPoints[4].y := TempPoints[0].y;
            NewTempPoints[5].x := MiddleX;
            NewTempPoints[5].y := MiddleY;
          end
          else if Row = ChildModel.LastRow then
          begin
            //  .----3----4
            //  | XX |    |
            //  1----2    |
            //  |         |
            //  0---------5
            SetLength(NewTempPoints, 6);
            NewTempPoints[0] := TempPoints[0];
            NewTempPoints[1].x := TempPoints[0].x;
            NewTempPoints[1].y := MiddleY;
            NewTempPoints[2].x := MiddleX;
            NewTempPoints[2].y := MiddleY;
            NewTempPoints[3].x := MiddleX;
            NewTempPoints[3].y := TempPoints[1].y;
            NewTempPoints[4] := TempPoints[2];
            NewTempPoints[5] := TempPoints[3];
          end
          else
          begin
            //  .----1----2
            //  | XX |    |
            //  | XX |    |
            //  | XX |    |
            //  .----0----3
            SetLength(NewTempPoints, 4);
            NewTempPoints[0].x := MiddleX;
            NewTempPoints[0].y := TempPoints[0].y;
            NewTempPoints[1].x := MiddleX;
            NewTempPoints[1].y := TempPoints[1].y;
            NewTempPoints[2] := TempPoints[2];
            NewTempPoints[3] := TempPoints[3];
          end;
        end
        else if Row = ChildModel.FirstRow then
        begin
            //  1---------2
            //  |         |
            //  0---------3
            //  | XX   XX |
            //  .---------.
          SetLength(NewTempPoints, 4);
          NewTempPoints[0].x := TempPoints[0].x;
          NewTempPoints[0].y := MiddleY;
          NewTempPoints[1] := TempPoints[1];
          NewTempPoints[2] := TempPoints[2];
          NewTempPoints[3].x := TempPoints[3].x;
          NewTempPoints[3].y := MiddleY;
        end
        else if Row = ChildModel.LastRow then
        begin
            //  .---------.
            //  | XX   XX |
            //  1---------2
            //  | XX   XX |
            //  0---------3
          SetLength(NewTempPoints, 4);
          NewTempPoints[0] := TempPoints[0];
          NewTempPoints[1].x := TempPoints[0].x;
          NewTempPoints[1].y := MiddleY;
          NewTempPoints[2].x := TempPoints[3].x;
          NewTempPoints[2].y := MiddleY;
          NewTempPoints[3] := TempPoints[3];
        end
        else
        begin
          Exit;
        end;
        TempPoints := NewTempPoints;
      end;
    end;
  end;
var
  XMin, XMax, YMin, YMax: double;
  TempPoints: TRealPointArray;
  ModflowGrid: TModflowGrid;
  MFDelegate: TModflowDelegate;
  CellOutlines: T2DRealPointArray;
  PointIndex: Integer;
  CellOutline: TGpcPolygonClass;
  AVertex: Tgpc_vertex;
  IntersectionContours: TGpcPolygonClass;
  ContourIndex: Integer;
  LocalGrid: TCustomModelGrid;
//  LocalMesh: TSutraMesh3D;
//  Element2D: TSutraElement2D;
  NodeIndex: Integer;
  Node2D: TSutraNode2D;
  NodeCellOutline: TVertexArray;
  Polygons: TCellElementPolygons2D;
  Limits: TLimitsArray;
  LocalMesh: IMesh3D;
  Element2D: IElement;
begin
  if not Closed then
  begin
    result := 0;
    Exit;
  end;

  if not ValidCell(Col, Row, Layer, AModel) then
  begin
    Result := 0;
    Exit;
  end;

  Assert(AModel <> nil);
  if (AModel.ModelSelection in SutraSelection) or (AModel as TCustomModel).DisvUsed then
  begin
    LocalMesh := (AModel as TCustomModel).Mesh3D;
    Assert(LocalMesh <> nil);
    case ViewDirection of
      vdTop:
        begin
          case EvaluatedAt of
            eaBlocks:
              begin
                Element2D := LocalMesh.Mesh2DI.Elements[Col];
//                Assert(Element2D.Nodes.Count = 4);
                SetLength(TempPoints,Element2D.NodeCount);
                for NodeIndex := 0 to Element2D.NodeCount - 1 do
                begin
                  TempPoints[NodeIndex] :=
                    Element2D.Nodes[NodeIndex].Location;
                end;
              end;
            eaNodes:
              begin
                Node2D := (LocalMesh as TSutraMesh3D).Mesh2D.Nodes[Col];
                Node2D.GetCellOutline(NodeCellOutline);
                SetLength(TempPoints, Length(NodeCellOutline));
                for NodeIndex := 0 to Length(NodeCellOutline) - 1 do
                begin
                  TempPoints[NodeIndex] := NodeCellOutline[NodeIndex];
                end;
              end
            else Assert(False);
          end;
        end;
      vdFront:
        begin
          Polygons := LocalMesh.FrontPolygons(SutraAngle, EvaluatedAt, Limits);
          TempPoints := Polygons[Layer, Col];
//          SetLength(TempPoints, Length(Polygons[Layer, Col]));
//          for NodeIndex := 0 to Length(TempPoints) - 1 do
//          begin
//            TempPoints[NodeIndex] := Polygons[Layer, Col][NodeIndex];
//          end;
        end;
      vdSide:
        begin
          SetLength(TempPoints, 0);
        end
      else
        Assert(False);
    end;
  end
  else if (AModel.ModelSelection <> msPhast)
    and (ViewDirection <> vdTop) then
  begin
    ModflowGrid := (AModel as TCustomModel).Grid as TModflowGrid;
    CellOutlines := nil;
    if Model.ModelSelection = msModflow2015 then
    begin
      MFDelegate := (Delegate as TModflow6Delegate).Subdelegate(AModel) as TModflowDelegate;
    end
    else
    begin
      MFDelegate := Delegate as TModflowDelegate;
    end;
    SetLength(TempPoints,6);
    case ViewDirection of
      vdFront:
        begin
          CellOutlines := MFDelegate.GetCellOutlines(ModflowGrid, Row);
          TempPoints[0] := CellOutlines[Col*2,Layer];
          TempPoints[1] := CellOutlines[Col*2+1,Layer];
          TempPoints[2] := CellOutlines[Col*2+2,Layer];
          TempPoints[3] := CellOutlines[Col*2+2,Layer+1];
          TempPoints[4] := CellOutlines[Col*2+1,Layer+1];
          TempPoints[5] := CellOutlines[Col*2,Layer+1];
          HandleFrontSideLGR(TempPoints);
        end;
      vdSide:
        begin
          CellOutlines := MFDelegate.GetCellOutlines(ModflowGrid, Col);
          TempPoints[0] := CellOutlines[Row*2,Layer];
          TempPoints[1] := CellOutlines[Row*2+1,Layer];
          TempPoints[2] := CellOutlines[Row*2+2,Layer];
          TempPoints[3] := CellOutlines[Row*2+2,Layer+1];
          TempPoints[4] := CellOutlines[Row*2+1,Layer+1];
          TempPoints[5] := CellOutlines[Row*2,Layer+1];
          HandleFrontSideLGR(TempPoints);
          for PointIndex := 0 to Length(TempPoints) - 1 do
          begin
            TempPoints[PointIndex] := InvertPoint(TempPoints[PointIndex]);
          end;
        end;
      else Assert(False);
    end;
  end
  else
  begin
    GetGridCellOrElementLimits(Col, Row, Layer, XMin, XMax, YMin, YMax, AModel);

    SetLength(TempPoints, 4);
    case ViewDirection of
      vdTop:
        begin
          TempPoints[0].x := XMin;
          TempPoints[0].y := YMin;
          TempPoints[1].x := XMin;
          TempPoints[1].y := YMax;
          TempPoints[2].x := XMax;
          TempPoints[2].y := YMax;
          TempPoints[3].x := XMax;
          TempPoints[3].y := YMin;
          HandleTopLGR(TempPoints);
          LocalGrid := (FModel as TCustomModel).Grid;
          if LocalGrid.GridAngle <> 0 then
          begin
            for PointIndex := 0 to Length(TempPoints)-1 do
            begin
              TempPoints[PointIndex] := LocalGrid.
                RotateFromGridCoordinatesToRealWorldCoordinates(
                TempPoints[PointIndex])
            end;
          end;
        end;
      vdFront:
        begin
          TempPoints[0].x := XMin;
          TempPoints[0].y := YMin;
          TempPoints[1].x := XMin;
          TempPoints[1].y := YMax;
          TempPoints[2].x := XMax;
          TempPoints[2].y := YMax;
          TempPoints[3].x := XMax;
          TempPoints[3].y := YMin;
        end;
      vdSide:
        begin
          TempPoints[0].y := XMin;
          TempPoints[0].x := YMin;
          TempPoints[1].y := XMin;
          TempPoints[1].x := YMax;
          TempPoints[2].y := XMax;
          TempPoints[2].x := YMax;
          TempPoints[3].y := XMax;
          TempPoints[3].x := YMin;
        end;
      else Assert(False);
    end;
  end;

  CellOutline := TGpcPolygonClass.Create;
  try
    CellOutline.NumberOfContours := 1;
    CellOutline.VertexCount[0] := Length(TempPoints);
    for PointIndex := 0 to Length(TempPoints) - 1 do
    begin
      AVertex.x := TempPoints[PointIndex].x;
      AVertex.y := TempPoints[PointIndex].y;
      CellOutline.Vertices[0,PointIndex] := AVertex;
    end;

    if FGpcPolygons = nil then
    begin
      CreateGpcPolygon;
    end;

    IntersectionContours := TGpcPolygonClass.CreateFromOperation(
      GPC_INT, CellOutline, FGpcPolygons);
    try
      result := 0;
      for ContourIndex := 0 to IntersectionContours.NumberOfContours - 1 do
      begin
        if IntersectionContours.Holes[ContourIndex] then
        begin
          result := result
            - Abs(IntersectionContours.ContourArea(ContourIndex));
        end
        else
        begin
          result := result
            + Abs(IntersectionContours.ContourArea(ContourIndex));
        end;
      end;
    finally
      IntersectionContours.Free;
    end;
  finally
    CellOutline.Free;
  end  
end;

function TScreenObject.ObjectSectionIntersectLength(const Col, Row,
  Layer, Section: integer; AModel: TBaseModel): real;
var
  LocalSegments: TCellElementSegmentList;
  SegmentIndex: NativeInt;
  Segment: TCellElementSegment;
begin

  Result := 0;
  if not ValidCell(Col, Row, Layer, AModel) then
  begin
    Exit;
  end;

  if (FPriorObjectSectionIntersectLengthCol = Col)
    and (FPriorObjectSectionIntersectLengthRow = Row)
    and (FPriorObjectSectionIntersectLengthLayer = Layer)
    and (FPriorObjectSectionIntersectLengthSection = Section)
    and (FPriorObjectSectionIntersectLengthModel = AModel)
    then
  begin
    result := FPriorObjectSectionIntersectLengthResult;
    Exit;
  end;

  LocalSegments := Segments[AModel];
  for SegmentIndex := 0 to LocalSegments.Count - 1 do
  begin
    Segment := LocalSegments[SegmentIndex];
    if (Segment.Col = Col)
      and (Segment.Row = Row)
      and (Segment.Layer = Layer)
      and (Segment.SectionIndex = Section) then
    begin
      result := result + Segment.SegmentLength;
    end;
  end;

  FPriorObjectSectionIntersectLengthCol := Col;
  FPriorObjectSectionIntersectLengthRow := Row;
  FPriorObjectSectionIntersectLengthLayer := Layer;
  FPriorObjectSectionIntersectLengthSection := Section;
  FPriorObjectSectionIntersectLengthModel := AModel;
  FPriorObjectSectionIntersectLengthResult := result;

end;

function TScreenObject.ObjectIntersectLength(const Col, Row,
  Layer: integer; AModel: TBaseModel): real;
var
  SegmentIndex: NativeInt;
  Segment: TCellElementSegment;
  LocalSegments: TCellElementSegmentList;
begin

  Result := 0;
  if not ValidCell(Col, Row, Layer, AModel) then
  begin
    Exit;
  end;

  if (FPriorObjectIntersectLengthCol = Col)
    and (FPriorObjectIntersectLengthRow = Row)
    and (FPriorObjectIntersectLengthLayer = Layer)
    and (FPriorObjectIntersectLengthModel = AModel)
    and (FPriorFullObjectIntersectLength = FullObjectIntersectLength)
    then
  begin
    result := FPriorObjectIntersectLengthResult;
    Exit;
  end;
  LocalSegments := Segments[AModel];
  for SegmentIndex := 0 to LocalSegments.Count - 1 do
  begin
    Segment := LocalSegments[SegmentIndex];
    if (Segment.Col = Col)
      and (Segment.Row = Row)
      and (Segment.Layer = Layer) then
    begin
      result := result + Segment.SegmentLength;
    end;
  end;

  FPriorObjectIntersectLengthCol := Col;
  FPriorObjectIntersectLengthRow := Row;
  FPriorObjectIntersectLengthLayer := Layer;
  FPriorObjectIntersectLengthModel := AModel;
  FPriorFullObjectIntersectLength := FullObjectIntersectLength;
  FPriorObjectIntersectLengthResult := result;
end;

constructor TScreenObject.Create(AnOwner: TComponent);
var
  InvalidateModelEvent: TNotifyEvent;
begin
  FElevationFormulaObject:= nil;
  FHigherElevationFormulaObject:= nil;
  FLowerElevationFormulaObject:= nil;

  inherited Create(nil);
  FObjectLabel := TObjectLabel.Create;
  FObjectLabel.OnChange := RefreshGui;
  FObjectVertexLabel := TObjectVertexLabel.Create;
  FObjectVertexLabel.OnChange := RefreshGui;
  FSectionLabel := TSectionLabel.Create;
  FSectionLabel.OnChange := RefreshGui;
  FDuplicatesAllowed := True;
  FPriorObjectIntersectLengthCol := -1;
  FPriorObjectIntersectLengthRow := -1;
  FPriorObjectIntersectLengthLayer := -1;
  FCachedCells:= TCachedCells.Create;
  Assert((AnOwner = nil) or (AnOwner is TPhastModel));
  FModel := TBaseModel(AnOwner);
  if FModel = nil then
  begin
    InvalidateModelEvent := nil;
  end
  else
  begin
    InvalidateModelEvent := FModel.DoInvalidate;
  end;
  FCanInvalidateModel := (FModel <> nil);

  FGlListCreated := False;

//  FLinkedChildModels := TLinkedChildModelCollection.Create(FModel, self);
  FImportedValues := TValueCollection.Create;
  FVisible := True;
  FSegModelAssoc := TAssociateList.Create(self);
//  FSegments := TCellElementSegmentList.Create(AnOwner, self);
  FCellSize := 1;
  if FDataSets = nil then
  begin
    FDataSets := TDataArrayList.Create;
  end;
  if FDataSetFormulas = nil then
  begin
    FDataSetFormulas := TIformulaList.Create;
  end;

  if FDataSetSubscriptions = nil then
  begin
    FDataSetSubscriptions := TObjectList.Create;
  end;
  ElevationCount := ecTwo;

  if FModel <> nil then
  begin
    if ((FModel as TPhastModel).PhastGrid <> nil) then
    begin
      with (FModel as TPhastModel).PhastGrid do
      begin
        if LayerCount > 0 then
        begin
          HigherElevationFormula := FortranFloatToStr(LayerElevations[LayerCount]);
          LowerElevationFormula := FortranFloatToStr(LayerElevations[0]);
        end
        else
        begin
          HigherElevationFormula := '0';
          LowerElevationFormula := '0';
        end;
      end;
    end;
  end;
//  FHigher3DElevationsNeedsUpdating := True;
//  FLower3DElevationsNeedsUpdating := True;

  FDelegateCollection:= TDelegateCollection.Create(self);

  FDataSetMixtureSubscriptions := TObjectList.Create;

  FInterpValues := TInterpValuesCollection.Create(InvalidateModelEvent);
  FIFACE := iInternal;
  FModpathParticles := TParticleStorage.Create(Model);
  FUsedModels := TUsedWithModelCollection.Create(Model);
  FStoredSutraAngle := TRealStorage.Create;
  FStoredSutraAngle.OnChange := self.InvalidateModelEvent;

  FSutraBoundaries := TSutraBoundaries.Create(Model, self);
  FStoredMinimumFraction := TRealStorage.Create;
  FStoredMinimumFraction.OnChange := InvalidateSelf;

  FDynamicTimesSeriesCollections := TDynamicTimesSeriesCollections.Create(Model as TCustomModel, self);
//  FSubObservations := TSubObservations.Create(InvalidateModelEvent, self);
end;

procedure TScreenObject.CreateLastSubPolygon;
var
  SectionIndex: Integer;
begin
  DestroyLastSubPolygon;
  for SectionIndex := SectionCount -1 downto 0 do
  begin
    if SectionStart[SectionIndex] < Count then
    begin
      FLastSubPolygon := TSubPolygon.Create(FPoints,
        SectionLength[SectionIndex], SectionStart[SectionIndex], SectionIndex);
      break;
    end;
  end;
end;

function TScreenObject.Intersection(const Point1, Point2: TPoint2D;
  StartIndex: integer; out IntersectPoint: TPoint2D): TIntersectResult;
  {
  Modified from
  http://www1.acm.org/pubs/tog/GraphicsGems/gemsii/xlines.c
  AUTHOR: Mukesh Prasad
  }
  function SameSign(const A, B: real): boolean;
  begin
    result := (A >= 0) = (B >= 0);
  end;
var
  x1, y1, x2, y2, x3, y3, x4, y4: real;
  a1, a2, b1, b2, c1, c2: real; { Coefficients of line eqns. }
  r1, r2, r3, r4: real; { 'Sign' values }
  denom, offset, num: real; { Intermediate values }
  ScreenObjectPoint1, ScreenObjectPoint2: TPoint2D;
  Epsilon: double;
  function NearlyTheSame(const A, B: real): boolean;
  begin
    result := A = B;
    if not result then
    begin
      result := Abs(A - B) / (Abs(A) + Abs(B)) < Epsilon;
    end;
  end;
begin
  x1 := Point1.X;
  y1 := Point1.Y;
  x2 := Point2.X;
  y2 := Point2.Y;

  ScreenObjectPoint1 := Points[StartIndex];
  ScreenObjectPoint2 := Points[StartIndex + 1];

  x3 := ScreenObjectPoint1.X;
  y3 := ScreenObjectPoint1.Y;
  x4 := ScreenObjectPoint2.X;
  y4 := ScreenObjectPoint2.Y;

  Epsilon := Max(Abs(x1), Abs(x2));
  Epsilon := Max(Epsilon, Abs(x3));
  Epsilon := Max(Epsilon, Abs(x4));
  Epsilon := Max(Epsilon, Abs(y1));
  Epsilon := Max(Epsilon, Abs(y2));
  Epsilon := Max(Epsilon, Abs(y3));
  Epsilon := Max(Epsilon, Abs(y4));
  Epsilon := Epsilon / 1E14;

  if (Max(x1,x2) + Epsilon) < Min(x3,x4) then
  begin
    result := irDontIntersect;
    Exit;
  end;
  if (Min(x1,x2) - Epsilon) > Max(x3,x4) then
  begin
    result := irDontIntersect;
    Exit;
  end;
  if (Max(y1,y2) + Epsilon) < Min(y3,y4) then
  begin
    result := irDontIntersect;
    Exit;
  end;
  if (Min(y1,y2) - Epsilon) > Max(y3,y4) then
  begin
    result := irDontIntersect;
    Exit;
  end;

  if (NearlyTheSame(x1, x3) and NearlyTheSame(y1,y3))
    or (NearlyTheSame(x1, x4) and NearlyTheSame(y1,y4)) then
  begin
    IntersectPoint.X := x1;
    IntersectPoint.Y := y1;
    result := irDoIntersect;
    Exit;
  end
  else if (NearlyTheSame(x2, x3) and NearlyTheSame(y2,y3))
    or (NearlyTheSame(x2, x4) and NearlyTheSame(y2,y4)) then
  begin
    IntersectPoint.X := x2;
    IntersectPoint.Y := y2;
    result := irDoIntersect;
    Exit;
  end;

  { Compute a1, b1, c1, where line joining points 1 and 2
   * is "a1 x  +  b1 y  +  c1  =  0".
   }

  a1 := y2 - y1;
  b1 := x1 - x2;
  c1 := x2 * y1 - x1 * y2;

  { Compute r3 and r4.
   }

  r3 := a1 * x3 + b1 * y3 + c1;
  r4 := a1 * x4 + b1 * y4 + c1;

  { Check signs of r3 and r4.  If both point 3 and point 4 lie on
    same side of line 1, the line segments do not intersect.
   }

  if (r3 <> 0) and
    (r4 <> 0) and
    SameSign(r3, r4) then
  begin
    result := irDontIntersect;
    Exit;
  end;

  { Compute a2, b2, c2 }

  a2 := y4 - y3;
  b2 := x3 - x4;
  c2 := x4 * y3 - x3 * y4;

  { Compute r1 and r2 }

  r1 := a2 * x1 + b2 * y1 + c2;
  r2 := a2 * x2 + b2 * y2 + c2;

  { Check signs of r1 and r2.  If both point 1 and point 2 lie
    on same side of second line segment, the line segments do
    not intersect.
   }

  if (r1 <> 0) and
    (r2 <> 0) and
    SameSign(r1, r2) then
  begin
    result := irDontIntersect;
    Exit;
  end;

  { Line segments intersect: compute intersection point.}

  denom := a1 * b2 - a2 * b1;
  if (denom = 0) then
  begin
    result := irColinear;
    Exit;
  end;

  {if denom < 0 then
  begin
    offset := -denom / 2;
  end
  else
  begin
    offset := denom / 2;
  end;  }
  offset := 0;
  { The denom/2 is to get rounding instead of truncating.  It
    is added or subtracted to the numerator, depending upon the
    sign of the numerator.
   }

  num := b1 * c2 - b2 * c1;
  if num < 0 then
  begin
    IntersectPoint.X := (num - offset) / denom;
  end
  else
  begin
    IntersectPoint.X := (num + offset) / denom;
  end;

  num := a2 * c1 - a1 * c2;

  if num < 0 then
  begin
    IntersectPoint.Y := (num - offset) / denom;
  end
  else
  begin
    IntersectPoint.Y := (num + offset) / denom;
  end;
  result := irDoIntersect;
end;

procedure TScreenObject.DeleteEdge(EdgeToDelete: integer);
var
  SectionIndex: integer;
  TempPoints: TRealPointArray;
  TempSelectedVertices: TBooleanDynArray;
  PointsBefore: integer;
  PointsAfter: integer;
  InnerSectionIndex: Integer;
  Value: integer;
begin
  FIsClosedCached := False;
  for SectionIndex := 0 to SectionCount - 1 do
  begin
    if (EdgeToDelete >= SectionStart[SectionIndex])
      and (EdgeToDelete <= SectionEnd[SectionIndex]) then
    begin
      Assert(EdgeToDelete <> SectionEnd[SectionIndex]);

      if not SectionClosed[SectionIndex] then
      begin
        SectionStarts.Insert(SectionIndex);
        SectionStarts.IntValues[SectionIndex] := EdgeToDelete+1;
      end
      else
      begin
        SetLength(TempPoints, SectionLength[SectionIndex]-1);
        SetLength(TempSelectedVertices, SectionLength[SectionIndex]-1);
        PointsBefore := EdgeToDelete - SectionStart[SectionIndex];
        PointsAfter := SectionLength[SectionIndex] - PointsBefore -1;

        if PointsAfter > 0 then
        begin
          Move(FPoints[EdgeToDelete + 1], TempPoints[0],
            PointsAfter * SizeOf(TPoint2D));
        end;
        if PointsBefore > 0 then
        begin
          Move(FPoints[SectionStart[SectionIndex]+1],
            TempPoints[PointsAfter],
            PointsBefore * SizeOf(TPoint2D));
        end;
        Move(TempPoints[0], FPoints[SectionStart[SectionIndex]],
          (SectionLength[SectionIndex]-1)  * SizeOf(TPoint2D));
        if SectionIndex < SectionCount - 1 then
        begin
          Move(FPoints[SectionEnd[SectionIndex]+1],
            FPoints[SectionEnd[SectionIndex]],
            (Count - SectionEnd[SectionIndex] - 1)  * SizeOf(TPoint2D));
        end;

        if PointsAfter > 0 then
        begin
          Move(FSelectedVertices[EdgeToDelete + 1], TempSelectedVertices[0],
            PointsAfter * SizeOf(boolean));
        end;
        if PointsBefore > 0 then
        begin
          Move(FSelectedVertices[SectionStart[SectionIndex]+1],
            TempSelectedVertices[PointsAfter],
            PointsBefore * SizeOf(boolean));
        end;
        Move(TempSelectedVertices[0],
          FSelectedVertices[SectionStart[SectionIndex]],
          (SectionLength[SectionIndex]-1)  * SizeOf(boolean));
        if SectionIndex < SectionCount - 1 then
        begin
          Move(FSelectedVertices[SectionEnd[SectionIndex]+1],
            FSelectedVertices[SectionEnd[SectionIndex]],
            (Count - SectionEnd[SectionIndex] - 1)  * SizeOf(boolean));
        end;
        for InnerSectionIndex := SectionIndex to SectionStarts.Count - 1 do
        begin
          Value := SectionStarts.IntValues[InnerSectionIndex];
          SectionStarts.IntValues[InnerSectionIndex] := Value-1;
        end;
        DeleteExtraSections;
        Count := Count -1;
        FNeedToResetSelectedVertexCount := True;
      end;

      break;
    end;
  end;

  Invalidate;
end;

procedure TScreenObject.CopyPoints(var Destination: TRealPointArray;
  const Position, Start: integer; var Count: integer);
begin
  if Count > self.Count - Start then
  begin
    Count := self.Count - Start;
  end;
  Assert(Length(Destination) >= Position + Count);
  Move(FPoints[Start], Destination[Position], Count * SizeOf(TPoint2D));
end;

procedure TScreenObject.RemoveElevationSubscription(Sender: TObject;
  const AName: string);
var
  Observer: TObserver;
begin
  if ElevationCount = ecOne then
  begin
    Assert(FElevSubscription <> nil);
    Observer := (FModel as TPhastModel).GetObserverByName(AName);
    Assert(Observer <> nil);
    Observer.StopsTalkingTo(FElevSubscription);
    Observer.StopsTalkingTo(self);
  end;
end;

procedure TScreenObject.RestoreElevationSubscription(Sender: TObject;
  const AName: string);
var
  Observer: TObserver;
begin
  if ElevationCount = ecOne then
  begin
    Assert(FElevSubscription <> nil);
    Observer := (FModel as TPhastModel).GetObserverByName(AName);
    Assert(Observer <> nil);
    Observer.TalksTo(FElevSubscription);
    Observer.TalksTo(self);
  end;
end;

procedure TScreenObject.RemoveHigherElevationSubscription(Sender: TObject;
  const AName: string);
var
  Observer: TObserver;
begin
  if ElevationCount = ecTwo then
  begin
    Assert(FTopElevSubscription <> nil);
    Observer := (FModel as TPhastModel).GetObserverByName(AName);
    Assert(Observer <> nil);
    Observer.StopsTalkingTo(FTopElevSubscription);
    Observer.StopsTalkingTo(self);
  end;
end;

procedure TScreenObject.RestoreHigherElevationSubscription(Sender: TObject;
  const AName: string);
var
  Observer: TObserver;
begin
  if ElevationCount = ecTwo then
  begin
    Assert(FTopElevSubscription <> nil);
    Observer := (FModel as TPhastModel).GetObserverByName(AName);
    Assert(Observer <> nil);
    Observer.TalksTo(FTopElevSubscription);
    Observer.TalksTo(self);
  end;
end;

procedure TScreenObject.RemoveLowerElevationSubscription(Sender: TObject;
  const AName: string);
var
  Observer: TObserver;
begin
  if ElevationCount = ecTwo then
  begin
    Assert(FBottomElevSubscription <> nil);
    Observer := (FModel as TPhastModel).GetObserverByName(AName);
    Assert(Observer <> nil);
    Observer.StopsTalkingTo(FBottomElevSubscription);
    Observer.StopsTalkingTo(self);
  end;
end;

procedure TScreenObject.RemoveModelLink(AModel: TBaseModel);
begin
  if FModflowBoundaries <> nil then
  begin
    FModflowBoundaries.RemoveModelLink(AModel);
  end;
end;

function CompareTopSegments(Item1, Item2: Pointer): Integer;
var
  Segment1: TCellElementSegment;
  Segment2: TCellElementSegment;
  StartPoint: TPoint2D;
  S1: TPoint2D;
  S2: TPoint2D;
begin
  Segment1 := Item1;
  Segment2 := Item2;
  result := Segment1.VertexIndex - Segment2.VertexIndex;
  if result = 0 then
  begin
    StartPoint := Segment1.ScreenObject.Points[Segment1.VertexIndex];
    S1.x := (Segment1.Segment[1].x + Segment1.Segment[2].x)/2;
    S1.y := (Segment1.Segment[1].y + Segment1.Segment[2].y)/2;
    S2.x := (Segment2.Segment[1].x + Segment2.Segment[2].x)/2;
    S2.y := (Segment2.Segment[1].y + Segment2.Segment[2].y)/2;
    result := Sign(FastGEO.Distance(StartPoint,S1) - FastGEO.Distance(StartPoint,S2));
    if result = 0 then
    begin
      result := Segment1.Layer - Segment2.Layer;
    end;
  end;
end;

function CompareFrontSegments(Item1, Item2: Pointer): Integer;
var
  Segment1: TCellElementSegment;
  Segment2: TCellElementSegment;
  StartPoint: TPoint2D;
  S1: TPoint2D;
  S2: TPoint2D;
begin
  Segment1 := Item1;
  Segment2 := Item2;
  result := Segment1.VertexIndex - Segment2.VertexIndex;
  if result = 0 then
  begin
    StartPoint := Segment1.ScreenObject.Points[Segment1.VertexIndex];
    S1.x := (Segment1.Segment[1].x + Segment1.Segment[2].x)/2;
    S1.y := (Segment1.Segment[1].y + Segment1.Segment[2].y)/2;
    S2.x := (Segment2.Segment[1].x + Segment2.Segment[2].x)/2;
    S2.y := (Segment2.Segment[1].y + Segment2.Segment[2].y)/2;
    result := Sign(FastGEO.Distance(StartPoint,S1) - FastGEO.Distance(StartPoint,S2));
    if result = 0 then
    begin
      result := Segment1.Col - Segment2.Col;
    end;
  end;
end;

procedure TScreenObject.AddTopMeshSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt; LowerElevDataSets: TList;
  HigherElevExpression: TExpression; LayerLimit: Integer;
  HigherElevDataSets: TList; LowerElevVariables: TList;
  HigherElevVariables: TList; LowerElevExpression: TExpression);
var
  Node: INode2D;
  IntIndex: Integer;
  Segment2D: TSegment2D;
  Element: IElement2D;
  ElementIndex: Integer;
  SectionIndex: Integer;
  Mesh2D: IMesh2D;
  PointIndex: Integer;
  Segment: TCellElementSegment;
  IntsectSegs: TSegment2DArray;
  NodeIndex: Integer;
  IntsectSeg: TSegment2D;
  Mesh: IMesh3D;
  LayerIndex: Integer;
  TopItem: T2DTopCell;
  SearchArray: TSearchArray;
  Limits: TGridLimit;
  NodeLeafList: TList;
  NodeLeaf: TNode2DLeaf;
  ElementLeafList: TList;
  ElementLeaf: TRangeTreeLeaf;
  EpsilonX, EpsilonY: double;
  procedure AddElementSegment(Layer: integer; ASeg: TSegment2D);
  begin
    Segment := TCellElementSegment.Create(self);
    Segment.Segment := ASeg;
    Segment.Col := Element.ElementNumber;
    Segment.Row := 0;
    Segment.Layer := Layer;
    Segment.StartPosition := epFirst;
    Segment.EndPosition := epLast;
    Segment.VertexIndex := PointIndex;
    Segment.SectionIndex := SectionIndex;
  end;
  procedure AddNodeSegment(Layer: integer; ASeg: TSegment2D);
  begin
    Segment := TCellElementSegment.Create(self);
    Segment.Segment := ASeg;
    Segment.Col := Node.NodeNumber;
    Segment.Row := 0;
    Segment.Layer := Layer;
    Segment.StartPosition := epFirst;
    Segment.EndPosition := epLast;
    Segment.VertexIndex := PointIndex;
    Segment.SectionIndex := SectionIndex;
//    FSegments.Add(Segment);
  end;
  procedure SetStartEndPostions;
  begin
    if IsEqual(IntsectSeg[1], Segment2D[1], Epsilon) then
    begin
      Segment.StartPosition := epFirst;
    end
    else if IsEqual(IntsectSeg[1], Segment2D[2], Epsilon) then
    begin
      Segment.StartPosition := epLast;
    end
    else
    begin
      Segment.StartPosition := epMiddle;
    end;
    if IsEqual(IntsectSeg[2], Segment2D[1], Epsilon) then
    begin
      Segment.EndPosition := epFirst;
    end
    else if IsEqual(IntsectSeg[2], Segment2D[2], Epsilon) then
    begin
      Segment.EndPosition := epLast;
    end
    else
    begin
      Segment.EndPosition := epMiddle;
    end;
  end;
  procedure AddSomeSegments;
  var
    AnElement3D: IElement3D;
    ANode3D: INode3D;
    UpperElevation: double;
    LowerElevation: double;
    ANode3D_2: INode3D;
    Elevation1: double;
    Elevation2: double;
    Eps: double;
//    Diagonal: Double;
  begin
    UpperElevation := 0;
    LowerElevation := 0;
    // only add segments for the correct node or elements.
    if (ElevationCount in [ecOne, ecTwo]) and Mesh.Is3DMesh then
    begin
      case EvaluatedAt of
        eaBlocks:
          begin
            AnElement3D := Mesh.ElementArrayI[Segment.Layer, Segment.Col];
            if AnElement3D = nil then
            begin
              Exit;
            end;
            if not AnElement3D.Active then
            begin
              FreeAndNil(Segment);
              Exit;
            end;
            UpperElevation := AnElement3D.UpperElevation;
            LowerElevation := AnElement3D.LowerElevation;
          end;
        eaNodes:
          begin
            ANode3D := Mesh.NodeArrayI[Segment.Layer, Segment.Col];
            if ANode3D = nil then
            begin
              Exit;
            end;
            if not ANode3D.Active then
            begin
              FreeAndNil(Segment);
              Exit;
            end;
            if Segment.Layer > 0 then
            begin
              ANode3D_2 := Mesh.NodeArrayI[Segment.Layer-1, Segment.Col];
              if ANode3D_2.Active then
              begin
                UpperElevation := (ANode3D.Z + ANode3D_2.Z)/2;
              end
              else
              begin
                UpperElevation := ANode3D.Z;
              end;
            end
            else
            begin
              UpperElevation := ANode3D.Z;
            end;
            if Segment.Layer < Mesh.LayerCount then
            begin
              ANode3D_2 := Mesh.NodeArrayI[Segment.Layer+1, Segment.Col];
              if ANode3D_2.Active then
              begin
                LowerElevation := (ANode3D.Z + ANode3D_2.Z)/2;
              end
              else
              begin
                LowerElevation := ANode3D.Z;
              end;
            end
            else
            begin
              LowerElevation := ANode3D.Z;
            end;
          end;
      end;
      UpdateUsedVariables(HigherElevVariables, HigherElevDataSets,
        Segment.Layer, Segment.Row, Segment.Col);
      UpdateCurrentScreenObject(self);
      UpdateGlobalLocations(Segment.Col, Segment.Row, Segment.Layer,
        EvaluatedAt, Model);
      UpdateCurrentSegment(Segment);
      UpdateCurrentSection(Segment.SectionIndex);
      if ElevationCount = ecOne then
      begin
        FCurrentValues := ImportedSectionElevations;
      end
      else
      begin
        FCurrentValues := ImportedHigherSectionElevations;
      end;
      HigherElevExpression.Evaluate;
      Elevation1 := HigherElevExpression.DoubleResult;

      if ElevationCount = ecTwo then
      begin
        UpdateUsedVariables(LowerElevVariables, LowerElevDataSets,
          Segment.Layer, Segment.Row, Segment.Col);

        UpdateCurrentScreenObject(self);
        UpdateGlobalLocations(Segment.Col, Segment.Row, Segment.Layer,
          EvaluatedAt, Model);
        UpdateCurrentSegment(Segment);
        UpdateCurrentSection(Segment.SectionIndex);
        FCurrentValues := ImportedLowerSectionElevations;
        LowerElevExpression.Evaluate;
        Elevation2 := LowerElevExpression.DoubleResult;
      end
      else
      begin
        Elevation2 := 0;
      end;

      case ElevationCount of
        ecOne:
          begin
            if (UpperElevation < Elevation1) or (LowerElevation > Elevation1) then
            begin
              FreeAndNil(Segment);
            end;
          end;
        ecTwo:
          begin
            Eps := Max(Abs(UpperElevation), Abs(LowerElevation))/10E12;
            if ((UpperElevation > Elevation2+Eps)
              or ((UpperElevation = Elevation2) and (Segment.Layer = 0)))
              and (LowerElevation < Elevation1-Eps) then
            begin
  //            FSegments.Add(Segment);
            end
            else
            begin
              FreeAndNil(Segment);
            end;
          end;
        else Assert(false);
      end;

    end;
    if Segment <> nil then
    begin
      FSegments.Add(Segment);
    end;
  end;
  procedure SortSegments;
  var
    SegIndex: NativeInt;
  begin
    FSegments.Sort(CompareTopSegments);
    for SegIndex := 0 to FSegments.Count - 1 do
    begin
      FSegments[SegIndex].PositionInSegmentList := SegIndex;
    end;
  end;
begin
  Mesh := (Model as TCustomModel).Mesh3D;
  Mesh2D := Mesh.Mesh2DI;
  Limits := Mesh.MeshLimits(vdTop, 0);
  EpsilonX := (Limits.MaxX-Limits.MinX)/1e7;
  EpsilonY := (Limits.MaxY-Limits.MinY)/1e7;
  SetLength(SearchArray, 4);
  SearchArray[0].LowerBoundary := Limits.MinX-EpsilonX;
  SearchArray[1].UpperBoundary := Limits.MaxX+EpsilonX;
  SearchArray[2].LowerBoundary := Limits.MinY-EpsilonY;
  SearchArray[3].UpperBoundary := Limits.MaxY+EpsilonY;
  for SectionIndex := 0 to SectionCount - 1 do
  begin
    if SectionLength[SectionIndex] = 1 then
    begin
      PointIndex := SectionStart[SectionIndex];
      Segment2D[1] := Points[SectionStart[SectionIndex]];
      Segment2D[2] := Segment2D[1];

      TopItem := Mesh2D.TopContainingCellOrElement(Segment2D[1], EvaluatedAt);

      if TopItem.Col >= 0 then
      begin
        case EvaluatedAt of
          eaBlocks:
            begin
              Element := Mesh2D.ElementsI2D[TopItem.Col];
              case Mesh.Is3DMesh of
                False:
                  begin
                    AddElementSegment(0, Segment2D);
                    AddSomeSegments;
                  end;
                True:
                  begin
                    for LayerIndex := 0 to Mesh.LayerCount - 1 do
                    begin
                      AddElementSegment(LayerIndex, Segment2D);
                      AddSomeSegments;
                    end;
                  end;
                else
                  Assert(False);
              end;
            end;
          eaNodes:
            begin
              Node := Mesh2D.NodesI2D[TopItem.Col];
              case Mesh.Is3DMesh of
                  False:
                    begin
                      AddNodeSegment(0, Segment2D);
                      AddSomeSegments;
                    end;
                  True:
                    begin
                      for LayerIndex := 0 to Mesh.LayerCount do
                      begin
                        AddNodeSegment(LayerIndex, Segment2D);
                        AddSomeSegments;
                      end;
                    end;
                  else
                    Assert(False);
                end;
            end;
          else Assert(False);
        end;
      end;

    end
    else
    begin
      for PointIndex := SectionStart[SectionIndex] to
        SectionEnd[SectionIndex] - 1 do
      begin
        Segment2D[1] := Points[PointIndex];
        Segment2D[2] := Points[PointIndex + 1];

        SearchArray[0].UpperBoundary := Max(Segment2D[1].x, Segment2D[2].x)+EpsilonX;
        SearchArray[1].LowerBoundary := Min(Segment2D[1].x, Segment2D[2].x)-EpsilonX;
        SearchArray[2].UpperBoundary := Max(Segment2D[1].y, Segment2D[2].y)+EpsilonY;
        SearchArray[3].LowerBoundary := Min(Segment2D[1].y, Segment2D[2].y)-EpsilonY;

        case EvaluatedAt of
          eaBlocks:
            begin
              ElementLeafList := Mesh2D.ElementRanges.Search(SearchArray);
              for ElementIndex := 0 to ElementLeafList.Count - 1 do
              begin
                ElementLeaf := ElementLeafList[ElementIndex];
                if ElementLeaf is TElement2DLeaf then
                begin
                  Element := TElement2DLeaf(ElementLeaf).Element;
                end
                else
                begin
                  Element := (ElementLeaf as TMf6Element2DLeaf).Element;
                end;
                if Element.Intersection(Segment2D, IntsectSeg) then
                begin
                  case Mesh.Is3DMesh of
                    False:
                      begin
                        AddElementSegment(0, IntsectSeg);
                        SetStartEndPostions;
                        AddSomeSegments;
                      end;
                    True:
                      begin
                        for LayerIndex := 0 to Mesh.LayerCount - 1 do
                        begin
                          AddElementSegment(LayerIndex, IntsectSeg);
                          SetStartEndPostions;
                          AddSomeSegments;
                        end;
                      end;
                  end;

                end
              end;


            end;
          eaNodes:
            begin
              NodeLeafList := Mesh2D.NodeRanges.Search(SearchArray);
              for NodeIndex := 0 to NodeLeafList.Count - 1 do
              begin
                NodeLeaf := NodeLeafList[NodeIndex];
                Node := NodeLeaf.Node;
                if Node.CellIntersection(Segment2D, IntsectSegs) then
                begin
                  for IntIndex := 0 to Length(IntsectSegs) - 1 do
                  begin
                    IntsectSeg := IntsectSegs[IntIndex];

                    case Mesh.Is3DMesh of
                      False:
                        begin
                          AddNodeSegment(0, IntsectSeg);
                          SetStartEndPostions;
                          AddSomeSegments;
                        end;
                      True:
                        begin
                          for LayerIndex := 0 to Mesh.LayerCount do
                          begin
                            AddNodeSegment(LayerIndex, IntsectSeg);
                            SetStartEndPostions;
                            AddSomeSegments;
                          end;
                        end;
                    end;
                  end;
                end
              end;

            end;
        else
          Assert(False);
        end;
      end;
    end;
  end;
  SortSegments;
  EliminateShortSegments(AModel);
end;

function CompareSegmentLocation(Item1, Item2: Pointer): Integer;
var
  Segment1, Segment2: TCellElementSegment;
begin
  Segment1 := Item1;
  Segment2 := Item2;
  result := Segment1.Layer - Segment2.Layer;
  if result = 0 then
  begin
    result := Segment1.Row - Segment2.Row;
  end;
  if result = 0 then
  begin
    result := Segment1.Col - Segment2.Col;
  end;
end;

function CompareSegmentOrder(Item1, Item2: Pointer): Integer;
var
  Segment1, Segment2: TCellElementSegment;
begin
  Segment1 := Item1;
  Segment2 := Item2;
  result := Segment1.PositionInSegmentList - Segment2.PositionInSegmentList;
end;

function TScreenObject.CellReferenceLength(AModel: TBaseModel;
  TestSeg: TCellElementSegment): double;
var
  CellCoord: T3DCellCoordinates;
  LocalModel: TCustomModel;
  Grid: TCustomModelGrid;
  LocalMesh: TSutraMesh3D;
  Element3D: TSutraElement3D;
  Node3D: TSutraNode3D;
  LocalMesh2D: TSutraMesh2D;
  AnElement2D: TSutraElement2D;
  AnNode2D: TSutraNode2D;
begin
  result := 0;
//  Assert(ViewDirection = vdTop);
  LocalModel := AModel as TCustomModel;
  if LocalModel.ModelSelection in SutraSelection then
  begin
    LocalMesh := LocalModel.Mesh as TSutraMesh3D;
    Assert(LocalMesh <> nil);
    if LocalMesh.MeshType = mt3D then
    begin
      case EvaluatedAt of
        eaBlocks:
          begin
            Element3D := LocalMesh.ElementArray[
              TestSeg.Layer, TestSeg.Col];
            if ViewDirection = vdTop then
            begin
              result := Element3D.Element2D.ReferenceLength;
            end
            else
            begin
              result := Element3D.ReferenceLength;
            end;
          end;
        eaNodes:
          begin
            Node3D := LocalMesh.NodeArray[
              TestSeg.Layer, TestSeg.Col];
            if ViewDirection = vdTop then
            begin
              result := Node3D.Node2D.ReferenceLength;
            end
            else
            begin
              result := Node3D.ReferenceLength;
            end;
          end;
        else Assert(False);
      end;
    end
    else
    begin
      LocalMesh2D := LocalMesh.Mesh2D;
      case EvaluatedAt of
        eaBlocks:
          begin
            AnElement2D := LocalMesh2D.Elements[TestSeg.Col];
            result := AnElement2D.ReferenceLength;
          end;
        eaNodes:
          begin
            AnNode2D := LocalMesh2D.Nodes[TestSeg.Col];
            result := AnNode2D.ReferenceLength;
          end;
        else Assert(False);
      end;
    end;
  end
  else if LocalModel.DisvUsed then
  begin
    case ViewDirection of
      vdTop:
        begin
          result := LocalModel.DisvGrid.TwoDGrid.Cells[TestSeg.Col].ReferenceLength;
        end;
      vdFront, vdSide:
        begin
          result := LocalModel.DisvGrid.Cells[TestSeg.Layer, TestSeg.Col].ReferenceLength;
        end;
      else
        Assert(False);
    end;
  end
  else
  begin
    Grid := LocalModel.Grid;
    Assert(Grid <> nil);
    result := 0;
    case ViewDirection of
      vdTop:
        begin
          case EvaluatedAt of
            eaBlocks:
              begin
                result := Sqrt(Sqr(Grid.ColumnWidth[TestSeg.Col])
                  + Sqr(Grid.RowWidth[TestSeg.Row]));
              end;
            eaNodes:
              begin
                CellCoord := Grid.CellCoordinates[ZeroBasedID(TestSeg.Layer, TestSeg.Row, TestSeg.Col)];
                result := Sqrt(Sqr(CellCoord.Col1_Row1_Lay1.x - CellCoord.Col2_Row2_Lay2.x)
                  + Sqr(CellCoord.Col1_Row1_Lay1.y - CellCoord.Col2_Row2_Lay2.y));
              end;
            else
              Assert(False);
          end
        end;
      vdFront:
        begin
          case EvaluatedAt of
            eaBlocks:
              begin
                result := Sqrt(Sqr(Grid.ColumnWidth[TestSeg.Col])
                  + Sqr(Grid.CellThickness[ZeroBasedID(TestSeg.Layer, TestSeg.Row, TestSeg.Col)]));
              end;
            eaNodes:
              begin
                CellCoord := Grid.CellCoordinates[ZeroBasedID(TestSeg.Layer, TestSeg.Row, TestSeg.Col)];
                result := Sqrt(Sqr(CellCoord.Col1_Row1_Lay1.x - CellCoord.Col2_Row2_Lay2.x)
                  + Sqr(CellCoord.Col1_Row1_Lay1.z - CellCoord.Col2_Row2_Lay2.z));
              end;
            else Assert(False);
          end;
        end;
      vdSide:
        begin
          case EvaluatedAt of
            eaBlocks:
              begin
                result := Sqrt(Sqr(Grid.RowWidth[TestSeg.Row])
                  + Sqr(Grid.CellThickness[ZeroBasedID(TestSeg.Layer, TestSeg.Row, TestSeg.Col)]));
              end;
            eaNodes:
              begin
                CellCoord := Grid.CellCoordinates[ZeroBasedID(TestSeg.Layer, TestSeg.Row, TestSeg.Col)];
                result := Sqrt(Sqr(CellCoord.Col1_Row1_Lay1.y - CellCoord.Col2_Row2_Lay2.y)
                  + Sqr(CellCoord.Col1_Row1_Lay1.z - CellCoord.Col2_Row2_Lay2.z));
              end;
            else Assert(False);
          end;
        end;
      else Assert(False);
    end;
  end;
end;

procedure TScreenObject.AddTopGridSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt; LowerElevDataSets: TList;
  HigherElevExpression: TExpression; LayerLimit: Integer;
  HigherElevDataSets: TList; LowerElevVariables: TList;
  const PointsRotated: Boolean; HigherElevVariables: TList;
  var RotatedPoints: TEdgePointArray; LowerElevExpression: TExpression);
var
  LocalModel: TCustomModel;
  Grid: TCustomModelGrid;
  PreviousPoint: TEdgePoint;
  TempMaxY: Double;
  LastElevationIndex: Integer;
  APoint: TEdgePoint;
  TempMaxX: Double;
  ElevationIndex: Integer;
  ACell: T2DTopCell;
  PointIndex: Integer;
  Position: TEdgePosition;
  TempMinY: Double;
  FirstRow: Integer;
  GridMinX: Double;
  GridMinY: Double;
  ASegment: TCellElementSegment;
  SectionIndex: Integer;
  Point2: TEdgePoint;
  FirstElevationIndex: Integer;
  RealPoint: TPoint2D;
  FirstCol: Integer;
  TempMinX: Double;
  Point1: TEdgePoint;
  Col2: Integer;
  Col1: Integer;
  TempPoints2: TEdgePointArray;
  LastRow: Integer;
  TempPoints1: TEdgePointArray;
  Row2: Integer;
  NewPoint: TEdgePoint;
  RowIndex: Integer;
  Temp: Double;
  EndSection: Boolean;
  LastCol: Integer;
  GridMaxY: Double;
  ColIndex: Integer;
  GridMaxX: Double;
  Index: Integer;
  Row1: Integer;
  IncreasingY: Boolean;
  IncreasingX: Boolean;
//  EndIndex: Integer;
//  SegIndex: Integer;
//  EndSeg: TCellElementSegment;
//  TotalSegLength: double;
//  Diagonal: Double;
//  InnerIndex: integer;
  Procedure AddSomeSegments;
  const
    MinimumCellFraction = 1e-7;
    MinimumDepthFraction = 1/10E12;
  var
    Eps: double;
    BlockTop: double;
    BlockBottom: double;
    Elevation1: double;
    Elevation2: double;
    SegLength: Double;
//    Grid: TCustomModelGrid;
    Diagonal: double;
//    CellCoord: T3DCellCoordinates;
  begin
    SegLength := ASegment.SegmentLength;
    if SegLength > 0 then
    begin
//      Grid := LocalModel.Grid;

      Diagonal := CellReferenceLength(AModel, ASegment);

      if (Diagonal = 0) or (SegLength/Diagonal < MinimumCellFraction)
        {or (SegLength/Diagonal < Self.MinimumFraction)} then
      begin
        FreeAndNil(ASegment);
        Exit;
      end;
    end;
    BlockBottom := 0;
    BlockTop := 0;
    if ElevationCount in [ecOne, ecTwo] then
    begin
      case LocalModel.ModelSelection of
        msPhast:
          begin
            case EvaluatedAt of
              eaBlocks:
                begin
                  BlockBottom := LocalModel.
                    PhastGrid.LayerElevation[ElevationIndex];
                  BlockTop := LocalModel.
                    PhastGrid.LayerElevation[ElevationIndex+1];
                end;
              eaNodes:
                begin
                  if ElevationIndex > 0 then
                  begin
                    BlockBottom := LocalModel.
                      PhastGrid.LayerCenter(ElevationIndex-1);
                  end
                  else
                  begin
                    BlockBottom := LocalModel.
                      PhastGrid.LayerElevation[ElevationIndex];
                  end;
                  if ElevationIndex < LocalModel.
                      PhastGrid.LayerCount then
                  begin
                    BlockTop := LocalModel.
                      PhastGrid.LayerCenter(ElevationIndex);
                  end
                  else
                  begin
                    BlockTop := LocalModel.
                      PhastGrid.LayerElevation[ElevationIndex];
                  end;
                end;
              else Assert(False);
            end;
          end;
        msModflow, msModflowLGR, msModflowLGR2, msModflowNWT,
          msModflowFmp, msModflowCfp, msModflow2015, msModflowOwhm2:
          begin
            Assert(EvaluatedAt = eaBlocks);
            BlockTop := LocalModel.ModflowGrid.
              LayerElevations[ASegment.Col, ASegment.Row, ElevationIndex];
            BlockBottom := LocalModel.ModflowGrid.
              LayerElevations[ASegment.Col, ASegment.Row, ElevationIndex+1];
          end;
        msFootPrint:
          begin
            BlockTop := 1;
            BlockBottom := 0;
            { TODO -cFootprint : This needs to be finished. }
          end
        else Assert(False);
      end;
    end;

    if ElevationCount in [ecOne, ecTwo] then
    begin
      UpdateUsedVariables(HigherElevVariables, HigherElevDataSets,
        ElevationIndex, ASegment.Row, ASegment.Col);
      UpdateCurrentScreenObject(self);
      UpdateGlobalLocations(ASegment.Col, ASegment.Row, ElevationIndex,
        EvaluatedAt, LocalModel);
      UpdateCurrentSegment(ASegment);
      UpdateCurrentSection(ASegment.SectionIndex);
      if ElevationCount = ecOne then
      begin
        FCurrentValues := ImportedSectionElevations;
      end
      else
      begin
        FCurrentValues := ImportedHigherSectionElevations;
      end;
      HigherElevExpression.Evaluate;
      Elevation1 := HigherElevExpression.DoubleResult;
    end
    else
    begin
      Elevation1 := 0;
    end;

    if ElevationCount = ecTwo then
    begin
      UpdateUsedVariables(LowerElevVariables, LowerElevDataSets,
        ElevationIndex, ASegment.Row, ASegment.Col);

      UpdateCurrentScreenObject(self);
      UpdateGlobalLocations(ASegment.Col, ASegment.Row, ElevationIndex,
        EvaluatedAt, LocalModel);
      UpdateCurrentSegment(ASegment);
      UpdateCurrentSection(ASegment.SectionIndex);
      FCurrentValues := ImportedLowerSectionElevations;
      LowerElevExpression.Evaluate;
      Elevation2 := LowerElevExpression.DoubleResult;
    end
    else
    begin
      Elevation2 := 0;
    end;

    case ElevationCount of
      ecZero:
        begin
//            FSegments.Add(ASegment);
        end;
      ecOne:
        begin
          if (BlockTop >= Elevation1) and (BlockBottom <= Elevation1) then
          begin
//            FSegments.Add(ASegment);
          end
          else
          begin
            FreeAndNil(ASegment);
          end;
        end;
      ecTwo:
        begin
          Eps := Max(Abs(BlockTop), Abs(BlockBottom))*MinimumDepthFraction;
          if ((BlockTop > Elevation2+Eps)
            or ((BlockTop = Elevation2) and (ASegment.Layer = 0)))
            and (BlockBottom < Elevation1-Eps) then
          begin
//            FSegments.Add(ASegment);
          end
          else
          begin
            FreeAndNil(ASegment);
          end;
        end;
      else Assert(false);
    end;

    if (ASegment <> nil) and (LocalModel is TPhastModel)
      and TPhastModel(LocalModel).LgrV1Used then
    begin
      AddTopSubSegments(ASegment, AModel);
    end;

    if ASegment <> nil  then
    begin
      FSegments.Add(ASegment);
    end;
  end;
begin
  LocalModel := AModel as TCustomModel;
  Grid := LocalModel.Grid;
  case EvaluatedAt of
    eaBlocks:
      begin
        LayerLimit := Grid.LayerCount - 1;
      end;
    eaNodes:
      begin
        LayerLimit := Grid.LayerCount;
      end;
  else
    Assert(False);
  end;
  if not PointsRotated then
  begin
    // Get the coordinates of the points after rotating them to the grid
    // coordinate system.
    RotatePoints(AModel, RotatedPoints, TempMinX, TempMinY, TempMaxX, TempMaxY);
  end;
  // Get the box outlining the grid.
  if Grid.ColumnCount >= 0 then
  begin
    GridMaxX := Grid.ColumnPosition[Grid.ColumnCount];
    GridMinX := Grid.ColumnPosition[0];
  end
  else
  begin
    GridMaxX := 0;
    GridMinX := 0;
  end;
  if GridMinX > GridMaxX then
  begin
    Temp := GridMinX;
    GridMinX := GridMaxX;
    GridMaxX := Temp;
  end;
  if Grid.RowCount >= 0 then
  begin
    GridMaxY := Grid.RowPosition[Grid.RowCount];
    GridMinY := Grid.RowPosition[0];
  end
  else
  begin
    GridMaxY := 0;
    GridMinY := 0;
  end;
  if GridMinY > GridMaxY then
  begin
    Temp := GridMinY;
    GridMinY := GridMaxY;
    GridMaxY := Temp;
  end;
  SectionIndex := 0;
  // loop over vertices in the TScreenObject
  for Index := 0 to Count - 1 do
  begin
    Assert(SectionIndex < SectionCount);
    if (Index > SectionStart[SectionIndex]) then
    begin
      PreviousPoint := APoint;
    end;
    APoint := RotatedPoints[Index];
    if (SectionLength[SectionIndex] = 1) then
    begin
      Inc(SectionIndex);
      // store the value of the cell at the first vertex.
      if (APoint.X >= GridMinX) and (APoint.X <= GridMaxX)
        and (APoint.Y >= GridMinY) and (APoint.Y <= GridMaxY) then
      begin
        ColIndex := GetACol(Grid, APoint.X);
        if (EvaluatedAt = eaBlocks) and (ColIndex = Grid.ColumnCount) then
        begin
          Dec(ColIndex);
        end;
        RowIndex := GetARow(Grid, APoint.Y);
        if (EvaluatedAt = eaBlocks) and (RowIndex = Grid.RowCount) then
        begin
          Dec(RowIndex);
        end;
        FirstElevationIndex := 0;
        LastElevationIndex := LayerLimit;
        for ElevationIndex := FirstElevationIndex to LastElevationIndex do
        begin
          // point segment, top view, MODFLOW or PHAST
          ASegment := TCellElementSegment.Create(Self);
          ASegment.X1 := APoint.X;
          ASegment.X2 := APoint.X;
          ASegment.Y1 := APoint.Y;
          ASegment.Y2 := APoint.Y;
          ASegment.Col := ColIndex;
          ASegment.Row := RowIndex;
          ASegment.Layer := ElevationIndex;
          ASegment.VertexIndex := Index;
          ASegment.StartPosition := epFirst;
          ASegment.EndPosition := epLast;
          ASegment.SectionIndex := SectionIndex - 1;
          AddSomeSegments;
        end;
      end;
    end
    else
    begin
      EndSection := False;
      if (Index = SectionStart[SectionIndex]) then
      begin
        Continue;
      end;
      if (Index = SectionEnd[SectionIndex]) then
      begin
        Inc(SectionIndex);
        EndSection := True;
      end;
      // get a line segment and store the values of cells along it.
      FirstCol := GetACol(Grid, PreviousPoint.X);
      LastCol := GetACol(Grid, APoint.X);
      FirstRow := GetARow(Grid, PreviousPoint.Y);
      LastRow := GetARow(Grid, APoint.Y);
      PointIndex := 0;
      // get points on line segment that intersect the column lines.
      SetLength(TempPoints1, Abs(LastCol - FirstCol) + Abs(LastRow - FirstRow) + 4);
      PreviousPoint.Position := epFirst;
      TempPoints1[PointIndex] := PreviousPoint;
      Inc(PointIndex);
      if (PreviousPoint.X <> APoint.X) then
      begin
        IncreasingX := APoint.X > PreviousPoint.X;
        if LastCol >= FirstCol then
        begin
          Col1 := FirstCol;
          Col2 := LastCol;
        end
        else
        begin
          Col1 := LastCol;
          Col2 := FirstCol;
        end;
        if (Col1 >= 0) and (Col2 >= 0) {and (Col1 <> Col2)} then
        begin
          for ColIndex := Col1 to Col2 do
          begin
            if ((ColIndex = 0) or (ColIndex = Grid.ColumnCount + 1)) then
            begin
              if (ColIndex = 0) then
              begin
                if IncreasingX then
                begin
                  Position := epFirst;
                end
                else
                begin
                  Position := epLast;
                end;
              end
              else
              begin
                if IncreasingX then
                begin
                  Position := epLast;
                end
                else
                begin
                  Position := epFirst;
                end;
              end;
            end
            else
            begin
              Position := epMiddle;
            end;
            AddPointFromColumn(ColIndex, Grid, PreviousPoint, APoint,
              TempPoints1, PointIndex, Position);
          end;
        end;
      end
      else
      begin
        Col1 := FirstCol;
        Col2 := LastCol;
      end;
      // get points on line segment that intersect the row lines.
      if (PreviousPoint.Y <> APoint.Y) then
      begin
        IncreasingY := APoint.Y > PreviousPoint.Y;
        if LastRow >= FirstRow then
        begin
          Row1 := FirstRow;
          Row2 := LastRow;
        end
        else
        begin
          Row1 := LastRow;
          Row2 := FirstRow;
        end;
        if (Row1 >= 0) and (Row2 >= 0) {and (Row1 <> Row2)} then
        begin
          for RowIndex := Row1 to Row2 do
          begin
            if ((RowIndex = 0) or (RowIndex = Grid.RowCount + 1)) then
            begin
              if RowIndex = 0 then
              begin
                if IncreasingY then
                begin
                  Position := epFirst;
                end
                else
                begin
                  Position := epLast;
                end;
              end
              else
              begin
                if IncreasingY then
                begin
                  Position := epLast;
                end
                else
                begin
                  Position := epFirst;
                end;
              end;
            end
            else
            begin
              Position := epMiddle;
            end;
            AddPointFromRow(RowIndex, Grid, PreviousPoint, APoint,
              TempPoints1, PointIndex, Position);
          end;
        end;
      end
      else
      begin
        Row1 := FirstRow;
        Row2 := LastRow;
      end;
      APoint.Position := epLast;
      TempPoints1[PointIndex] := APoint;
      Inc(PointIndex);
      // Sort the points.
      SortPoints(TempPoints1, TempPoints2, APoint, PreviousPoint, PointIndex);
      // Get cells.
      case EvaluatedAt of
        eaBlocks:
          begin
            for PointIndex := 1 to Length(TempPoints2) - 1 do
            begin
              Point2 := TempPoints2[PointIndex];
              Point1 := TempPoints2[PointIndex - 1];
              NewPoint.X := (Point1.X + Point2.X) / 2;
              NewPoint.Y := (Point1.Y + Point2.Y) / 2;
              if (NewPoint.X >= GridMinX) and (NewPoint.X <= GridMaxX)
                and (NewPoint.Y >= GridMinY) and (NewPoint.Y <= GridMaxY) then
              begin
                RealPoint.X := NewPoint.X;
                RealPoint.Y := NewPoint.Y;
                ACell := Grid.TopContainingCell(RealPoint, EvaluatedAt,
                  False, Col1, Col2, Row1, Row2);
                FirstElevationIndex := 0;
                LastElevationIndex := LayerLimit;
                for ElevationIndex := FirstElevationIndex to LastElevationIndex do
                begin
                  // line segments in elements, top view, MODFLOW or PHAST
                  ASegment := TCellElementSegment.Create(Self);
                  ASegment.X2 := Point2.X;
                  ASegment.X1 := Point1.X;
                  ASegment.Y2 := Point2.Y;
                  ASegment.Y1 := Point1.Y;
                  ASegment.Col := ACell.Col;
                  ASegment.Row := ACell.Row;
                  ASegment.Layer := ElevationIndex;
                  ASegment.VertexIndex := Index - 1;
                  ASegment.StartPosition := Point1.Position;
                  ASegment.EndPosition := Point2.Position;
                  if PointIndex = 1 then
                  begin
                    ASegment.StartPosition := epFirst;
                  end
                  else if PointIndex = Length(TempPoints2) - 1 then
                  begin
                    ASegment.StartPosition := epLast;
                  end;
                  if EndSection then
                  begin
                    ASegment.SectionIndex := SectionIndex - 1;
                  end
                  else
                  begin
                    ASegment.SectionIndex := SectionIndex;
                  end;
                  AddSomeSegments;
                end;
              end;
            end;
          end;
        eaNodes:
          begin
            for PointIndex := 1 to Length(TempPoints2) - 1 do
            begin
              Point2 := TempPoints2[PointIndex];
              Point1 := TempPoints2[PointIndex - 1];
              NewPoint.X := (Point1.X + Point2.X) / 2;
              NewPoint.Y := (Point1.Y + Point2.Y) / 2;
              if (NewPoint.X >= GridMinX) and (NewPoint.X <= GridMaxX)
                and (NewPoint.Y >= GridMinY) and (NewPoint.Y <= GridMaxY) then
              begin
                RealPoint.X := NewPoint.X;
                RealPoint.Y := NewPoint.Y;
                ACell := Grid.TopContainingCell(RealPoint, EvaluatedAt,
                  False, Col1, Col2, Row1, Row2);
                FirstElevationIndex := 0;
                LastElevationIndex := LayerLimit;
                for ElevationIndex := FirstElevationIndex to LastElevationIndex do
                begin
                  // line segment nodes, top view, PHAST
                  ASegment := TCellElementSegment.Create(Self);
                  ASegment.X2 := Point2.X;
                  ASegment.X1 := Point1.X;
                  ASegment.Y2 := Point2.Y;
                  ASegment.Y1 := Point1.Y;
                  ASegment.Col := ACell.Col;
                  ASegment.Row := ACell.Row;
                  ASegment.Layer := ElevationIndex;
                  ASegment.VertexIndex := Index - 1;
                  ASegment.StartPosition := Point1.Position;
                  ASegment.EndPosition := Point2.Position;
                  if PointIndex = 0 then
                  begin
                    ASegment.StartPosition := epFirst;
                  end
                  else if PointIndex = Length(TempPoints2) - 1 then
                  begin
                    ASegment.StartPosition := epLast;
                  end;
                  if EndSection then
                  begin
                    ASegment.SectionIndex := SectionIndex - 1;
                  end
                  else
                  begin
                    ASegment.SectionIndex := SectionIndex;
                  end;
                  AddSomeSegments;
                end;
              end;
            end;
          end;
      else
        Assert(False);
      end;
    end;
  end;

  EliminateShortSegments(AModel);

end;

procedure TScreenObject.RestoreLowerElevationSubscription(Sender: TObject;
  const AName: string);
var
  Observer: TObserver;
begin
  if ElevationCount = ecTwo then
  begin
    Assert(FBottomElevSubscription <> nil);
    Observer := (FModel as TPhastModel).GetObserverByName(AName);
    Assert(Observer <> nil);
    Observer.TalksTo(FBottomElevSubscription);
    Observer.TalksTo(self);
  end;
end;

procedure GlobalRemoveElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TScreenObject).RemoveElevationSubscription(Sender, AName);
end;

procedure GlobalRestoreElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TScreenObject).RestoreElevationSubscription(Sender, AName);
end;

procedure GlobalRemoveHigherElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TScreenObject).RemoveHigherElevationSubscription(Sender, AName);
end;

procedure GlobalRestoreHigherElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TScreenObject).RestoreHigherElevationSubscription(Sender, AName);
end;

procedure GlobalRemoveLowerElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TScreenObject).RemoveLowerElevationSubscription(Sender, AName);
end;

procedure GlobalRestoreLowerElevationSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TScreenObject).RestoreLowerElevationSubscription(Sender, AName);
end;

procedure TScreenObject.SetElevationCount(const Value: TElevationCount);
var
  Index: integer;
  DataSet: TDataArray;
  OldElevationCount: TElevationCount;
  LocalModel: TPhastModel;
  List: TList;
  Dummy: string;
  TempElevationFormula: string;
  OldElevationFormula: string;
  OldHigherElevationFormula: string;
  OldLowerElevationFormula: string;
begin
  Assert(Value in [ecZero, ecOne, ecTwo]);
  if FElevationCount <> Value then
  begin
    InvalidateModel;
    OldElevationFormula := ElevationFormula;
    OldLowerElevationFormula := LowerElevationFormula;
    OldHigherElevationFormula := HigherElevationFormula;
    OldElevationCount := FElevationCount;
    FElevationCount := Value;
    if (FModel <> nil) and not (csReading in FModel.ComponentState) then
    begin
      LocalModel := Model as TPhastModel;
      case OldElevationCount of
        ecZero:
          begin
            // do nothing
          end;
        ecOne:
          begin
//            ChildModel := nil;
            for Index := 0 to DataSetCount - 1 do
            begin
              DataSet := DataSets[Index];
              if (FElevSubscription <> nil) and CanInvalidateModel then
              begin
                FElevSubscription.StopsTalkingTo(DataSet);
              end;
            end;
            Dummy := '0';
            UpdateElevationSubscriptions(Dummy, OldElevationFormula);
            frmGoPhast.PhastModel.FormulaManager.Remove(FElevationFormulaObject,
              GlobalRemoveElevationSubscription,
              GlobalRestoreElevationSubscription, self);
            FElevationFormulaObject := nil;
          end;
        ecTwo:
          begin
//            ChildModel := nil;
            for Index := 0 to DataSetCount - 1 do
            begin
              DataSet := DataSets[Index];
              if (FTopElevSubscription <> nil) and CanInvalidateModel then
              begin
                FTopElevSubscription.StopsTalkingTo(DataSet);
              end;

              if (FBottomElevSubscription <> nil) and CanInvalidateModel then
              begin
                FBottomElevSubscription.StopsTalkingTo(DataSet);
              end;
            end;
            Dummy := '0';
            UpdateHigherElevationSubscriptions(Dummy, OldHigherElevationFormula);
            Dummy := '0';
            UpdateLowerElevationSubscriptions(Dummy, OldLowerElevationFormula);
            frmGoPhast.PhastModel.FormulaManager.Remove(FHigherElevationFormulaObject,
              GlobalRemoveHigherElevationSubscription,
              GlobalRestoreHigherElevationSubscription, self);
            FHigherElevationFormulaObject := nil;
            frmGoPhast.PhastModel.FormulaManager.Remove(FLowerElevationFormulaObject,
              GlobalRemoveLowerElevationSubscription,
              GlobalRestoreLowerElevationSubscription, self);
            FLowerElevationFormulaObject := nil;
          end;
      else
        Assert(False);
      end;
      case Value of
        ecZero:
          begin
            // do nothing
          end;
        ecOne:
          begin
            ChildModel := nil;
            if FElevSubscription = nil then
            begin
              CreateElevationSubscription;
            end;
            for Index := 0 to DataSetCount - 1 do
            begin
              DataSet := DataSets[Index];
              if CanInvalidateModel then
              begin
                FElevSubscription.TalksTo(DataSet);
              end;
            end;
            TempElevationFormula := ElevationFormula;
            UpdateElevationSubscriptions(TempElevationFormula, '0');
            ElevationFormula := TempElevationFormula;
          end;
        ecTwo:
          begin
            ChildModel := nil;
            if FTopElevSubscription = nil then
            begin
              CreateTopElevationSubscription;
            end;
            if FBottomElevSubscription = nil then
            begin
              CreateBottomElevationSubscription;
            end;
            for Index := 0 to DataSetCount - 1 do
            begin
              DataSet := DataSets[Index];
              if CanInvalidateModel then
              begin
                FTopElevSubscription.TalksTo(DataSet);
              end;


              if CanInvalidateModel then
              begin
                FBottomElevSubscription.TalksTo(DataSet);
              end;
            end;
            TempElevationFormula := HigherElevationFormula;
            UpdateHigherElevationSubscriptions(TempElevationFormula, '0');
            HigherElevationFormula := TempElevationFormula;
            TempElevationFormula := LowerElevationFormula;
            UpdateLowerElevationSubscriptions(TempElevationFormula, '0');
            LowerElevationFormula := TempElevationFormula;
          end;
      else
        Assert(False);
      end;

      if (OldElevationCount in [ecOne, ecTwo])
        <> (Value in [ecOne, ecTwo]) then
      begin
        List := TList.Create;
        try
          LocalModel.GetModflowLayerGroupDataSets(List);
          LocalModel.GetSutraLayerGroupDataSets(List);
          case OldElevationCount of
            ecZero:
              begin
                // do nothing
              end;
            ecOne,ecTwo:
              begin
                for Index := 0 to List.Count - 1 do
                begin
                  DataSet := List[Index];
                  if CanInvalidateModel then
                  begin
                    DataSet.StopsTalkingTo(self);
                  end;
                end;
              end;
            else Assert(False);
          end;
          case Value of
            ecZero:
              begin
                // do nothing
              end;
            ecOne,ecTwo:
              begin
                for Index := 0 to List.Count - 1 do
                begin
                  DataSet := List[Index];
                  if CanInvalidateModel then
                  begin
                    DataSet.TalksTo(self);
                  end;
                end;
              end;
            else Assert(False);
          end;
        finally
          List.Free;
        end;
      end;
    end;
    FElevationCount := Value;
    CreateFormulaObjects;
    Invalidate;
  end;
end;

procedure TScreenObject.SetElevationFormula(NewFormula: string);
var
  OldFormula: string;
  Dummy: string;
begin
  OldFormula := ElevationFormula;
  if OldFormula <> NewFormula then
  begin
    InvalidateModel;
    if not FCanInvalidateModel or (csReading in FModel.ComponentState) then
    begin
      if ElevationCount = ecOne then
      begin
        frmGoPhast.PhastModel.FormulaManager.ChangeFormula(
          FElevationFormulaObject, NewFormula, Get1DCompiler,
          GlobalDummyHandleSubscription,
          GlobalDummyHandleSubscription, self);
      end;
      Exit;
    end;
    if ElevationCount = ecOne then
    begin
      UpdateElevationSubscriptions(NewFormula, OldFormula);
      frmGoPhast.PhastModel.FormulaManager.ChangeFormula(
        FElevationFormulaObject, NewFormula, Get1DCompiler,
        GlobalRemoveElevationSubscription,
        GlobalRestoreElevationSubscription, self);
    end
    else
    begin
      Dummy:= '0';
      UpdateElevationSubscriptions(Dummy, OldFormula);
    end;
  end;
end;

procedure TScreenObject.ResetElevationFormula(const Compiler: TRbwParser;
  const ErrorMessage: string);
var
  ScreenObjectFunction: string;
begin
  ScreenObjectFunction := ElevationFormula;
  frmFormulaErrors.AddFormulaError(Name, StrElevationFormula,
    ScreenObjectFunction, ErrorMessage);
  ScreenObjectFunction := '0';
  ElevationFormula := '1';
  ElevationFormula := ScreenObjectFunction;
  if Compiler <> nil then
  begin
    Compiler.Compile(ScreenObjectFunction);
  end;
end;

procedure TScreenObject.ResetBottomElevationFormula(
  const Compiler: TRbwParser; const ErrorMessage: string);
var
  ScreenObjectFunction: string;
begin
  ScreenObjectFunction := LowerElevationFormula;
  frmFormulaErrors.AddFormulaError(Name, StrLowerXYOrZCo,
    ScreenObjectFunction, ErrorMessage);
  ScreenObjectFunction := '0';
  LowerElevationFormula := '1';
  LowerElevationFormula := ScreenObjectFunction;
  if Compiler <> nil then
  begin
    Compiler.Compile(ScreenObjectFunction);
  end;
end;

procedure TScreenObject.ResetTopElevationFormula(const Compiler: TRbwParser;
  const ErrorMessage: string);
var
  ScreenObjectFunction: string;
begin
  ScreenObjectFunction := HigherElevationFormula;
  frmFormulaErrors.AddFormulaError(Name, StrHigherXYOrZC,
    ScreenObjectFunction, ErrorMessage);
  ScreenObjectFunction := '0';
  HigherElevationFormula := '1';
  HigherElevationFormula := ScreenObjectFunction;
  if Compiler <> nil then
  begin
    Compiler.Compile(ScreenObjectFunction);
  end;
end;

function TScreenObject.RestoreCellsFromCache(CellList: TCellAssignmentList;
  EvalAt: TEvaluatedAt; Orientation: TDataSetOrientation;
  AssignmentLocation: TAssignmentLocation; const EncloseAnnotation,
  IntersectAnnotation: string; AModel: TBaseModel): boolean;
begin
//  result := False;
//  Exit;
  result := FCachedCells.RestoreFromCache(CellList, EvalAt,
    Orientation, AssignmentLocation, EncloseAnnotation, IntersectAnnotation,
    AModel);
  UpdateCurrentScreenObject(self);
end;

procedure TScreenObject.RestoreDataArraySubscription(Sender: TObject;
  const AName: string);
begin
  RestoreSubscriptionToList(FDataSetFormulas, AName, Sender,
    FDataSetSubscriptions);
end;

procedure TScreenObject.RestoreBoundaryDataArraySubscription(Sender: TObject;
  const AName: string);
begin
  RestoreSubscriptionToList(FBoundaryDataSetFormulas, AName, Sender,
    FBoundaryDataSetSubscriptions);
end;

procedure TScreenObject.ReverseDirection;
var
  Temp: TPoint2D;
  Index: integer;
  PointCount: integer;
  NewSectionStarts: array of integer;
begin
  PointCount := Count;
  for Index := 0 to PointCount div 2 - 1 do
  begin
    Temp := FPoints[Index];
    FPoints[Index] := FPoints[PointCount-Index-1];
    FPoints[PointCount-Index-1] := Temp;
  end;
  SetLength(NewSectionStarts, SectionStarts.Count);
  for Index := 0 to SectionStarts.Count - 1 do
  begin
    NewSectionStarts[Index] := PointCount - SectionStarts.IntValues[Index];
  end;
  for Index := 0 to SectionStarts.Count - 1 do
  begin
    SectionStarts.IntValues[Index] :=
      NewSectionStarts[SectionStarts.Count - Index -1]
  end;
  ImportedSectionElevations.Reverse;
  ImportedHigherSectionElevations.Reverse;
  ImportedLowerSectionElevations.Reverse;
  for Index := 0 to ImportedValues.Count - 1 do
  begin
    ImportedValues.Items[Index].Values.Reverse;
  end;
  Invalidate;
end;

function TScreenObject.RivParameters: IModflowParameters;
begin
  result := nil;
  if ModflowRivBoundary <> nil then
  begin
    result := ModflowRivBoundary.Parameters
  end;
end;

procedure TScreenObject.UpdateElevationSubscriptions(var NewFormula: string; OldFormula: string);
var
  OldUseList: TStringList;
  DS: TObserver;
  Index: Integer;
  Compiler: TRbwParser;
  NewUseList: TStringList;
  OtherIndex: Integer;
begin
  OldUseList := TStringList.Create;
  NewUseList := TStringList.Create;
  try
    Compiler := nil;
    case ViewDirection of
      vdTop:
        begin
          Compiler := GetCompiler(dsoTop, EvaluatedAt);
        end;
      vdFront:
        begin
          Compiler := GetCompiler(dsoFront, EvaluatedAt);
        end;
      vdSide:
        begin
          Compiler := GetCompiler(dsoSide, EvaluatedAt);
        end;
    else
      Assert(False);
    end;
    if OldFormula = '' then
    begin
      OldFormula := '0';
    end;
    try
      Compiler.Compile(OldFormula);
      OldUseList.Assign(Compiler.CurrentExpression.VariablesUsed);
    except on E: ERbwParserError do
      begin
        // ignore
      end;
    end;
    if NewFormula = '' then
    begin
      NewFormula := '0';
    end;
    OldFormula := NewFormula;
    try
      Compiler.Compile(OldFormula);
    except on E: ERbwParserError do
      begin
        OldFormula := '0';
        Compiler.Compile(OldFormula);
      end;
    end;
    NewUseList.Assign(Compiler.CurrentExpression.VariablesUsed);
    NewFormula := Compiler.CurrentExpression.Decompile;
    for Index := OldUseList.Count - 1 downto 0 do
    begin
      OtherIndex := NewUseList.IndexOf(OldUseList[Index]);
      if OtherIndex >= 0 then
      begin
        OldUseList.Delete(Index);
        NewUseList.Delete(OtherIndex);
      end;
    end;
    for Index := 0 to OldUseList.Count - 1 do
    begin
      if FElevSubscription <> nil then
      begin
        DS := (FModel as TPhastModel).GetObserverByName(OldUseList[Index]);
        Assert(DS <> nil);
        DS.StopsTalkingTo(FElevSubscription);
        DS.StopsTalkingTo(self);
      end;
    end;
    for Index := 0 to NewUseList.Count - 1 do
    begin
      if FElevSubscription = nil then
      begin
        CreateElevationSubscription;
      end;
      DS := (FModel as TPhastModel).GetObserverByName(NewUseList[Index]);
      Assert(DS <> nil);
      DS.TalksTo(FElevSubscription);
      DS.TalksTo(self);
    end;
    Invalidate;
  finally
    OldUseList.Free;
    NewUseList.Free;
  end;
  if FElevSubscription <> nil then
  begin
    FElevSubscription.UpToDate := False;
  end;
  Invalidate;
end;

procedure TScreenObject.UpdateLowerElevationSubscriptions(
  var NewFormula: string; OldFormula: string);
var
  DS: TObserver;
  OtherIndex: Integer;
  Index: Integer;
  Compiler: TRbwParser;
  NewUseList: TStringList;
  OldUseList: TStringList;
begin
  OldUseList := TStringList.Create;
  NewUseList := TStringList.Create;
  try
    Compiler := nil;
    case ViewDirection of
      vdTop:
        begin
          Compiler := GetCompiler(dsoTop, EvaluatedAt);
        end;
      vdFront:
        begin
          Compiler := GetCompiler(dsoFront, EvaluatedAt);
        end;
      vdSide:
        begin
          Compiler := GetCompiler(dsoSide, EvaluatedAt);
        end;
    else
      Assert(False);
    end;
    if OldFormula = '' then
    begin
      OldFormula := '0';
    end;
    try
      Compiler.Compile(OldFormula);
      OldUseList.Assign(Compiler.CurrentExpression.VariablesUsed);
    except on E: ERbwParserError do
      begin
        // ignore
      end;
    end;
    if NewFormula = '' then
    begin
      NewFormula := '0';
    end;
    OldFormula := NewFormula;
    try
      Compiler.Compile(OldFormula);
    except on E: ERbwParserError do
      begin
        OldFormula := '0';
        Compiler.Compile(OldFormula);
      end;
    end;
    NewUseList.Assign(Compiler.CurrentExpression.VariablesUsed);
    NewFormula := Compiler.CurrentExpression.Decompile;
    for Index := OldUseList.Count - 1 downto 0 do
    begin
      OtherIndex := NewUseList.IndexOf(OldUseList[Index]);
      if OtherIndex >= 0 then
      begin
        OldUseList.Delete(Index);
        NewUseList.Delete(OtherIndex);
      end;
    end;
    for Index := 0 to OldUseList.Count - 1 do
    begin
      if FBottomElevSubscription <> nil then
      begin
        DS := (FModel as TPhastModel).GetObserverByName(OldUseList[Index]);
        Assert(DS <> nil);
        DS.StopsTalkingTo(FBottomElevSubscription);
        DS.StopsTalkingTo(self);
      end;
    end;
    for Index := 0 to NewUseList.Count - 1 do
    begin
      if FBottomElevSubscription = nil then
      begin
        CreateBottomElevationSubscription;
      end;
      DS := (FModel as TPhastModel).GetObserverByName(NewUseList[Index]);
      Assert(DS <> nil);
      DS.TalksTo(FBottomElevSubscription);
      DS.TalksTo(self);
    end;
    Invalidate;
  finally
    OldUseList.Free;
    NewUseList.Free;
  end;
  if FBottomElevSubscription <> nil then
  begin
    FBottomElevSubscription.UpToDate := False;
  end;
  Invalidate;
end;

procedure TScreenObject.UpdateHigherElevationSubscriptions(
  var NewFormula: string; OldFormula: string);
var
  DS: TObserver;
  OtherIndex: Integer;
  Index: Integer;
  Compiler: TRbwParser;
  NewUseList: TStringList;
  OldUseList: TStringList;
begin
  OldUseList := TStringList.Create;
  NewUseList := TStringList.Create;
  try
    Compiler := nil;
    case ViewDirection of
      vdTop:
        begin
          Compiler := GetCompiler(dsoTop, EvaluatedAt);
        end;
      vdFront:
        begin
          Compiler := GetCompiler(dsoFront, EvaluatedAt);
        end;
      vdSide:
        begin
          Compiler := GetCompiler(dsoSide, EvaluatedAt);
        end;
    else
      Assert(False);
    end;
    if OldFormula = '' then
    begin
      OldFormula := '0';
    end;
    try
      Compiler.Compile(OldFormula);
      OldUseList.Assign(Compiler.CurrentExpression.VariablesUsed);
    except on ERbwParserError do
      begin
        // ignore
      end;
    end;
    if NewFormula = '' then
    begin
      NewFormula := '0';
    end;
    OldFormula := NewFormula;
    try
      Compiler.Compile(OldFormula);
    except on E: ERbwParserError do
      begin
        OldFormula := '0';
        Compiler.Compile(OldFormula);
      end;
    end;
    NewUseList.Assign(Compiler.CurrentExpression.VariablesUsed);
    NewFormula := Compiler.CurrentExpression.Decompile;
    for Index := OldUseList.Count - 1 downto 0 do
    begin
      OtherIndex := NewUseList.IndexOf(OldUseList[Index]);
      if OtherIndex >= 0 then
      begin
        OldUseList.Delete(Index);
        NewUseList.Delete(OtherIndex);
      end;
    end;
    for Index := 0 to OldUseList.Count - 1 do
    begin
      if FTopElevSubscription <> nil then
      begin
        DS := (FModel as TPhastModel).GetObserverByName(OldUseList[Index]);
        Assert(DS <> nil);
        DS.StopsTalkingTo(FTopElevSubscription);
        DS.StopsTalkingTo(self);
      end;
    end;
    for Index := 0 to NewUseList.Count - 1 do
    begin
      if FTopElevSubscription = nil then
      begin
        CreateTopElevationSubscription;
      end;
      DS := (FModel as TPhastModel).GetObserverByName(NewUseList[Index]);
      Assert(DS <> nil);
      DS.TalksTo(FTopElevSubscription);
      DS.TalksTo(self);
    end;
    Invalidate;
  finally
    OldUseList.Free;
    NewUseList.Free;
  end;
  if FTopElevSubscription <> nil then
  begin
    FTopElevSubscription.UpToDate := False;
  end;
  Invalidate;
end;

procedure TScreenObject.SetHigherElevationFormula(NewFormula: string);
var
  OldFunction: string;
  Dummy: string;
begin
  OldFunction := HigherElevationFormula;
  if OldFunction <> NewFormula then
  begin
    InvalidateModel;
    if  not FCanInvalidateModel or (csReading in FModel.ComponentState) then
    begin
      if ElevationCount = ecTwo then
      begin
        frmGoPhast.PhastModel.FormulaManager.ChangeFormula(
          FHigherElevationFormulaObject, NewFormula, Get1DCompiler,
          GlobalDummyHandleSubscription,
          GlobalDummyHandleSubscription, self);
      end;
      Exit;
    end;
    if ElevationCount = ecTwo then
    begin
      UpdateHigherElevationSubscriptions(NewFormula, OldFunction);
      frmGoPhast.PhastModel.FormulaManager.ChangeFormula(
        FHigherElevationFormulaObject, NewFormula, Get1DCompiler,
        GlobalRemoveHigherElevationSubscription,
        GlobalRestoreHigherElevationSubscription, self);
    end
    else
    begin
      Dummy := '0';
      UpdateHigherElevationSubscriptions(Dummy, OldFunction);
    end;
  end;
end;

procedure TScreenObject.SetLowerElevationFormula(NewFormula: string);
var
  OldFormula: string;
  Dummy: string;
begin
  OldFormula := LowerElevationFormula;
  if OldFormula <> NewFormula then
  begin
    InvalidateModel;
    if not FCanInvalidateModel or (csReading in FModel.ComponentState) then
    begin
      if ElevationCount = ecTwo then
      begin
        frmGoPhast.PhastModel.FormulaManager.ChangeFormula(
          FLowerElevationFormulaObject, NewFormula, Get1DCompiler,
          GlobalDummyHandleSubscription,
          GlobalDummyHandleSubscription, self);
      end;
      Exit;
    end;

    if ElevationCount = ecTwo then
    begin
      UpdateLowerElevationSubscriptions(NewFormula, OldFormula);
      frmGoPhast.PhastModel.FormulaManager.ChangeFormula(
        FLowerElevationFormulaObject, NewFormula, Get1DCompiler,
        GlobalRemoveLowerElevationSubscription,
        GlobalRestoreLowerElevationSubscription, self);
    end
    else
    begin
      Dummy := '0';
      UpdateLowerElevationSubscriptions(Dummy, OldFormula);
    end;
  end;
end;

procedure TScreenObject.SetModfloCfpRchFraction(
  const Value: TCfpRchFractionBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FCfpRchFraction <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FCfpRchFraction);
  end
  else
  begin
    CreateCfpRchFraction;
    ModflowBoundaries.FCfpRchFraction.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflow6Obs(const Value: TModflow6Obs);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflow6Obs <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflow6Obs);
  end
  else
  begin
    CreateMf6Obs;
    ModflowBoundaries.FModflow6Obs.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowCfpFixedHeads(const Value: TCfpFixedBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FCfpFixedHeads <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FCfpFixedHeads);
  end
  else
  begin
    CreateCfpFixedHeads;
    ModflowBoundaries.FCfpFixedHeads.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowCfpPipes(const Value: TCfpPipeBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FCfpPipes <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FCfpPipes);
  end
  else
  begin
    CreateCfpBoundary;
    ModflowBoundaries.FCfpPipes.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowChdBoundary(const Value: TChdBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowChdBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowChdBoundary);
  end
  else
  begin
    CreateChdBoundary;
    ModflowBoundaries.FModflowChdBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowCSub(const Value: TCSubBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowCSub <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowCSub);
  end
  else
  begin
    CreateCSubBoundary;
    ModflowBoundaries.FModflowCSub.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowDrnBoundary(const Value: TDrnBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowDrnBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowDrnBoundary);
  end
  else
  begin
    CreateDrnBoundary;
    ModflowBoundaries.FModflowDrnBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowDrtBoundary(const Value: TDrtBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowDrtBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowDrtBoundary);
  end
  else
  begin
    CreateDrtBoundary;
    ModflowBoundaries.FModflowDrtBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowEtsBoundary(const Value: TEtsBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowEtsBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowEtsBoundary);
  end
  else
  begin
    CreateEtsBoundary;
    ModflowBoundaries.FModflowEtsBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowEvtBoundary(const Value: TEvtBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowEvtBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowEvtBoundary);
  end
  else
  begin
    CreateEvtBoundary;
    ModflowBoundaries.FModflowEvtBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFhbFlowBoundary(const Value: TFhbFlowBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowFhbFlowBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowFhbFlowBoundary);
  end
  else
  begin
    CreateFhbFlowBoundary;
    ModflowBoundaries.FModflowFhbFlowBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFhbHeadBoundary(const Value: TFhbHeadBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowFhbHeadBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowFhbHeadBoundary);
  end
  else
  begin
    CreateFhbHeadBoundary;
    ModflowBoundaries.FModflowFhbHeadBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmpPrecip(const Value: TFmpPrecipBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpPrecipBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpPrecipBoundary);
  end
  else
  begin
    CreateFarmPrecip;
    ModflowBoundaries.FFmpPrecipBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmpPrecipPotConsumption(
  const Value: TFmp4PrecipPotConsumptionBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4PrecipPotConsumptionBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4PrecipPotConsumptionBoundary);
  end
  else
  begin
    CreateModflowFmpPrecipPotConsumption;
    ModflowBoundaries.FFmp4PrecipPotConsumptionBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmpRefEvap(const Value: TFmpRefEvapBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpRefEvapBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpRefEvapBoundary);
  end
  else
  begin
    CreateFarmRefEvap;
    ModflowBoundaries.FFmpRefEvapBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4AddedDemand(
  const Value: TFmp4AddedDemandBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4AddedDemandBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4AddedDemandBoundary);
  end
  else
  begin
    CreateModflowAddedDemandBoundary;
    ModflowBoundaries.FFmp4AddedDemandBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4ConsumptiveUse(
  const Value: TFmp4ConsumptiveUseBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4ConsumptiveUseBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4ConsumptiveUseBoundary);
  end
  else
  begin
    CreateModflowConsumptiveUseBoundary;
    ModflowBoundaries.FFmp4ConsumptiveUseBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4CropCoefficient(
  const Value: TFmp4CropCoefficientBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4CropCoefficientBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4CropCoefficientBoundary);
  end
  else
  begin
    CreateModflowFmp4CropCoefficientBoundary;
    ModflowBoundaries.FFmp4CropCoefficientBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4CropHasSalinityDemand(
  const Value: TFmp4CropHasSalinityDemandBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4CropHasSalinityDemandBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4CropHasSalinityDemandBoundary);
  end
  else
  begin
    CreateModflowCropHasSalinityDemandBoundary;
    ModflowBoundaries.FFmp4CropHasSalinityDemandBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4EvaporationIrrigationFraction(
  const Value: TFmp4EvaporationIrrigationFractionBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4EvaporationIrrigationFractionBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4EvaporationIrrigationFractionBoundary);
  end
  else
  begin
    CreateModflowEvaporationIrrigationFractionBoundary;
    ModflowBoundaries.FFmp4EvaporationIrrigationFractionBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4FractionOfIrrigToSurfaceWater(
  const Value: TFmp4FractionOfIrrigToSurfaceWaterBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4FractionOfIrrigToSurfaceWaterBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4FractionOfIrrigToSurfaceWaterBoundary);
  end
  else
  begin
    CreateModflowFractionOfIrrigToSurfaceWaterBoundary;
    ModflowBoundaries.FFmp4FractionOfIrrigToSurfaceWaterBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4FractionOfPrecipToSurfaceWater(
  const Value: TFmp4FractionOfPrecipToSurfaceWaterBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4FractionOfPrecipToSurfaceWaterBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4FractionOfPrecipToSurfaceWaterBoundary);
  end
  else
  begin
    CreateModflowFractionOfPrecipToSurfaceWaterBoundary;
    ModflowBoundaries.FFmp4FractionOfPrecipToSurfaceWaterBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4Irrigation(
  const Value: TFmp4IrrigationBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4IrrigationBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4IrrigationBoundary);
  end
  else
  begin
    CreateModflowIrrigationBoundary;
    ModflowBoundaries.FFmp4IrrigationBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4LandUseAreaFraction(
  const Value: TFmp4LandUseAreaFractionBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4LandUseAreaFractionBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4LandUseAreaFractionBoundary);
  end
  else
  begin
    CreateModflowFmp4LandUseAreaFractionBoundary;
    ModflowBoundaries.FFmp4LandUseAreaFractionBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4MultAddedDemand(
  const Value: TFmp4MultAddedDemandBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpMultAddedDemandBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpMultAddedDemandBoundary);
  end
  else
  begin
    CreateModflowMultAddedDemandBoundary;
    ModflowBoundaries.FFmpMultAddedDemandBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4MultConsumptiveUse(
  const Value: TFmp4MultConsumptiveUseBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpMultConsumptiveUseBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpMultConsumptiveUseBoundary);
  end
  else
  begin
    CreateModflowMultConsumptiveUseBoundary;
    ModflowBoundaries.FFmpMultConsumptiveUseBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4MultCropCoefficient(
  const Value: TFmp4MultCropCoefficientBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpMultCropCoefficientBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpMultCropCoefficientBoundary);
  end
  else
  begin
    CreateModflowMultCropCoefficientBoundary;
    ModflowBoundaries.FFmpMultCropCoefficientBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4MultCropHasSalinityDemand(
  const Value: TFmp4MultCropHasSalinityDemandBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpMultCropHasSalinityDemandBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpMultCropHasSalinityDemandBoundary);
  end
  else
  begin
    CreateModflowMultCropHasSalinityDemandBoundary;
    ModflowBoundaries.FFmpMultCropHasSalinityDemandBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4MultEvaporationIrrigationFraction(
  const Value: TFmp4MultEvaporationIrrigationFractionBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpMultEvaporationIrrigationFractionBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpMultEvaporationIrrigationFractionBoundary);
  end
  else
  begin
    CreateModflowMultEvaporationIrrigationFractionBoundary;
    ModflowBoundaries.FFmpMultEvaporationIrrigationFractionBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4MultFractionOfIrrigToSurfaceWater(
  const Value: TFmp4MultFractionOfIrrigToSurfaceWaterBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpMultFractionOfIrrigToSurfaceWaterBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpMultFractionOfIrrigToSurfaceWaterBoundary);
  end
  else
  begin
    CreateModflowMultFractionOfIrrigToSurfaceWaterBoundary;
    ModflowBoundaries.FFmpMultFractionOfIrrigToSurfaceWaterBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4MultFractionOfPrecipToSurfaceWater(
  const Value: TFmp4MultFractionOfPrecipToSurfaceWaterBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpMultFractionOfPrecipToSurfaceWaterBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpMultFractionOfPrecipToSurfaceWaterBoundary);
  end
  else
  begin
    CreateModflowMultFractionOfPrecipToSurfaceWaterBoundary;
    ModflowBoundaries.FFmpMultFractionOfPrecipToSurfaceWaterBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4MultIrrigation(
  const Value: TFmp4MultIrrigationBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpMultIrrigationBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpMultIrrigationBoundary);
  end
  else
  begin
    CreateModflowMultIrrigationBoundary;
    ModflowBoundaries.FFmpMultIrrigationBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4MultLandUseAreaFraction(
  const Value: TFmp4MultLandUseAreaFractionBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4MultLandUseAreaFractionBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4MultLandUseAreaFractionBoundary);
  end
  else
  begin
    CreateModflowMultFmp4LandUseAreaFractionBoundary;
    ModflowBoundaries.FFmp4MultLandUseAreaFractionBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4MultRootDepth(
  const Value: TFmp4MultRootDepthBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpMultRootDepthBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpMultRootDepthBoundary);
  end
  else
  begin
    CreateModflowMultRootDepthBoundary;
    ModflowBoundaries.FFmpMultRootDepthBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4MultTranspirationFraction(
  const Value: TFmp4MultTranspirationFractionBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpMultTranspirationFractionBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpMultTranspirationFractionBoundary);
  end
  else
  begin
    CreateModflowMultTranspirationFractionBoundary;
    ModflowBoundaries.FFmpMultTranspirationFractionBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4NrdInfilLocationBoundary(
  const Value: TFmp4NrdInfilLocationBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4NrdInfilLocationBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4NrdInfilLocationBoundary);
  end
  else
  begin
    CreateModflowFmp4NrdInfilLocation;
    ModflowBoundaries.FFmp4NrdInfilLocationBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4RootDepth(
  const Value: TFmp4RootDepthBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4RootDepthBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4RootDepthBoundary);
  end
  else
  begin
    CreateModflowRootDepthBoundary;
    ModflowBoundaries.FFmp4RootDepthBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmp4TranspirationFraction(
  const Value: TFmp4TranspirationFractionBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4TranspirationFractionBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4TranspirationFractionBoundary);
  end
  else
  begin
    CreateModflowTranspirationFractionBoundary;
    ModflowBoundaries.FFmp4TranspirationFractionBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmpBareEvap(
  const Value: TFmp4BareEvapBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4BareEvap <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4BareEvap);
  end
  else
  begin
    CreateModflowFmpBareEvap;
    ModflowBoundaries.FFmp4BareEvap.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmpCropID(const Value: TFmpCropIDBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpCropIDBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpCropIDBoundary);
  end
  else
  begin
    CreateFarmCropID;
    ModflowBoundaries.FFmpCropIDBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmpDirectRecharge(
  const Value: TFmp4DirectRechargeBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4DirectRechargeBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4DirectRechargeBoundary);
  end
  else
  begin
    CreateModflowFmpDirectRecharge;
    ModflowBoundaries.FFmp4DirectRechargeBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmpFarmID(const Value: TFmpFarmIDBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpFarmIDBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpFarmIDBoundary);
  end
  else
  begin
    CreateFarmID;
    ModflowBoundaries.FFmpFarmIDBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowFmpWellBoundary(const Value: TFmpWellBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmpWellBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmpWellBoundary);
  end
  else
  begin
    CreateFarmWell;
    ModflowBoundaries.FFmpWellBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowGhbBoundary(const Value: TGhbBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowGhbBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowGhbBoundary);
  end
  else
  begin
    CreateGhbBoundary;
    ModflowBoundaries.FModflowGhbBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowHeadObservations(const Value: THobBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowHeadObservations <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowHeadObservations);
  end
  else
  begin
    CreateHeadObservations;
    ModflowBoundaries.FModflowHeadObservations.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowHfbBoundary(const Value: THfbBoundary);
begin
  if (Value = nil) or not (Value.Used or Value.UsedMf6) then
  begin
    if ModflowBoundaries.FModflowHfbBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowHfbBoundary);
  end
  else
  begin
    CreateHfbBoundary;
    ModflowBoundaries.FModflowHfbBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowHydmodData(const Value: THydmodData);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowHydmodData <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowHydmodData);
  end
  else
  begin
    CreateHydmodData;
    ModflowBoundaries.FModflowHydmodData.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowLak6(const Value: TLakeMf6);
var
//  ActiveDataArray: TDataArray;
  LeakanceDataArray: TDataArray;
  BedThicknessDataArray: TDataArray;
  BotElevDataArray: TDataArray;
  TopElevDataArray: TDataArray;
  ConnLengthDataArray: TDataArray;
  ConnWidthDataArray: TDataArray;
begin
  LeakanceDataArray := nil;
  BedThicknessDataArray := nil;
  BotElevDataArray := nil;
  TopElevDataArray := nil;
  ConnLengthDataArray := nil;
  ConnWidthDataArray := nil;
  if Model <> nil then
  begin
    LeakanceDataArray := (Model as TCustomModel).DataArrayManager.
      GetDataSetByName(KLake_Bed_Leakance);
    BedThicknessDataArray := (Model as TCustomModel).DataArrayManager.
      GetDataSetByName(KLake_Bed_Thickness);
    BotElevDataArray := (Model as TCustomModel).DataArrayManager.
      GetDataSetByName(KLake_Bottom_Elevation);
    TopElevDataArray := (Model as TCustomModel).DataArrayManager.
      GetDataSetByName(KLake_Top_Elevation);
    ConnLengthDataArray := (Model as TCustomModel).DataArrayManager.
      GetDataSetByName(KLake_Connection_Length);
    ConnWidthDataArray := (Model as TCustomModel).DataArrayManager.
      GetDataSetByName(KLake_Connection_Width);
  end;
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowLak6 <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowLak6);

    if LeakanceDataArray <> nil then
    begin
      self.StopsTalkingTo(LeakanceDataArray);
    end;
    if BedThicknessDataArray <> nil then
    begin
      self.StopsTalkingTo(BedThicknessDataArray);
    end;
    if BotElevDataArray <> nil then
    begin
      self.StopsTalkingTo(BotElevDataArray);
    end;
    if TopElevDataArray <> nil then
    begin
      self.StopsTalkingTo(TopElevDataArray);
    end;
    if ConnLengthDataArray <> nil then
    begin
      self.StopsTalkingTo(ConnLengthDataArray);
    end;
    if ConnWidthDataArray <> nil then
    begin
      self.StopsTalkingTo(ConnWidthDataArray);
    end;
  end
  else
  begin
    CreateLakMf6Boundary;
    ModflowBoundaries.FModflowLak6.Assign(Value);
    if LeakanceDataArray <> nil then
    begin
      self.TalksTo(LeakanceDataArray);
    end;
    if BedThicknessDataArray <> nil then
    begin
      self.TalksTo(BedThicknessDataArray);
    end;
    if BotElevDataArray <> nil then
    begin
      self.TalksTo(BotElevDataArray);
    end;
    if TopElevDataArray <> nil then
    begin
      self.TalksTo(TopElevDataArray);
    end;
    if ConnLengthDataArray <> nil then
    begin
      self.TalksTo(ConnLengthDataArray);
    end;
    if ConnWidthDataArray <> nil then
    begin
      self.TalksTo(ConnWidthDataArray);
    end;
  end;
end;

procedure TScreenObject.SetModflowLakBoundary(const Value: TLakBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowLakBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowLakBoundary);
    RemoveLakeID_Connection;
  end
  else
  begin
    CreateLakBoundary;
    ModflowBoundaries.FModflowLakBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowMawBoundary(const Value: TMawBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowMawBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowMawBoundary);
  end
  else
  begin
    CreateMawBoundary;
    ModflowBoundaries.FModflowMawBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowMnw1Boundary(const Value: TMnw1Boundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowMnw1Boundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowMnw1Boundary);
  end
  else
  begin
    CreateMnw1Boundary;
    ModflowBoundaries.FModflowMnw1Boundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowMnw2Boundary(const Value: TMnw2Boundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowMnw2Boundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowMnw2Boundary);
  end
  else
  begin
    CreateMnw2Boundary;
    ModflowBoundaries.FModflowMnw2Boundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowMvr(const Value: TMvrBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowMvr <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowMvr);
  end
  else
  begin
    CreateModflowMvr;
    ModflowBoundaries.FModflowMvr.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowRchBoundary(const Value: TRchBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowRchBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowRchBoundary);
  end
  else
  begin
    CreateRchBoundary;
    ModflowBoundaries.FModflowRchBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowResBoundary(const Value: TResBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowResBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowResBoundary);
  end
  else
  begin
    CreateResBoundary;
    ModflowBoundaries.FModflowResBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowRipBoundary(const Value: TRipBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowRipBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowRipBoundary);
  end
  else
  begin
    CreateRipBoundary;
    ModflowBoundaries.FModflowRipBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowRivBoundary(const Value: TRivBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowRivBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowRivBoundary);
  end
  else
  begin
    CreateRivBoundary;
    ModflowBoundaries.FModflowRivBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowSfr6Boundary(const Value: TSfrMf6Boundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowSfr6Boundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowSfr6Boundary);
  end
  else
  begin
    CreateSfr6Boundary;
    ModflowBoundaries.FModflowSfr6Boundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowSfrBoundary(const Value: TSfrBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowSfrBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowSfrBoundary);
  end
  else
  begin
    CreateSfrBoundary;
    ModflowBoundaries.FModflowSfrBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowStrBoundary(const Value: TStrBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowStrBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowStrBoundary);
  end
  else
  begin
    CreateStrBoundary;
    ModflowBoundaries.FModflowStrBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowStreamGage(const Value: TStreamGage);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowGage <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowGage);
  end
  else
  begin
    CreateGagBoundary;
    ModflowBoundaries.FModflowGage.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowSwiObservations(const Value: TSwiObsBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowSwiObsBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowSwiObsBoundary);
  end
  else
  begin
    CreateSwiObsBoundary;
    ModflowBoundaries.FModflowSwiObsBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowSwrDirectRunoff(
  const Value: TSwrDirectRunoffBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FSwrDirectRunoff <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FSwrDirectRunoff);
  end
  else
  begin
    CreateSwrDirectRunoffBoundary;
    ModflowBoundaries.FSwrDirectRunoff.Assign(Value);
  end;

end;

procedure TScreenObject.SetModflowSwrEvap(const Value: TSwrEvapBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FSwrEvap <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FSwrEvap);
  end
  else
  begin
    CreateSwrEvapBoundary;
    ModflowBoundaries.FSwrEvap.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowSwrLatInflow(
  const Value: TSwrLatInflowBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FSwrLatInflow <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FSwrLatInflow);
  end
  else
  begin
    CreateSwrLatInflowBoundary;
    ModflowBoundaries.FSwrLatInflow.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowSwrRain(const Value: TSwrRainBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FSwrRain <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FSwrRain);
  end
  else
  begin
    CreateSwrRainBoundary;
    ModflowBoundaries.FSwrRain.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowSwrReaches(const Value: TSwrReachBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FSwrReaches <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FSwrReaches);
  end
  else
  begin
    CreateSwrReachesBoundary;
    ModflowBoundaries.FSwrReaches.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowSwrStage(const Value: TSwrStageBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FSwrStage <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FSwrStage);
  end
  else
  begin
    CreateSwrStageBoundary;
    ModflowBoundaries.FSwrStage.Assign(Value);
  end;
end;


procedure TScreenObject.SetModflowSwtObservations(
  const Value: TSwtObservations);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowSwtObservations <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowSwtObservations);
  end
  else
  begin
    CreateSwtObservations;
    ModflowBoundaries.FModflowSwtObservations.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowTvkBoundary(const Value: TTvkBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FTvkBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FTvkBoundary);
  end
  else
  begin
    CreateTvkBoundary;
    ModflowBoundaries.FTvkBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowTvsBoundary(const Value: TTvsBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FTvsBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FTvsBoundary);
  end
  else
  begin
    CreateTvsBoundary;
    ModflowBoundaries.FTvsBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowUzfBoundary(const Value: TUzfBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowUzfBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowUzfBoundary);
  end
  else
  begin
    CreateUzfBoundary;
    ModflowBoundaries.FModflowUzfBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowUzfMf6Boundary(const Value: TUzfMf6Boundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowUzfMf6Boundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowUzfMf6Boundary);
  end
  else
  begin
    CreateUzfMf6Boundary;
    ModflowBoundaries.FModflowUzfMf6Boundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModflowWellBoundary(const Value: TMfWellBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowWellBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowWellBoundary);
  end
  else
  begin
    CreateWelBoundary;
    ModflowBoundaries.FModflowWellBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetModpathParticles(const Value: TParticleStorage);
begin
  FModpathParticles.Assign(Value);
end;

procedure TScreenObject.SetMt3dLktConcBoundary(
  const Value: TMt3dLktConcBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FMt3dLktConcBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FMt3dLktConcBoundary);
  end
  else
  begin
    CreateMt3dLktConcBoundary;
    ModflowBoundaries.FMt3dLktConcBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetMt3dmsConcBoundary(const Value: TMt3dmsConcBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FMt3dmsConcBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FMt3dmsConcBoundary);
  end
  else
  begin
    CreateMt3dmsConcBoundary;
    ModflowBoundaries.FMt3dmsConcBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetMt3dmsTransObservations(
  const Value: TMt3dmsTransObservations);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FMt3dmsTransObservations <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FMt3dmsTransObservations);
  end
  else
  begin
    CreateMt3dmsTransObservations;
    ModflowBoundaries.FMt3dmsTransObservations.Assign(Value);
  end;
end;

procedure TScreenObject.SetMt3dSftConcBoundary(const Value: TMt3dSftBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FMt3dSftConcBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FMt3dSftConcBoundary);
  end
  else
  begin
    CreateMt3dSftConcBoundary;
    ModflowBoundaries.FMt3dSftConcBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetMt3dUzfRechConc(
  const Value: TMt3dUztRchConcBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FMt3dUztRechConc <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FMt3dUztRechConc);
  end
  else
  begin
    CreateMt3dUzfRchConcBoundary;
    ModflowBoundaries.FMt3dUztRechConc.Assign(Value);
  end;
end;

procedure TScreenObject.SetMt3dUzSsmSinkConcBoundary(
  const Value: TMt3dUzSsmSinkConcBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FMt3dUzSsmSinkConcBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FMt3dUzSsmSinkConcBoundary);
  end
  else
  begin
    CreateMt3dUzSsmSinkConcBoundary;
    ModflowBoundaries.FMt3dUzSsmSinkConcBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetMt3dUztSatEtConcBoundary(
  const Value: TMt3dUztSatEtConcBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FMt3dUztSatEtConcBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FMt3dUztSatEtConcBoundary);
  end
  else
  begin
    CreateMt3dUztSatEtConcBoundary;
    ModflowBoundaries.FMt3dUztSatEtConcBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetMt3dUztUnsatEtConcBoundary(
  const Value: TMt3dUztUnsatEtConcBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FMt3dUztUnsatEtConcBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FMt3dUztUnsatEtConcBoundary);
  end
  else
  begin
    CreateMt3dUztUnsatEtConcBoundary;
    ModflowBoundaries.FMt3dUztUnsatEtConcBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.Draw2Elev(
  Const Bitmap32: TPersistent;
  const Direction: TViewDirection; const DrawAsSelected: Boolean);
var
  HighPoints: T2DRealPointArray;
  LowPoints: T2DRealPointArray;
  OuterPointIndex, InnerPointIndex: integer;
  RealPoint: TPoint2D;
  ModSelect: TModelSelection;
  function UsePoint: boolean;
  var
    HighPoint, LowPoint: TPoint2D;
  begin
    if ViewDirection = vdSide then
    begin
      if Direction = vdTop then
      begin
        HighPoint := HighPoints[OuterPointIndex, InnerPointIndex];
        LowPoint := LowPoints[OuterPointIndex, InnerPointIndex];
        HighPoint :=
          (FModel as TPhastModel).Grid.
          RotateFromRealWorldCoordinatesToGridCoordinates(HighPoint);
        LowPoint :=
          (FModel as TPhastModel).Grid.
          RotateFromRealWorldCoordinatesToGridCoordinates(LowPoint);
        result := HighPoint.X >= LowPoint.X;
      end
      else
      begin
        result := HighPoints[OuterPointIndex, InnerPointIndex].X
          >= LowPoints[OuterPointIndex, InnerPointIndex].X
      end;
    end
    else
    begin
      if Direction = vdTop then
      begin
        HighPoint := HighPoints[OuterPointIndex, InnerPointIndex];
        LowPoint := LowPoints[OuterPointIndex, InnerPointIndex];
        HighPoint :=
          (FModel as TPhastModel).Grid.
          RotateFromRealWorldCoordinatesToGridCoordinates(HighPoint);
        LowPoint :=
          (FModel as TPhastModel).Grid.
          RotateFromRealWorldCoordinatesToGridCoordinates(LowPoint);
        result := HighPoint.Y >= LowPoint.Y;
      end
      else
      begin
        result := HighPoints[OuterPointIndex, InnerPointIndex].Y
          >= LowPoints[OuterPointIndex, InnerPointIndex].Y
      end;
    end;

  end;
  function ConvertPoint: TPoint;
  begin
    Assert(FModel <> nil);
    result := (FModel as TPhastModel).ConvertPoint(Direction, RealPoint);
  end;
begin
  if Deleted then
    Exit;
  if Direction = ViewDirection then
  begin
    Draw0Elev(Bitmap32, Direction, DrawAsSelected);
  end
  else
  begin
    if Model = nil then
    begin
      ModSelect := msModflow;
    end
    else
    begin
      ModSelect := (Model as TPhastModel).ModelSelection;
    end;
    case ModSelect of
      msPhast:
        begin
          Draw2ElevPhast(Direction, Bitmap32);
        end;
      msModflow, msModflowLGR, msModflowLGR2, msModflowNWT,
        msModflowFmp, msModflowCfp, msModflowOwhm2:
        begin
          Draw2ElevModflow(Direction, Bitmap32, (Model as TPhastModel).SelectedModel);
        end;
      msModflow2015:
        begin
          Assert(Model <> nil);
          if not (Model as TCustomModel).DisvUsed then
          begin
            Draw2ElevModflow(Direction, Bitmap32, (Model as TPhastModel).SelectedModel);
          end;
        end;
      msSutra22, msSutra30, msSutra40:
        begin
          Draw2ElevSutra(Direction, Bitmap32);
        end;
      msFootPrint: ; // do nothing.
      else
        Assert(False)
    end;
  end;
end;

procedure TScreenObject.SetCellSize(const Value: real);
begin
  if Value > 0 then
  begin
    if FCellSize <> Value then
    begin
      FCellSize := Value;
      InvalidateModel;
    end;
  end;
end;

procedure TScreenObject.SetCellSizeUsed(const Value: boolean);
begin
  if FCellSizeUsed <> Value then
  begin
    FCellSizeUsed := Value;
    InvalidateModel;
  end;
  UpdateTalksToActive;
end;

procedure TScreenObject.SetChildModel(const Value: TBaseModel);
var
  LocalModel: TChildModel;
  PriorModel: TBaseModel;
begin
  if (FChildModel <> Value) then
  begin
    PriorModel := FChildModel;
    FChildModel := Value;
    if PriorModel <> nil then
    begin
      LocalModel := PriorModel as TChildModel;
      if LocalModel.HorizontalPositionScreenObject = self then
      begin
        LocalModel.HorizontalPositionScreenObject := nil;
      end;
    end;
  end;
  if FChildModel <> nil then
  begin
    LocalModel := FChildModel as TChildModel;
    FChildModelName := LocalModel.ModelName;
    if LocalModel.HorizontalPositionScreenObject <> self then
    begin
      LocalModel.HorizontalPositionScreenObject := self;
    end;
  end
  else
  begin
    FChildModelName := '';
  end;
end;

//procedure TScreenObject.SetChildModelDiscretization(const Value: integer);
//begin
//  if FChildModelDiscretization <> Value then
//  begin
//    FChildModelDiscretization := Value;
//    InvalidateModel;
//  end;
//end;

procedure TScreenObject.SetChildModelName(const Value: string);
var
  AnObject: TObject;
  AChildModel: TChildModel;
begin
  if FChildModelName <> Value then
  begin
    FChildModelName := Value;
    // GetChildModel sets FChildModel;
    AnObject := GetChildModel;
    if CanInvalidateModel then
    begin
      if (AnObject <> nil) and (Model <> nil) then
      begin
        AChildModel := AnObject as TChildModel;
        AChildModel.HorizontalPositionScreenObject := self;
      end;
      InvalidateModel;
    end;
  end;
end;

procedure TScreenObject.SetEvaluatedAt(const Value: TEvaluatedAt);
begin
  if FEvaluatedAt <> Value then
  begin
    FEvaluatedAt := Value;
    InvalidateModel;
    SetFormulaParsers;
    FSegModelAssoc.InvalidateAll;
    if FSegments <> nil then
    begin
      FSegments.UpToDate := False;
    end;
    Invalidate;
  end;
end;

procedure TScreenObject.ResetDataSetSubscriptions;
var
  Index: integer;
  Subscription: TObserver;
begin
  for Index := 0 to FDataSetSubscriptions.Count - 1 do
  begin
    Subscription := FDataSetSubscriptions[Index] as TObserver;
    Subscription.UpToDate := True;
  end;
end;

function TScreenObject.Get1DCompiler: TRbwParser;
begin
  result := nil;
  case ViewDirection of
    vdTop: result := frmGoPhast.PhastModel.GetCompiler(dsoTop, EvaluatedAt);
    vdFront: result := frmGoPhast.PhastModel.GetCompiler(dsoFront, EvaluatedAt);
    vdSide: result := frmGoPhast.PhastModel.GetCompiler(dsoSide, EvaluatedAt);
    else Assert(False);
  end;
end;

function TScreenObject.GetACol(const Grid: TCustomModelGrid; const X: double):
  integer;
begin
  result := Grid.NearestColumnPosition(X);

  if result < 0 then
  begin
    result := 0;
  end;
  case EvaluatedAt of
    eaBlocks:
      begin
        if ((result > Grid.ColumnCount) or (Grid.ColumnPosition[result] > X))
          and (result > 0) then
        begin
          Dec(result);
        end;
        // the following TODO may be incorrect.
        if result > Grid.ColumnCount then
        begin
          result := Grid.ColumnCount;
        end;

        { TODO : Can this be added here? }
        // The following would allow combinging this function
        // with GetCol.  However, does it work for other cases?
        {if (result >= Grid.ColumnCount) then
        begin
          result := Grid.ColumnCount - 1;
        end;} 
      end;
    eaNodes:
      begin
        // do nothing
      end;
  else
    Assert(False);
  end;
//  if result > Grid.ColumnCount then
//  begin
//    result := Grid.ColumnCount;
//  end;
end;

function TScreenObject.GetAPhastLayer(const Grid: TCustomModelGrid; const Z: double):
  integer;
begin
  result := (Grid as TPhastGrid).NearestLayerPosition(Z);
  if result < 0 then
  begin
    result := 0;
  end;
  case EvaluatedAt of
    eaBlocks:
      begin
        if ((result > Grid.LayerCount)
          or ((Grid as TPhastGrid).LayerElevation[result] > Z))
          and (result > 0) then
        begin
          Dec(result);
        end;
        // This  is inconsistent with the following comment
        if result > Grid.LayerCount then
        begin
          result := Grid.LayerCount
        end;

        { TODO : Can this be added here? }
        // The following would allow combinging this function
        // with GetLayer.  However, does it work for other cases?
        {if (result >= Grid.LayerCount) then
        begin
          result := Grid.LayerCount - 1
        end;}
      end;
    eaNodes:
      begin
        // do nothing
      end;
  else
    Assert(False);
  end;
//  if result > Grid.LayerCount then
//  begin
//    result := Grid.LayerCount
//  end;
end;

function TScreenObject.GetARow(const Grid: TCustomModelGrid; const Y: double):
  integer;
begin
  result := Grid.NearestRowPosition(Y);
  if result < 0 then
  begin
    result := 0;
  end;
  case EvaluatedAt of
    eaBlocks:
      begin
        case Grid.RowDirection of
          rdSouthToNorth:
            begin
              if ((result > Grid.RowCount) or (Grid.RowPosition[result] > Y))
                and (result > 0) then
              begin
                Dec(result);
              end;
            end;
          rdNorthToSouth:
            begin
              if ((result > Grid.RowCount) or (Grid.RowPosition[result] <= Y))
                and (result > 0) then
              begin
                Dec(result);
              end;
            end;
          else Assert(False);
        end;
        // the following TODO may be incorrect
        if result > Grid.RowCount then
        begin
          result := Grid.RowCount
        end;

        { TODO : Can this be added here? }
        // The following would allow combinging this function
        // with GetRow.  However, does it work for other cases?
        {if (result >= Grid.RowCount) then
        begin
          result := Grid.RowCount - 1
        end; }
      end;
    eaNodes:
      begin
      end;
  else
    Assert(False);
  end;
//  if result > Grid.RowCount then
//  begin
//    result := Grid.RowCount
//  end;
end;

function TScreenObject.DataSetUsed(const DataSet: TDataArray;
  var OtherData: TObject; AModel: TBaseModel): boolean;
var
  DataSetIndex: integer;
  CouldBeBoundary: boolean;
  TestDataArray: TDataArray;
  LocalModel: TPhastModel;
begin
  if DataSet is TSparseArrayPhastInterpolationDataSet then
  begin
    result := True;
  end
  else if DataSet is TCustomPhastDataSet then
  begin
    OtherData := nil;
    CouldBeBoundary := False;
    DataSetIndex := IndexOfDataSet(DataSet);
    if DataSetIndex < 0 then
    begin
      CouldBeBoundary := True;
      DataSetIndex := IndexOfBoundaryDataSet(DataSet);
    end;
    result := DataSetIndex >= 0;
    if result and not CouldBeBoundary then
    begin
      OtherData := FInterpValues.Items[DataSetIndex] as TInterpValuesItem;
    end;
  end
  else
  begin
    OtherData := nil;
    TestDataArray := GetTestDataArray(DataSet);

    LocalModel := Model as TPhastModel;
    result := (IndexOfDataSet(TestDataArray) >= 0)
      or (IndexOfBoundaryDataSet(TestDataArray) >= 0)
      or (TestDataArray = LocalModel.TopBoundaryType)
      or (TestDataArray = LocalModel.FrontBoundaryType)
      or (TestDataArray = LocalModel.SideBoundaryType)
      or (TestDataArray = LocalModel.Top2DBoundaryType);
    if result then
    begin
      if (TestDataArray = LocalModel.TopBoundaryType)
        or (TestDataArray = LocalModel.FrontBoundaryType)
        or (TestDataArray = LocalModel.SideBoundaryType) then
      begin
        result := PhastBoundaryType in [btSpecifiedHead, btFlux, btLeaky]
      end
      else if (TestDataArray = LocalModel.Top2DBoundaryType) then
      begin
        result := PhastBoundaryType in [btRiver, btWell];
      end;
    end;
  end;
end;

function TScreenObject.GetBoundaryDataSetFormulas(
  const Index: integer): string;
var
  FormulaObject: IFormulaObject;
begin
  Assert(FBoundaryDataSetFormulas <> nil);
  FormulaObject := FBoundaryDataSetFormulas[Index];
  if FormulaObject = nil then
  begin
    result := '0';
  end
  else
  begin
    result := FormulaObject.Formula;
  end;
//  result := FBoundaryDataSetFormulas[Index];
end;

procedure TScreenObject.SetBoundaryDataSetFormulas(const Index: integer;
  const Value: string);
var
  Observer: TObserver;
  OldUseList: TStringList;
  NewUseList: TStringList;
  UseIndex: integer;
  OtherIndex: integer;
  AFunction, OldFunction: string;
  Compiler: TRbwParser;
  ADataSet: TDataArray;
  DS: TObserver;
  AFormulaObject: IFormulaObject;
begin
  Assert(FBoundaryDataSetFormulas <> nil);
  AFormulaObject := FBoundaryDataSetFormulas[Index];
  if AFormulaObject = nil then
  begin
    AFunction := '';
  end
  else
  begin
    AFunction := AFormulaObject.Formula;
  end;
//  AFunction := FBoundaryDataSetFormulas[Index];
  Observer := nil;
  if AFunction <> Value then
  begin
    if FCanInvalidateModel then
    begin
      InvalidateModel;
      OldFunction := AFunction;
      try
        ADataSet := FBoundaryDataSets[Index];
        Assert(FBoundaryDataSetSubscriptions <> nil);
        Observer := FBoundaryDataSetSubscriptions[Index] as TObserver;
        OldUseList := TStringList.Create;
        NewUseList := TStringList.Create;
        try
          Compiler := GetCompiler(ADataSet.Orientation,
            ADataSet.EvaluatedAt);
          if AFunction = '' then
          begin
            AFunction := '0'
          end;
          try
            Compiler.Compile(AFunction);
            OldUseList.Assign(Compiler.CurrentExpression.VariablesUsed);
          except on E: ERbwParserError do
              OldUseList.Clear;
          end;

          AFunction := Value;
          Compiler.Compile(AFunction);
          NewUseList.Assign(Compiler.CurrentExpression.VariablesUsed);

          CreateOrRetrieveBoundaryFormulaObject(Index, ADataSet, AFormulaObject);
          frmGoPhast.PhastModel.FormulaManager.ChangeFormula(
            AFormulaObject, Compiler.CurrentExpression.Decompile, Compiler,
            GlobalRemoveBoundaryDataArraySubscription,
            GlobalRestoreBoundaryDataArraySubscription, self);
          FBoundaryDataSetFormulas[Index]:= AFormulaObject;

          for UseIndex := OldUseList.Count - 1 downto 0 do
          begin
            OtherIndex := NewUseList.IndexOf(OldUseList[UseIndex]);
            if OtherIndex >= 0 then
            begin
              OldUseList.Delete(UseIndex);
              NewUseList.Delete(OtherIndex);
            end;
          end;
          for UseIndex := 0 to OldUseList.Count - 1 do
          begin
            DS := (FModel as TPhastModel).GetObserverByName(
              OldUseList[UseIndex]);
            Assert(DS <> nil);
            DS.StopsTalkingTo(Observer);
          end;
          for UseIndex := 0 to NewUseList.Count - 1 do
          begin
            DS := (FModel as TPhastModel).GetObserverByName(
              NewUseList[UseIndex]);
            Assert(DS <> nil);
            DS.TalksTo(Observer);
          end;
          Invalidate;
        finally
          OldUseList.Free;
          NewUseList.Free;
        end;

        if not (csDestroying in Model.ComponentState)
          and not (FModel as TPhastModel).Clearing then
        begin
          Observer.UpToDate := True;
          Observer.UpToDate := False;
          BoundaryDataSets[Index].Invalidate;
          Observer.UpToDate := True;
        end;
      finally
        if not (csDestroying in Model.ComponentState)
          and not (FModel as TPhastModel).Clearing then
        begin
          if Observer.IsRecursive then
          begin
            BoundaryDataSetFormulas[Index] := OldFunction;
          end;
        end;
      end;
    end
    else
    begin
      ADataSet := BoundaryDataSets[Index];
      Compiler := frmGoPhast.PhastModel.GetCompiler(ADataSet.Orientation,
        ADataSet.EvaluatedAt);
      CreateOrRetrieveBoundaryFormulaObject(Index, ADataSet, AFormulaObject);
      frmGoPhast.PhastModel.FormulaManager.ChangeFormula(
        AFormulaObject, Value, Compiler,
        GlobalRemoveBoundaryDataArraySubscription,
        GlobalRestoreBoundaryDataArraySubscription, self);
      FBoundaryDataSetFormulas[Index] := AFormulaObject;
    end;
  end;
end;

function TScreenObject.GetBoundaryDataSets(const Index: integer): TDataArray;
begin
  Assert(FBoundaryDataSets <> nil);
  result := FBoundaryDataSets[Index];
end;

procedure TScreenObject.SetBoundaryDataSets(const Index: integer;
  const DataSet: TDataArray);
var
  OldIndex: integer;
  FormulaObject: IFormulaObject;
begin
  CreateBoundaryDataSets;
  // Determine the position of DataSet in FDataSets.
  // If OldIndex < 0, DataSet is not in FDataSets.
  OldIndex := FBoundaryDataSets.IndexOf(DataSet);

  // Store DataSet.
  FBoundaryDataSets[Index] := DataSet;
  if (OldIndex >= 0) and (OldIndex <> Index) then
  begin
    // If DataSet was already in FDataSets, move it's funciton
    // to the new position and delete the old copy of both the
    // data set and the function.
    Assert(FBoundaryDataSetFormulas <> nil);
    FBoundaryDataSetFormulas[Index] := FBoundaryDataSetFormulas[OldIndex];
    FBoundaryDataSets.Delete(OldIndex);
    FormulaObject := FBoundaryDataSetFormulas[OldIndex];
    frmGoPhast.PhastModel.FormulaManager.Remove(FormulaObject,
      GlobalRemoveBoundaryDataArraySubscription,
      GlobalRestoreBoundaryDataArraySubscription, self);
    FBoundaryDataSetFormulas.Delete(OldIndex);
  end;
  InvalidateModel;
end;

procedure TScreenObject.ResetBoundaryDataSetSubscriptions;
var
  Index: integer;
  Subscription: TObserver;
begin
  if FBoundaryDataSetSubscriptions <> nil then
  begin
    for Index := 0 to FBoundaryDataSetSubscriptions.Count - 1 do
    begin
      Subscription := FBoundaryDataSetSubscriptions[Index] as TObserver;
      Subscription.UpToDate := True;
    end;
  end;
end;

procedure TScreenObject.ClearBoundaryDataSets;
var
  Index: integer;
  ADataSet: TDataArray;
  Observer: TObserver;
  FormulaObject: IFormulaObject;
begin
  CreateBoundaryDataSetSubscriptions;
  CreateBoundaryDataSets;
  Assert(FBoundaryDataSetSubscriptions.Count = FBoundaryDataSets.Count);
  for Index := 0 to FBoundaryDataSets.Count - 1 do
  begin
    // Get rid of any subscriptions due to the formula.
    BoundaryDataSetFormulas[Index] := '0';
    ADataSet := FBoundaryDataSets[Index];
    Observer := FBoundaryDataSetSubscriptions[Index] as TObserver;
    if FElevSubscription <> nil then
    begin
      FElevSubscription.StopsTalkingTo(ADataSet);
    end;
    if FTopElevSubscription <> nil then
    begin
      FTopElevSubscription.StopsTalkingTo(ADataSet);
    end;
    if FBottomElevSubscription <> nil then
    begin
      FBottomElevSubscription.StopsTalkingTo(ADataSet);
    end;
    self.StopsTalkingTo(ADataSet);
    Observer.StopsTalkingTo(ADataSet);
  end;

  UpToDate := False;
  FBoundaryDataSets.Clear;
  if FBoundaryDataSetFormulas <> nil then
  begin
    for Index := 0 to FBoundaryDataSetFormulas.Count - 1 do
    begin
      FormulaObject := FBoundaryDataSetFormulas[Index];
      frmGoPhast.PhastModel.FormulaManager.Remove(FormulaObject,
        GlobalRemoveBoundaryDataArraySubscription,
        GlobalRestoreBoundaryDataArraySubscription, self);
    end;
    FBoundaryDataSetFormulas.Clear;
  end;
  for Index := 0 to FBoundaryDataSetSubscriptions.Count -1 do
  begin
    Observer := FBoundaryDataSetSubscriptions[Index] as TObserver;
    self.StopsTalkingTo(Observer);
  end;
  FBoundaryDataSetSubscriptions.Clear;
  InvalidateModel;
end;

procedure TScreenObject.InsertBoundaryDataSet(const Index: Integer;
  const DataSet: TDataArray);
var
  Subscription: TObserver;
begin
  CreateBoundaryDataSets;
  if FBoundaryDataSets.IndexOf(DataSet) < 0 then
  begin
    InvalidateModel;
    Subscription := TObserver.Create(nil);
    Subscription.UpdateWithName(DataSet.Name + Name);
    CreateBoundaryDataSetSubscriptions;
    FBoundaryDataSetSubscriptions.Insert(Index, Subscription);

    FBoundaryDataSets.Insert(Index, DataSet);
    CreateBoundaryDataSetFormulas;
    FBoundaryDataSetFormulas.Insert(Index, nil);
    self.TalksTo(DataSet);
    Subscription.TalksTo(DataSet);
    self.TalksTo(Subscription);
    case ElevationCount of
      ecZero:
        begin
          // do nothing
        end;
      ecOne:
        begin
          if FElevSubscription = nil then
          begin
            CreateElevationSubscription;
          end;
          FElevSubscription.TalksTo(DataSet);
        end;
      ecTwo:
        begin
          if FTopElevSubscription = nil then
          begin
            CreateTopElevationSubscription;
          end;
          FTopElevSubscription.TalksTo(DataSet);

          if FBottomElevSubscription = nil then
          begin
            CreateBottomElevationSubscription;
          end;
          FBottomElevSubscription.TalksTo(DataSet);
        end;
    else
      Assert(False);
    end;
    DataSet.Invalidate;
  end;
end;

function TScreenObject.GetEdgePoints(const Index: integer): TEdgePoint;
var
  RealPoint: TPoint2D;
begin
  RealPoint := Points[Index];
  result.X := RealPoint.X;
  result.Y := RealPoint.Y;
  result.Position := epMiddle;
end;

function TScreenObject.GetElevSubscription: TObserver;
begin
  if FElevSubscription = nil then
  begin
    CreateElevationSubscription;
  end;
  result := FElevSubscription;
end;

procedure TScreenObject.SetEdgePoints(const Index: integer;
  const Value: TEdgePoint);
var
  RealPoint: TPoint2D;
begin
  RealPoint.X := Value.X;
  RealPoint.Y := Value.Y;
  Points[Index] := RealPoint;
end;

procedure TScreenObject.SetName(const Value: TComponentName);
begin
  inherited;
  InvalidateModel;
end;

procedure TScreenObject.SetObjectLabel(const Value: TObjectLabel);
begin
  FObjectLabel.Assign(Value);
end;

procedure TScreenObject.SetObjectVertexLabel(const Value: TObjectVertexLabel);
begin
  FObjectVertexLabel.Assign(Value);
end;

procedure TScreenObject.ResetSubscriptions;
begin
  ResetBoundaryDataSetSubscriptions;
  ResetDataSetSubscriptions;

  ResetMixtureSubscriptions;
  ResetBoundaryMixtureSubscriptions;
end;

procedure TScreenObject.SetVisible(const Value: boolean);
begin
  if FVisible <> Value then
  begin
    FVisible := Value;
    if not Value then
    begin
      Selected := False;
      CacheElevationArrays;
    end;
    RefreshGui(self);
  end;
end;

procedure TScreenObject.BeginUpdate;
begin
  Inc(FUpdateCount);
end;

function TScreenObject.BoundaryDataSetCount: integer;
begin
  if FBoundaryDataSets = nil then
  begin
    result := 0;
  end
  else
  begin
    result := FBoundaryDataSets.Count;
  end;
end;

procedure TScreenObject.Assign3DElevationsFromSide(const Compiler: TRbwParser;
  const SparseArray: T3DSparseRealArray; AModel: TBaseModel);
var
  TempMinX, TempMaxX: double;
  FirstRow, LastRow, FirstLayer, LastLayer: integer;
  LayerIndex, RowIndex: integer;
  CellLocation3D: T3DRealPoint;
  Expression: TExpression;
  SegmentIndex: NativeInt;
  ASegment: TCellElementSegment;
  FirstColumn, LastColumn, ColIndex: integer;
  Grid: TCustomModelGrid;
  SectionIndex: Integer;
  TempImportedElevations : TValueArrayStorage;
  VariableList, DataSetList: TList;
begin
  VariableList := TList.Create;
  DataSetList := TList.Create;
  TempImportedElevations := CurrentValues;
  try
    Grid := (AModel as TCustomModel).Grid;
    Expression := Compiler.CurrentExpression;
    InitializeUsedDataSets(AModel as TCustomModel, Compiler, Expression,
      VariableList, DataSetList);
    if (SetValuesOfEnclosedCells or SetValuesOfIntersectedCells)
      and Closed then
    begin

      // Get the coordinates of the points after rotating them to the grid
      // coordinate system.
      // Even though the last point and first point are identical,
      // the last point still has to be transformed for use with
      // the intersected points.

      TempMinX := MinY;
      TempMaxX := MaxY;

      GetRows(Grid, TempMinX, TempMaxX, FirstRow, LastRow);
      if FirstRow > Grid.RowCount then
      begin
        FirstRow := Grid.RowCount;
      end;
      if LastRow > Grid.RowCount then
      begin
        LastRow := Grid.RowCount;
      end;

      FirstLayer := -1;
      LastLayer := -1;
      case EvaluatedAt of
        eaBlocks:
          begin
            FirstLayer := 0;
            LastLayer := Grid.LayerCount -1;
          end;
        eaNodes:
          begin
            FirstLayer := 0;
            LastLayer := Grid.LayerCount;
          end;
        else Assert(False);
      end;
      FirstColumn := -1;
      LastColumn := -1;
      case EvaluatedAt of
        eaBlocks:
          begin
            FirstColumn := 0;
            LastColumn := Grid.ColumnCount -1;
          end;
        eaNodes:
          begin
            FirstColumn := 0;
            LastColumn := Grid.ColumnCount;
          end;
        else Assert(False);
      end;

      Assert((FirstRow >= 0) and (LastRow >= 0) and (FirstLayer >= 0)
        and (LastLayer >= 0));
      // Find the cells inside the screen object and color them.
      for ColIndex := FirstColumn to LastColumn do
      begin
        for RowIndex := FirstRow to LastRow do
        begin
          for LayerIndex := FirstLayer to LastLayer do
          begin
            case EvaluatedAt of
              eaBlocks:
                begin
                  CellLocation3D := Grid.ThreeDElementCenter(ZeroBasedID(
                    LayerIndex, RowIndex, ColIndex));
                end;
              eaNodes:
                begin
                  CellLocation3D := Grid.ThreeDElementCorner(ZeroBasedID(
                      LayerIndex, RowIndex, ColIndex));
                end;
            else
              Assert(False);
            end;

            if IsPointInside(CellLocation3D.Z, CellLocation3D.Y,
              SectionIndex) then
            begin
              UpdateUsedVariables(VariableList, DataSetList,
                LayerIndex, RowIndex, ColIndex);
              UpdateCurrentScreenObject(self);
              UpdateGlobalLocations(ColIndex, RowIndex, LayerIndex, EvaluatedAt,
                AModel);
              UpdateCurrentSection(SectionIndex);
              FCurrentValues := TempImportedElevations;
              Expression.Evaluate;
        
              SparseArray.Items[LayerIndex, RowIndex, ColIndex] :=
                Expression.DoubleResult;
            end;
          end;
        end
      end;
    end;
    if SetValuesOfIntersectedCells then
    begin
//      if not Segments.UpToDate then
//      begin
//        UpdateSideSegments(Grid, EvaluatedAt);
//      end;
      // set values here
      for SegmentIndex := 0 to Segments[AModel].Count - 1 do
      begin
        ASegment := Segments[AModel][SegmentIndex];
        UpdateCurrentSegment(ASegment);

        if not SparseArray.IsValue[ASegment.Layer, ASegment.Row,
          ASegment.Col] or (FAssignmentLocation = alLastVertex) then
        begin
          UpdateUsedVariables(VariableList, DataSetList,
            ASegment.Layer, ASegment.Row, ASegment.Col);
          UpdateCurrentScreenObject(self);
          UpdateCurrentSegment(ASegment);
          UpdateGlobalLocations(ASegment.Col, ASegment.Row, ASegment.Layer,
            EvaluatedAt, AModel);
          UpdateCurrentSection(ASegment.SectionIndex);
          FCurrentValues := TempImportedElevations;
          Expression.Evaluate;

          SparseArray.Items[ASegment.Layer, ASegment.Row, ASegment.Col] :=
            Expression.DoubleResult;
        end;
      end;
    end;
  finally
    FCurrentValues := TempImportedElevations;
    VariableList.Free;
    DataSetList.Free;
  end;
end;

procedure TScreenObject.Assign3DElevations(Formula: string;
  const SparseArray: T3DSparseRealArray; AModel: TBaseModel);
var
  Orientation: TDataSetOrientation;
  Compiler: TRbwParser;
begin
  Orientation := dsoTop;
  case ViewDirection of
    vdTop: Orientation := dsoTop;
    vdFront: Orientation := dsoFront;
    vdSide: Orientation := dsoSide;
  else
    Assert(False);
  end;
  Compiler := GetCompiler(Orientation);

  Compiler.Compile(Formula);

  case ViewDirection of
    vdTop: Assign3DElevationsFromTop(Compiler, SparseArray, AModel);
    vdFront: Assign3DElevationsFromFront(Compiler, SparseArray, AModel);
    vdSide: Assign3DElevationsFromSide(Compiler, SparseArray, AModel);
  else
    Assert(False);
  end;
end;

procedure TScreenObject.GetModelDimensions(AModel: TBaseModel;
  var NumberOfLayers, NumberOfRows, NumberOfColumns: Integer);
var
  LocalModel: TCustomModel;
  Mesh: TSutraMesh3D;
  Grid: TCustomModelGrid;
  MeshI: IMesh3D;
begin
  if AModel = nil then
  begin
    NumberOfLayers := 0;
    NumberOfRows := 0;
    NumberOfColumns := 0;
  end
  else
  begin
    LocalModel := AModel as TCustomModel;
    if LocalModel.ModelSelection in SutraSelection then
    begin
      Mesh := LocalModel.SutraMesh;
      if Mesh <> nil then
      begin

        if ((LocalModel.Mesh as TSutraMesh3D).MeshType = mt3D)
          and (EvaluatedAt = eaNodes)
          {and (Orientation = dso3D)} then
        begin
          NumberOfLayers := frmGoPhast.PhastModel.
            SutraLayerStructure.LayerCount+1;
        end
        else
        begin
          NumberOfLayers := frmGoPhast.PhastModel.
            SutraLayerStructure.LayerCount;
        end;
        NumberOfRows := 1;
        case EvaluatedAt of
          eaBlocks: NumberOfColumns := Mesh.Mesh2D.Elements.Count;
          eaNodes: NumberOfColumns := Mesh.Mesh2D.Nodes.Count;
          else Assert(False);
        end;
      end
      else
      begin
        NumberOfLayers := 0;
        NumberOfRows := 0;
        NumberOfColumns := 0;
      end;
    end
    else
    begin
      Grid := LocalModel.Grid;
      if Grid <> nil then
      begin
        case EvaluatedAt of
          eaBlocks:
            begin
              NumberOfLayers := Grid.LayerCount;
              NumberOfRows := Grid.RowCount;
              NumberOfColumns := Grid.ColumnCount;
            end;
          eaNodes:
            begin
              NumberOfLayers := Grid.LayerCount+1;
              NumberOfRows := Grid.RowCount+1;
              NumberOfColumns := Grid.ColumnCount+1;
            end;
        end;
      end
      else
      begin
        MeshI := LocalModel.Mesh3D;
        case EvaluatedAt of
          eaBlocks:
            begin
              NumberOfLayers := MeshI.LayerCount;
              NumberOfRows := 1;
              NumberOfColumns := MeshI.Mesh2DI.ElementCount;
            end;
          eaNodes:
            begin
              NumberOfLayers := MeshI.LayerCount+1;
              NumberOfRows := 1;
              NumberOfColumns := MeshI.Mesh2DI.NodeCount;
            end;
        end;
      end;
    end;
  end;
end;

procedure TScreenObject.AssignHigher3DElevations(AModel: TBaseModel);
var
  Formula: string;
  TempValues: TValueArrayStorage;
  NumberOfLayers: Integer;
  NumberOfRows: Integer;
  NumberOfColumns: Integer;
begin
  Assert(ElevationCount <> ecZero);
  FSegments := FSegModelAssoc.AssociatedSegmentList[AModel];
  FSegments.FHigher3DElevations.Free;
  GetModelDimensions(AModel, NumberOfLayers, NumberOfRows, NumberOfColumns);
  FSegments.FHigher3DElevations := T3DSparseCacheableRealArray.Create(
    GetQuantum(NumberOfLayers), GetQuantum(NumberOfRows), GetQuantum(NumberOfColumns));

  FSegments.FHigher3DElevations.Clear;
  TempValues := FCurrentValues;
  try
    case ElevationCount of
      ecOne:
        begin
          Formula := ElevationFormula;
          FCurrentValues := ImportedSectionElevations;
        end;
      ecTwo:
        begin
          Formula := HigherElevationFormula;
          FCurrentValues := ImportedHigherSectionElevations;
        end
    else
      Assert(False);
    end;
    try
      Assign3DElevations(Formula, FSegments.FHigher3DElevations, AModel);
    except on E: ERbwParserError do
      begin
        case ElevationCount of
          ecOne:
            begin
              ResetElevationFormula(nil, E.Message);
              Formula := ElevationFormula;
            end;
          ecTwo:
            begin
              ResetTopElevationFormula(nil, E.Message);
              Formula := HigherElevationFormula;
            end;
        else
          Assert(False);
        end;
        Assign3DElevations(Formula, FSegments.FHigher3DElevations, AModel);
      end;
    end;
  finally
    FCurrentValues := TempValues;
  end;
  FSegments.FHigher3DElevationsNeedsUpdating := False;
end;

procedure TScreenObject.AssignLower3DElevations(AModel: TBaseModel);
var
  Formula: string;
  TempValues: TValueArrayStorage;
  NumberOfLayers: Integer;
  NumberOfRows: Integer;
  NumberOfColumns: Integer;
begin
  Assert(ElevationCount = ecTwo);
  FSegments := FSegModelAssoc.AssociatedSegmentList[AModel];
  FSegments.FLower3DElevations.Free;
  GetModelDimensions(AModel, NumberOfLayers, NumberOfRows, NumberOfColumns);
  FSegments.FLower3DElevations := T3DSparseCacheableRealArray.Create(
    GetQuantum(NumberOfLayers), GetQuantum(NumberOfRows), GetQuantum(NumberOfColumns));

  FSegments.FLower3DElevations.Clear;
  Formula := LowerElevationFormula;
  TempValues := FCurrentValues;
  try
    try
      FCurrentValues := ImportedLowerSectionElevations;
      Assign3DElevations(Formula, FSegments.FLower3DElevations, AModel);
    except on E: ERbwParserError do
      begin
        ResetBottomElevationFormula(nil, E.Message);
        Formula := LowerElevationFormula;
        Assign3DElevations(Formula, FSegments.FLower3DElevations, AModel);
      end;
    end;
  finally
    FCurrentValues := TempValues;
  end;
  FSegments.FLower3DElevationsNeedsUpdating := False;
end;

function TScreenObject.GetHigher3DElevations(AModel: TBaseModel): T3DSparseRealArray;
begin
  UpdateHigher3DElevations(AModel);
  FSegments := FSegModelAssoc.AssociatedSegmentList[AModel];
  result := FSegments.FHigher3DElevations;
end;

function TScreenObject.GetHigherElevationFormula: string;
begin
  if ElevationCount = ecTwo then
  begin
    if FHigherElevationFormulaObject = nil then
    begin
      CreateHigherElevationFormulaObject;
    end;
    result := FHigherElevationFormulaObject.Formula
  end
  else
  begin
    result := '0.'
  end;
end;

function TScreenObject.GetLower3DElevations(AModel: TBaseModel): T3DSparseRealArray;
begin
  UpdateLower3DElevations(AModel);
  FSegments := FSegModelAssoc.AssociatedSegmentList[AModel];
  result := FSegments.FLower3DElevations;
end;

function TScreenObject.GetLowerElevationFormula: string;
begin
  if ElevationCount = ecTwo then
  begin
    if FLowerElevationFormulaObject = nil then
    begin
      CreateLowerElevationFormulaObject
    end;
    result := FLowerElevationFormulaObject.Formula
  end
  else
  begin
    result := '0.'
  end;
end;

procedure TScreenObject.SubPolygonXLimits(Subject: TObject;
  out LowerBoundary, UpperBoundary: double);
var
  SubPolygon: TSubPolygon;
begin
  SubPolygon := TSubPolygon(Subject);
  LowerBoundary := SubPolygon.MinX;
  UpperBoundary := SubPolygon.MaxX;
end;

procedure TScreenObject.SubPolygonYLimits(Subject: TObject;
  out LowerBoundary, UpperBoundary: double);
var
  SubPolygon: TSubPolygon;
begin
  SubPolygon := TSubPolygon(Subject);
  LowerBoundary := SubPolygon.MinY;
  UpperBoundary := SubPolygon.MaxY;
end;

function TScreenObject.IsPointInside(const X, Y: real;
  out SectionIndex: integer): boolean;
var
  Index: Integer;
  SubPolygon: TSubPolygon;
  ExistingResult: boolean;
  IntDefArray: TIntDefArray;
  List: TList;
  PointArray: TOneDRealArray;
begin
  result := false;
  ExistingResult := False;
  if Deleted then
  begin
    Exit;
  end;
  if not Closed then
  begin
    // If the screen object is not closed, nothing can be inside it.
    Exit;
  end;

  // Make a quick check to make sure it might possibly be inside
  // the screen object.
  if not InsideBox(X, Y) then
  begin
    Exit;
  end;

  if SubPolygonCount = 0 then
  begin
    CreateSubPolygons;
  end;
  Assert(SubPolygonCount = SectionCount);

  SectionIndex := -1;
  if SectionCount > 25 then
  begin
    if FIntervalTree = nil then
    begin
      SetLength(IntDefArray, 2);
      IntDefArray[0].LowerBoundary := MinX;
      IntDefArray[0].UpperBoundary := MaxX;
      IntDefArray[0].OnFindObjectInterval := SubPolygonXLimits;
      IntDefArray[1].LowerBoundary := MinY;
      IntDefArray[1].UpperBoundary := MaxY;
      IntDefArray[1].OnFindObjectInterval := SubPolygonYLimits;
      FIntervalTree := TRbwIntervalTree.Create(IntDefArray);
      for Index := 0 to SubPolygonCount - 1 do
      begin
        if SectionClosed[Index] then
        begin
          FIntervalTree.Add(SubPolygons[Index]);
        end;
      end;
    end;
    List := TList.Create;
    try
      SetLength(PointArray, 2);
      PointArray[0] := X;
      PointArray[1] := Y;
      FIntervalTree.FindContainingObjects(PointArray, List);
      for Index := 0 to List.Count - 1 do
      begin
        SubPolygon := List[Index];
        Assert( SectionClosed[SubPolygon.SectionIndex]);
        EvaluateSubPolygon(SubPolygon, X, Y, result);
        if result and (ExistingResult <> result) then
        begin
          SectionIndex := SubPolygon.SectionIndex;
        end;
        ExistingResult := result;
      end;
    finally
      List.Free;
    end;
  end
  else
  begin
    for Index := 0 to SubPolygonCount - 1 do
    begin
      if SectionClosed[Index] then
      begin
        SubPolygon := SubPolygons[Index];
        EvaluateSubPolygon(SubPolygon, X, Y, result);
        if result and (ExistingResult <> result) then
        begin
          SectionIndex := Index;
        end;
        ExistingResult := result;
      end;
    end;
  end;
end;

procedure TScreenObject.CreateSubObservations;
var
  InvalidateModelEvent: TNotifyEvent;
begin
  if (ModflowBoundaries.FModflowSubObservations = nil) then
  begin
    if FModel = nil then
    begin
      InvalidateModelEvent := nil;
    end
    else
    begin
      InvalidateModelEvent := FModel.DoInvalidate;
    end;
    ModflowBoundaries.FModflowSubObservations := TSubObservations.Create(InvalidateModelEvent, self);
  end;
end;

procedure TScreenObject.CreateSubPolygons;
var
  Index: Integer;  
  SubPolygon : TSubPolygon;
begin
  ClearSubPolygons;
  if SectionCount > 0 then
  begin
    if FSubPolygons = nil then
    begin
      FSubPolygons:= TObjectList.Create;
    end;
  end;
  for Index := 0 to SectionCount - 1 do
  begin
    SubPolygon := TSubPolygon.Create(FPoints, SectionLength[Index],
      SectionStart[Index], Index);
    FSubPolygons.Add(SubPolygon);
  end;
end;

procedure TScreenObject.CreateSwiObsBoundary;
begin
  if (ModflowBoundaries.FModflowSwiObsBoundary = nil) then
  begin
    ModflowBoundaries.FModflowSwiObsBoundary :=
      TSwiObsBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateSwrDirectRunoffBoundary;
begin
  if (ModflowBoundaries.FSwrDirectRunoff = nil) then
  begin
    ModflowBoundaries.FSwrDirectRunoff :=
      TSwrDirectRunoffBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateSwrEvapBoundary;
begin
  if (ModflowBoundaries.FSwrEvap = nil) then
  begin
    ModflowBoundaries.FSwrEvap := TSwrEvapBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateSwrLatInflowBoundary;
begin
  if (ModflowBoundaries.FSwrLatInflow = nil) then
  begin
    ModflowBoundaries.FSwrLatInflow := TSwrLatInflowBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateSwrRainBoundary;
begin
  if (ModflowBoundaries.FSwrRain = nil) then
  begin
    ModflowBoundaries.FSwrRain := TSwrRainBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateSwrReachesBoundary;
begin
  if (ModflowBoundaries.FSwrReaches = nil) then
  begin
    ModflowBoundaries.FSwrReaches := TSwrReachBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateSwrStageBoundary;
begin
  if (ModflowBoundaries.FSwrStage = nil) then
  begin
    ModflowBoundaries.FSwrStage := TSwrStageBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateSwtObservations;
var
  InvalidateModelEvent: TNotifyEvent;
begin
  if (ModflowBoundaries.FModflowSwtObservations = nil) then
  begin
    if FModel = nil then
    begin
      InvalidateModelEvent := nil;
    end
    else
    begin
      InvalidateModelEvent := FModel.DoInvalidate;
    end;
    ModflowBoundaries.FModflowSwtObservations := TSwtObservations.Create(InvalidateModelEvent, self);
  end;
end;

procedure TScreenObject.ClearSubPolygons;
begin
  FreeAndNil(FSubPolygons);
  FreeAndNil(FIntervalTree);
end;

function TScreenObject.GetSelectLines: TLines;
var
  MaxP, MinP: TPoint;
  Index: Integer;
  SelectLine: TLine;
  MaxX: double;
  MaxY: double;
  MinX: double;
  MinY: double;
  APoint: TPoint2D;
  Start: integer;
  PointIndex: Integer;
begin
  if FNeedToUpdateLine then
  begin
    FreeAndNil(FSelectLines);
    FSelectLines := TLines.Create;

    for Index := 0 to SectionCount - 1 do
    begin
      SelectLine := TLine.Create(0);
      FSelectLines.Add(SelectLine);
      SelectLine.AssignPoints(CanvasCoordinates);
      Start := SectionStart[Index];
      SelectLine.Start := Start;
      SelectLine.Count := SectionLength[Index];
      APoint := Points[Start];
      MaxX := APoint.X;
      MaxY := APoint.Y;
      MinX := MaxX;
      MinY := MaxY;
      for PointIndex := 1 to SectionLength[Index] - 1 do
      begin
        APoint := Points[Start+PointIndex];
        if MaxX < APoint.X then
        begin
          MaxX := APoint.X;
        end;
        if MinX > APoint.X then
        begin
          MinX := APoint.X;
        end;
        if MaxY < APoint.Y then
        begin
          MaxY := APoint.Y;
        end;
        if MinY > APoint.Y then
        begin
          MinY := APoint.Y;
        end;
      end;
      with ZoomBox(ViewDirection) do
      begin
        MaxP.X := XCoord(MaxX);
        MaxP.Y := YCoord(MaxY);
        MinP.X := XCoord(MinX);
        MinP.Y := YCoord(MinY);
      end;
      SelectLine.SetBox(MaxP, MinP);
    end;

    FNeedToUpdateLine := False;
  end;
  result := FSelectLines;
end;

function TScreenObject.Get_SetValuesByInterpolation: boolean;
begin
  result := FSetValuesByInterpolation and (ElevationCount = ecZero)
end;

function TScreenObject.GetSpecifiedHeadBoundary: TSpecifiedHeadBoundary;
begin
  CreatePhastSpecifiedHeadBoundary;
  result := FSpecifiedHeadBoundary;
end;

function TScreenObject.GetSpecifiedSolutionBoundary: TSpecifiedSolutionBoundary;
begin
  CreatePhastSpecifiedSolutionBoundary;
  result := FSpecifiedSolutionBoundary;
end;

function TScreenObject.Select(const XScreenCoordinate,
  YScreenCoordinate: integer): boolean;
var
  Index: integer;
  RealX, RealY: real;
  SectionIndex: Integer;
begin
  result := False;
  if Deleted or not Visible then
  begin
    Exit;
  end;

  for Index := 0 to Count - 1 do
  begin
    if (Abs(Int64(XScreenCoordinate) - Int64(CanvasCoordinates[Index].X)) <= SelectEpsilon)
      and (Abs(Int64(YScreenCoordinate) - Int64(CanvasCoordinates[Index].Y)) <= SelectEpsilon)
      then
    begin
      result := True;
      Exit;
    end;
  end;

  if Closed then
  begin
    with ZoomBox(ViewDirection) do
    begin
      RealX := X(XScreenCoordinate);
      RealY := Y(YScreenCoordinate);
    end;

    if IsPointInside(RealX, RealY, SectionIndex) then
    begin
      result := True;
      Exit;
    end;
  end;

  if SelectEdge(XScreenCoordinate, YScreenCoordinate) >= 0 then
    result := True;
end;

procedure TScreenObject.Set_SetValuesOfEnclosedCells(const Value: boolean);
begin
  if FSetValuesOfEnclosedCells <> Value then
  begin
    FSetValuesOfEnclosedCells := Value;
    InvalidateModel;
    Invalidate;
  end;
end;

procedure TScreenObject.Set_SetValuesOfIntersectedCells(const Value:
  boolean);
begin
  if FSetValuesOfIntersectedCells <> Value then
  begin
    FSetValuesOfIntersectedCells := Value;
    InvalidateModel;
    Invalidate;
  end;
end;

function TScreenObject.ShouldStorePointPositionValues: Boolean;
begin
  result := (FPointPositionValues <> nil) and (FPointPositionValues.Count > 0);
end;

procedure TScreenObject.SimplifyStraightEdges(AngleEpsilon, DistanceEpsilon: double);
var
  SectionIndex: Integer;
  PointIndex: Integer;
  StartIndex: Integer;
  Point1: TPoint2D;
  Point2: TPoint2D;
  Point3: TPoint2D;
//  Angle1: Extended;
//  Angle2: Extended;
//  DeltaAngle: Integer;
  ShouldDelete: Boolean;
  PointsRemoved: Boolean;
begin
  Assert((AngleEpsilon > 0) or (DistanceEpsilon > 0));
  repeat
  begin
  PointsRemoved := False;
  for SectionIndex := SectionCount - 1 downto 0 do
  begin
    if SectionLength[SectionIndex] >= 3 then
    begin
      StartIndex := SectionStart[SectionIndex];
      for PointIndex := SectionLength[SectionIndex] - 2 downto 1 do
      begin
        Point1 := Points[PointIndex-1 + StartIndex];
        Point2 := Points[PointIndex + StartIndex];
        Point3 := Points[PointIndex+1 + StartIndex];

        ShouldDelete := True;
        if DistanceEpsilon > 0 then
        begin
          ShouldDelete :=
            (FastGEO.Distance(Point1, Point2) < DistanceEpsilon) and
            (FastGEO.Distance(Point2, Point3) < DistanceEpsilon)
        end;
        if ShouldDelete and (AngleEpsilon > 0) then
        begin
          ShouldDelete :=
            (Abs(VertexAngle(Point1, Point2, Point3)) > AngleEpsilon)
        end;

        if ShouldDelete then
        begin
          DeletePoint(PointIndex + StartIndex);
          PointsRemoved := True;
        end;
      end;
    end;
  end;
  end;
  until not PointsRemoved;
end;

function TScreenObject.SingleCellLocation(AModel: TBaseModel): TCellLocation;
var
  LocalModel: TCustomModel;
//  Grid: TModflowGrid;
  CellList: TCellAssignmentList;
  Cell: TCellAssignment;
  LocalLayer: integer;
begin
  result.Layer := 0;
  result.Row := 1;
  result.Column := 1;
  if (Count <> 1) or (ElevationCount <> ecOne) or Deleted then
  begin
    Exit;
  end;
  LocalModel := AModel as TCustomModel;
//  Grid := LocalModel.ModflowGrid;
  CellList := TCellAssignmentList.Create;
  try
    GetCellsToAssign({Grid,} '', nil, nil, CellList, alAll, AModel);
    if CellList.Count = 1 then
    begin
      Cell := CellList[0];
      LocalLayer := LocalModel.
        DataSetLayerToModflowLayer(Cell.Layer);
      result.Layer := LocalLayer;
      result.Row := Cell.Row+1;
      result.Column := Cell.Column+1;
    end;
  finally
    CellList.Free;
  end;
end;

procedure TScreenObject.SetColorLine(const Value: boolean);
begin
  if FColorLine <> Value then
  begin
    FColorLine := Value;
    InvalidateModel;
  end;
end;

procedure TScreenObject.SetComment(const Value: string);
begin
  if FComment <> Value then
  begin
    FComment := Value;
    InvalidateModel;
  end;
end;

procedure TScreenObject.SetFillScreenObject(const Value: boolean);
begin
  if FFillScreenObject <> Value then
  begin
    FFillScreenObject := Value;
    InvalidateModel;
  end;
end;

function TScreenObject.GetLineColor: TColor;
begin
  Result := FLineColor;
end;

procedure TScreenObject.SetLineColor(const Value: TColor);
begin
  if FLineColor <> Value then
  begin
    FLineColor := Value;
    InvalidateModel;
  end;
end;

//procedure TScreenObject.SetLinkedChildModels(
//  const Value: TLinkedChildModelCollection);
//begin
//  FLinkedChildModels.Assign(Value);
//end;

procedure TScreenObject.RotatePoints(AModel: TBaseModel;
  out RotatedPoints: TEdgePointArray;
  out TempMinX, TempMinY, TempMaxX, TempMaxY: double);
var
  Index: integer;
  APoint: TPoint2D;
  EdgePoint: TEdgePoint;
  Grid: TCustomModelGrid;
begin
  Grid := (AModel as TCustomModel).Grid;
  SetLength(RotatedPoints, Count);
  TempMinX := 0;
  TempMinY := 0;
  TempMaxX := 0;
  TempMaxY := 0;
  for Index := 0 to Count - 1 do
  begin
    if Grid = nil then
    begin
      APoint := Points[Index];
    end
    else
    begin
      APoint := Grid.
        RotateFromRealWorldCoordinatesToGridCoordinates(Points[Index]);
    end;
    EdgePoint.X := APoint.X;
    EdgePoint.Y := APoint.Y;
    RotatedPoints[Index] := EdgePoint;

    if Index = 0 then
    begin
      TempMinX := APoint.X;
      TempMaxX := TempMinX;
      TempMinY := APoint.Y;
      TempMaxY := TempMinY;
    end
    else
    begin
      if APoint.X > TempMaxX then
      begin
        TempMaxX := APoint.X
      end
      else if APoint.X < TempMinX then
      begin
        TempMinX := APoint.X;
      end;

      if APoint.Y > TempMaxY then
      begin
        TempMaxY := APoint.Y
      end
      else if APoint.Y < TempMinY then
      begin
        TempMinY := APoint.Y;
      end;
    end;
  end;
end;

function TScreenObject.GetLayer(const Grid: TCustomModelGrid; const Z: real):
  integer;
begin
  Assert(EvaluatedAt = eaBlocks);
  result := (Grid as TPhastGrid).NearestLayerPosition(Z);

  if result < 0 then
  begin
    result := 0;
  end;
  if (result >= Grid.LayerCount) then
  begin
    result := Grid.LayerCount - 1
  end;
  if (result > 0) and
    ((Grid as TPhastGrid).LayerElevation[result] > Z) then
  begin
    Dec(result);
  end;
end;

procedure TScreenObject.GetLayers(const Grid: TCustomModelGrid;
  TempMinZ, TempMaxZ: real; out FirstLayer, LastLayer: integer);
var
  TempI: integer;
  Temp: real;
begin
  if (TempMinZ > TempMaxZ) then
  begin
    Temp := TempMaxZ;
    TempMaxZ := TempMinZ;
    TempMinZ := Temp;
  end;

  case EvaluatedAt of
    eaBlocks:
      begin
        FirstLayer := GetLayer(Grid, TempMinZ);
        LastLayer := GetLayer(Grid, TempMaxZ);
      end;
    eaNodes:
      begin
        FirstLayer := GetAPhastLayer(Grid, TempMinZ);
        LastLayer := GetAPhastLayer(Grid, TempMaxZ);
      end;
  else
    Assert(False);
  end;

  if (LastLayer < FirstLayer) then
  begin
    TempI := LastLayer;
    LastLayer := FirstLayer;
    FirstLayer := TempI;
  end;
end;

function TScreenObject.GetLeakyBoundary: TLeakyBoundary;
begin
  CreatePhastLeakyBoundary;
  result := FLeakyBoundary
end;

function TScreenObject.GetColumn(const Grid: TCustomModelGrid; const X: real):
  integer;
begin
  Assert(EvaluatedAt = eaBlocks);
  result := Grid.NearestColumnPosition(X);

  if result < 0 then
  begin
    result := 0;
  end;
  if (result >= Grid.ColumnCount) then
  begin
    result := Grid.ColumnCount - 1;
  end;
  if (result > 0) and
    (Grid.ColumnPosition[result] > X) then
  begin
    Dec(result);
  end;
end;

procedure TScreenObject.GetColumns(const Grid: TCustomModelGrid;
  TempMinX, TempMaxX: real; out FirstCol, LastCol: integer);
var
  TempI: integer;
  Temp: real;
begin
  if (TempMinX > TempMaxX) then
  begin
    Temp := TempMaxX;
    TempMaxX := TempMinX;
    TempMinX := Temp;
  end;

  case EvaluatedAt of
    eaBlocks:
      begin
        FirstCol := GetColumn(Grid, TempMinX);
        LastCol := GetColumn(Grid, TempMaxX);
      end;
    eaNodes:
      begin
        FirstCol := GetACol(Grid, TempMinX);
        LastCol := GetACol(Grid, TempMaxX);
      end;
  else
    Assert(False);
  end;

  if (LastCol < FirstCol) then
  begin
    TempI := LastCol;
    LastCol := FirstCol;
    FirstCol := TempI;
  end;
end;

function TScreenObject.GetCompiler(const Orientation: TDataSetOrientation;
  const EvaluatedAt: TEvaluatedAt): TRbwParser;
begin
  result := (FModel as TCustomModel).GetCompiler(Orientation, EvaluatedAt);
end;

function TScreenObject.GetRow(const Grid: TCustomModelGrid; const Y: real): integer;
begin
  Assert(EvaluatedAt = eaBlocks);
  result := Grid.NearestRowPosition(Y);

  if result < 0 then
  begin
    result := 0;
  end;
  if (result >= Grid.RowCount) then
  begin
    result := Grid.RowCount - 1
  end;
  case Grid.RowDirection of
    rdSouthToNorth:
      begin
        if (result > 0) and
          (Grid.RowPosition[result] > Y) then
        begin
          Dec(result);
        end;
      end;
    rdNorthToSouth:
      begin
        if (result > 0) and
          (Grid.RowPosition[result] < Y) then
        begin
          Dec(result);
        end;
      end;
      else Assert(False);
  end;
end;

procedure TScreenObject.GetRows(const Grid: TCustomModelGrid;
  TempMinY, TempMaxY: real; out FirstRow, LastRow: integer);
var
  TempI: integer;
  Temp: real;
begin
  if (TempMinY > TempMaxY) then
  begin
    Temp := TempMaxY;
    TempMaxY := TempMinY;
    TempMinY := Temp;
  end;

  case EvaluatedAt of
    eaBlocks:
      begin
        FirstRow := GetRow(Grid, TempMinY);
        LastRow := GetRow(Grid, TempMaxY);
      end;
    eaNodes:
      begin
        FirstRow := GetARow(Grid, TempMinY);
        LastRow := GetARow(Grid, TempMaxY);
      end;
  else
    Assert(False);
  end;

  if (LastRow < FirstRow) then
  begin
    TempI := LastRow;
    LastRow := FirstRow;
    FirstRow := TempI;
  end;
end;

procedure AdjustValues(const A1, ACenter, B1: double; var A2, B2: double);
var
  fraction: Double;
begin
  Assert(A1 <> A2);
  if ACenter = A2 then
  begin
    Exit;
  end;
  fraction := (ACenter - A1)/(A2 - A1);
  B2 := fraction*(B2-B1) + B1;
  A2 := ACenter;
end;

procedure TScreenObject.AddTopSubSegments(var ASegment: TCellElementSegment; AModel: TBaseModel);
var
  SubSeg: TSegment2D;
  ColCenter: Real;
  RowCenter: Real;
  SubSegIndex: Integer;
  ATempSeg, AnotherSeg: TTempSeg;
  TempSegList: TList;
  CModel: TBaseModel;
  procedure FillTempSegList;
  var
    SubSegIndex: integer;
  begin
    ATempSeg := TTempSeg.Create;
    TempSegList.Add(ATempSeg);
    ATempSeg.FSeg := SubSeg;

    if (SubSeg[1].x > ColCenter) and (SubSeg[2].x <= ColCenter) then
    begin
      for SubSegIndex := TempSegList.Count - 1 downto 0 do
      begin
        ATempSeg := TempSegList[SubSegIndex];
        if (ATempSeg.FSeg[1].x > ColCenter) and (ATempSeg.FSeg[2].x <= ColCenter) then
        begin
          AnotherSeg := TTempSeg.Create;
          TempSegList.Add(AnotherSeg);
          AnotherSeg.Assign(ATempSeg);
          AdjustValues(ATempSeg.FSeg[1].x, ColCenter, ATempSeg.FSeg[1].y,
            ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
          AdjustValues(AnotherSeg.FSeg[2].x, ColCenter, AnotherSeg.FSeg[2].y,
            AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
        end;
      end;
    end;
    if (SubSeg[2].x > ColCenter) and (SubSeg[1].x <= ColCenter) then
    begin
      for SubSegIndex := TempSegList.Count - 1 downto 0 do
      begin
        ATempSeg := TempSegList[SubSegIndex];
        if (ATempSeg.FSeg[2].x > ColCenter) and (ATempSeg.FSeg[1].x <= ColCenter) then
        begin
          AnotherSeg := TTempSeg.Create;
          TempSegList.Add(AnotherSeg);
          AnotherSeg.Assign(ATempSeg);
          AdjustValues(ATempSeg.FSeg[1].x, ColCenter, ATempSeg.FSeg[1].y,
            ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
          AdjustValues(AnotherSeg.FSeg[2].x, ColCenter, AnotherSeg.FSeg[2].y,
            AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
        end;
      end;
    end;
    if (SubSeg[1].y > RowCenter) and (SubSeg[2].y <= RowCenter) then
    begin
      for SubSegIndex := TempSegList.Count - 1 downto 0 do
      begin
        ATempSeg := TempSegList[SubSegIndex];
        if (ATempSeg.FSeg[1].y > RowCenter) and (ATempSeg.FSeg[2].y <= RowCenter) then
        begin
          AnotherSeg := TTempSeg.Create;
          TempSegList.Add(AnotherSeg);
          AnotherSeg.Assign(ATempSeg);
          AdjustValues(ATempSeg.FSeg[1].y, RowCenter, ATempSeg.FSeg[1].x,
            ATempSeg.FSeg[2].y, ATempSeg.FSeg[2].x);
          AdjustValues(AnotherSeg.FSeg[2].y, RowCenter, AnotherSeg.FSeg[2].x,
            AnotherSeg.FSeg[1].y, AnotherSeg.FSeg[1].x);
        end;
      end;
    end;
    if (SubSeg[2].y > RowCenter) and (SubSeg[1].y <= RowCenter) then
    begin
      for SubSegIndex := TempSegList.Count - 1 downto 0 do
      begin
        ATempSeg := TempSegList[SubSegIndex];
        if (ATempSeg.FSeg[2].y > RowCenter) and (ATempSeg.FSeg[1].y <= RowCenter) then
        begin
          AnotherSeg := TTempSeg.Create;
          TempSegList.Add(AnotherSeg);
          AnotherSeg.Assign(ATempSeg);
          AdjustValues(ATempSeg.FSeg[1].y, RowCenter, ATempSeg.FSeg[1].x,
            ATempSeg.FSeg[2].y, ATempSeg.FSeg[2].x);
          AdjustValues(AnotherSeg.FSeg[2].y, RowCenter, AnotherSeg.FSeg[2].x,
            AnotherSeg.FSeg[1].y, AnotherSeg.FSeg[1].x);
        end;
      end;
    end;
  end;
  procedure SetSubSegmentsFromList;
  var
    SubSegIndex: integer;
  begin
    ASegment.SetSubsegmentLength(TempSegList.Count);
    for SubSegIndex := 0 to TempSegList.Count - 1 do
    begin
      ATempSeg := TempSegList[SubSegIndex];
      ASegment.SubSegments[SubSegIndex] := ATempSeg.FSeg;
    end;
  end;
  procedure AdjustEdgeSegment(EdgeSegment: TCellElementSegment);
  begin
//    EdgeSegment.FSegment[2] := EdgeSegment.FSegment[1];
  end;
var
  PhastModel: TPhastModel;
  BoundaryCell: Boolean;
  LocalChildModel: TChildModel;
begin
  PhastModel := AModel as TPhastModel;
  BoundaryCell := PhastModel.IsChildModelEdgeColRow(ASegment.Col,
    ASegment.Row, ASegment.Layer, CModel);
  if not BoundaryCell then
  begin
    Exit;
  end;

  PhastModel := AModel as TPhastModel;
  LocalChildModel := CModel as TChildModel;

  SubSeg := ASegment.Segment;

  ColCenter := PhastModel.ModflowGrid.ColumnCenter(ASegment.Col);
  RowCenter := PhastModel.ModflowGrid.RowCenter(ASegment.Row);

  if ASegment.Col = LocalChildModel.FirstCol then
  begin
    if ASegment.Row = LocalChildModel.FirstRow then
    begin
      if (SubSeg[1].x = ColCenter) and (SubSeg[2].x = ColCenter)
        and (SubSeg[1].y <= RowCenter) and (SubSeg[2].y <= RowCenter) then
      begin
        ASegment.LgrEdge := True;
        Exit;
      end
      else if (SubSeg[1].x <= ColCenter) and (SubSeg[2].x <= ColCenter)
        and (SubSeg[1].y = RowCenter) and (SubSeg[2].y = RowCenter) then
      begin
        ASegment.LgrEdge := True;
        Exit;
      end
      else
      if (SubSeg[1].x >= ColCenter) and (SubSeg[2].x >= ColCenter)
        and (SubSeg[1].y <= RowCenter) and (SubSeg[2].y <= RowCenter) then
      begin
        AdjustEdgeSegment(ASegment);
        ASegment.LgrEdge := True;
//        FreeAndNil(ASegment);
        Exit;
      end;

      TempSegList := TObjectList.Create;
      try
        FillTempSegList;
        
        if TempSegList.Count = 1 then
        begin
          Exit;
        end;
        for SubSegIndex := TempSegList.Count - 1 downto 0 do
        begin
          ATempSeg := TempSegList[SubSegIndex];
          if ((ATempSeg.FSeg[1].x + ATempSeg.FSeg[2].x)/2 > ColCenter)
            and ((ATempSeg.FSeg[1].y + ATempSeg.FSeg[2].y)/2 < RowCenter) then
          begin
            TempSegList.Delete(SubSegIndex);
          end;
        end;

        SetSubSegmentsFromList;
        
      finally
        TempSegList.Free;
      end;
    end
    else if ASegment.Row = LocalChildModel.LastRow then
    begin
      if (SubSeg[1].x = ColCenter) and (SubSeg[2].x = ColCenter)
        and (SubSeg[1].y >= RowCenter) and (SubSeg[2].y >= RowCenter) then
      begin
        ASegment.LgrEdge := True;
        Exit;
      end
      else if (SubSeg[1].x >= ColCenter) and (SubSeg[2].x >= ColCenter)
        and (SubSeg[1].y >= RowCenter) and (SubSeg[2].y >= RowCenter) then
      begin
        ASegment.LgrEdge := True;
        Exit;
      end
      else
      if (SubSeg[1].x >= ColCenter) and (SubSeg[2].x >= ColCenter)
        and (SubSeg[1].y >= RowCenter) and (SubSeg[2].y >= RowCenter) then
      begin
        AdjustEdgeSegment(ASegment);
        ASegment.LgrEdge := True;
//        FreeAndNil(ASegment);
        Exit;
      end;

      TempSegList := TObjectList.Create;
      try
        FillTempSegList;
        
        if TempSegList.Count = 1 then
        begin
          Exit;
        end;
        for SubSegIndex := TempSegList.Count - 1 downto 0 do
        begin
          ATempSeg := TempSegList[SubSegIndex];
          if ((ATempSeg.FSeg[1].x + ATempSeg.FSeg[2].x)/2 > ColCenter)
            and ((ATempSeg.FSeg[1].y + ATempSeg.FSeg[2].y)/2 > RowCenter) then
          begin
            TempSegList.Delete(SubSegIndex);
          end;
        end;

        SetSubSegmentsFromList;
        
      finally
        TempSegList.Free;
      end;
    end
    else
    begin
      if SubSeg[1].x >= ColCenter then
      begin
        if SubSeg[2].x >= ColCenter then
        begin
          if (SubSeg[1].x = ColCenter) and (SubSeg[2].x = ColCenter) then
          begin
            ASegment.LgrEdge := True;
          end
          else
          begin
            AdjustEdgeSegment(ASegment);
            ASegment.LgrEdge := True;
//            FreeAndNil(ASegment);
          end;
          Exit;
        end
        else
        begin
          AdjustValues(SubSeg[2].x, ColCenter, SubSeg[2].y,
            SubSeg[1].x, SubSeg[1].y);
          ASegment.SetSubsegmentLength(1);
          ASegment.SubSegments[0] := SubSeg;
        end;
      end
      else
      begin
        if SubSeg[2].x > ColCenter then
        begin
          AdjustValues(SubSeg[1].x, ColCenter, SubSeg[1].y,
            SubSeg[2].x, SubSeg[2].y);
          ASegment.SetSubsegmentLength(1);
          ASegment.SubSegments[0] := SubSeg;
        end;
      end;
    end;
  end
  else if ASegment.Col = LocalChildModel.LastCol then
  begin
    if ASegment.Row = LocalChildModel.FirstRow then
    begin
      if (SubSeg[1].x = ColCenter) and (SubSeg[2].x = ColCenter)
        and (SubSeg[1].y <= RowCenter) and (SubSeg[2].y <= RowCenter) then
      begin
        ASegment.LgrEdge := True;
        Exit;
      end
      else if (SubSeg[1].x <= ColCenter) and (SubSeg[2].x <= ColCenter)
        and (SubSeg[1].y = RowCenter) and (SubSeg[2].y = RowCenter) then
      begin
        ASegment.LgrEdge := True;
        Exit;
      end
      else
      if (SubSeg[1].x <= ColCenter) and (SubSeg[2].x <= ColCenter)
        and (SubSeg[1].y <= RowCenter) and (SubSeg[2].y <= RowCenter) then
      begin
        AdjustEdgeSegment(ASegment);
        ASegment.LgrEdge := True;
//        FreeAndNil(ASegment);
        Exit;
      end;

      TempSegList := TObjectList.Create;
      try
        FillTempSegList;
        
        if TempSegList.Count = 1 then
        begin
          Exit;
        end;
        for SubSegIndex := TempSegList.Count - 1 downto 0 do
        begin
          ATempSeg := TempSegList[SubSegIndex];
          if ((ATempSeg.FSeg[1].x + ATempSeg.FSeg[2].x)/2 < ColCenter)
            and ((ATempSeg.FSeg[1].y + ATempSeg.FSeg[2].y)/2 < RowCenter) then
          begin
            TempSegList.Delete(SubSegIndex);
          end;
        end;

        SetSubSegmentsFromList;
        
      finally
        TempSegList.Free;
      end;
    end
    else if ASegment.Row = LocalChildModel.LastRow then
    begin
      if (SubSeg[1].x = ColCenter) and (SubSeg[2].x = ColCenter)
        and (SubSeg[1].y >= RowCenter) and (SubSeg[2].y >= RowCenter) then
      begin
        ASegment.LgrEdge := True;
        Exit;
      end
      else if (SubSeg[1].x <= ColCenter) and (SubSeg[2].x <= ColCenter)
        and (SubSeg[1].y = RowCenter) and (SubSeg[2].y = RowCenter) then
      begin
        ASegment.LgrEdge := True;
        Exit;
      end
      else
      if (SubSeg[1].x <= ColCenter) and (SubSeg[2].x <= ColCenter)
        and (SubSeg[1].y >= RowCenter) and (SubSeg[2].y >= RowCenter) then
      begin
        AdjustEdgeSegment(ASegment);
        ASegment.LgrEdge := True;
//        FreeAndNil(ASegment);
        Exit;
      end;

      TempSegList := TObjectList.Create;
      try
        FillTempSegList;
        
        if TempSegList.Count = 1 then
        begin
          Exit;
        end;
        for SubSegIndex := TempSegList.Count - 1 downto 0 do
        begin
          ATempSeg := TempSegList[SubSegIndex];
          if ((ATempSeg.FSeg[1].x + ATempSeg.FSeg[2].x)/2 < ColCenter)
            and ((ATempSeg.FSeg[1].y + ATempSeg.FSeg[2].y)/2 > RowCenter) then
          begin
            TempSegList.Delete(SubSegIndex);
          end;
        end;

        SetSubSegmentsFromList;
        
      finally
        TempSegList.Free;
      end;
    end
    else
    begin
      if SubSeg[1].x <= ColCenter then
      begin
        if SubSeg[2].x <= ColCenter then
        begin
          if (SubSeg[1].x = ColCenter) and (SubSeg[2].x = ColCenter) then
          begin
            ASegment.LgrEdge := True;
          end
          else
          begin
            AdjustEdgeSegment(ASegment);
            ASegment.LgrEdge := True;
//            FreeAndNil(ASegment);
          end;
          Exit;
        end
        else
        begin
          AdjustValues(SubSeg[2].x, ColCenter, SubSeg[2].y,
            SubSeg[1].x, SubSeg[1].y);
          ASegment.SetSubsegmentLength(1);
          ASegment.SubSegments[0] := SubSeg;
        end;
      end
      else
      begin
        if SubSeg[2].x < ColCenter then
        begin
          AdjustValues(SubSeg[1].x, ColCenter, SubSeg[1].y,
            SubSeg[2].x, SubSeg[2].y);
          ASegment.SetSubsegmentLength(1);
          ASegment.SubSegments[0] := SubSeg;
        end;
      end;
    end;
  end
  else if ASegment.Row = LocalChildModel.FirstRow then
  begin
    if SubSeg[1].y <= RowCenter then
    begin
      if SubSeg[2].y <= RowCenter then
      begin
        if (SubSeg[1].y = RowCenter) and (SubSeg[2].y = RowCenter) then
        begin
          ASegment.LgrEdge := True;
        end
        else
        begin
          AdjustEdgeSegment(ASegment);
          ASegment.LgrEdge := True;
//          FreeAndNil(ASegment);
        end;
        Exit;
      end
      else
      begin
        AdjustValues(SubSeg[2].y, RowCenter, SubSeg[2].x,
          SubSeg[1].y, SubSeg[1].x);
        ASegment.SetSubsegmentLength(1);
        ASegment.SubSegments[0] := SubSeg;
      end;
    end
    else
    begin
      if SubSeg[2].y < RowCenter then
      begin
        AdjustValues(SubSeg[1].y, RowCenter, SubSeg[1].x,
          SubSeg[2].y, SubSeg[2].x);
        ASegment.SetSubsegmentLength(1);
        ASegment.SubSegments[0] := SubSeg;
      end;
    end;
  end
  else if ASegment.Row = LocalChildModel.LastRow then
  begin
    if SubSeg[1].y >= RowCenter then
    begin
      if SubSeg[2].y >= RowCenter then
      begin
        if (SubSeg[1].y = RowCenter) and (SubSeg[2].y = RowCenter) then
        begin
          ASegment.LgrEdge := True;
        end
        else
        begin
          AdjustEdgeSegment(ASegment);
          ASegment.LgrEdge := True;
//          FreeAndNil(ASegment);
        end;
        Exit;
      end
      else
      begin
        AdjustValues(SubSeg[2].y, RowCenter, SubSeg[2].x,
          SubSeg[1].y, SubSeg[1].x);
        ASegment.SetSubsegmentLength(1);
        ASegment.SubSegments[0] := SubSeg;
      end;
    end
    else
    begin
      if SubSeg[2].y > RowCenter then
      begin
        AdjustValues(SubSeg[1].y, RowCenter, SubSeg[1].x,
          SubSeg[2].y, SubSeg[2].x);
        ASegment.SetSubsegmentLength(1);
        ASegment.SubSegments[0] := SubSeg;
      end;
    end;
  end
  else
  begin
    Assert(False);
  end;
end;

procedure TScreenObject.ResetFormula(const Compiler: TRbwParser;
  const ErrorMessage, Source: string; var Formula: string;
  DataType: TRbwDataType);
begin
  if (FModel <> nil)
    and not (csDestroying in FModel.ComponentState)
    and not (FModel as TCustomModel).Clearing
    and not ClearingDeletedDataSets then
  begin
    frmFormulaErrors.AddFormulaError(Name, Source, Formula, ErrorMessage);
  end;
  case DataType of
    rdtDouble, rdtInteger:
      begin
        Formula := '0';
      end;
    rdtBoolean:
      begin
        Formula := 'False';
      end;
    rdtString:
      begin
        Formula := '"0"';
      end;
  else
    Assert(False);
  end;
  Compiler.Compile(Formula);
end;

procedure TScreenObject.ConvertSfr;
begin
  if ModflowSfrBoundary <> nil then
  begin
    CreateSfr6Boundary;
    ModflowSfr6Boundary.Assign(ModflowSfrBoundary);
  end;
end;

procedure TScreenObject.ConvertStr;
begin
  if ModflowStrBoundary <> nil then
  begin
    CreateSfr6Boundary;
    ModflowSfr6Boundary.Assign(ModflowStrBoundary);
  end;
end;

function TScreenObject.CoordinateCaption: string;
begin
  case ViewDirection of
    vdTop:
      begin
        result := StrZcoordinate;
      end;
    vdFront:
      begin
        result := StrYcoordinate;
      end;
    vdSide:
      begin
        result := StrXcoordinate;
      end;
  else
    begin
      Assert(False);
    end;
  end;
end;

procedure TScreenObject.UpdateTopSegments(
  const EvaluatedAt: TEvaluatedAt; const PointsRotated: boolean;
  var RotatedPoints: TEdgePointArray; AModel: TBaseModel);
var
  LayerLimit: integer;
  HigherElevExpression: TExpression;
  LowerElevExpression: TExpression;
  TempFormula: string;
  Compiler: TRbwParser;
  LocalModel: TCustomModel;
  HigherElevVariables, HigherElevDataSets: TList;
  LowerElevVariables, LowerElevDataSets: TList;
  Grid: TCustomModelGrid;
  Mesh: IMesh3D;
//  Mesh: TSutraMesh3D;
begin
  HigherElevVariables := TList.Create;
  HigherElevDataSets := TList.Create;
  LowerElevVariables := TList.Create;
  LowerElevDataSets := TList.Create;
  try
    LocalModel:= AModel as TCustomModel;
    HigherElevExpression := nil;
    LowerElevExpression := nil;
    case ElevationCount of
      ecZero:
        begin
        end;
      ecOne:
        begin
          if LocalModel.ModelSelection = msFootPrint then
          begin
            TempFormula := '0';
          end
          else
          begin
            TempFormula := ElevationFormula;
          end;
          Compiler := GetCompiler(dso3D);
          try
            Compiler.Compile(TempFormula);
          except on E: ERbwParserError do
            begin
              ResetFormula(Compiler, E.Message, CoordinateCaption,
                TempFormula, rdtDouble);
            end;
          end;
          HigherElevExpression := Compiler.CurrentExpression;
          InitializeUsedDataSets(LocalModel, Compiler, HigherElevExpression,
            HigherElevVariables, HigherElevDataSets);
        end;
      ecTwo:
        begin
          if LocalModel.ModelSelection = msFootPrint then
          begin
            TempFormula := '1';
          end
          else
          begin
            TempFormula := HigherElevationFormula;
          end;
          Compiler := GetCompiler(dso3D);
          try
            Compiler.Compile(TempFormula);
          except on E: ERbwParserError do
            begin
              ResetFormula(Compiler, E.Message, HigherCoordinateCaption,
                TempFormula, rdtDouble);
            end;
          end;
          HigherElevExpression := Compiler.CurrentExpression;
          InitializeUsedDataSets(LocalModel, Compiler, HigherElevExpression,
            HigherElevVariables, HigherElevDataSets);

          if LocalModel.ModelSelection = msFootPrint then
          begin
            TempFormula := '0';
          end
          else
          begin
            TempFormula := LowerElevationFormula;
          end;
          Compiler := GetCompiler(dso3D);
          try
            Compiler.Compile(TempFormula);
          except on E: ERbwParserError do
            begin
              ResetFormula(Compiler, E.Message, LowerCoordinateCaption,
                TempFormula, rdtDouble);
            end;
          end;
          LowerElevExpression := Compiler.CurrentExpression;
          InitializeUsedDataSets(LocalModel, Compiler, LowerElevExpression,
            LowerElevVariables, LowerElevDataSets);
        end;
      else Assert(False);
    end;
    // get rid of the existing TCellElementSegments.
    FSegments.Clear;
    Grid := LocalModel.Grid;

    // set the maximum layer to be tested.
    LayerLimit := -1;
    if Grid = nil then
    begin
      Mesh := LocalModel.Mesh3D;
      if Mesh <> nil then
      begin
        AddTopMeshSegments(AModel, EvaluatedAt, LowerElevDataSets,
          HigherElevExpression, LayerLimit, HigherElevDataSets,
          LowerElevVariables, HigherElevVariables, LowerElevExpression);
      end;
    end
    else
    begin
      AddTopGridSegments(AModel, EvaluatedAt, LowerElevDataSets, HigherElevExpression,
        LayerLimit, HigherElevDataSets, LowerElevVariables, PointsRotated,
        HigherElevVariables, RotatedPoints, LowerElevExpression);
    end;
    FSegments.UpToDate := True;
  finally
    HigherElevVariables.Free;
    HigherElevDataSets.Free;
    LowerElevVariables.Free;
    LowerElevDataSets.Free;
  end;
end;

procedure TScreenObject.AssignValuesToTopDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel);
var
  DataSetFunction: string;
  Compiler: TRbwParser;
  Expression: TExpression;
  UsedVariables: TStringList;
begin
  Assert(DataSet <> nil);
  if not (DataSet.Orientation in [dsoTop, dso3D]) then
  begin
    RemoveDataSet(DataSet);
    Exit;
  end;
  if DataSetUsed(DataSet, OtherData, AModel) then
  begin
    UsedVariables := TStringList.Create;
    try
      InitializeExpression(Compiler, DataSetFunction, Expression, DataSet,
        OtherData);
      AssignTopDataSetValues(Expression, DataSetFunction, Compiler,
        UsedVariables, OtherData, DataSet, AModel);
    finally
      UsedVariables.Free;
    end;
  end;
end;

procedure TScreenObject.RemoveDataArraySubscription(Sender: TObject;
  const AName: string);
begin
  RemoveSubscriptionFromList(AName, Sender, FDataSetFormulas,
    FDataSetSubscriptions);
end;

procedure TScreenObject.RemoveBoundaryDataArraySubscription(Sender: TObject;
  const AName: string);
begin
  RemoveSubscriptionFromList(AName, Sender, FBoundaryDataSetFormulas,
    FBoundaryDataSetSubscriptions);
end;

function TScreenObject.RemoveDataSet(const DataSet: TDataArray): Integer;
begin
  if (Model <> nil) and
    ((csDestroying in Model.ComponentState)
    or (Model as TPhastModel).Clearing) then
  begin
    result := -1;
    Exit;
  end;
  result := IndexOfDataSet(DataSet);
  if result >= 0 then
  begin
    DeleteDataSet(result);
  end
  else
  begin
    result := IndexOfBoundaryDataSet(DataSet);
    if result >= 0 then
    begin
      DeleteBoundaryDataSet(result);
    end;
  end;
  if FElevSubscription <> nil then
  begin
    FElevSubscription.StopsTalkingTo(DataSet);
  end;
  if FTopElevSubscription <> nil then
  begin
    FTopElevSubscription.StopsTalkingTo(DataSet);
  end;
  if FBottomElevSubscription <> nil then
  begin
    FBottomElevSubscription.StopsTalkingTo(DataSet);
  end;
  UpdateTalksToActive;
end;

function TScreenObject.GetCompiler(const Orientation: TDataSetOrientation):
  TRbwParser;
begin
  result := GetCompiler(Orientation, EvaluatedAt);
end;

procedure TScreenObject.UpdateVariables(const UsedVariables: TStringList;
  const DataSet: TDataArray; Layer, Row, Column: integer;
  const Compiler: TRbwParser; EvaluatedAt: TEvaluatedAt = eaBlocks;
  AModel: TBaseModel = nil);
var
  VarIndex: integer;
  VarName: string;
  VarPosition: integer;
  Variable: TCustomValue;
//  DataSetIndex: integer;
  AnotherDataSet: TDataArray;
  LocalModel: TCustomModel;
  LocalLayer: Integer;
  LocalRow: Integer;
  LocalColumn: Integer;
begin
  if DataSet <> nil then
  begin
    UpdateGlobalLocations(Column, Row, Layer, DataSet.EvaluatedAt, DataSet.Model as TCustomModel);

    LocalModel := (DataSet.Model as TCustomModel);
  end
  else
  begin
    UpdateGlobalLocations(Column, Row, Layer, EvaluatedAt, AModel);

    LocalModel := AModel as TCustomModel;
  end;
  for VarIndex := 0 to UsedVariables.Count - 1 do
  begin
    VarName := UsedVariables[VarIndex];
    VarPosition := Compiler.IndexOfVariable(VarName);
    if VarPosition >= 0 then
    begin
      LocalLayer := Layer;
      LocalRow := Row;
      LocalColumn := Column;

      Variable := Compiler.Variables[VarPosition];
      AnotherDataSet := LocalModel.DataArrayManager.GetDataSetByName(VarName);
      if AnotherDataSet <> nil then
      begin
  //      AnotherDataSet := (FModel as TPhastModel).DataSets[DataSetIndex];
        Assert(AnotherDataSet <> DataSet);
        Assert(AnotherDataSet.DataType = Variable.ResultType);
        if AnotherDataSet.Orientation = dsoTop then
        begin
          LocalLayer := 0;
        end;
        if AnotherDataSet.Orientation = dsoFront then
        begin
          LocalRow := 0;
        end;
        if AnotherDataSet.Orientation = dsoSide then
        begin
          LocalColumn := 0;
        end;
        case Variable.ResultType of
          rdtDouble:
            begin
              TRealVariable(Variable).Value :=
                AnotherDataSet.RealData[LocalLayer, LocalRow, LocalColumn];
            end;
          rdtInteger:
            begin
              TIntegerVariable(Variable).Value :=
                AnotherDataSet.IntegerData[LocalLayer, LocalRow, LocalColumn];
            end;
          rdtBoolean:
            begin
              TBooleanVariable(Variable).Value :=
                AnotherDataSet.BooleanData[LocalLayer, LocalRow, LocalColumn];
            end;
          rdtString:
            begin
              TStringVariable(Variable).Value :=
                AnotherDataSet.StringData[LocalLayer, LocalRow, LocalColumn];
            end;
        else
          Assert(False);
        end;
      end;
    end;
  end;
end;

function TScreenObject.UsesAnMt3dTime(ATime: Double): Boolean;
begin
  result := False;
  if FModflowBoundaries <> nil then
  begin
    Result := FModflowBoundaries.UsesAnMt3dTime(ATime);
  end;
end;

function TScreenObject.UsesATime(ATime: Double): Boolean;
begin
  result := False;
  if FModflowBoundaries <> nil then
  begin
    Result := FModflowBoundaries.UsesATime(ATime);
  end;
end;

procedure TScreenObject.InitializeVariables(const UsedVariables: TStringList;
  const DataSet: TDataArray; const Expression: TExpression;
  const Compiler: TRbwParser);
var
  Model: TCustomModel;
begin
  if Expression = nil then
    Exit;
  Model := DataSet.Model as TCustomModel;
  InitilizeVariablesWithNilDataSet(Expression, Model, DataSet, UsedVariables,
    Compiler);
end;

procedure TScreenObject.AssignCellValue(const UsedVariables: TStringList;
  const DataSet: TDataArray; LayerIndex, RowIndex, ColIndex: integer;
  const Compiler: TRbwParser; const Annotation: string;
  var Expression: TExpression; const OtherData: TObject);
var
  InterpValue: TInterpValuesItem;
  AValue: double;
begin
  case DataSet.Orientation of
    dsoTop:
      begin
        LayerIndex := 0;
      end;
    dsoFront:
      begin
        RowIndex := 0;
      end;
    dsoSide:
      begin
        ColIndex := 0;
      end;
    dso3D:
      begin
        // do nothing.
      end;
    else Assert(False);
  end;
  InterpValue := OtherData as TInterpValuesItem;
  if (InterpValue = nil) or not InterpValue.Values.UsePHAST_Interpolation then
  begin
    UpdateVariables(UsedVariables, DataSet,
      LayerIndex, RowIndex, ColIndex, Compiler);
    EvaluateDataArrayExpression(DataSet, Expression, Compiler);

    case DataSet.Datatype of
      rdtDouble:
        begin
          AValue := Expression.DoubleResult;
          if IsInfinite(AValue) or IsNan(AValue) then
          begin
            if DataSet.Name = '' then
            begin
              frmErrorsAndWarnings.AddError(DataSet.Model as TCustomModel,
                Format(ErrorMessageFormulaUnNamed, [Name]),
                Format(ErrorString, [LayerIndex+1,RowIndex+1,ColIndex+1] ), self);
            end
            else
            begin
              frmErrorsAndWarnings.AddError(DataSet.Model as TCustomModel,
                Format(ErrorMessageFormulaNamed, [DataSet.Name,Name]),
                Format(ErrorString, [LayerIndex+1,RowIndex+1,ColIndex+1]), self);
            end;
            DataSet.RealData[LayerIndex, RowIndex, ColIndex] := MaxReal
          end
          else
          begin
            DataSet.RealData[LayerIndex, RowIndex, ColIndex] := AValue;
          end;
//          DataSet.RealData[LayerIndex, RowIndex, ColIndex] :=
//            Expression.DoubleResult;
        end;
      rdtInteger:
        begin
          DataSet.IntegerData[LayerIndex, RowIndex, ColIndex] :=
            Expression.IntegerResult;
        end;
      rdtBoolean:
        begin
          DataSet.BooleanData[LayerIndex, RowIndex, ColIndex] :=
            Expression.BooleanResult;
        end;
      rdtString:
        begin
          DataSet.StringData[LayerIndex, RowIndex, ColIndex] :=
            Expression.StringResult;
        end;
    else
      Assert(False);
    end;
    DataSet.Annotation[LayerIndex, RowIndex, ColIndex] := Annotation;
    if (InterpValue <> nil) and (DataSet is TCustomPhastDataSet) then
    begin
      TCustomPhastDataSet(DataSet).IsInterpolatedCell[
        LayerIndex, RowIndex, ColIndex] := False;
    end
  end
  else
  begin
    UpdateGlobalLocations(ColIndex, RowIndex, LayerIndex, DataSet.EvaluatedAt,
      DataSet.Model as TCustomModel);

    case DataSet.Datatype of
      rdtDouble:
        begin
          AssignRealDataWithPhastInterpolation(DataSet,
            LayerIndex, RowIndex, ColIndex, Annotation, InterpValue);
        end;
      rdtInteger:
        begin
          AssignIntegerDataWithPhastInterpolation(DataSet,
            LayerIndex, RowIndex, ColIndex, Annotation, InterpValue);
        end;
      rdtBoolean:
        begin
          Assert(False);
        end;
      rdtString:
        begin
          Assert(False);
        end;
    else
      Assert(False);
    end;
  end;
end;

function TScreenObject.IntersectAnnotation(const DataSetFormula: string;
  const OtherData: TObject): string;
var
  InterpValue: TInterpValuesItem;
begin
  InterpValue := OtherData as TInterpValuesItem;
  if (InterpValue = nil) or not InterpValue.Values.UsePHAST_Interpolation then
  begin
    if Length(DataSetFormula) > 1000 then
    begin
      result := 'Intersected by ' + Name + ' with a formula '
        + 'that is too long to show. '
    end
    else
    begin
      result := 'Intersected by ' + Name + ' with formula: '
        + DataSetFormula;
    end;
  end
  else
  begin
    result := 'Intersected by ' + Name
      + ': Set by PHAST-style interpolation';
  end;
end;

function TScreenObject.EncloseAnnotation(const DataSetFormula: string;
  const OtherData: TObject): string;
var
  InterpValue: TInterpValuesItem;
begin
  InterpValue := OtherData as TInterpValuesItem;
  if (InterpValue = nil) or not InterpValue.Values.UsePHAST_Interpolation then
  begin
    if Length(DataSetFormula) > 1000 then
    begin
      result := 'Enclosed by ' + Name + ' with a formula '
        + 'that is too long to show. '
    end
    else
    begin
      result := 'Enclosed by ' + Name + ' with formula: '
        + DataSetFormula;
    end;
  end
  else
  begin
    result := 'Enclosed by ' + Name
      + ': Set by PHAST-style interpolation';
  end;
end;

procedure TScreenObject.EndUpdate;
begin
  Dec(FUpdateCount);
  if FUpdateCount = 0 then
  begin
    InvalidateModel;
    NotifyGuiOfChange(self);
    Invalidate;
  end;
end;

function TScreenObject.EtsParameters: IModflowParameters;
begin
  result := nil;
  if ModflowEtsBoundary <> nil then
  begin
    result := ModflowEtsBoundary.Parameters;
  end;
end;

procedure TScreenObject.SortPoints(const Input: TEdgePointArray;
  out SortedPoints: TEdgePointArray; const APoint, PreviousPoint: TEdgePoint;
  const MaxLength: integer; Const EpsilonX: real = 0;
  Const EpsilonY: real = 0);
var
  PointList: TList;
  PointIndex: integer;
  Point1, Point2: TEdgePoint;
begin
  // Sort the points.
  PointList := TList.Create;
  try
    PointList.Capacity := MaxLength;

    for PointIndex := 0 to PointList.Capacity - 1 do
    begin
      PointList.Add(Addr(Input[PointIndex]));
    end;
    if APoint.X >= PreviousPoint.X then
    begin
      if APoint.Y >= PreviousPoint.Y then
      begin
        PointList.Sort(SortEdgePointsRightUp);
      end
      else
      begin
        PointList.Sort(SortEdgePointsRightDown);
      end;
    end
    else
    begin
      if APoint.Y >= PreviousPoint.Y then
      begin
        PointList.Sort(SortEdgePointsLeftUp);
      end
      else
      begin
        PointList.Sort(SortEdgePointsLeftDown);
      end;
    end;

    // delete duplicated points.
    for PointIndex := PointList.Count - 1 downto 1 do
    begin
      Point1 := PEdgePoint(PointList[PointIndex])^;
      Point2 := PEdgePoint(PointList[PointIndex - 1])^;
      if IsEqual(Point1.X ,Point2.X, EpsilonX)
        and IsEqual(Point1.Y, Point2.Y, EpsilonY) then
      begin
        PointList.Delete(PointIndex);
      end
    end;

    // transfer points to an array.
    SetLength(SortedPoints, PointList.Count);
    for PointIndex := 0 to PointList.Count - 1 do
    begin
      Point1 := PEdgePoint(PointList[PointIndex])^;
      SortedPoints[PointIndex] := Point1;
    end;

    for PointIndex := 1 to Length(SortedPoints) - 2 do
    begin
      SortedPoints[PointIndex].Position := epMiddle;
    end;

  finally
    PointList.Free;
  end;
end;

procedure TScreenObject.AddPointFromColumn(const ColIndex: integer;
  const Grid: TCustomModelGrid; const PreviousPoint, APoint: TEdgePoint;
  var TempPoints1: TEdgePointArray; var Count: integer;
  const Position: TEdgePosition);
var
  NewPoint: TEdgePoint;
  Epsilon: Double;
begin
  Epsilon := PreviousPoint.Distance(APoint)/10E7;
  case EvaluatedAt of
    eaBlocks:
      begin
        NewPoint.X := Grid.ColumnPosition[ColIndex];
      end;
    eaNodes:
      begin
        if (ColIndex = 0) then
        begin
          NewPoint.X := Grid.ColumnPosition[ColIndex];
        end
        else if (ColIndex = Grid.ColumnCount+1)  then
        begin
          NewPoint.X := Grid.ColumnPosition[ColIndex-1];
        end
        else
        begin
          NewPoint.X := (Grid.ColumnPosition[ColIndex]
            + Grid.ColumnPosition[ColIndex-1])/2;
        end;
      end;
    else Assert(False);
  end;
  if IsValueInside(PreviousPoint.X, NewPoint.X, APoint.X) then
  begin
    NewPoint.Y := YIntersection(PreviousPoint, APoint,
      NewPoint.X);
    if IsValueInside(PreviousPoint.Y, NewPoint.Y, APoint.Y) then
    begin
      if (NewPoint.Distance(PreviousPoint) > Epsilon)
        and (NewPoint.Distance(APoint) > Epsilon) then
      begin
        NewPoint.Position := Position;
        TempPoints1[Count] := NewPoint;
        Inc(Count);
      end;
    end;
  end;
end;

procedure TScreenObject.AddPointFromRow(const RowIndex: integer;
  const Grid: TCustomModelGrid; const PreviousPoint, APoint: TEdgePoint;
  var TempPoints1: TEdgePointArray; var Count: integer;
  const Position: TEdgePosition);
var
  NewPoint: TEdgePoint;
  Epsilon: Double;
begin
  Epsilon := PreviousPoint.Distance(APoint)/10E7;
  if ViewDirection = vdSide then
  begin
    case EvaluatedAt of
      eaBlocks:
        begin
          NewPoint.X := Grid.RowPosition[RowIndex];
        end;
      eaNodes:
        begin
          if (RowIndex = 0)  then
          begin
            NewPoint.X := Grid.RowPosition[RowIndex];
          end
          else if (RowIndex = Grid.RowCount+1)  then
          begin
            NewPoint.X := Grid.RowPosition[RowIndex-1];
          end
          else
          begin
            NewPoint.X := (Grid.RowPosition[RowIndex]
              + Grid.RowPosition[RowIndex-1])/2;
          end;
        end;
      else Assert(False);
    end;
    if IsValueInside(PreviousPoint.X, NewPoint.X, APoint.X) then
    begin
      NewPoint.Y := YIntersection(PreviousPoint, APoint,
        NewPoint.X);
      if IsValueInside(PreviousPoint.Y, NewPoint.Y, APoint.Y) then
      begin
        if (NewPoint.Distance(PreviousPoint) > Epsilon)
          and (NewPoint.Distance(APoint) > Epsilon) then
        begin
          NewPoint.Position := Position;
          TempPoints1[Count] := NewPoint;
          Inc(Count);
        end;
      end;
    end;
  end
  else
  begin
    Assert(ViewDirection = vdTop);
    case EvaluatedAt of
      eaBlocks:
        begin
          NewPoint.Y := Grid.RowPosition[RowIndex];
        end;
      eaNodes:
        begin
          if (RowIndex = 0)  then
          begin
            NewPoint.Y := Grid.RowPosition[RowIndex];
          end
          else if (RowIndex = Grid.RowCount+1)  then
          begin
            NewPoint.Y := Grid.RowPosition[RowIndex-1];
          end
          else
          begin
            NewPoint.Y := (Grid.RowPosition[RowIndex]
              + Grid.RowPosition[RowIndex-1])/2;
          end;
        end;
      else Assert(False);
    end;
    if IsValueInside(PreviousPoint.Y, NewPoint.Y, APoint.Y) then
    begin
      NewPoint.X := XIntersection(PreviousPoint, APoint,
        NewPoint.Y);
      if IsValueInside(PreviousPoint.X, NewPoint.X, APoint.X) then
      begin
        if (NewPoint.Distance(PreviousPoint) > Epsilon)
          and (NewPoint.Distance(APoint) > Epsilon) then
        begin
          NewPoint.Position := Position;
          TempPoints1[Count] := NewPoint;
          Inc(Count);
        end;
      end;
    end;
  end;
end;

function TScreenObject.AllSectionsClosed: boolean;
var
  Index: Integer;
begin
  result := True;
  for Index := 0 to SectionCount - 1 do
  begin
    if not SectionClosed[Index] then
    begin
      result := False;
      Exit;
    end;
  end;
end;

procedure TScreenObject.AddPointFromLayer(const LayerIndex: integer;
  const Grid: TCustomModelGrid;
  const PreviousPoint, APoint: TEdgePoint;
  var TempPoints1: TEdgePointArray;
  var Count: integer; const Position: TEdgePosition);
var
  NewPoint: TEdgePoint;
  Epsilon: Double;
begin
  Epsilon := PreviousPoint.Distance(APoint)/10E7;
  case EvaluatedAt of
    eaBlocks:
      begin
        NewPoint.Y := (Grid as TPhastGrid).LayerElevation[LayerIndex];
      end;
    eaNodes:
      begin
        if (LayerIndex = 0)  then
        begin
          NewPoint.Y := (Grid as TPhastGrid).LayerElevation[LayerIndex];
        end
        else if (LayerIndex = Grid.LayerCount+1)  then
        begin
          NewPoint.Y := (Grid as TPhastGrid).LayerElevation[LayerIndex-1];
        end
        else
        begin
          NewPoint.Y := ((Grid as TPhastGrid).LayerElevation[LayerIndex]
            + (Grid as TPhastGrid).LayerElevation[LayerIndex-1])/2;
        end;
      end;
    else Assert(False);
  end;
  if IsValueInside(PreviousPoint.Y, NewPoint.Y, APoint.Y) then
  begin
    NewPoint.X := XIntersection(PreviousPoint, APoint,
      NewPoint.Y);
    if IsValueInside(PreviousPoint.X, NewPoint.X, APoint.X) then
    begin
      if (NewPoint.Distance(PreviousPoint) > Epsilon)
        and (NewPoint.Distance(APoint) > Epsilon) then
      begin
        NewPoint.Position := Position;
        TempPoints1[Count] := NewPoint;
        Inc(Count);
      end;
    end;
  end;
end;

procedure TScreenObject.UpdateFormulaExpression;
begin
  if FFluxBoundary <> nil then
  begin
    FluxBoundary.UpdateFormulaExpression;
  end;
  if FLeakyBoundary <> nil then
  begin
    LeakyBoundary.UpdateFormulaExpression;
  end;
  if FRiverBoundary <> nil then
  begin
    RiverBoundary.UpdateFormulaExpression;
  end;
  if FSpecifiedHeadBoundary <> nil then
  begin
    SpecifiedHeadBoundary.UpdateFormulaExpression;
  end;
  if FWellBoundary <> nil then
  begin
    WellBoundary.UpdateFormulaExpression;
  end;
end;

procedure TScreenObject.UpdateFrontSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
begin
  Delegate.UpdateFrontSegments(AModel, EvaluatedAt);
  EliminateShortSegments(AModel);
end;

procedure TScreenObject.AssignValuesToFrontDataSet(
  const DataSet: TDataArray; OtherData: TObject;
  AModel: TBaseModel; UseLgrEdgeCells: TLgrCellTreatment);
begin
  Delegate.AssignValuesToFrontDataSet(DataSet, OtherData, AModel,
    UseLgrEdgeCells);
end;

procedure TScreenObject.UpdateSideSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
begin
  Delegate.UpdateSideSegments(AModel, EvaluatedAt);
  EliminateShortSegments(AModel);
end;

procedure TScreenObject.AssignValuesToSideDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment);
begin
  Delegate.AssignValuesToSideDataSet(DataSet, OtherData, AModel,
    UseLgrEdgeCells);
end;

procedure TScreenObject.AssignValuesToSutraDataSet(const Mesh: TSutraMesh3D;
  const DataSet: TDataArray; const Formula: string; AModel: TBaseModel;
  const UsedFormula: string);
var
  Compiler: TRbwParser;
  DataSetFunction: string;
  OtherData: TSutraDataObject;
begin
  if not UsedModels.UsesModel(AModel) then
  begin
    Exit;
  end;
  try
    Compiler := GetCompiler(DataSet.Orientation);
    DataSetFunction := Formula;
    case ViewDirection of
      vdTop:
        begin
          OtherData := TSutraDataObject.Create;
          try
            OtherData.Compiler := Compiler;
            OtherData.DataSetFunction := DataSetFunction;
            OtherData.AlternateName := DataSet.Name;
            OtherData.UsedFunction := UsedFormula;
            Delegate.AssignValuesToTopDataSet(DataSet, OtherData,
              AModel, lctUse, alAll);
          finally
            OtherData.Free;
          end;
        end;
      vdFront:
        begin
          OtherData := TSutraDataObject.Create;
          try
            OtherData.Compiler := Compiler;
            OtherData.DataSetFunction := DataSetFunction;
            OtherData.UsedFunction := UsedFormula;
            Delegate.AssignValuesToFrontDataSet(DataSet, OtherData,
              AModel, lctUse, alAll);
          finally
            OtherData.Free;
          end;
        end;
      vdSide:
        begin
          OtherData := TSutraDataObject.Create;
          try
            OtherData.Compiler := Compiler;
            OtherData.DataSetFunction := DataSetFunction;
            OtherData.UsedFunction := UsedFormula;
            Delegate.AssignValuesToSideDataSet(DataSet, OtherData,
              AModel, lctUse, alAll);
          finally
            OtherData.Free;
          end;
        end;
      else Assert(False);
    end;
  finally
    if (FSegments <> nil) and FSegments.UpToDate and not FSegments.FCleared then
    begin
      FSegments.CacheData;
    end;
  end
end;

procedure TScreenObject.UpdateBox;
var
  Index: integer;
  APoint: TPoint2D;
begin
  if FRecalculateBox and (Count > 0) then
  begin
    FMaxX := FPoints[0].X;
    FMinX := FMaxX;
    FMaxY := FPoints[0].Y;
    FMinY := FMaxY;
    for Index := 1 to Count - 1 do
    begin
      APoint := FPoints[Index];
      if APoint.X > FMaxX then
      begin
        FMaxX := APoint.X;
      end
      else if APoint.X < FMinX then
      begin
        FMinX := APoint.X;
      end;

      if APoint.Y > FMaxY then
      begin
        FMaxY := APoint.Y;
      end
      else if APoint.Y < FMinY then
      begin
        FMinY := APoint.Y;
      end;
    end;
    FRecalculateBox := False;
  end;
end;

procedure TScreenObject.CacheElevationArrays;
var
  Index: Integer;
  SegList: TCellElementSegmentList;
begin
  if Selected
    and (frmGridValue <> nil)
    and frmGridValue.cbShowThirdDValues.Checked
    and (frmGoPhast.PhastModel.SelectedScreenObjectCount = 1) then
  begin
    Exit;
  end;

  for Index := 0 to FSegModelAssoc.Count - 1 do
  begin
    SegList := FSegModelAssoc[Index];
    if (SegList.FHigher3DElevations <> nil)
      and not SegList.FHigher3DElevationsNeedsUpdating then
    begin
      SegList.FHigher3DElevations.Cache;
    end;
    if (SegList.FLower3DElevations <> nil)
      and not SegList.FLower3DElevationsNeedsUpdating then
    begin
      SegList.FLower3DElevations.Cache;
    end;
  end;

end;

procedure TScreenObject.CacheValueArrays;
begin
  ImportedValues.CacheData;
  if FSectionStarts <> nil then
  begin
    SectionStarts.CacheData;
  end;
  if FImportedSectionElevations <> nil then
  begin
    ImportedSectionElevations.CacheData;
  end;
  if FImportedHigherSectionElevations <> nil then
  begin
    ImportedHigherSectionElevations.CacheData;
  end;
  if FImportedLowerSectionElevations <> nil then
  begin
    ImportedLowerSectionElevations.CacheData;
  end;
end;

procedure TScreenObject.RemoveLakeID_Connection;
var
  LakeIDArray: TDataArray;
begin
  if CanInvalidateModel and (FModel <> nil) then
  begin
    LakeIDArray := frmGoPhast.PhastModel.
      DataArrayManager.GetDataSetByName(rsLakeID);
    if LakeIDArray <> nil then
    begin
      RemoveDataSet(LakeIDArray);
    end;
  end;
end;

function TScreenObject.GetTestDataArray(const DataSet: TDataArray): TDataArray;
begin
  if ((DataSet.Model as TCustomModel) = Model) or (DataSet.Name = '') then
  begin
    result := DataSet;
  end
  else
  begin
    result := (Model as TPhastModel).DataArrayManager.
      GetDataSetByName(DataSet.Name);
  end;
end;

procedure TScreenObject.UpdateCellCache(CellList: TCellAssignmentList;
  EvalAt: TEvaluatedAt; Orientation: TDataSetOrientation;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
begin
  FCachedCells.UpdateCache(CellList, EvalAt, Orientation, AssignmentLocation,
    AModel);
end;

procedure TScreenObject.UpdateUzfGage3;
var
  DS_Index: Integer;
  BoundarArray: TDataArray;
begin
  if csReading in frmGoPhast.PhastModel.ComponentState then
  begin
    Exit;
  end;
  BoundarArray := frmGoPhast.PhastModel.DataArrayManager.GetDataSetByName(StrUzfGage3);
  if (ModflowUzfBoundary <> nil) and ModflowUzfBoundary.Used and (ModflowUzfBoundary.GageOption2 <> 0) then
  begin
    DS_Index := IndexOfDataSet(BoundarArray);
    if DS_Index < 0 then
    begin
      DS_Index := AddDataSet(BoundarArray);
    end;
    if DS_Index >= 0 then
    begin
      DataSetFormulas[DS_Index] := IntToStr(ModflowUzfBoundary.GageOption2);
    end;
  end
  else
  begin
    DS_Index := IndexOfDataSet(BoundarArray);
    if DS_Index >= 0 then
    begin
      DeleteDataSet(DS_Index);
    end;
  end;
end;

procedure TScreenObject.UpdateUzfGage1and2;
var
  DS_Index: Integer;
  BoundarArray: TDataArray;
begin
  if csReading in frmGoPhast.PhastModel.ComponentState then
  begin
    Exit;
  end;
  BoundarArray := frmGoPhast.PhastModel.DataArrayManager.GetDataSetByName(StrUzfGage_1_and_2);
  if (ModflowUzfBoundary <> nil)
    and ModflowUzfBoundary.Used
    and (ModflowUzfBoundary.GageOption1 <> 0) then
  begin
    DS_Index := IndexOfDataSet(BoundarArray);
    if DS_Index < 0 then
    begin
      DS_Index := AddDataSet(BoundarArray);
    end;
    if DS_Index >= 0 then
    begin
      DataSetFormulas[DS_Index] := IntToStr(ModflowUzfBoundary.GageOption1);
    end;
  end
  else
  begin
    DS_Index := IndexOfDataSet(BoundarArray);
    if DS_Index >= 0 then
    begin
      DeleteDataSet(DS_Index);
    end;
  end;
end;

procedure TScreenObject.RestoreSubscriptionToList(List: TIformulaList;
  const AName: string; Sender: TObject; Subscriptions: TObjectList);
var
  DS: TObserver;
  Observer: TObserver;
  Index: Integer;
begin
  if FCanInvalidateModel then
  begin
    Index := List.IndexOf(Sender as TFormulaObject);
    Assert(Index >= 0);
    Observer := Subscriptions[Index] as TObserver;
    DS := (FModel as TPhastModel).GetObserverByName(AName);
    Assert(DS <> nil);
    DS.TalksTo(Observer);
    Observer.UpToDate := False;
  end;
end;

procedure TScreenObject.RemoveSubscriptionFromList(const AName: string;
  Sender: TObject; List: TIformulaList; SubscriptionList: TObjectList);
var
  DS: TObserver;
  Observer: TObserver;
  Index: Integer;
begin
  if FCanInvalidateModel then
  begin
    Index := List.IndexOf(Sender as TFormulaObject);
    Assert(Index >= 0);
    Observer := SubscriptionList[Index] as TObserver;
    DS := (FModel as TPhastModel).GetObserverByName(AName);
    Assert(DS <> nil);
    DS.StopsTalkingTo(Observer);
  end;
end;

procedure TScreenObject.ReplaceAnMt3dTime(OldTime, NewTime: Double);
begin
  if FModflowBoundaries <> nil then
  begin
    FModflowBoundaries.ReplaceAnMt3dTime(OldTime, NewTime);
  end;
end;

procedure TScreenObject.ReplaceATime(OldTime, NewTime: Double);
begin
  if FModflowBoundaries <> nil then
  begin
    FModflowBoundaries.ReplaceATime(OldTime, NewTime);
  end;
end;

procedure TScreenObject.ReplaceGUID;
begin
  if ModflowBoundaries <> nil then
  begin
    ModflowBoundaries.ReplaceGUID;
  end;
  if SutraBoundaries <> nil then
  begin
    SutraBoundaries.ReplaceGUID;
  end;
end;

procedure TScreenObject.InitilizeVariablesWithNilDataSet(
  const Expression: TExpression; Model: TBaseModel; const DataSet: TDataArray;
  const UsedVariables: TStringList; const Compiler: TRbwParser);
var
  VarIndex: Integer;
  VarName: string;
  VarPosition: Integer;
  Variable: TCustomValue;
  AnotherDataSet: TDataArray;
  GlobalVariable: IGlobalVariable;
  LocalModel: TCustomModel;
begin
  LocalModel := Model as TCustomModel;
  UsedVariables.Assign(Expression.VariablesUsed);
  for VarIndex := 0 to UsedVariables.Count - 1 do
  begin
    VarName := UsedVariables[VarIndex];
    VarPosition := Compiler.IndexOfVariable(VarName);
    if VarPosition >= 0 then
    begin
      Variable := Compiler.Variables[VarPosition];
      AnotherDataSet := LocalModel.DataArrayManager.GetDataSetByName(VarName);
      if AnotherDataSet <> nil then
      begin
        Assert(AnotherDataSet <> DataSet);
        if AnotherDataSet.DataType <> Variable.ResultType then
        begin
          raise EInvalidDataType.Create(Format(StrTheDataSet0s,
            [AnotherDataSet.Name, Name]), AnotherDataSet.Name);
        end;
//        Assert(AnotherDataSet.DataType = Variable.ResultType);
        AnotherDataSet.Initialize;
        LocalModel.DataArrayManager.AddDataSetToCache(AnotherDataSet);
      end
      else
      begin
        GlobalVariable := LocalModel.GlobalVariables.GetVariableByName(VarName);
        Assert(GlobalVariable <> nil);
        if Variable.ResultType <> GlobalVariable.Format then
        begin
          raise EInvalidDataType.Create(Format(StrTheGlobalVariable,
            [GlobalVariable.Name, Name]), GlobalVariable.Name);
        end;
//        Assert(Variable.ResultType = GlobalVariable.Format);
      end;
    end;
  end;
end;

procedure TScreenObject.UpdateTalksToWithdrawals;
var
  Withdrawals: TDataArray;
begin
  if (Model <> nil) and CanInvalidateModel then
  begin
    Withdrawals := (Model as TCustomModel).DataArrayManager.GetDataSetByName(KWithdrawals);
  end
  else
  begin
    Withdrawals := nil;
  end;
  if Withdrawals <> nil then
  begin
    if FFootprintWell = nil then
    begin
      Self.StopsTalkingTo(Withdrawals);
    end
    else
    begin
      Self.TalksTo(Withdrawals);
    end;
  end;
end;

procedure TScreenObject.UpdateTalksToActive;
var
  ActiveDataArray: TDataArray;
  LocalModel: TCustomModel;
begin
  if (Model <> nil) and CanInvalidateModel then
  begin
    LocalModel := Model as TCustomModel;
    ActiveDataArray := LocalModel.DataArrayManager.GetDataSetByName(rsActive);
    if ActiveDataArray <> nil then
    begin
      if FCellSizeUsed then
      begin
        TalksTo(ActiveDataArray);
      end
      else if IndexOfDataSet(ActiveDataArray) < 0 then
      begin
        StopsTalkingTo(ActiveDataArray);
      end;
    end;
  end;
end;

procedure TScreenObject.EliminateShortSegments(AModel: TBaseModel);
var
  SegIndex: NativeInt;
  InnerIndex: NativeInt;
  SegIndex1: NativeInt;
  EndSeg: TCellElementSegment;
  TotalSegLength: Double;
  EndIndex: Integer;
  ReferenceLength: Double;
  ASegment: TCellElementSegment;
begin
  if MinimumFraction > 0 then
  begin
    FSegments.Sort(CompareSegmentLocation);
    EndIndex := FSegments.Count - 1;
    TotalSegLength := 0;
    EndSeg := nil;
    for SegIndex := FSegments.Count - 1 downto 0 do
    begin
      ASegment := FSegments[SegIndex];
      if SegIndex = FSegments.Count - 1 then
      begin
        EndSeg := ASegment;
        TotalSegLength := EndSeg.SegmentLength;
        EndIndex := SegIndex;
      end
      else
      begin
        Assert(EndSeg <> nil);
        if (ASegment.Layer <> EndSeg.Layer)
          or (ASegment.Row <> EndSeg.Row)
            or (ASegment.Col <> EndSeg.Col) then
        begin
          ReferenceLength := CellReferenceLength(AModel, EndSeg);
          if (ReferenceLength > 0) and (TotalSegLength > 0)
            and (TotalSegLength / ReferenceLength < MinimumFraction) then
          begin
            for InnerIndex := EndIndex downto SegIndex + 1 do
            begin
              FSegments.Delete(InnerIndex);
            end;
          end;
          EndSeg := ASegment;
          TotalSegLength := EndSeg.SegmentLength;
          EndIndex := SegIndex;
        end
        else
        begin
          TotalSegLength := TotalSegLength + ASegment.SegmentLength;
        end;
        if SegIndex = 0 then
        begin
          ReferenceLength := CellReferenceLength(AModel, EndSeg);
          if (ReferenceLength > 0) and (TotalSegLength > 0)
            and (TotalSegLength / ReferenceLength < MinimumFraction) then
          begin
            for InnerIndex := EndIndex downto 0 do
            begin
              FSegments.Delete(InnerIndex);
            end;
          end;
        end;
      end;
    end;
    FSegments.Sort(CompareSegmentOrder);
    for SegIndex1 := 0 to FSegments.Count - 1 do
    begin
      FSegments[SegIndex1].PositionInSegmentList := SegIndex1;
    end;
  end;
end;

procedure TScreenObject.CreateOrRetrieveBoundaryFormulaObject(const Index: Integer;
  ADataSet: TDataArray; var FormulaObject: IFormulaObject);
begin
  if FBoundaryDataSetFormulas[Index] = nil then
  begin
    FormulaObject := frmGoPhast.PhastModel.FormulaManager.Add;
    FBoundaryDataSetFormulas[Index] := FormulaObject;
    FormulaObject.Parser := frmGoPhast.PhastModel.GetCompiler(
      ADataSet.Orientation, ADataSet.EvaluatedAt);
    FormulaObject.AddSubscriptionEvents(
      GlobalRemoveBoundaryDataArraySubscription,
      GlobalRestoreBoundaryDataArraySubscription, self);
  end
  else
  begin
    FormulaObject := FBoundaryDataSetFormulas[Index];
  end;
end;

procedure TScreenObject.CreateOrRetrieveFormulaObject(const Index: Integer;
  ADataSet: TDataArray; var FormulaObject: IFormulaObject);
begin
  if FDataSetFormulas[Index] = nil then
  begin
    FormulaObject := frmGoPhast.PhastModel.FormulaManager.Add;
    FDataSetFormulas[Index] := FormulaObject;
    FormulaObject.Parser := frmGoPhast.PhastModel.GetCompiler(ADataSet.Orientation, ADataSet.EvaluatedAt);
    FormulaObject.AddSubscriptionEvents(
      GlobalRemoveScreenObjectDataArraySubscription,
      GlobalRestoreScreenObjectDataArraySubscription, self);
  end
  else
  begin
    FormulaObject := FDataSetFormulas[Index];
  end;
end;

procedure TScreenObject.SetFootprintWell(const Value: TFootprintWell);
begin
  if (Value = nil) or not Value.Used then
  begin
    if FFootprintWell <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(FFootprintWell);
  end
  else
  begin
    CreateFootprintWell;
    FFootprintWell.Assign(Value);
  end;
  UpdateTalksToWithdrawals;
end;

procedure TScreenObject.SetFormulaParsers;
var
  Index: Integer;
  FormulaObject: IFormulaObject;
  ADataArray: TDataArray;
begin
  SetElevationFormulaParser;
  SetHigherElevationFormulaParser;
  SetLowerElevationFormulaParser;
  for Index := 0 to FDataSetFormulas.Count - 1 do
  begin
    FormulaObject := FDataSetFormulas[Index];
    ADataArray := DataSets[Index];
    FormulaObject.Parser := frmGoPhast.PhastModel.GetCompiler(
      ADataArray.Orientation, ADataArray.EvaluatedAt);

  end;
end;

procedure TScreenObject.SetFullObjectIntersectLength(const Value: Boolean);
begin
  FFullObjectIntersectLength := Value;
end;

procedure TScreenObject.CreateFootprintWell;
begin
  if FFootprintWell = nil then
  begin
    FFootprintWell := TFootprintWell.Create(FModel, self);
//    FFootprintWell.ScreenObject := self;
//    FFootprintWell.Orientation := FViewDirection;
  end;
end;

procedure TScreenObject.CreateFormulaObjects;
begin
  CreateElevationFormulaObject;
  CreateHigherElevationFormulaObject;
  CreateLowerElevationFormulaObject;
end;

procedure TScreenObject.CreateLowerElevationFormulaObject;
begin
  FLowerElevationFormulaObject := frmGoPhast.PhastModel.FormulaManager.Add;
  SetLowerElevationFormulaParser;
  FLowerElevationFormulaObject.AddSubscriptionEvents(
    GlobalRemoveLowerElevationSubscription,
    GlobalRestoreLowerElevationSubscription, self);
end;

procedure TScreenObject.CreateHigherElevationFormulaObject;
begin
  FHigherElevationFormulaObject := frmGoPhast.PhastModel.FormulaManager.Add;
  SetHigherElevationFormulaParser;
  FHigherElevationFormulaObject.AddSubscriptionEvents(
    GlobalRemoveHigherElevationSubscription,
    GlobalRestoreHigherElevationSubscription, self);
end;

procedure TScreenObject.CreateElevationFormulaObject;
begin
  if ElevationCount = ecOne then
  begin
    FElevationFormulaObject := frmGoPhast.PhastModel.FormulaManager.Add;
    SetElevationFormulaParser;
    FElevationFormulaObject.AddSubscriptionEvents(
      GlobalRemoveElevationSubscription,
      GlobalRestoreElevationSubscription, self);
  end;
end;

procedure TScreenObject.SetLowerElevationFormulaParser;
begin
  if FLowerElevationFormulaObject <> nil then
  begin
    FLowerElevationFormulaObject.Parser := GetElevationCompiler;
  end;
end;

procedure TScreenObject.SetHigherElevationFormulaParser;
begin
  if FHigherElevationFormulaObject <> nil then
  begin
    FHigherElevationFormulaObject.Parser := GetElevationCompiler;
  end;
end;

function TScreenObject.GetElevationCompiler: TRbwParser;
begin
  result := nil;
  if FModel <> nil then
  begin
    case ViewDirection of
      vdTop:
        begin
          result := GetCompiler(dsoTop, EvaluatedAt);
        end;
      vdFront:
        begin
          result := GetCompiler(dsoFront, EvaluatedAt);
        end;
      vdSide:
        begin
          result := GetCompiler(dsoSide, EvaluatedAt);
        end;
    else
      Assert(False);
    end;
  end;
end;

function TScreenObject.GetElevationCount: TElevationCount;
begin
  result := FElevationCount;
end;

function TScreenObject.GetElevationFormula: string;
begin
  if ElevationCount = ecOne then
  begin
    if FElevationFormulaObject = nil then
    begin
      CreateElevationFormulaObject
    end;
    result := FElevationFormulaObject.Formula;
  end
  else
  begin
    result := '0.'
  end;
end;

procedure TScreenObject.SetElevationFormulaParser;
begin
  if FElevationFormulaObject <> nil then
  begin
    FElevationFormulaObject.Parser := GetElevationCompiler;
  end;
end;

procedure TScreenObject.CacheSegments;
begin
  if (FSegments <> nil) and FSegments.UpToDate and not FSegments.FCleared then
  begin
    FSegments.CacheData;
  end;
  FreeAndNil(FGpcPolygons);
end;

procedure TScreenObject.DrawPointMarker(LineColor32: TColor32;
  FillColor32: TColor32; const Bitmap32: TPersistent;
  IntPoint: TPoint; LineWidth: Single; PointWithValue: boolean);
  function ShapeSize: integer;
  begin
    if PointWithValue then
    begin
      result := DiamondSize;
    end
    else
    begin
      result := SquareSize;
    end;
  end;
  function GetLow(AnInt: integer): integer;
  begin
    if AnInt < -MAXINT + ShapeSize+1  then
    begin
      result := -MAXINT
    end
    else
    begin
      result := AnInt - ShapeSize-1;
    end;
  end;
  function GetHigh(AnInt: integer): integer;
  begin
    if AnInt > MAXINT - ShapeSize -1 then
    begin
      result := MAXINT
    end
    else
    begin
      result := AnInt + ShapeSize + 1;
    end;
  end;
  var
    Points: TPointArray;
    Polygon: TPolygon32;
    Index: integer;
begin
  if PointWithValue then
  begin
    // draw diamond
    SetLength(Points, 5);
    for Index := 0 to 4 do
    begin
      Points[Index] := IntPoint;
    end;
    Points[0].X := GetHigh(Points[0].X);
    Points[1].Y := GetHigh(Points[1].Y);
    Points[2].X := GetLow(Points[2].X);
    Points[3].Y := GetLow(Points[3].Y);
    Points[4] := Points[0];

    Polygon := nil;
    DrawBigPolygon32(BitMap32,
      LineColor32, FillColor32, LineWidth,
      Points, Polygon,
      False, True, False);

  end
  else
  begin
    // draw square
    DrawBigRectangle32(BitMap32, LineColor32, FillColor32, LineWidth,
      GetLow(IntPoint.X), GetLow(IntPoint.Y),
      GetHigh(IntPoint.X), GetHigh(IntPoint.Y));
  end;
end;

procedure TScreenObject.EvaluateDataArrayExpression(const DataSet: TDataArray;
  var Expression: TExpression; const Compiler: TRbwParser; DataIdentifier: string = '');
var
  IsBoundary: Boolean;
  DI: Integer;
  procedure HandleError(E: Exception);
  var
    ErrorMessage: string;
    Formula: string;
  begin
    if DataSet <> nil then
    begin
      DI := IndexOfDataSet(DataSet);
      if DI >= 0 then
      begin
        IsBoundary := False;
      end
      else
      begin
        IsBoundary := True;
        DI := IndexOfBoundaryDataSet(DataSet);
  //      Assert(DI >= 0);
      end;
      ResetScreenObjectFunction(DI, self, Compiler, DataSet.DataType,
        E.Message, IsBoundary, Expression.Decompile);
      Expression := Compiler.CurrentExpression;
      Expression.Evaluate;
    end
    else
    begin
      ErrorMessage := Format(StrErrorInTheFormula, [DataIdentifier, E.message]);
      frmFormulaErrors.AddFormulaError(Name, DataIdentifier, Expression.Decompile,
        ErrorMessage);
      Formula := '0';
      Compiler.Compile(Formula);
      Expression := Compiler.CurrentExpression;
      Expression.Evaluate;
    end;
  end;
begin
  try
    Expression.Evaluate;
  except
    on E: ERbwParserError do
    begin
      HandleError(E);
    end;
    on E: EInvalidOp do
    begin
      HandleError(E);
    end;
    on E: EDivByZero do
    begin
      HandleError(E);
    end;
    on E: EZeroDivide do
    begin
      HandleError(E);
    end;
  end;
end;

procedure TScreenObject.CreateGpcPolygon;
var
//  SubPolygon: TSubPolygon;
  SectionIndex: Integer;
  VertexIndex: Integer;
  ClosedSectionCount: Integer;
  AVertex: Tgpc_vertex;
begin
  ClosedSectionCount := 0;
  for SectionIndex := 0 to SectionCount - 1 do
  begin
    if SectionClosed[SectionIndex] then
    begin
      Inc(ClosedSectionCount);
    end;
  end;
  FGpcPolygons := TGpcPolygonClass.Create;
  FGpcPolygons.NumberOfContours := ClosedSectionCount;
  ClosedSectionCount := 0;

  for SectionIndex := 0 to SectionCount - 1 do
  begin
    if SectionClosed[SectionIndex] then
    begin
      FGpcPolygons.VertexCount[ClosedSectionCount] :=
        SectionLength[SectionIndex] - 1;
      for VertexIndex := SectionStart[SectionIndex] to
        SectionStart[SectionIndex] + SectionLength[SectionIndex] - 2 do
      begin
        AVertex.x := Points[VertexIndex].x;
        AVertex.y := Points[VertexIndex].y;
        FGpcPolygons.Vertices[ClosedSectionCount,
          VertexIndex - SectionStart[SectionIndex]] := AVertex;
      end;
      Inc(ClosedSectionCount);
    end;
  end;
end;

procedure TScreenObject.CreateGwtCncBoundary;
begin
  if (ModflowBoundaries.FGwtCncBoundary = nil) then
  begin
    ModflowBoundaries.FGwtCncBoundary := TCncBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateGwtSrcBoundary;
begin
  if (ModflowBoundaries.FGwtSrcBoundary = nil) then
  begin
    ModflowBoundaries.FGwtSrcBoundary := TSrcBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateGwtTimeLists(AModel: TBaseModel);
begin
  if FModflowBoundaries <> nil then
  begin
    FModflowBoundaries.CreateGwtTimeLists(AModel);
  end;
end;

function TScreenObject.InsideBox(const X, Y: real): boolean;
begin
  // This function returns True if X,Y are inside the box
  // that outlines the screen object.
  UpdateBox;

  result := (X <= FMaxX) and (X >= FMinX) and (Y <= FMaxY) and (Y >= FMinY);
end;

destructor TScreenObject.Destroy;
var
  Model: TPhastModel;
  Index: Integer;
  DataArray: TDataArray;
  FormulaIndex: Integer;
  FormulaObject: IFormulaObject;
begin
  FDynamicTimesSeriesCollections.Free;
//  FSubObservations.Free;
  FStoredMinimumFraction.Free;
  FreeAndNil(FFootprintWell);
  FSutraBoundaries.Free;
  FStoredSutraAngle.Free;
  FUsedModels.Free;
  ChildModel := nil;
//  FLinkedChildModels.Free;
  FPointPositionValues.Free;
  FGpcPolygons.Free;
  Selected := False;
  ElevationCount := ecZero;
  FModpathParticles.Free;
  FImportedSectionElevations.Free;
  FImportedHigherSectionElevations.Free;
  FImportedLowerSectionElevations.Free;
  FSectionStarts.Free;
  DestroyLastSubPolygon;

  for Index := DataSetCount - 1 downto 0 do
  begin
    DataArray := DataSets[Index];
    RemoveDataSet(DataArray);
  end;
  for Index := BoundaryDataSetCount - 1 downto 0 do
  begin
    DataArray := BoundaryDataSets[Index];
    RemoveDataSet(DataArray);
  end;

  if FModel <> nil then
  begin
    Model := FModel as TPhastModel;
    if not Model.Clearing and not (csDestroying in Model.ComponentState) then
    begin
      ElevationFormula := '0';
      HigherElevationFormula := '0';
      LowerElevationFormula := '0';
    end;
  end;

  FreeAndNil(FModflowBoundaries);

  FInterpValues.Free;
  FFluxBoundary.Free;
  FLeakyBoundary.Free;
  FRiverBoundary.Free;
  FSpecifiedHeadBoundary.Free;
  FSpecifiedSolutionBoundary.Free;
  FWellBoundary.Free;

  FDelegateCollection.Free;

  if FElevSubscription <> nil then
  begin
    FElevSubscription.StopsTalkingTo(self);
  end;
  FElevSubscription.Free;

  if FTopElevSubscription <> nil then
  begin
    FTopElevSubscription.StopsTalkingTo(self);
  end;
  FTopElevSubscription.Free;

  if FBottomElevSubscription <> nil then
  begin
    FBottomElevSubscription.StopsTalkingTo(self);
  end;
  FBottomElevSubscription.Free;
  FDataSets.Free;
  FBoundaryDataSets.Free;
  ClearSubPolygons;
  for FormulaIndex := 0 to FDataSetFormulas.Count - 1 do
  begin
    FormulaObject := FDataSetFormulas[FormulaIndex];
    if frmGoPhast.PhastModel <> nil then
    begin
      frmGoPhast.PhastModel.FormulaManager.Remove(FormulaObject,
        GlobalRemoveScreenObjectDataArraySubscription,
        GlobalRestoreScreenObjectDataArraySubscription, self);
    end;
  end;
  FDataSetFormulas.Free;
  if FBoundaryDataSetFormulas <> nil then
  begin
    for Index := 0 to FBoundaryDataSetFormulas.Count - 1 do
    begin
      FormulaObject := FBoundaryDataSetFormulas[Index];
      if frmGoPhast.PhastModel <> nil then
      begin
        frmGoPhast.PhastModel.FormulaManager.Remove(FormulaObject,
          GlobalRemoveBoundaryDataArraySubscription,
          GlobalRestoreBoundaryDataArraySubscription, self);
      end;
    end;
  end;
  FBoundaryDataSetFormulas.Free;
  FSelectLines.Free;
  FSegModelAssoc.Free;

  inherited;
  FDataSetSubscriptions.Free;
  FBoundaryDataSetSubscriptions.Free;
//  FHigher3DElevations.Free;
//  FLower3DElevations.Free;

  FDataSetMixtureSubscriptions.Free;
  FImportedValues.Free;
  FCachedCells.Free;
  FObjectLabel.Free;
  FObjectVertexLabel.Free;
  FSectionLabel.Free;
end;

procedure TScreenObject.DestroyLastSubPolygon;
begin
  FreeAndNil(FLastSubPolygon);
end;

function TScreenObject.GetFillColor: TColor;
begin
  Result := FFillColor;
end;

function TScreenObject.GetFluxBoundary: TFluxBoundary;
begin
  CreatePhastFluxBoundary;
  result := FFluxBoundary
end;

function TScreenObject.GetFmp4AddedDemandRunoffSplitBoundary: TFmp4AddedDemandRunoffSplitBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFmp4AddedDemandRunoffSplitBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4AddedDemandRunoffSplitBoundary;
  end;
end;

function TScreenObject.GetFmp4BarePrecipitationConsumptionFractionBoundary: TFmp4BarePrecipitationConsumptionFractionBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFmp4BarePrecipitationConsumptionFractionBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4BarePrecipitationConsumptionFractionBoundary;
  end;
end;

function TScreenObject.GetFmp4BareRunoffFractionBoundary: TFmp4BareRunoffFractionBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFmp4BareRunoffFractionBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4BareRunoffFractionBoundary;
  end;
end;

function TScreenObject.GetFmp4EfficiencyBoundary: TFmp4EfficiencyBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFmp4EfficiencyBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FFmp4EfficiencyBoundary;
  end;
end;

function TScreenObject.GetFmp4EfficiencyImprovementBoundary: TFmp4EfficiencyImprovementBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFmp4EfficiencyImprovementBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4EfficiencyImprovementBoundary;
  end;
end;

function TScreenObject.GetFootprintWell: TFootprintWell;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFootprintWell;
  end;
  result := FFootprintWell;
end;

function TScreenObject.GetFullObjectIntersectLength: Boolean;
begin
  Result := FFullObjectIntersectLength;
end;

function TScreenObject.GetDataSetCapacity: integer;
begin
  result := FDataSets.Capacity;
end;

function TScreenObject.GetDataSetCount: integer;
begin
  result := FDataSets.Count;
end;

function TScreenObject.GetDataSetFormulas(const Index: integer): string;
var
  FormulaObject: IFormulaObject;
begin
  FormulaObject := FDataSetFormulas[Index];
  if FormulaObject = nil then
  begin
    result := '';
  end
  else
  begin
    result := FormulaObject.Formula;
  end;
end;

function TScreenObject.GetDataSets(const Index: integer): TDataArray;
begin
  result := FDataSets[Index];
end;

function TScreenObject.GetDeleted: boolean;
begin
  result := FDeleted or (Count = 0);
end;

function TScreenObject.GetDynamicTimeSeriesIByName(
  const Value: string): IDynamicTimeSeries;
begin
  result := DynamicTimesSeriesCollections.GetTimeSeriesByName(Value);
end;

procedure TScreenObject.AssignMf6LakeDataSetValue;
var
  DSIndex: Integer;
  BoundarArray: TDataArray;
  FormulaValue: Integer;
begin
  BoundarArray := frmGoPhast.PhastModel.DataArrayManager.
    GetDataSetByName(KMf6LakeConnectionTypes);
  if frmGoPhast.PhastModel.LakMf6IsSelected
    and (ModflowLak6 <> nil)
    and ModflowLak6.Used
    and not ModflowLak6.Embedded
//    and not (lctHorizontal in ModflowLak6.LakeConnections)
    then
  begin
    Assert(BoundarArray <> nil);
    DSIndex := IndexOfDataSet(BoundarArray);
    if DSIndex < 0 then
    begin
      DSIndex := AddDataSet(BoundarArray);
    end;
    if DSIndex >= 0 then
    begin
      FormulaValue := 0;
      if lctHorizontal in ModflowLak6.LakeConnections then
      begin
        Inc(FormulaValue);
      end;
      if lctVertical in ModflowLak6.LakeConnections then
      begin
        Inc(FormulaValue, 2);
      end;
      DataSetFormulas[DSIndex] := IntToStr(FormulaValue);
    end;
  end
  else
  begin
    if BoundarArray <> nil then
    begin
      DSIndex := IndexOfDataSet(BoundarArray);
      if DSIndex >= 0 then
      begin
        DeleteDataSet(DSIndex);
      end;
    end;
  end;
end;

function TScreenObject.GetCount: integer;
begin
  Result := FCount;
end;

procedure TScreenObject.SetFillColor(const Value: TColor);
begin
  if FFillColor <> Value then
  begin
    FFillColor := Value;
    InvalidateModel;
  end;
end;

function TScreenObject.IsPointInside(const APoint: TPoint2D;
  out SectionIndex: integer): boolean;
begin
  result := IsPointInside(APoint.X, APoint.Y, SectionIndex);
end;

procedure TScreenObject.Loaded;
var
  Index: Integer;
  Observer: TObserver;
begin
  inherited;
  if FSutraBoundaries <> nil then
  begin
    FSutraBoundaries.Loaded;
  end;

  if FLeakyBoundary <> nil then
  begin
    LeakyBoundary.Loaded;
  end;

  if FRiverBoundary <> nil then
  begin
    RiverBoundary.Loaded;
  end;

  if FSpecifiedHeadBoundary <> nil then
  begin
    SpecifiedHeadBoundary.Loaded
  end;

  ModflowBoundaries.Loaded;

  UpdateUzfGage1and2;
  UpdateUzfGage3;

  if FDataSetSubscriptions <> nil then
  begin
    for Index := 0 to FDataSetSubscriptions.Count -1 do
    begin
      Observer := FDataSetSubscriptions[Index] as TObserver;
      Observer.UpToDate := True;
    end;
  end;

  if FDataSetMixtureSubscriptions <> nil then
  begin
    for Index := 0 to FDataSetMixtureSubscriptions.Count -1 do
    begin
      Observer := FDataSetMixtureSubscriptions[Index] as TObserver;
      Observer.UpToDate := True;
    end;
  end;

  AssignMf6LakeDataSetValue;
  UpdateTalksToWithdrawals;
  UpdateTalksToActive;
  UpdateTalksToLakeMf6;

end;

function TScreenObject.LowerCoordinateCaption: string;
begin
  case ViewDirection of
    vdTop:
      begin
        result := StrLowerZcoordinate;
      end;
    vdFront:
      begin
        result := StrLowerYcoordinate;
      end;
    vdSide:
      begin
        result := StrLowerXcoordinate;
      end;
  else
    begin
      Assert(False);
    end;
  end;
end;

function TScreenObject.GetSelectedVertices(const index: integer): boolean;
begin
  ValidateIndex(Index);
  result := FSelectedVertices[index];
end;

procedure TScreenObject.SetSelectedVertices(const index: integer; const Value:
  boolean);
begin
  ValidateIndex(Index);
  if FSelectedVertices[index] <> Value then
  begin
    InvalidateModel;
    if Value then
    begin
      Inc(FSelectedVertexCount);
    end
    else
    begin
      Dec(FSelectedVertexCount);
    end;
    FSelectedVertices[index] := Value;
  end;
end;

procedure TScreenObject.SetSectionLabel(const Value: TSectionLabel);
begin
  FSectionLabel.Assign(Value);
end;

procedure TScreenObject.SetSectionStarts(const Value: TValueArrayStorage);
begin
  FIsClosedCached := False;
  if (Value = nil) or (Value.Count = 0) then
  begin
    FreeAndNil(FSectionStarts);
  end
  else
  begin
    CreateSectionStarts;
    FSectionStarts.Assign(Value);
  end;
end;

procedure TScreenObject.SetSelected(const Value: boolean);
var
  Index: integer;
  NewLocation: TSegment2D;
  LocalModel: TCustomModel;
begin
  // You can't select a deleted object.
  if Value and Deleted then
    Exit;
  if FSelected <> Value then
  begin
    FSelected := Value;
    if FSelected then
    begin
      Visible := True;
      if (FModel <> nil) and FCanInvalidateModel then
      begin
        (FModel as TPhastModel).ScreenObjectSelected;
      end;
    end
    else
    begin
      if (FModel <> nil) and FCanInvalidateModel then
      begin
        (FModel as TPhastModel).ScreenObjectUnSelected;
      end;
    end;
    CacheElevationArrays;
    InvalidateModel;
    if (FModel <> nil) and (ViewDirection = vdFront) and Selected then
    begin
      LocalModel := FModel as TCustomModel;
      if (LocalModel.ModelSelection in SutraSelection) or LocalModel.DisvUsed then
      begin
        SetNewCrossSectionAngle(SutraAngle, NewLocation);
        if  (LocalModel.ModelSelection in SutraSelection) then
        begin
          frmGoPhast.PhastModel.SutraMesh.CrossSection.Segment := NewLocation;
        end;
        if LocalModel.DisvUsed then
        begin
          LocalModel.DisvGrid.CrossSection.Segment := NewLocation;
        end;
      end;
    end;
  end;

  // If the object is not selected, it can't have any selected vertices.
  if not FSelected then
  begin
    if (FSelectedVertexCount > 0) or FNeedToResetSelectedVertexCount then
    begin
      for Index := 0 to Length(FSelectedVertices) - 1 do
      begin
        FSelectedVertices[Index] := False;
      end;
    end;
    FSelectedVertexCount := 0;
    FNeedToResetSelectedVertexCount := False;
  end;
end;

function TScreenObject.GetMaxX: real;
begin
  UpdateBox;
  result := FMaxX;
end;

function TScreenObject.GetMaxY: real;
begin
  UpdateBox;
  result := FMaxY;
end;

function TScreenObject.GetMfBoundary(
  ParamType: TParameterType): TModflowParamBoundary;
begin
  result := nil;
  case ParamType of
    ptUndefined..ptLPF_VKCB, ptPEST: Assert(False);
    ptCHD: result := ModflowChdBoundary;
    ptGHB: result := ModflowGhbBoundary;
    ptQ: result := ModflowWellBoundary;
    ptRIV: result := ModflowRivBoundary;
    ptDRN: result := ModflowDrnBoundary;
    ptDRT: result := ModflowDrtBoundary;
    ptRCH: result := ModflowRchBoundary;
    ptEVT: result := ModflowEvtBoundary;
    ptETS: result := ModflowEtsBoundary;
    ptStr: result := ModflowStrBoundary;
    ptQMax: result := ModflowFmpWellBoundary;
    else Assert(False);
  end;
end;

function TScreenObject.GetMfBoundaryI(
  ParamType: TParameterType): IModflowParamBoundary;
begin
  result := GetMfBoundary(ParamType);
end;

function TScreenObject.GetMinimumFraction: double;
begin
  result := StoredMinimumFraction.Value;
end;

function TScreenObject.GetMinX: real;
begin
  UpdateBox;
  result := FMinX;
end;

function TScreenObject.GetMinY: real;
begin
  UpdateBox;
  result := FMinY;
end;

function TScreenObject.GetSectionClosed(const Index: integer): boolean;
var
  StartPoint, EndPoint: TPoint2D;
begin
  Assert(Index >= 0);
  Assert(Index <= SectionCount);
  result := SectionEnd[Index] - SectionStart[Index] >= 3;
  if result then
  begin
    StartPoint := Points[SectionStart[Index]];
    EndPoint := Points[SectionEnd[Index]];
    result := (StartPoint.X = EndPoint.X) and (StartPoint.Y = EndPoint.Y);
  end;
end;

function TScreenObject.GetSectionCount: integer;
begin
  if (FSectionStarts = nil) then
  begin
    result := 1;
  end
  else
  begin
    result := FSectionStarts.Count + 1;
  end;
end;

function TScreenObject.GetSectionEnd(const Index: integer): integer;
var
  SC: integer;
begin
  Assert(Index >= 0);
  SC := SectionCount;
  Assert(Index < SC);
  if Index = SC-1 then
  begin
    result := Count-1
  end
  else
  begin
    result := Min(Count-1, SectionStart[Index+1] -1);
  end;
end;

function TScreenObject.GetSectionLength(const Index: integer): integer;
begin
  Result := SectionEnd[Index] - SectionStart[Index] + 1;
end;

function TScreenObject.CheckGetSegments(AModel: TBaseModel): TCellElementSegmentList;
var 
  ErrorMessage: string;
begin
  try
    result := GetSegments(AModel);
  except on E: ECircularRefScreenObjectError do
    begin
      if ElevationCount <> ecZero then
      begin
        ElevationCount := ecZero;
        Beep;
        ErrorMessage := Format(StrThereWasAProblemCircRef, [Name, E.Message]);
        frmErrorsAndWarnings.AddError(Model, StrCircularReferenceE, ErrorMessage, self);
        MessageDlg(ErrorMessage, mtError, [mbOK], 0);
        result := GetSegments(AModel)
      end
      else
      begin
        raise
      end;
    end;
  end;
end;

function TScreenObject.GetSegments(AModel: TBaseModel): TCellElementSegmentList;
var
  RotatedPoints: TEdgePointArray;
  TempMinX, TempMinY, TempMaxX, TempMaxY: double;
begin
//  result := nil;
  PushGlobalStack;
  try
    Assert(AModel is TCustomModel);
    FSegments := FSegModelAssoc.AssociatedSegmentList[AModel];
    if not FSegments.UpToDate then
    begin
      if FSegments.FGettingSegments then
      begin
        raise ECircularRefScreenObjectError.Create(Format(
          StrErrorInObjectS, [Name]));
      end;
      FSegments.FGettingSegments := True;
      try
        FCachedCells.Invalidate;
        case ViewDirection of
          vdTop:
            begin
              RotatePoints(AModel, RotatedPoints,
                TempMinX, TempMinY, TempMaxX, TempMaxY);
              UpdateTopSegments( EvaluatedAt, True, RotatedPoints, AModel);
            end;
          vdFront:
            begin
              UpdateFrontSegments(AModel, EvaluatedAt);
            end;
          vdSide:
            begin
              UpdateSideSegments(AModel, EvaluatedAt);
            end;
        end;
      finally
        FSegments.FGettingSegments := False;
      end;
    end
    else if FSegments.FCached and FSegments.FCleared then
    begin
      FSegments.RestoreData;
    end;
    result := FSegments;
  finally
    PopGlobalStack;
  end;
end;

function TScreenObject.GetSectionStart(const Index: integer): integer;
begin
  Assert(Index >= 0);
  Assert(Index <= SectionCount);
  if Index = 0 then
  begin
    result := 0
  end
  else
  begin
    result := FSectionStarts.IntValues[Index-1];
  end;
end;

function TScreenObject.GetSectionStarts: TValueArrayStorage;
begin
  CreateSectionStarts;
  result := FSectionStarts;
end;

function TScreenObject.GetSelectedVertexCount: integer;
begin
  if FNeedToResetSelectedVertexCount then
  begin
    ResetSelectedVertexCount;
  end;
  result := FSelectedVertexCount;
end;

function TScreenObject.Closed: boolean;
var
  Index: integer;
begin
  result := Count >= 4;
  if not result then
  begin
    Exit;
    // The first and last points must be at the same location for a
    // screen object to be closed.  Thus a triangle would have four points;
    // not three.
  end;

  if FIsClosedCached then
  begin
    result := FCachedClosed;
  end
  else
  begin
    try
      result := False;
      for Index := 0 to SectionCount - 1 do
      begin
        result := SectionClosed[Index];
        if result then
        begin
          Exit;
        end;
      end;
    finally
      FCachedClosed := result;
      FIsClosedCached := True;
    end;
  end;
end;

procedure TScreenObject.ClearSelectedVertices;
//var
//  Index: integer;
begin
  SetLength(FSelectedVertices, Capacity);
  if Capacity > 0 then
  begin
    ZeroMemory(FSelectedVertices, Capacity*SizeOf(Boolean));
  end;
  if FSelectedVertexCount <> 0 then
  begin
    FSelectedVertexCount := 0;
    InvalidateModel;
  end;
//  FSelectedVertexCount := 0;
//  if FSelectedVertexCount > 0 then
//  begin
//    for Index := 0 to Length(FSelectedVertices) - 1 do
//    begin
//      FSelectedVertices[Index] := False;
//    end;
//    FSelectedVertexCount := 0;
//    InvalidateModel;
//  end;
end;

procedure TScreenObject.SetDeleted(const Value: boolean);
var
  Grid: TCustomModelGrid;
  LocalModel: TPhastModel;
//  Mesh: TSutraMesh3D;
begin
  if FDeleted <> Value then
  begin
    InvalidateModel;
    FDeleted := Value;
    Selected := False;
    if FModel <> nil then
    begin
      LocalModel := FModel as TPhastModel;
      Grid := LocalModel.Grid;
    end
    else
    begin
      Grid := nil;
    end;
    if Grid <> nil then
    begin
      Grid.NeedToRecalculateCellColors;
    end;
    SutraBoundaries.Changed;
//    Mesh := LocalModel.Mesh;
//    if Mesh <> nil then
//    begin
//      Mesh.NeedToRecalculateTopColors := True;
//      Mesh.NeedToRecalculateFrontColors := True;
//    end;


    UpToDate := False;
//    Invalidate;
    NotifyGuiOfChange(self);
  end;
end;

procedure TScreenObject.SetDuplicatesAllowed(const Value: Boolean);
begin
  if FDuplicatesAllowed <> Value then
  begin
    FDuplicatesAllowed := Value;
    InvalidateModel;
  end;
end;

procedure TScreenObject.SetDyanmicTimesSeriesCollection(
  const Value: TDynamicTimesSeriesCollections);
begin
  if not FDynamicTimesSeriesCollections.IsSame(Value) then
  begin
    FDynamicTimesSeriesCollections.Assign(Value);
    FDynamicTimesSeriesCollections.Invalidate;
  end;
end;

function TScreenObject.SelectEdge(const X, Y: integer): integer;
var
  Index: integer;
  X1, X2, Y1, Y2: Int64;
  MinX, MaxX, MinY, MaxY: Int64;
  SectionIndex: integer;
  StartIndex: integer;
begin
  result := -1;

  if Deleted or not Visible then
  begin
    Exit;
  end;

  SectionIndex := 1;
  for Index := 1 to Count - 1 do
  begin
    if SectionIndex < SectionCount then
    begin
      StartIndex := SectionStart[SectionIndex];
      if Index = StartIndex then
      begin
        Inc(SectionIndex);
        Continue;
      end;
    end;
    X1 := CanvasCoordinates[Index - 1].X;
    X2 := CanvasCoordinates[Index].X;
    Y1 := CanvasCoordinates[Index - 1].Y;
    Y2 := CanvasCoordinates[Index].Y;
    MinX := Int64(Min(X1, X2)) - SelectEpsilon;
    MaxX := Int64(Max(X1, X2)) + SelectEpsilon;
    MinY := Int64(Min(Y1, Y2)) - SelectEpsilon;
    MaxY := Int64(Max(Y1, Y2)) + SelectEpsilon;

    if IsValueInside(MinX, X, MaxX) and IsValueInside(MinY, Y, MaxY) then
    begin
      if (CanvasCoordinates[Index - 1].X = CanvasCoordinates[Index].X)
        or (CanvasCoordinates[Index - 1].Y = CanvasCoordinates[Index].Y) then
      begin
        result := Index - 1;
        Exit;
      end
      else
      begin

        if Abs(X2 - X1) > Abs(Y2 - Y1) then
        begin
          if Abs((X - X1) / (X2 - X1) * (Y2 - Y1) + Y1 - Y) < SelectEpsilon then
          begin
            result := Index - 1;
            Exit;
          end
        end
        else
        begin
          if Abs((Y - Y1) / (Y2 - Y1) * (X2 - X1) + X1 - X) < SelectEpsilon then
          begin
            result := Index - 1;
            Exit;
          end
        end;
      end;
    end;
  end;
end;

function TScreenObject.Delegate: TCustomScreenObjectDelegate;
begin
  result := FDelegateCollection.Delegate(
    (FModel as TCustomModel).ModelSelection);
end;

function TScreenObject.IsOutsideBoxPlusBuffer(const Location: TPoint2D;
  const BufferDistance: real; const Anisotropy: real): boolean;
begin
  Assert(BufferDistance >= 0);
  result :=
    ((Location.X - BufferDistance) >= MaxX) or
    ((Location.X + BufferDistance) <= MinX) or
    ((Location.Y*Anisotropy - BufferDistance) >= MaxY*Anisotropy) or
    ((Location.Y*Anisotropy + BufferDistance) <= MinY*Anisotropy);
end;

function TScreenObject.IsOutsideSubPolygonBoxPlusBuffer(
  const Location: TPoint2D; const BufferDistance: real; const Anisotropy: real;
  const SubPolygon: TSubPolygon): boolean;
begin
  Assert(BufferDistance >= 0);
  result :=
    ((Location.X - BufferDistance) >= SubPolygon.MaxX) or
    ((Location.X + BufferDistance) <= SubPolygon.MinX) or
    ((Location.Y*Anisotropy - BufferDistance) >= SubPolygon.MaxY*Anisotropy) or
    ((Location.Y*Anisotropy + BufferDistance) <= SubPolygon.MinY*Anisotropy);
end;

function TScreenObject.IsAnyPointInSubPolygonCloser(const Location: TPoint2D;
  var Distance: real; out ClosestLocation: TPoint2D;
  const Anisotropy: real; const ASubPolygon: TSubPolygon): boolean;
var
  TempLocation: TPoint2D;
  VertexIndex: Integer;
  FirstPoint: TPoint2D;
  SecondPoint: TPoint2D;
  temp: Real;
begin
  result := False;
  if IsOutsideSubPolygonBoxPlusBuffer(Location, Distance,
    Anisotropy, ASubPolygon) then
  begin
    Exit;
  end;

  if ASubPolygon.SubPolygon1 <> nil then
  begin
    result := IsAnyPointInSubPolygonCloser(Location, Distance,
      ClosestLocation, Anisotropy, ASubPolygon.SubPolygon1);

  // We want to know not only if any point is closer but, if so, what is the
  // closest point and how close is it.  Therefore we need to be sure to
  // evaluate both ASubPolygon.FSubPolygon1 and ASubPolygon.FSubPolygon2.
    result := IsAnyPointInSubPolygonCloser(Location, Distance,
      ClosestLocation, Anisotropy, ASubPolygon.SubPolygon2) or result;
  end
  else
  begin
    if ASubPolygon.Count = 1 then
    begin
      TempLocation := Points[ASubPolygon.Start];
      temp := PointToPointDist(Location, TempLocation, Anisotropy);
      if temp < Distance then
      begin
        Distance := temp;
        ClosestLocation := TempLocation;
        result := true;
      end;
    end
    else
    begin
      for VertexIndex := 0 to ASubPolygon.Count - 2 do
      begin
        FirstPoint := Points[ASubPolygon.Start + VertexIndex];
        SecondPoint := Points[ASubPolygon.Start + VertexIndex + 1];
        temp := MinDistPointLine(Location, FirstPoint, SecondPoint,
          TempLocation, Anisotropy);
        if temp < Distance then
        begin
          Distance := temp;
          ClosestLocation := TempLocation;
          result := true;
        end;
      end;
    end;
  end;
end;

function TScreenObject.IsAnyPointCloser(const Location: TPoint2D;
  var Distance: real; out ClosestLocation: TPoint2D; var SectionIndex: integer;
  const Anisotropy: real): boolean;
var
  SubPolygon: TSubPolygon;
  Index: Integer;
  CloserLocation: Boolean;
begin
  result := False;
  if IsOutsideBoxPlusBuffer(Location, Distance, Anisotropy) then
  begin
    Exit;
  end;
  if SubPolygonCount = 0 then
  begin
    CreateSubPolygons;
  end;

  for Index := 0 to SubPolygonCount - 1 do
  begin
    SubPolygon := SubPolygons[Index];
    CloserLocation := IsAnyPointInSubPolygonCloser(Location, Distance,
      ClosestLocation, Anisotropy, SubPolygon);
    if CloserLocation then
    begin
      SectionIndex := Index;
    end;
    result := result or CloserLocation;
  end;
end;

procedure TScreenObject.NotifyGuiOfChange(Sender: TObject);
begin
  if not (csDestroying in ComponentState)
    and (FModel <> nil) and FCanInvalidateModel
    and not (csDestroying in FModel.ComponentState)
    and not (FModel as TPhastModel).Clearing then
  begin
    (FModel as TPhastModel).ScreenObjectsChanged(Sender);
  end;
end;

function TScreenObject.RchParameters: IModflowParameters;
begin
  result := nil;
  if ModflowRchBoundary <> nil then
  begin
    result := ModflowRchBoundary.Parameters;
  end;
end;

procedure TScreenObject.RefreshGui(Sender: TObject);
begin
  if FModel <> nil then
  begin
    (FModel as TPhastModel).RefreshScreenObjects(Sender);
  end;
end;

function TScreenObject.IAmACurrentScreenObject: boolean;
begin
  Assert(Assigned(FModel));
  result := (FModel as TPhastModel).IsCurrentScreenObject(self);
end;

procedure TScreenObject.UpdateLower3DElevations(AModel: TBaseModel);
begin
  FSegments := FSegModelAssoc.AssociatedSegmentList[AModel];
  if FSegments.FLower3DElevationsNeedsUpdating then
  begin
    AssignLower3DElevations(AModel);
  end;
  FSegments.FLower3DElevations.CheckRestore;
end;

procedure TScreenObject.UpdateHigher3DElevations(AModel: TBaseModel);
begin
  FSegments := FSegModelAssoc.AssociatedSegmentList[AModel];
  if FSegments.FHigher3DElevationsNeedsUpdating then
  begin
    AssignHigher3DElevations(AModel);
  end;
  FSegments.FHigher3DElevations.CheckRestore;
end;

procedure TScreenObject.UpdateImportedValues(DataArray: TDataArray);
begin
  if DataArray <> nil then
  begin
    FCurrentValues := ImportedValues.ValuesByName(DataArray.Name);
  end
  else
  begin
    FCurrentValues := nil;
  end;
end;

procedure TScreenObject.DrawSectionLabels(const Bitmap32: TBitmap32);
var
  StartPoint: TPoint;
  AZoomBox: TQRbwZoomBox2;
  ExistingFont: TFont;
  SectionIndex: Integer;
  VertexIndex: Integer;
  SectLabel: string;
  procedure DrawLabel;
  begin
    if Length(CanvasCoordinates) > VertexIndex then
    begin
      StartPoint := CanvasCoordinates[VertexIndex];
      AZoomBox := ZoomBox(ViewDirection);
      if (StartPoint.X >= 0) and (StartPoint.Y >= 0)
        and (StartPoint.X < AZoomBox.Image32.Width)
        and (StartPoint.Y < AZoomBox.Image32.Height) then
      begin
        StartPoint.X := StartPoint.X + SectionLabel.OffSet.X;
        StartPoint.Y := StartPoint.Y - SectionLabel.OffSet.Y;
        SectLabel := InttoStr(VertexIndex+1);
        Bitmap32.Textout(StartPoint.X, StartPoint.Y, SectLabel);
      end;
    end;

  end;
begin
  if SectionLabel.Visible then
  begin
    ExistingFont := TFont.Create;
    try
      ExistingFont.Assign(Bitmap32.Font);
      Bitmap32.Font := SectionLabel.Font;
      VertexIndex := 0;
      DrawLabel;

      for SectionIndex := 0 to SectionStarts.Count - 1 do
      begin
        VertexIndex := SectionStarts.IntValues[SectionIndex];
        DrawLabel;
      end;

    finally
      Bitmap32.Font := ExistingFont;
      ExistingFont.Free;
    end;
  end;
end;

procedure TScreenObject.DrawSectionLabels(const ACanvas: TCanvas);
var
  StartPoint: TPoint;
  AZoomBox: TQRbwZoomBox2;
  ExistingFont: TFont;
  SectionIndex: Integer;
  SectLabel: string;
  VertexIndex: Integer;
  procedure DrawLabel;
  begin
    StartPoint := CanvasCoordinates[VertexIndex];
    AZoomBox := ZoomBox(ViewDirection);
    if (StartPoint.X >= 0) and (StartPoint.Y >= 0)
      and (StartPoint.X < AZoomBox.Image32.Width)
      and (StartPoint.Y < AZoomBox.Image32.Height) then
    begin
      StartPoint.X := StartPoint.X + SectionLabel.OffSet.X;
      StartPoint.Y := StartPoint.Y - SectionLabel.OffSet.Y;
      SectLabel := IntToStr(VertexIndex+1);
      ACanvas.Textout(StartPoint.X, StartPoint.Y, SectLabel);
    end;
  end;
begin
  if SectionLabel.Visible then
  begin
    ExistingFont := TFont.Create;
    try
      ExistingFont.Assign(ACanvas.Font);
      ACanvas.Font := SectionLabel.Font;
      VertexIndex := 0;
      DrawLabel;

      for SectionIndex := 0 to SectionStarts.Count - 1 do
      begin
        VertexIndex := SectionStarts.IntValues[SectionIndex];
        DrawLabel;
      end;

    finally
      ACanvas.Font := ExistingFont;
      ExistingFont.Free;
    end;
  end;
end;

procedure TScreenObject.DrawSectionLabels(const Graphic: TPersistent);
begin
  if Graphic is TBitmap32 then
  begin
    DrawSectionLabels(TBitmap32(Graphic));
  end
  else
  begin
   DrawSectionLabels(Graphic as TCanvas);
  end;
end;

procedure TScreenObject.DrawSegmentList(const Direction: TViewDirection;
  const Bitmap32: TPersistent; SegmentList: TList);
const
  UnselectedOpacity = 125;
var
  FillColor32: TColor32;
  LineColor32: TColor32;
  ObjectIndex: Integer;
  RealPoint: TPoint2D;
  PointCount: Integer;
  AnotherSegment: TLineSegment;
  SegmentIndex: Integer;
  SegmentFound: Boolean;
  Segment: TLineSegment;
  NewSegmentList: TList;
  MultiplePolygons: Boolean;
  P: TPolygon32;
  PointCapacity: Integer;
  ThreeDPoints: TPointArray;
  function ConvertPoint: TPoint;
  begin
    Assert(FModel <> nil);
    result := (FModel as TPhastModel).ConvertPoint(Direction, RealPoint);
  end;
begin
  PointCapacity := 5;
  SetLength(ThreeDPoints, PointCapacity);
  P := nil;
  MultiplePolygons := false;
  NewSegmentList := TObjectList.Create;
  try
    while SegmentList.Count > 0 do
    begin
      NewSegmentList.Clear;
      Segment := SegmentList[SegmentList.Count - 1];
      NewSegmentList.Add(Segment);
      SegmentList.Delete(SegmentList.Count - 1);
      SegmentFound := True;
      while SegmentFound do
      begin
        SegmentFound := False;
        for SegmentIndex := SegmentList.Count - 1 downto 0 do
        begin
          AnotherSegment := SegmentList[SegmentIndex];
          if Segment.IsNextSegment(AnotherSegment) then
          begin
            Segment := AnotherSegment;
            NewSegmentList.Add(Segment);
            SegmentList.Delete(SegmentIndex);
            SegmentFound := True;
          end;
        end;
      end;
      PointCount := NewSegmentList.Count + 1;
      SetLength(ThreeDPoints, PointCount);
      if NewSegmentList.Count > 0 then
      begin
        Segment := NewSegmentList[0];
        RealPoint := Segment.Point1;
        ThreeDPoints[0] := ConvertPoint;
        for ObjectIndex := 0 to NewSegmentList.Count - 1 do
        begin
          Segment := NewSegmentList[ObjectIndex];
          RealPoint := Segment.Point2;
          ThreeDPoints[ObjectIndex + 1] := ConvertPoint;
        end;
        if ColorLine then
        begin
          LineColor32 := Color32(LineColor);
        end
        else
        begin
          LineColor32 := clBlack32;
        end;
        if FillScreenObject then
        begin
          FillColor32 := Color32(FillColor);
          FillColor32 := SetAlpha(FillColor32, UnselectedOpacity);
        end
        else
        begin
          FillColor32 := clTransparent32;
        end;
        DrawBigPolygon32(Bitmap32, LineColor32, FillColor32, 1, ThreeDPoints,
          P, MultiplePolygons, True, True);
      end;
    end;
  finally
    NewSegmentList.Free;
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentInsideTopLeft(
  RowIndex: Integer; ColIndex: Integer;
  SegmentList: TList; LayerIndex: Integer; ModflowGrid: TModflowGrid;
  LocalDelegate: TCustomScreenObjectDelegate);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if (ColIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    //   --------
    //   |  /   |
    //   | /    |
    //   |/     |
    //   |      |
    //   |      |
    //   |      |
    //   --------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.TwoDColumnEdgeCenter(ColIndex, RowIndex);
    Segment.Point2 := ModflowGrid.TwoDRowEdgeCenter(ColIndex, RowIndex);
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentInsideBottomLeft(
  SegmentList: TList; LayerIndex: Integer; ModflowGrid: TModflowGrid;
  LocalDelegate: TCustomScreenObjectDelegate;
  RowIndex: Integer; ColIndex: Integer);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if (ColIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex < ModflowGrid.RowCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (RowIndex < ModflowGrid.RowCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex + 1, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    //  --------
    //  |      |
    //  |      |
    //  |      |
    //  |\     |
    //  | \    |
    //  |  \   |
    //  --------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.TwoDRowEdgeCenter(ColIndex, RowIndex + 1);
    Segment.Point2 := ModflowGrid.TwoDColumnEdgeCenter(ColIndex, RowIndex);
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentInsideBottomRight(
  RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
  LayerIndex: Integer; ModflowGrid: TModflowGrid;
  LocalDelegate: TCustomScreenObjectDelegate);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if (ColIndex < ModflowGrid.ColumnCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex < ModflowGrid.RowCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex < ModflowGrid.ColumnCount - 1)
    and (RowIndex < ModflowGrid.RowCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex + 1, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    // --------
    // |      |
    // |      |
    // |      |
    // |     /|
    // |    / |
    // |   /  |
    // --------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.TwoDColumnEdgeCenter(ColIndex + 1, RowIndex);
    Segment.Point2 := ModflowGrid.TwoDRowEdgeCenter(ColIndex, RowIndex + 1);
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentInsideTopRight(
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  RowIndex: Integer; ColIndex: Integer; SegmentList: TList; LayerIndex: Integer);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if (ColIndex < ModflowGrid.ColumnCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex < ModflowGrid.ColumnCount - 1) and (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    // ---------
    // |    \  |
    // |     \ |
    // |      \|
    // |   +   |
    // |       |
    // |       |
    // |       |
    // ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.TwoDRowEdgeCenter(ColIndex, RowIndex);
    Segment.Point2 := ModflowGrid.TwoDColumnEdgeCenter(ColIndex + 1, RowIndex);
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentTopLeft(
  RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
  LayerIndex: Integer; ModflowGrid: TModflowGrid;
  LocalDelegate: TCustomScreenObjectDelegate);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := ColIndex > 0;
  if (ColIndex > 0)
    and not LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    // -----=======-----
    // |       |       |
    // |       |       |
    // |       |       |
    // |       |   +   |
    // |       |       |
    // |       |       |
    // |       |       |
    // -----------------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.TwoDRowEdgeCenter(ColIndex - 1, RowIndex);
    Segment.Point2 := ModflowGrid.TwoDRowEdgeCenter(ColIndex, RowIndex);
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentBottomLeft(
  RowIndex: Integer; ColIndex: Integer; SegmentList: TList; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (ColIndex > 0);
  if (ColIndex > 0)
    and not LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex < ModflowGrid.RowCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (RowIndex < ModflowGrid.RowCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex + 1, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    // -----------------
    // |       |       |
    // |       |       |
    // |       |       |
    // |       |   +   |
    // |       |       |
    // |       |       |
    // |       |       |
    // -----=======-----
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.TwoDRowEdgeCenter(ColIndex, RowIndex + 1);
    Segment.Point2 := ModflowGrid.TwoDRowEdgeCenter(ColIndex - 1, RowIndex + 1);
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentAboveLeft(
  RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
  LayerIndex: Integer; ModflowGrid: TModflowGrid;
  LocalDelegate: TCustomScreenObjectDelegate);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := RowIndex > 0;
  if (ColIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0)
    and not LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    //  ---------
    //  |       |
    //  |       |
    //  |       |
    //  |       |
    //  +       |
    //  +       |
    //  +       |
    //  +--------
    //  +       |
    //  +       |
    //  +       |
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.TwoDColumnEdgeCenter(ColIndex, RowIndex);
    Segment.Point2 := ModflowGrid.TwoDColumnEdgeCenter(ColIndex, RowIndex - 1);
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentAboveRight(
  RowIndex: Integer; ColIndex: Integer; SegmentList: TList; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (RowIndex > 0);
  if (ColIndex < ModflowGrid.ColumnCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0)
    and not LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex < ModflowGrid.ColumnCount - 1) and (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    //  ---------
    //  |       |
    //  |       |
    //  |       |
    //  |       |
    //  |       +
    //  |       +
    //  |       +
    //  --------+
    //  |       +
    //  |       +
    //  |       +
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.
      TwoDColumnEdgeCenter(ColIndex + 1, RowIndex - 1);
    Segment.Point2 := ModflowGrid.TwoDColumnEdgeCenter(ColIndex + 1, RowIndex);
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentLeftOutsideAbove(
  RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
  LayerIndex: Integer; ModflowGrid: TModflowGrid;
  LocalDelegate: TCustomScreenObjectDelegate);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (ColIndex > 0) and (RowIndex > 0);
  if (ColIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (RowIndex > 0)
    and not LocalDelegate.SelectedCells[
    LayerIndex, RowIndex - 1, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    // ---------
    // |       |
    // |       |
    // |       |
    // |       |
    // |       |
    // |       |
    // |       |
    // -----------------
    //      \  |       |
    //       \ |       |
    //        \|       |
    //         |   +   |
    //         |       |
    //         |       |
    //         |       |
    //         ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.TwoDColumnEdgeCenter(ColIndex, RowIndex);
    Segment.Point2 := ModflowGrid.TwoDRowEdgeCenter(ColIndex - 1, RowIndex);
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentAboveOutsideLeft(
  RowIndex: Integer; ColIndex: Integer; SegmentList: TList;
  LayerIndex: Integer; ModflowGrid: TModflowGrid;
  LocalDelegate: TCustomScreenObjectDelegate);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (ColIndex > 0) and (RowIndex > 0);
  if (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (RowIndex > 0)
    and not LocalDelegate.SelectedCells[
    LayerIndex, RowIndex - 1, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    //  ---------
    //  |       |
    //  |       |
    //  |       |
    //  |       |
    //  |       |\
    //  |       | \
    //  |       |  \
    //  -----------------
    //          |       |
    //          |       |
    //          |       |
    //          |   +   |
    //          |       |
    //          |       |
    //          |       |
    //          ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.TwoDColumnEdgeCenter(ColIndex, RowIndex - 1);
    Segment.Point2 := ModflowGrid.TwoDRowEdgeCenter(ColIndex, RowIndex);
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentAboveOutsideRight(
  RowIndex: Integer; ColIndex: Integer; SegmentList: TList; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (ColIndex < ModflowGrid.ColumnCount - 1) and (RowIndex > 0);
  if (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex < ModflowGrid.ColumnCount - 1) and (RowIndex > 0)
    and not LocalDelegate.SelectedCells[
    LayerIndex, RowIndex - 1, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    //          ---------
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //         /|       |
    //        / |       |
    //       /  |       |
    //  -----------------
    //  |       |
    //  |       |
    //  |       |
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.TwoDRowEdgeCenter(ColIndex, RowIndex);
    Segment.Point2 := ModflowGrid.
      TwoDColumnEdgeCenter(ColIndex + 1, RowIndex - 1);
  end;
end;

procedure TScreenObject.DrawModflowTopSegmentRightOutsideAbove(
  RowIndex: Integer; ColIndex: Integer; SegmentList: TList; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (RowIndex > 0) and (ColIndex < ModflowGrid.ColumnCount - 1);
  if (ColIndex < ModflowGrid.ColumnCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex < ModflowGrid.ColumnCount - 1) and (RowIndex > 0)
    and not LocalDelegate.SelectedCells[
    LayerIndex, RowIndex - 1, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    //          ---------
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //  -----------------
    //  |       |  /
    //  |       | /
    //  |       |/
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := ModflowGrid.TwoDRowEdgeCenter(ColIndex + 1, RowIndex);
    Segment.Point2 := ModflowGrid.TwoDColumnEdgeCenter(ColIndex + 1, RowIndex);
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentInsideTopLeft(
  var FrontPoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if FrontPoints = nil then
  begin
    FrontPoints := ModflowGrid.FrontCellPoints(RowIndex);
  end;
  if (ColIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := FrontPoints[ColIndex * 2, LayerIndex];
    Point2 := FrontPoints[ColIndex * 2, LayerIndex + 1];
    //   --------
    //   |  /   |
    //   | /    |
    //   |/     |
    //   |      |
    //   |      |
    //   |      |
    //   --------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Segment.Point2 := FrontPoints[ColIndex * 2 + 1, LayerIndex];
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentInsideBottomLeft(
  FrontPoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if (ColIndex > 0) and
    LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := FrontPoints[ColIndex * 2, LayerIndex];
    Point2 := FrontPoints[ColIndex * 2, LayerIndex + 1];
    //  --------
    //  |      |
    //  |      |
    //  |      |
    //  |\     |
    //  | \    |
    //  |  \   |
    //  --------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := FrontPoints[ColIndex * 2 + 1, LayerIndex + 1];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentInsideBottomRight(
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  FrontPoints: T2DRealPointArray; SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if (ColIndex < ModflowGrid.ColumnCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex < ModflowGrid.ColumnCount - 1)
    and (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := FrontPoints[ColIndex * 2 + 2, LayerIndex];
    Point2 := FrontPoints[ColIndex * 2 + 2, LayerIndex + 1];
    // --------
    // |      |
    // |      |
    // |      |
    // |     /|
    // |    / |
    // |   /  |
    // --------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Segment.Point2 := FrontPoints[ColIndex * 2 + 1, LayerIndex + 1];
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentInsideTopRight(
  FrontPoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if (ColIndex < ModflowGrid.ColumnCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex < ModflowGrid.ColumnCount - 1) and (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := FrontPoints[ColIndex * 2 + 2, LayerIndex];
    Point2 := FrontPoints[ColIndex * 2 + 2, LayerIndex + 1];
    // ---------
    // |    \  |
    // |     \ |
    // |      \|
    // |   +   |
    // |       |
    // |       |
    // |       |
    // ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := FrontPoints[ColIndex * 2 + 1, LayerIndex];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentTopLeft(
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  LocalDelegate: TCustomScreenObjectDelegate; FrontPoints: T2DRealPointArray;
  SegmentList: TList);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := ColIndex > 0;
  if (ColIndex > 0) and not LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex > 0) and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (LayerIndex > 0) and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    // -----=======-----
    // |       |       |
    // |       |       |
    // |       |       |
    // |       |   +   |
    // |       |       |
    // |       |       |
    // |       |       |
    // -----------------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := FrontPoints[ColIndex * 2 - 1, LayerIndex];
    Segment.Point2 := FrontPoints[ColIndex * 2, LayerIndex];
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := FrontPoints[ColIndex * 2, LayerIndex];
    Segment.Point2 := FrontPoints[ColIndex * 2 + 1, LayerIndex];
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentBottomLeft(
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  FrontPoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  SegmentList: TList);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (ColIndex > 0);
  if (ColIndex > 0)
    and not LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    // -----------------
    // |       |       |
    // |       |       |
    // |       |       |
    // |       |   +   |
    // |       |       |
    // |       |       |
    // |       |       |
    // -----=======-----
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := FrontPoints[ColIndex * 2 + 1, LayerIndex + 1];
    Segment.Point2 := FrontPoints[ColIndex * 2, LayerIndex + 1];
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := FrontPoints[ColIndex * 2, LayerIndex + 1];
    Segment.Point2 := FrontPoints[ColIndex * 2 - 1, LayerIndex + 1];
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentAboveLeft(
  FrontPoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  LocalDelegate: TCustomScreenObjectDelegate; SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := LayerIndex > 0;
  if (ColIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex > 0)
    and not LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    //  ---------
    //  |       |
    //  |       |
    //  |       |
    //  |       |
    //  +       |
    //  +       |
    //  +       |
    //  +--------
    //  +       |
    //  +       |
    //  +       |
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------
    Point1 := FrontPoints[ColIndex * 2, LayerIndex];
    Point2 := FrontPoints[ColIndex * 2, LayerIndex + 1];
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Point2 := FrontPoints[ColIndex * 2, LayerIndex - 1];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentAboveRight(
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  FrontPoints: T2DRealPointArray; SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (LayerIndex > 0);
  if (ColIndex < ModflowGrid.ColumnCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex > 0)
    and not LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex < ModflowGrid.ColumnCount - 1) and (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    //  ---------
    //  |       |
    //  |       |
    //  |       |
    //  |       |
    //  |       +
    //  |       +
    //  |       +
    //  --------+
    //  |       +
    //  |       +
    //  |       +
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------
    Point1 := FrontPoints[ColIndex * 2 + 2, LayerIndex];
    Point2 := FrontPoints[ColIndex * 2 + 2, LayerIndex - 1];
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Point2 := FrontPoints[ColIndex * 2 + 2, LayerIndex + 1];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentLeftOutsideAbove(
  FrontPoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  LocalDelegate: TCustomScreenObjectDelegate; SegmentList: TList);
var
  Point1: TPoint2D;
  Point2: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (ColIndex > 0) and (LayerIndex > 0);
  if (ColIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (LayerIndex > 0)
    and not LocalDelegate.SelectedCells[
    LayerIndex - 1, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := FrontPoints[ColIndex * 2, LayerIndex];
    Point2 := FrontPoints[ColIndex * 2, LayerIndex + 1];
    // ---------
    // |       |
    // |       |
    // |       |
    // |       |
    // |       |
    // |       |
    // |       |
    // -----------------
    //      \  |       |
    //       \ |       |
    //        \|       |
    //         |   +   |
    //         |       |
    //         |       |
    //         |       |
    //         ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Segment.Point2 := FrontPoints[ColIndex * 2 - 1, LayerIndex];
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentAboveOutsideLeft(
  FrontPoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  LocalDelegate: TCustomScreenObjectDelegate; SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (ColIndex > 0) and (LayerIndex > 0);
  if (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex > 0) and (LayerIndex > 0)
    and not LocalDelegate.SelectedCells[
    LayerIndex - 1, RowIndex, ColIndex - 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := FrontPoints[ColIndex * 2, LayerIndex];
    Point2 := FrontPoints[ColIndex * 2, LayerIndex - 1];
    //  ---------
    //  |       |
    //  |       |
    //  |       |
    //  |       |
    //  |       |\
    //  |       | \
    //  |       |  \
    //  -----------------
    //          |       |
    //          |       |
    //          |       |
    //          |   +   |
    //          |       |
    //          |       |
    //          |       |
    //          ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Segment.Point2 := FrontPoints[ColIndex * 2 + 1, LayerIndex];
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentAboveOutsideRight(
  LocalDelegate: TCustomScreenObjectDelegate;
  FrontPoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (ColIndex < ModflowGrid.ColumnCount - 1) and (LayerIndex > 0);
  if (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex < ModflowGrid.ColumnCount - 1) and (LayerIndex > 0)
    and not LocalDelegate.SelectedCells[
    LayerIndex - 1, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := FrontPoints[ColIndex * 2 + 2, LayerIndex];
    Point2 := FrontPoints[ColIndex * 2 + 2, LayerIndex - 1];
    //          ---------
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //         /|       |
    //        / |       |
    //       /  |       |
    //  -----------------
    //  |       |
    //  |       |
    //  |       |
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := FrontPoints[ColIndex * 2 + 1, LayerIndex];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

procedure TScreenObject.DrawModflowFrontSegmentRightOutsideAbove(
  FrontPoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (LayerIndex > 0) and (ColIndex < ModflowGrid.ColumnCount - 1);
  if (ColIndex < ModflowGrid.ColumnCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if (ColIndex < ModflowGrid.ColumnCount - 1) and (LayerIndex > 0)
    and not LocalDelegate.SelectedCells[
    LayerIndex - 1, RowIndex, ColIndex + 1] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := FrontPoints[ColIndex * 2 + 2, LayerIndex];
    Point2 := FrontPoints[ColIndex * 2 + 2, LayerIndex + 1];
    //          ---------
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //  -----------------
    //  |       |  /
    //  |       | /
    //  |       |/
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := FrontPoints[ColIndex * 2 + 3, LayerIndex];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentInsideTopLeft(
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  var SidePoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if SidePoints = nil then
  begin
    SidePoints := ModflowGrid.SideCellPoints(ColIndex);
  end;
  if (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0) and (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := SidePoints[RowIndex * 2, LayerIndex];
    Point2 := SidePoints[RowIndex * 2, LayerIndex + 1];
    //   --------
    //   |  /   |
    //   | /    |
    //   |/     |
    //   |      |
    //   |      |
    //   |      |
    //   --------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Segment.Point2 := SidePoints[RowIndex * 2 + 1, LayerIndex];
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentInsideBottomLeft(
  SidePoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate; SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0) and (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := SidePoints[RowIndex * 2, LayerIndex];
    Point2 := SidePoints[RowIndex * 2, LayerIndex + 1];
    //  --------
    //  |      |
    //  |      |
    //  |      |
    //  |\     |
    //  | \    |
    //  |  \   |
    //  --------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := SidePoints[RowIndex * 2 + 1, LayerIndex + 1];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentInsideBottomRight(
  SidePoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if (RowIndex < ModflowGrid.RowCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex < ModflowGrid.RowCount - 1)
    and (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := SidePoints[RowIndex * 2 + 2, LayerIndex];
    Point2 := SidePoints[RowIndex * 2 + 2, LayerIndex + 1];
    // --------
    // |      |
    // |      |
    // |      |
    // |     /|
    // |    / |
    // |   /  |
    // --------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Segment.Point2 := SidePoints[RowIndex * 2 + 1, LayerIndex + 1];
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentInsideTopRight(
  LayerIndex: Integer; ModflowGrid: TModflowGrid;
  LocalDelegate: TCustomScreenObjectDelegate; SidePoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := True;
  if (RowIndex < ModflowGrid.RowCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex < ModflowGrid.RowCount - 1) and (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := SidePoints[RowIndex * 2 + 2, LayerIndex];
    Point2 := SidePoints[RowIndex * 2 + 2, LayerIndex + 1];
    // ---------
    // |    \  |
    // |     \ |
    // |      \|
    // |   +   |
    // |       |
    // |       |
    // |       |
    // ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := SidePoints[RowIndex * 2 + 1, LayerIndex];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentTopLeft(

  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  LocalDelegate: TCustomScreenObjectDelegate; SidePoints: T2DRealPointArray;
  SegmentList: TList);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;  
begin
  ShouldDraw := RowIndex > 0;
  if (RowIndex > 0)
    and not LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0) and (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    // -----=======-----
    // |       |       |
    // |       |       |
    // |       |       |
    // |       |   +   |
    // |       |       |
    // |       |       |
    // |       |       |
    // -----------------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := SidePoints[RowIndex * 2 - 1, LayerIndex];
    Segment.Point2 := SidePoints[RowIndex * 2, LayerIndex];
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := SidePoints[RowIndex * 2, LayerIndex];
    Segment.Point2 := SidePoints[RowIndex * 2 + 1, LayerIndex];
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentBottomLeft(
  SidePoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  SegmentList: TList);
var
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (RowIndex > 0);
  if (RowIndex > 0)
    and not LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0) and (LayerIndex < ModflowGrid.LayerCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    // -----------------
    // |       |       |
    // |       |       |
    // |       |       |
    // |       |   +   |
    // |       |       |
    // |       |       |
    // |       |       |
    // -----=======-----
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := SidePoints[RowIndex * 2 + 1, LayerIndex + 1];
    Segment.Point2 := SidePoints[RowIndex * 2, LayerIndex + 1];
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := SidePoints[RowIndex * 2, LayerIndex + 1];
    Segment.Point2 := SidePoints[RowIndex * 2 - 1, LayerIndex + 1];
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentAboveLeft(
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  LocalDelegate: TCustomScreenObjectDelegate; SidePoints: T2DRealPointArray;
  SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := LayerIndex > 0;
  if (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex > 0)
    and not LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0) and (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    //  ---------
    //  |       |
    //  |       |
    //  |       |
    //  |       |
    //  +       |
    //  +       |
    //  +       |
    //  +--------
    //  +       |
    //  +       |
    //  +       |
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------
    Point1 := SidePoints[RowIndex * 2, LayerIndex];
    Point2 := SidePoints[RowIndex * 2, LayerIndex + 1];
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Point2 := SidePoints[RowIndex * 2, LayerIndex - 1];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentAboveRight(
  SidePoints: T2DRealPointArray;
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  SegmentList: TList);
var Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (LayerIndex > 0);
  if (RowIndex < ModflowGrid.RowCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (LayerIndex > 0)
    and not LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex < ModflowGrid.RowCount - 1) and (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    //  ---------
    //  |       |
    //  |       |
    //  |       |
    //  |       |
    //  |       +
    //  |       +
    //  |       +
    //  --------+
    //  |       +
    //  |       +
    //  |       +
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------
    Point1 := SidePoints[RowIndex * 2 + 2, LayerIndex];
    Point2 := SidePoints[RowIndex * 2 + 2, LayerIndex - 1];
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Point2 := SidePoints[RowIndex * 2 + 2, LayerIndex + 1];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentLeftOutsideAbove(
  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  LocalDelegate: TCustomScreenObjectDelegate; SidePoints: T2DRealPointArray;
  SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (RowIndex > 0) and (LayerIndex > 0);
  if (RowIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0) and (LayerIndex > 0)
    and not LocalDelegate.SelectedCells[
    LayerIndex - 1, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := SidePoints[RowIndex * 2, LayerIndex];
    Point2 := SidePoints[RowIndex * 2, LayerIndex + 1];
    // ---------
    // |       |
    // |       |
    // |       |
    // |       |
    // |       |
    // |       |
    // |       |
    // -----------------
    //      \  |       |
    //       \ |       |
    //        \|       |
    //         |   +   |
    //         |       |
    //         |       |
    //         |       |
    //         ---------

    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Segment.Point2 := SidePoints[RowIndex * 2 - 1, LayerIndex];
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentAboveOutsideLeft(
  SidePoints: T2DRealPointArray;

  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  LocalDelegate: TCustomScreenObjectDelegate; SegmentList: TList);
var
  Point2: TPoint2D;
  Point1: TPoint2D;
  Segment: TLineSegment;
  ShouldDraw: Boolean;
begin
  ShouldDraw := (RowIndex > 0) and (LayerIndex > 0);
  if (LayerIndex > 0) and
    LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex > 0) and (LayerIndex > 0)
    and not LocalDelegate.SelectedCells[
    LayerIndex - 1, RowIndex - 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := SidePoints[RowIndex * 2, LayerIndex];
    Point2 := SidePoints[RowIndex * 2, LayerIndex - 1];
    //  ---------
    //  |       |
    //  |       |
    //  |       |
    //  |       |
    //  |       |\
    //  |       | \
    //  |       |  \
    //  -----------------
    //          |       |
    //          |       |
    //          |       |
    //          |   +   |
    //          |       |
    //          |       |
    //          |       |
    //          ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1.x := (Point1.x + Point2.x) / 2;
    Segment.Point1.y := (Point1.y + Point2.y) / 2;
    Segment.Point2 := SidePoints[RowIndex * 2 + 1, LayerIndex];
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentAboveOutsideRight(

  RowIndex: Integer; ColIndex: Integer; LayerIndex: Integer;
  ModflowGrid: TModflowGrid; LocalDelegate: TCustomScreenObjectDelegate;
  SidePoints: T2DRealPointArray;
  SegmentList: TList);
var
  ShouldDraw: Boolean;
  Point1: TPoint2D;
  Point2: TPoint2D;
  Segment: TLineSegment;
begin
  ShouldDraw := (RowIndex < ModflowGrid.RowCount - 1) and (LayerIndex > 0);
  if (LayerIndex > 0)
    and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex < ModflowGrid.RowCount - 1)
    and (LayerIndex > 0) and not LocalDelegate.SelectedCells[
    LayerIndex - 1, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := SidePoints[RowIndex * 2 + 2, LayerIndex];
    Point2 := SidePoints[RowIndex * 2 + 2, LayerIndex - 1];
    //          ---------
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //         /|       |
    //        / |       |
    //       /  |       |
    //  -----------------
    //  |       |
    //  |       |
    //  |       |
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------
    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := SidePoints[RowIndex * 2 + 1, LayerIndex];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

procedure TScreenObject.DrawModflowSideSegmentRightOutsideAbove(
  SidePoints: T2DRealPointArray; LocalDelegate: TCustomScreenObjectDelegate;
  ModflowGrid: TModflowGrid;
  LayerIndex: Integer; ColIndex: Integer; RowIndex: Integer;
  SegmentList: TList);
var
  ShouldDraw: Boolean;
  Point1: TPoint2D;
  Point2: TPoint2D;
  Segment: TLineSegment;
begin
  ShouldDraw := (LayerIndex > 0) and (RowIndex < ModflowGrid.RowCount - 1);
  if (RowIndex < ModflowGrid.RowCount - 1)
    and LocalDelegate.SelectedCells[LayerIndex, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if (RowIndex < ModflowGrid.RowCount - 1)
    and (LayerIndex > 0)
    and not LocalDelegate.SelectedCells[
    LayerIndex - 1, RowIndex + 1, ColIndex] then
  begin
    ShouldDraw := False;
  end;
  if ShouldDraw then
  begin
    Point1 := SidePoints[RowIndex * 2 + 2, LayerIndex];
    Point2 := SidePoints[RowIndex * 2 + 2, LayerIndex + 1];
    //          ---------
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //          |       |
    //  -----------------
    //  |       |  /
    //  |       | /
    //  |       |/
    //  |   +   |
    //  |       |
    //  |       |
    //  |       |
    //  ---------

    Segment := TLineSegment.Create;
    SegmentList.Add(Segment);
    Segment.Point1 := SidePoints[RowIndex * 2 + 3, LayerIndex];
    Segment.Point2.x := (Point1.x + Point2.x) / 2;
    Segment.Point2.y := (Point1.y + Point2.y) / 2;
  end;
end;

//procedure TScreenObject.GetPointsOnLineSegment(
//  const RotatedPoints: TRealPointArray; const XMin, XMax, YMin, YMax: Double;
//  const Index: Integer; out Point1, Point2: TPoint2D;
//  out TempPoints: T2DRealPointArray6; out PointCount: Integer);
//var
//  X1: Real;
//  X2: Real;
//  Y1: Real;
//  Y2: Real;
//  Temp: TPoint2D;
//  function IsSectionStart(Position: integer): boolean;
//  var
//    NextStart: integer;
//    Index: integer;
//  begin
//    result := False;
//    for Index := 0 to SectionCount - 1 do
//    begin
//      NextStart := SectionStart[Index];
//      if NextStart = Position then
//      begin
//        result := True;
//        Exit;
//      end
//      else if NextStart > Position then
//      begin
//        Exit;
//      end;
//    end;
//  end;
//begin
//  Point1 := RotatedPoints[Index];
//  if IsSectionStart(Index+1) then
//  begin
//    TempPoints[0] := Point1;
//    Point2 := Point1;
//    PointCount := 1;
//    Exit;
//  end;
//
//  Point2 := RotatedPoints[Index + 1];
//  TempPoints[0] := Point1;
//  PointCount := 1;
//  X1 := Point1.X;
//  X2 := Point2.X;
//  Y1 := Point1.Y;
//  Y2 := Point2.Y;
//  if ((Point1.X > XMax) and (Point2.X < XMax))
//    or ((Point1.X < XMax) and (Point2.X > XMax)) then
//  begin
//    // The line segment defined by Point1 and Point2
//    // can intersect a line parallel to the right side of the block.
//    Temp.X := XMax;
//    Temp.Y := (XMax - X1) / (X2 - X1) * (Y2 - Y1) + Y1;
//    TempPoints[PointCount] := Temp;
//    Inc(PointCount);
//  end;
//  if ((Point1.X > XMin) and (Point2.X < XMin))
//    or ((Point1.X < XMin) and (Point2.X > XMin)) then
//  begin
//    // The line segment defined by Point1 and Point2
//    // can intersect a line parallel to the left side of the block.
//    Temp.X := XMin;
//    Temp.Y := (XMin - X1) / (X2 - X1) * (Y2 - Y1) + Y1;
//    TempPoints[PointCount] := Temp;
//    Inc(PointCount);
//  end;
//  if ((Point1.Y > YMax) and (Point2.Y < YMax))
//    or ((Point1.Y < YMax) and (Point2.Y > YMax)) then
//  begin
//    // The line segment defined by Point1 and Point2
//    // can intersect a line parallel to the top side of the block.
//    Temp.Y := YMax;
//    Temp.X := (YMax - Y1) / (Y2 - Y1) * (X2 - X1) + X1;
//    TempPoints[PointCount] := Temp;
//    Inc(PointCount);
//  end;
//  if ((Point1.Y > YMin) and (Point2.Y < YMin))
//    or ((Point1.Y < YMin) and (Point2.Y > YMin)) then
//  begin
//    // The line segment defined by Point1 and Point2
//    // can intersect a line parallel to the bottom side of the block.
//    Temp.Y := YMin;
//    Temp.X := (YMin - Y1) / (Y2 - Y1) * (X2 - X1) + X1;
//    TempPoints[PointCount] := Temp;
//    Inc(PointCount);
//  end;
//end;

//procedure TScreenObject.SortPointsInCorrectDirection(Sorter: TList;
//  const Point1, Point2: TPoint2D);
//begin
//  if Point2.X > Point1.X then
//  begin
//    if Point2.Y > Point1.Y then
//    begin
//      Sorter.Sort(SortPointsRightUp);
//    end
//    else
//    begin
//      Sorter.Sort(SortPointsRightDown);
//    end;
//  end
//  else
//  begin
//    if Point2.Y > Point1.Y then
//    begin
//      Sorter.Sort(SortPointsLeftUp);
//    end
//    else
//    begin
//      Sorter.Sort(SortPointsLeftDown);
//    end;
//  end;
//end;

function TScreenObject.DistanceToScreenObject(const Location: TPoint2D;
  out ClosestLocation: TPoint2D; const Anisotropy: real; out SectionIndex: integer): real;
var
  Index: integer;
  FirstPoint: TPoint2D;
  SecondPoint: TPoint2D;
  temp: real;
  TempLocation: TPoint2D;
  LocalSectionIndex: Integer;
begin
  { TODO :
TScreenObject.DistanceToScreenObject is a bottleneck.
Try using a range tree or other data structure to increase speed. }
  Assert(Count >= 1);
  if Count = 1 then
  begin
    ClosestLocation := Points[0];
    result := PointToPointDist(ClosestLocation, Location, Anisotropy);
    SectionIndex := 0;
  end
  else if (Count > MaxPointsInSubPolygon) then
  begin
    ClosestLocation := Points[0];
    SectionIndex := 0;
    result := PointToPointDist(ClosestLocation, Location, Anisotropy);
    IsAnyPointCloser(Location, result, ClosestLocation, SectionIndex, Anisotropy);
  end
  else
  begin
    LocalSectionIndex := 0;
    FirstPoint := Points[0];
    SecondPoint := Points[1];
    result := MinDistPointLine(Location, FirstPoint,
      FirstPoint, ClosestLocation, Anisotropy);
    SectionIndex := 0;
    for Index := 0 to Count - 1 do
    begin

      if (SectionEnd[LocalSectionIndex] = Index)
        and (SectionStart[LocalSectionIndex] <> Index) then
      begin
        Inc(LocalSectionIndex);
        Continue;
      end;
      FirstPoint := Points[Index];
      if (SectionEnd[LocalSectionIndex] = Index) then
      begin
        SecondPoint := FirstPoint;
      end
      else
      begin
        SecondPoint := Points[Index + 1];
      end;
      temp := MinDistPointLine(Location, FirstPoint, SecondPoint,
        TempLocation, Anisotropy);
      if temp < result then
      begin
        result := temp;
        ClosestLocation := TempLocation;
        SectionIndex := LocalSectionIndex;
      end;
      if (SectionEnd[LocalSectionIndex] = Index) then
      begin
        Inc(LocalSectionIndex);
      end
    end;
  end;
end;

function TScreenObject.PointToPointDist(const A, B: TPoint2D;
  const Anisotropy: real): real;
begin
  result := sqrt(sqr(B.x - A.x) + sqr(B.y * Anisotropy - A.y * Anisotropy));
end;

function TScreenObject.Methods: string;
var
  None: boolean;
begin
  None := True;
  result := '';
  if SetValuesOfEnclosedCells then
  begin
    result := 'Enclosed, ';
    None := False;
  end;
  if SetValuesOfIntersectedCells then
  begin
    result := result + 'Intersected, ';
    None := False;
  end;
  if SetValuesByInterpolation then
  begin
    result := result + 'Interpolation, ';
    None := False;
  end;
  if None then
  begin
    result := 'None';
  end
  else
  begin
    setLength(Result, Length(Result) -2);
  end;
end;

function TScreenObject.MinDistPointLine(const P, A, B: TPoint2D;
  out Closest: TPoint2D; const Anisotropy: real): real;
  {
  http://www.simdesign.nl/tips/tip001.html

  Tip #1: Minimum distance between a point and a line
  Added: 15Nov2002
  Author: Nils Haeck
  Category: Geometry

  Question:
  How can I calculate the distance between a point and a line?

  Applicable:
  You can use this code when you need to detect whether the mouse click of the
  user is near or on a line segment or not, like in GetHitTestInfo events.

  Answer:
  We'll use some optimisation theory: the minimum distance between the point
  and the line (which can be expressed as a function) will be at the exact
  location where the derivative of this function is zero.

  Perhaps you remember this from school; the minimum or maximum in a parabola
  is where its gradient is zero.

    * We parametrise the distance of point P to the line between A and B as
      the distance of point P to a point Q on the line:

      point Q = (1-q)A+qB where 0 <= q <= 1

    * The distance PQ is:

      |PQ| = sqrt( ((1-q)Ax + qBx - Px)^2 + (... Y term) )

    * Differentiating gives dPQ/dq = 2((Bx-Ax)q
       + (Ax-Px))(Bx - Ax) + (... Y term).

    * dPQ/dq must be zero for minimum so:

      q = (Px-Ax)(Bx-Ax)+(Py-Ay)(By-Ay) / ((Bx-Ax)^2+(By-Ay)^2)

  Code Sample:
  Note that this code also takes into account situations where your line is
  actually not a line (A=B) and situations where the point P is past any of the
  two endpoints. In this case, the distance to the
  closest endpoint is calculated.
  }
var
  q: real;
begin
  if (A.x = B.x) and (A.y = B.y) then
  begin

    // Point to point
    Result := PointToPointDist(P, A, Anisotropy);
    Closest := A;
  end
  else
  begin

    // Minimum
    q := ((P.x - A.x) * (B.x - A.x) + (P.y - A.y) * Anisotropy
      * (B.y - A.y) * Anisotropy)
      / (sqr(B.x - A.x) + sqr(B.y - A.y) * sqr(Anisotropy));

    // Limit q to 0 <= q <= 1
    if q < 0 then
      q := 0
    else if q > 1 then
      q := 1;

    // Distance
    Closest.X := (1 - q) * A.x + q * B.x;
    Closest.Y := (1 - q) * A.y + q * B.y;
    Result := PointToPointDist(P, Closest, Anisotropy);
  end;
end;

function TScreenObject.ModflowDataSetUsed(DataArray: TDataArray; AModel: TBaseModel): boolean;
begin
  result :=
    ((ModflowChdBoundary <> nil)
      and ModflowChdBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowGhbBoundary <> nil)
      and ModflowGhbBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowWellBoundary <> nil)
      and ModflowWellBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowRivBoundary <> nil)
      and ModflowRivBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowDrnBoundary <> nil)
      and ModflowDrnBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowDrtBoundary <> nil)
     and ModflowDrtBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowRchBoundary <> nil)
      and ModflowRchBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowEvtBoundary <> nil)
      and ModflowEvtBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowEtsBoundary <> nil)
      and ModflowEtsBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowResBoundary <> nil)
       and ModflowResBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowLakBoundary <> nil)
      and ModflowLakBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowSfrBoundary <> nil)
      and ModflowSfrBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowRipBoundary <> nil)
      and ModflowRipBoundary.DataSetUsed(DataArray, AModel))
    or ((ModflowMawBoundary <> nil)
      and ModflowMawBoundary.DataSetUsed(DataArray, AModel))
end;

procedure TScreenObject.MovePoints(var Dest: TRealPointArray);
begin
  SetLength(Dest, Count);
  Move(FPoints[0], Dest[0], Count * SizeOf(TPoint2D));
end;

procedure TScreenObject.MovePointsWhenCreatingScreenObjectByDeletingEdge(
  DeletedEdge: integer; ExistingObject: TScreenObject);
var
  PhastModel: TPhastModel;
begin
  FIsClosedCached := False;
  Move(FPoints[DeletedEdge + 1], FPoints[0],
    (Count - DeletedEdge - 1) * SizeOf(TPoint2D));
  Move(FSelectedVertices[DeletedEdge + 1], FSelectedVertices[0],
    (Count - DeletedEdge - 1) * SizeOf(boolean));
  Count := Count - DeletedEdge - 1;
  FNeedToResetSelectedVertexCount := True;
  PhastModel := FModel as TPhastModel;
  PhastModel.InsertScreenObject(
    PhastModel.IndexOfScreenObject(ExistingObject) + 1, self);
end;

procedure TScreenObject.MoveSelectedPoints(var Dest: TBooleanDynArray);
begin
  SetLength(Dest, Count);
  Move(FSelectedVertices[0], Dest[0], Count * SizeOf(boolean));
end;

procedure TScreenObject.MoveToPoints(const SourcePoints: TRealPointArray);
begin
  if Length(SourcePoints) = 0 then
  begin
    Exit;
  end;
  FIsClosedCached := False;
  if Capacity < Length(SourcePoints) then
  begin
    Capacity := Length(SourcePoints);
  end;
  Move(SourcePoints[0], FPoints[0], Length(SourcePoints) * SizeOf(TPoint2D));
  FRecalculateBox := True;
end;

procedure TScreenObject.MoveToSelectedPoints(var Source: TBooleanDynArray);
begin
  if Length(Source) = 0 then
  begin
    Exit;
  end;
  if Capacity < Length(Source) then
  begin
    Capacity := Length(Source);
  end;
  Move(Source[0], FSelectedVertices[0], Length(Source) * SizeOf(boolean));
end;

procedure TScreenObject.Set_SetValuesByInterpolation(const Value: boolean);
begin
  if FSetValuesByInterpolation <> Value then
  begin
    FSetValuesByInterpolation := Value;
    InvalidateModel;
    Invalidate;
  end;
end;

class function TScreenObject.ValidName(const OriginalName: string): string;
begin
  result :=  GoPhastTypes.ValidName(OriginalName);
end;

function TScreenObject.WelParameters: IModflowParameters;
begin
  result := nil;
  if ModflowWellBoundary <> nil then
  begin
    result := ModflowWellBoundary.Parameters
  end;
end;

procedure TScreenObject.SetUpToDate(const Value: boolean);
var
  Index: integer;
  Observer: TObserver;
  SegList: TCellElementSegmentList;
  LocalModel: TPhastModel;
  LocalChild: TChildModel;
begin
  if (frmGoPhast.PhastModel <> nil)
    and ((csDestroying in frmGoPhast.PhastModel.ComponentState)
    or frmGoPhast.PhastModel.Clearing) then
  begin
    Exit;
  end;
  inherited;
  if Value then
  begin
    for Index := 0 to FDataSetSubscriptions.Count -1 do
    begin
      Observer := FDataSetSubscriptions[Index] as TObserver;
      Observer.UpToDate := True;
    end;

    for Index := 0 to FDataSetMixtureSubscriptions.Count -1 do
    begin
      Observer := FDataSetMixtureSubscriptions[Index] as TObserver;
      Observer.UpToDate := True;
    end;
  end
  else
  begin
    if CanInvalidateModel and (Model <> nil) then
    begin
      if FDataSetSubscriptions <> nil then
      begin
        for Index := 0 to FDataSetSubscriptions.Count -1 do
        begin
          Observer := FDataSetSubscriptions[Index] as TObserver;
          Observer.UpToDate := True;
          Observer.UpToDate := False;
        end;
      end;

      if FDataSetMixtureSubscriptions <> nil then
      begin
        for Index := 0 to FDataSetMixtureSubscriptions.Count -1 do
        begin
          Observer := FDataSetMixtureSubscriptions[Index] as TObserver;
          Observer.UpToDate := True;
          Observer.UpToDate := False;
        end;
      end;

      LocalModel := Model as TPhastModel;
      if (ModflowHeadObservations <> nil) then
      begin
        LocalModel.InvalidateMfHobHeads (self);
      end;

      if (Mt3dmsTransObservations <> nil) then
      begin
        LocalModel.InvalidateMt3dTobConcs (self);
      end;

      if FModflowBoundaries <> nil then
      begin
        FModflowBoundaries.Invalidate;
      end;

      if ChildModel <> nil then
      begin
        LocalChild := ChildModel as TChildModel;
        LocalChild.UpdateGrid;
        LocalChild.ModflowGrid.NotifyGridChanged(self);
      end;
    end;
    FListUpToDate := False;
    for Index := 0 to FSegModelAssoc.Count - 1 do
    begin
      SegList := FSegModelAssoc[Index];
      SegList.FHigher3DElevationsNeedsUpdating := True;
      SegList.FLower3DElevationsNeedsUpdating := True;
    end;

    if FDynamicTimesSeriesCollections <> nil then
    begin
      DynamicTimesSeriesCollections.Invalidate;
    end;

    FCachedCells.Invalidate;
  end;
end;

procedure TScreenObject.SetUsedModels(const Value: TUsedWithModelCollection);
begin
  FUsedModels.Assign(Value);
end;

function TScreenObject.Get_SetValuesOfEnclosedCells: boolean;
begin
  result := FSetValuesOfEnclosedCells;
  if result and (FModel <> nil) then
  begin
    result := Closed;
  end;
end;

function TScreenObject.GhbParameters: IModflowParameters;
begin
  result := nil;
  if ModflowGhbBoundary <> nil then
  begin
    result := ModflowGhbBoundary.Parameters
  end;
end;

{ TCustomScreenObjectCollection }

procedure TScreenObjectCollection.UpdateScreenObjects;
var
  Index: integer;
  Item: TScreenObjectItem;
begin
  for Index := 0 to Count - 1 do
  begin
    Item := Items[Index] as TScreenObjectItem;
    Item.UpdateScreenObject;
  end;
end;

{ TScreenObjectItem }

constructor TScreenObjectItem.Create(Collection: TCollection);
begin
  inherited;
  FDataSetNames := TStringList.Create;
  FSelectedVertexCollection := TSelectedVertexCollection.Create;
  FPoints := TPointCollection.Create;
  FDataSetFormulas := TStringList.Create;
  FMixtureFormulas := TStringList.Create;
end;

destructor TScreenObjectItem.Destroy;
begin
  FMixtureFormulas.Free;
  FDataSetNames.Free;
  FSelectedVertexCollection.Free;
  FPoints.Free;
  FDataSetFormulas.Free;
  inherited;
end;

function TScreenObjectItem.GetClassType: string;
begin
  result := ScreenObject.ClassName;
end;

function TScreenObjectItem.GetDataSetFormulas: TStrings;
var
  Index: integer;
begin
  FDataSetFormulas.Clear;
  FDataSetFormulas.Capacity := ScreenObject.DataSetCount;
  for Index := 0 to ScreenObject.DataSetCount - 1 do
  begin
    FDataSetFormulas.Add(ScreenObject.DataSetFormulas[Index])
  end;
  Result := FDataSetFormulas;
end;

function TScreenObjectItem.GetDataSetNames: TStrings;
var
  Index: integer;
  ADataSet: TDataArray;
begin
  FDataSetNames.Clear;
  FDataSetNames.Capacity := ScreenObject.DataSetCount;
  for Index := 0 to ScreenObject.DataSetCount - 1 do
  begin
    ADataSet := ScreenObject.DataSets[Index];
    FDataSetNames.Add(ADataSet.Name)
  end;
  result := FDataSetNames;
end;

function TScreenObjectItem.GetElevationFormula: string;
begin
  if (ScreenObject.ElevationCount = ecOne) then
  begin
    result := ScreenObject.ElevationFormula;
  end
  else
  begin
    result := ''
  end;
end;

function TScreenObjectItem.GetHigherElevationFormula: string;
begin
  if (ScreenObject.ElevationCount = ecTwo) then
  begin
    result := ScreenObject.HigherElevationFormula;
  end
  else
  begin
    result := '';
  end;
end;

function TScreenObjectItem.GetLowerElevationFormula: string;
begin
  if (ScreenObject.ElevationCount = ecTwo) then
  begin
    result := ScreenObject.LowerElevationFormula;
  end
  else
  begin
    result := '';
  end;
end;

procedure TScreenObjectItem.SetClassType(Value: string);
var
  Model: TBaseModel;
begin
  if (Value = 'TPhastContour') or (Value = 'TPhastScreenObject') then
  begin
    Value := 'TScreenObject'
  end
  else if Value = 'TMultiValueContour' then
  begin
    Value := 'TMultiValueScreenObject'
  end;

  if FScreenObject = nil then
  begin
    Model := (Collection as TScreenObjectCollection).FModel;
    FScreenObject := TScreenObjectClass(GetClass(Value)).Create(Model);
  end;
end;

procedure TScreenObjectItem.SetScreenObject(const Value: TScreenObject);
var
  Index: integer;
  Item: TSelectedVertexItem;
  PointItem: TPointItem;
begin
  FScreenObject := Value;
  if FScreenObject.SelectedVertexCount > 0 then
  begin
    for Index := 0 to FScreenObject.Count - 1 do
    begin
      Item := SelectedVertices.Add as TSelectedVertexItem;
      Item.VertexSelected := FScreenObject.SelectedVertices[Index];
    end;
  end;
  for Index := 0 to FScreenObject.Count - 1 do
  begin
    PointItem := Points.Add as TPointItem;
    PointItem.X := FScreenObject.Points[Index].X;
    PointItem.Y := FScreenObject.Points[Index].Y;
  end;
  FScreenObject.SetSubComponent(True);
end;

procedure TScreenObjectItem.UpdateScreenObject;
var
  ADataSet: TDataArray;
  Index: integer;
  Position: integer;
  PointItem: TPointItem;
  APoint: TPoint2D;
  SelectedItem: TSelectedVertexItem;
  UndoCreate2DScreenObject: TCustomUndo;
  UndoAble: boolean;
  PhastModel: TPhastModel;
  SectionStarts: TValueArrayStorage;
  NewPart: Boolean;
  SectionIndex: Integer;
  NextStart: Integer;
begin
  PhastModel := (Collection as TScreenObjectCollection).FModel as TPhastModel;
  ScreenObject.FIsUpdating := True;
  try
    UndoAble := False;
    // UndoCreate2DScreenObject will be set to nil in
    // UpdateScreenObjectWithName because UndoAble is "False".
    ScreenObject.UpdateScreenObjectWithName(ScreenObject.Name,
      ScreenObject.ViewDirection, UndoCreate2DScreenObject, UndoAble);
    if (ScreenObject.ElevationCount = ecOne) then
    begin
      ScreenObject.ElevationFormula := '0';
      ScreenObject.ElevationFormula := FElevationFormula;
    end;

    if (ScreenObject.ElevationCount = ecTwo) then
    begin
      ScreenObject.HigherElevationFormula := '0';
      ScreenObject.HigherElevationFormula :=
        FHigherElevationFormula;

      ScreenObject.LowerElevationFormula := '0';
      ScreenObject.LowerElevationFormula :=
        FLowerElevationFormula;
    end;

    ScreenObject.ClearDataSets;
    for Index := 0 to FDataSetNames.Count - 1 do
    begin
      ADataSet := PhastModel.DataArrayManager.GetDataSetByName(FDataSetNames[Index]);
      if ADataSet <> nil then
      begin
//        ADataSet := PhastModel.DataSets[Position];
        Position := ScreenObject.AddDataSet(ADataSet);
        if Position >= 0 then
        begin
          try
          ScreenObject.DataSetFormulas[Position] := FDataSetFormulas[Index];
          except on E: ERbwParserError do
            begin
              case ADataSet.DataType of
                rdtDouble:
                  begin
                    ScreenObject.DataSetFormulas[Position] := '0.';
                  end;
                rdtInteger:
                  begin
                    ScreenObject.DataSetFormulas[Position] := '0';
                  end;
                rdtBoolean:
                  begin
                    ScreenObject.DataSetFormulas[Position] := 'False';
                  end;
                rdtString:
                  begin
                    ScreenObject.DataSetFormulas[Position] := '""';
                  end;
                else Assert(False);
              end;
            
            end;
          end;
        end;
      end;
    end;
    SectionStarts := TValueArrayStorage.Create;
    try
      SectionStarts.Assign(ScreenObject.SectionStarts);
      ScreenObject.SectionStarts.Clear;
      ScreenObject.ClearPoints;
      SectionIndex := -1;
      NextStart := 0;
      ScreenObject.BeginUpdate;
      try
        ScreenObject.Capacity := Points.Count;
        for Index := 0 to Points.Count - 1 do
        begin
          NewPart := Index = NextStart;
          if NewPart then
          begin
            Inc(SectionIndex);
            if SectionIndex < SectionStarts.Count then
            begin
              NextStart := SectionStarts.IntValues[SectionIndex];
            end;
          end;
          PointItem := Points.Items[Index] as TPointItem;
          APoint.X := PointItem.X;
          APoint.Y := PointItem.Y;
          ScreenObject.AddPoint(APoint, NewPart);
        end;
      finally
        ScreenObject.EndUpdate;
        Points.Clear;
      end;
    finally
      SectionStarts.Free;
    end;
    for Index := 0 to SelectedVertices.Count - 1 do
    begin
      SelectedItem := SelectedVertices.Items[Index] as TSelectedVertexItem;
      ScreenObject.SelectedVertices[Index] := SelectedItem.VertexSelected;
    end;
    if PhastModel.FileVersion = '1.0.8.0' then
    begin
      if (ScreenObject.ModflowDrnBoundary <> nil)
        and (ScreenObject.ModflowDrnBoundary.FormulaInterpretation = fiTotal) then
      begin
        ScreenObject.ModflowDrnBoundary.FormulaInterpretation := fiDirect
      end;
      if (ScreenObject.ModflowDrtBoundary <> nil)
        and (ScreenObject.ModflowDrtBoundary.FormulaInterpretation = fiTotal) then
      begin
        ScreenObject.ModflowDrtBoundary.FormulaInterpretation := fiDirect
      end;
      if (ScreenObject.ModflowGhbBoundary <> nil)
        and (ScreenObject.ModflowGhbBoundary.FormulaInterpretation = fiTotal) then
      begin
        ScreenObject.ModflowGhbBoundary.FormulaInterpretation := fiDirect
      end;
      if (ScreenObject.ModflowWellBoundary <> nil)
        and (ScreenObject.ModflowWellBoundary.FormulaInterpretation = fiTotal) then
      begin
        ScreenObject.ModflowWellBoundary.FormulaInterpretation := fiDirect
      end;
      if (ScreenObject.ModflowRivBoundary <> nil)
        and (ScreenObject.ModflowRivBoundary.FormulaInterpretation = fiTotal) then
      begin
        ScreenObject.ModflowRivBoundary.FormulaInterpretation := fiDirect
      end;
    end;
    if PhastModel.IndexOfScreenObject(ScreenObject) < 0 then
    begin
      PhastModel.AddScreenObject(ScreenObject);
    end;

    for Index := 0 to ScreenObject.DataSetCount - 1 do
    begin
      if Index = ScreenObject.InterpValues.Count then
      begin
        ScreenObject.InterpValues.Add;
      end;

      if FMixtureFormulas.Count > Index then
      begin
        ScreenObject.MixtureDataSetFormula[Index] :=
          FMixtureFormulas[Index];
      end
      else
      begin
        ScreenObject.MixtureDataSetFormula[Index] := '0.5';
      end;
    end;
    ScreenObject.UpdateMixtureExpression;
    ScreenObject.UpdateFormulaExpression;
    ScreenObject.CacheValueArrays;
//    ScreenObject.CacheSegments;
//    ScreenObject.CacheElevationArrays;
  finally
    ScreenObject.FIsUpdating := False;
  end;
end;

{ TSelectedVertexCollection }

constructor TSelectedVertexCollection.Create;
begin
  inherited Create(TSelectedVertexItem);
end;

{ TCellElementSegmentList }

function TCellElementSegmentList.Add(ASegment: TCellElementSegment): Integer;
begin
  result := inherited Add(ASegment);
  ASegment.PositionInSegmentList := result;
end;

procedure TCellElementSegmentList.CacheData;
var
//  TempFile: TFileStream;
  Compressor: TCompressionStream;
  LocalCount: integer;
  Index: NativeInt;
  Segment: TCellElementSegment;
//  TempSegStorage: TMemoryStream;
begin
  if UpToDate then
  begin
    if not FCached then
    begin
      if FTempMemoryStream = nil then
      begin
        FTempMemoryStream := TMemoryStream.Create;
      end;
      FTempMemoryStream.Position := 0;
      Compressor := TCompressionStream.Create(ZLib.clDefault, FTempMemoryStream);
      try
        LocalCount := Count;
        Compressor.Write(LocalCount, SizeOf(LocalCount));
        for Index := 0 to Count - 1 do
        begin
          Segment := Items[Index];
          Segment.Store(Compressor);
        end;
      finally
        Compressor.Free;
      end;
      FCached := True;
    end;
    Clear;
    FreeAndNil(FStartPoints);
    FreeAndNil(FEndPoints);
    FreeAndNil(FRangeTree);
    FCleared := True;
  end;
end;

function TCellElementSegmentList.ClosestSegment(Location: TPoint2D;
  Anisotropy: double): TCellElementSegment;
const
  Zero: NativeInt = 0;
var
  Distance, TempDistance: double;
  Segment: TCellElementSegment;
  Index: NativeInt;
  Closest: TPoint2D;
  MinX: double;
  MinY: double;
  MaxX: double;
  MaxY: double;
  Position: NativeInt;
  IntervalDefinitions: TSearchArray;
  LeafList: TCellElementLeafList;
  SectionList: TList;
  SegmentIndex: Integer;
  Leaf: TCellElementLeaf;
  Limits: TGridLimit;
  RotatedLocation: TPoint2D;
  FirstPoint, SecondPoint: TPoint2D;
  ModelOutline: TPolygon2D;
  GridEdgeSegment: TSegment2D;
  SearchCircle: TCircle;
  ICnt: Integer;
  I1: TPoint2D;
  I2: TPoint2D;
  PolyCount: Integer;
  IntersectionArray: TPolyLine2D;
  PolyIndex: Integer;
  Epsilon: double;
  PointIndex: Integer;
//  AnisotropicLocation: TPoint2D;
  IntervalCheckIndex: Integer;
  EpsilonX: double;
  EpsilonY: double;
  PositionX: NativeInt;
  procedure ProcessSegment;
  begin
    if MinX > Segment.X1  then
    begin
      MinX := Segment.X1;
    end;
    if MinY > Segment.Y1  then
    begin
      MinY := Segment.Y1;
    end;
    if MaxX < Segment.X1  then
    begin
      MaxX := Segment.X1;
    end;
    if MaxY < Segment.Y1  then
    begin
      MaxY := Segment.Y1;
    end;
    if MinX > Segment.X2  then
    begin
      MinX := Segment.X2;
    end;
    if MinY > Segment.Y2  then
    begin
      MinY := Segment.Y2;
    end;
    if MaxX < Segment.X2  then
    begin
      MaxX := Segment.X2;
    end;
    if MaxY < Segment.Y2  then
    begin
      MaxY := Segment.Y2;
    end;
  end;
  function DistanceToSegment(Segment: TCellElementSegment): double;
  var
    StartPosition, EndPosition: TPoint2D;
  begin
    StartPosition := Segment.FirstPointRealCoord(FScreenObject.ViewDirection);
    EndPosition := Segment.SecondPointRealCoord(FScreenObject.ViewDirection);

    result := FScreenObject.MinDistPointLine(Location, StartPosition,
      EndPosition, Closest, Anisotropy);
  end;
begin
  // Location is in real-world coordinates;
  Assert(UpToDate);
  if Count = 0 then
  begin
    result := nil;
    Exit;
  end;

  FMinDistance := 0;
  if Count > 500 then
  begin
    if FStartPoints = nil then
    begin
      FStartPoints := TRbwQuadTree.Create(nil);
      FEndPoints := TRbwQuadTree.Create(nil);
      FStartPoints.MaxPoints := Max(100, Count div 10000);
      FEndPoints.MaxPoints := FStartPoints.MaxPoints;
      Segment := Items[Zero];
      MinX := Segment.X1;
      MinY := Segment.Y1*Anisotropy;
      MaxX := MinX;
      MaxY := MinY;
      ProcessSegment;
      PositionX := Count-1;
      Segment := Items[PositionX];
      ProcessSegment;
      for Index := 0 to 50 do
      begin
        Position := Random(Count);
        Segment := Items[Position];
        ProcessSegment;
      end;
      FStartPoints.XMax := MaxX;
      FStartPoints.XMin := MinX;
      FStartPoints.YMax := MaxY;
      FStartPoints.YMin := MinY;
      FEndPoints.XMax := MaxX;
      FEndPoints.XMin := MinX;
      FEndPoints.YMax := MaxY;
      FEndPoints.YMin := MinY;

      for Index := 0 to Count - 1 do
      begin
        Segment := Items[Index];
        FStartPoints.AddPoint(Segment.X1, Segment.Y1*Anisotropy, Segment);
        FEndPoints.AddPoint(Segment.X2, Segment.Y2*Anisotropy, Segment);
      end;
    end
    else
    begin
      Assert(FEndPoints <> nil);
    end;

    if (FScreenObject.ViewDirection = vdTop) and (frmGoPhast.Grid <> nil) then
    begin
      RotatedLocation := frmGoPhast.Grid.
        RotateFromRealWorldCoordinatesToGridCoordinates(Location);
    end
    else
    begin
      RotatedLocation := Location;
    end;
    RotatedLocation.y := RotatedLocation.y * Anisotropy;
    Segment := FStartPoints.NearestPointsFirstData(
      RotatedLocation.x, RotatedLocation.y);
    // If the TScreenObject has only point data then the segment with the
    // nearest point must be the nearest segment.
    // If the the Segment location is the same as the location we are looking
    // for, it is the nearest segment.
    FirstPoint :=Segment.FirstPointRealCoord(FScreenObject.ViewDirection);
    if (FScreenObject.Count = FScreenObject.SectionCount) or
      ((FirstPoint.x = Location.x) and (FirstPoint.Y = Location.y)) then
    begin
      result := Segment;
      Exit;
    end;
    Distance := Sqrt(Sqr(FirstPoint.x - Location.x)
      + Sqr(Anisotropy*(FirstPoint.y - Location.y)));
    SecondPoint :=Segment.SecondPointRealCoord(FScreenObject.ViewDirection);
    if ((SecondPoint.x = Location.x) and (SecondPoint.Y = Location.y)) then
    begin
      result := Segment;
      Exit;
    end;
    TempDistance := Sqrt(Sqr(SecondPoint.x - Location.x)
      + Sqr(Anisotropy*(SecondPoint.y - Location.y)));
    FMinDistance := Max(Distance, TempDistance);

    Segment := FEndPoints.NearestPointsFirstData(
      RotatedLocation.x, RotatedLocation.y);
    SecondPoint :=Segment.SecondPointRealCoord(FScreenObject.ViewDirection);
    if (SecondPoint.x = Location.x) and (SecondPoint.y = Location.y) then
    begin
      result := Segment;
      Exit;
    end;
    FirstPoint :=Segment.FirstPointRealCoord(FScreenObject.ViewDirection);
    Distance := Sqrt(Sqr(FirstPoint.x - Location.x)
      + Sqr(Anisotropy*(FirstPoint.y - Location.y)));
    TempDistance := Sqrt(Sqr(SecondPoint.x - Location.x)
      + Sqr(Anisotropy*(SecondPoint.y - Location.y)));
    Distance := Max(Distance, TempDistance);

    FMinDistance := Min(FMinDistance, Distance);
  end
  else if Count > 25 then
  begin
    Segment := Items[Zero];
    SecondPoint :=Segment.SecondPointRealCoord(FScreenObject.ViewDirection);
    if (SecondPoint.x = Location.x) and (SecondPoint.y = Location.y) then
    begin
      result := Segment;
      Exit;
    end;
    FirstPoint :=Segment.FirstPointRealCoord(FScreenObject.ViewDirection);
    Distance := Sqrt(Sqr(FirstPoint.x - Location.x)
      + Sqr(Anisotropy*(FirstPoint.y - Location.y)));
    TempDistance := Sqrt(Sqr(SecondPoint.x - Location.x)
      + Sqr(Anisotropy*(SecondPoint.y - Location.y)));
    FMinDistance := Max(Distance, TempDistance);

    if FMinDistance = 0 then
    begin
      result := Segment;
      Exit;
    end;
    for Index := 0 to 24 do
    begin
      Segment := Items[NativeInt(Random(Count))];

      SecondPoint :=Segment.SecondPointRealCoord(FScreenObject.ViewDirection);
      if (SecondPoint.x = Location.x) and (SecondPoint.y = Location.y) then
      begin
        result := Segment;
        Exit;
      end;
      FirstPoint :=Segment.FirstPointRealCoord(FScreenObject.ViewDirection);
      Distance := Sqrt(Sqr(FirstPoint.x - Location.x)
        + Sqr(Anisotropy*(FirstPoint.y - Location.y)));
      TempDistance := Sqrt(Sqr(SecondPoint.x - Location.x)
        + Sqr(Anisotropy*(SecondPoint.y - Location.y)));
      Distance := Max(Distance, TempDistance);
      FMinDistance := Min(FMinDistance, Distance);
      if FMinDistance = 0 then
      begin
        result := Segment;
        Exit;
      end;
    end;
  end;

  FMinDistance := FMinDistance * 1.00001;

  if Count > 25 then
  begin
    if FRangeTree = nil then
    begin
      LeafList := TCellElementLeafList.Create;
      LeafList.Capacity := Count;
      for Index := 0 to Count - 1 do
      begin
        Segment := Items[Index];
        LeafList.Add(TCellElementLeaf.Create(Segment,
          FScreenObject.ViewDirection));
      end;
      FRangeTree := TRbwRangeTree.Create(LeafList);
    end;

    if frmGoPhast.PhastModel.SelectedModel.Grid <> nil then
    begin
      Limits := frmGoPhast.PhastModel.SelectedModel.
        Grid.GridLimits(FScreenObject.ViewDirection);
    end
    else if frmGoPhast.PhastModel.SelectedModel.Mesh3D <> nil then
    begin
      Limits := frmGoPhast.PhastModel.SelectedModel.
        Mesh3D.MeshLimits(FScreenObject.ViewDirection, FScreenObject.SutraAngle)
    end
    else
    begin
      result := nil;
      Exit;
    end;
    case FScreenObject.ViewDirection of
      vdTop:
        begin
          MinX := Limits.MinX;
          MinY := Limits.MinY;
          MaxX := Limits.MaxX;
          MaxY := Limits.MaxY;
        end;
      vdFront:
        begin
          MinX := Limits.MinX;
          MinY := Limits.MinZ;
          MaxX := Limits.MaxX;
          MaxY := Limits.MaxZ;
        end;
      vdSide:
        begin
          MinX := Limits.MinY;
          MinY := Limits.MinZ;
          MaxX := Limits.MaxY;
          MaxY := Limits.MaxZ;
        end;
    end;

    EpsilonX := (MaxX-MinX)/1e5;
    EpsilonY := (MaxY-MinY)/1e5;

    SetLength(IntervalDefinitions, 4);
    IntervalDefinitions[0].LowerBoundary := MinX-EpsilonX;
    IntervalDefinitions[0].UpperBoundary := Location.x + FMinDistance;
    IntervalDefinitions[1].LowerBoundary := Location.x - FMinDistance;
    IntervalDefinitions[1].UpperBoundary := MaxX+EpsilonX;

    IntervalDefinitions[2].LowerBoundary := MinY-EpsilonY{*Anisotropy};
    IntervalDefinitions[2].UpperBoundary := Location.y{*Anisotropy} + FMinDistance;
    IntervalDefinitions[3].LowerBoundary := Location.y{*Anisotropy} - FMinDistance;
    IntervalDefinitions[3].UpperBoundary := MaxY+EpsilonY{*Anisotropy};

    // When searching for the nearest segment for a point outside
    // the grid, the distance between the point and the closest
    // segment may be large which results in a large search interval.
    // To decrease the search interval, find the area of intersection
    // between a circle centered at the search point and the grid or mesh
    // outline.
    if frmGoPhast.PhastModel.SelectedModel.Grid <> nil then
    begin
      ModelOutline := frmGoPhast.PhastModel.SelectedModel.
        Grid.GridOutline(FScreenObject.ViewDirection);
    end
    else
    begin
      Assert(frmGoPhast.PhastModel.SelectedModel.Mesh3D <> nil);
      ModelOutline := frmGoPhast.PhastModel.
        SelectedModel.Mesh3D.MeshBox(FScreenObject.ViewDirection, FScreenObject.SutraAngle);
    end;
//    AnisotropicLocation := Location;
//    if Anisotropy <> 1 then
//    begin
//      AnisotropicLocation.y := AnisotropicLocation.y*Anisotropy
//    end;
    if Anisotropy > 1 then
    begin
      for PointIndex := 0 to Length(ModelOutline) - 1 do
      begin
        ModelOutline[PointIndex].y := ModelOutline[PointIndex].y * Anisotropy;
      end;
    end;
    if (Length(ModelOutline) > 0)
      and not PointInConvexPolygon(Location, ModelOutline) then
    begin
//    if Anisotropy > 1 then
//    begin
      for PointIndex := 0 to Length(ModelOutline) - 1 do
      begin
        ModelOutline[PointIndex].y := ModelOutline[PointIndex].y * Anisotropy;
      end;
//    end;
      // define the search circle.
      SearchCircle.x := Location.x;
      SearchCircle.y := Location.y{*Anisotropy};
      SearchCircle.Radius := FMinDistance;
      // interesect the last edge with the circle.
      GridEdgeSegment[1] := ModelOutline[Length(ModelOutline)-1];
      GridEdgeSegment[2] := ModelOutline[0];
//      GridEdgeSegment[1].y := GridEdgeSegment[1].y{*Anisotropy};
//      GridEdgeSegment[2].y := GridEdgeSegment[2].y{*Anisotropy};
      SetLength(IntersectionArray,Length(ModelOutline)*2);
      PolyCount := 0;
      IntersectionPoint(GridEdgeSegment,SearchCircle, ICnt, I1,I2);
      if ICnt >= 1 then
      begin
        Inc(PolyCount);
        IntersectionArray[PolyCount-1] := I1;
      end;
      if ICnt >= 2 then
      begin
        Inc(PolyCount);
        IntersectionArray[PolyCount-1] := I2;
      end;
      // intersect the remaining edges with the circle.
      for PolyIndex := 1 to Length(ModelOutline) - 1 do
      begin
        GridEdgeSegment[1] := ModelOutline[PolyIndex-1];
        GridEdgeSegment[2] := ModelOutline[PolyIndex];
//        GridEdgeSegment[1].y := GridEdgeSegment[1].y{*Anisotropy};
//        GridEdgeSegment[2].y := GridEdgeSegment[2].y{*Anisotropy};
        IntersectionPoint(GridEdgeSegment,SearchCircle, ICnt, I1,I2);
        if ICnt >= 1 then
        begin
          Inc(PolyCount);
          IntersectionArray[PolyCount-1] := I1;
        end;
        if ICnt >= 2 then
        begin
          Inc(PolyCount);
          IntersectionArray[PolyCount-1] := I2;
        end;
      end;
      if PolyCount >= 2 then
      begin
        // use the intersection points to define a search rectangle.
        MinX := IntersectionArray[0].x;
        MaxX := IntersectionArray[0].x;
        MinY := IntersectionArray[0].y;
        MaxY := IntersectionArray[0].y;
        for PolyIndex := 1 to PolyCount - 1 do
        begin
          MinX := Min(MinX,IntersectionArray[PolyIndex].x);
          MaxX := Max(MaxX,IntersectionArray[PolyIndex].x);
          MinY := Min(MinY,IntersectionArray[PolyIndex].y);
          MaxY := Max(MaxY,IntersectionArray[PolyIndex].y);
        end;
        // If the center of the circle is directly above, below,
        // to the left, or to the right of the search rectangle,
        // modify the rectangle to include the rest of the area
        // of the circle.
        if (MinX <= SearchCircle.x) and (SearchCircle.x <= MaxX) then
        begin
          if (MinY <= SearchCircle.y) or (MaxY <= SearchCircle.y) then
          begin
            MinY := SearchCircle.y - SearchCircle.Radius;
          end;
          if (MinY >= SearchCircle.y) or (MaxY >= SearchCircle.y) then
          begin
            MaxY := SearchCircle.y + SearchCircle.Radius;
          end;
        end;
        if (MinY <= SearchCircle.y) and (SearchCircle.y <= MaxY) then
        begin
          if (MinX <= SearchCircle.x) or (MaxX <= SearchCircle.x) then
          begin
            MinX := SearchCircle.x - SearchCircle.Radius;
          end;
          if (MinX >= SearchCircle.x) or (MaxX >= SearchCircle.x) then
          begin
            MaxX := SearchCircle.x + SearchCircle.Radius;
          end;
        end;

        // Expand the rectangle slightly.
        Epsilon := (MaxX - MinX)/1e5;
        MinX := MinX-Epsilon;
        MaxX := MaxX+Epsilon;
        Epsilon := (MaxY - MinY)/1e5;
        MinY := MinY-Epsilon;
        MaxY := MaxY+Epsilon;
      end;

      IntervalDefinitions[0].LowerBoundary :=
        Max(MinX, IntervalDefinitions[0].LowerBoundary);
      IntervalDefinitions[1].UpperBoundary :=
        Min(MaxX, IntervalDefinitions[1].UpperBoundary);

      IntervalDefinitions[2].LowerBoundary :=
        Max(MinY, IntervalDefinitions[2].LowerBoundary);
      IntervalDefinitions[3].UpperBoundary :=
        Min(MaxY, IntervalDefinitions[3].UpperBoundary);

      for IntervalCheckIndex := 0 to 3 do
      begin
        Assert(IntervalDefinitions[IntervalCheckIndex].LowerBoundary
          <= IntervalDefinitions[IntervalCheckIndex].UpperBoundary);
      end;
    end;

    SectionList := FRangeTree.Search(IntervalDefinitions);
    if SectionList.Count = 0 then
    begin
      result := nil;
      Assert(False);
      Exit;
    end;

    Leaf := SectionList[0];
    Segment := Leaf.FSegment;
    Distance := DistanceToSegment(Segment);
    result := Segment;
    for SegmentIndex := 1 to SectionList.Count - 1 do
    begin
      Leaf := SectionList[SegmentIndex];
      Segment := Leaf.FSegment;
      TempDistance := DistanceToSegment(Segment);
      if TempDistance < Distance then
      begin
        Distance := TempDistance;
        result := Segment;
      end;
    end;
    Exit;
  end;

  Segment := Items[Zero];

  Distance := DistanceToSegment(Segment);
  result := Segment;
  if Distance = 0 then
  begin
    Exit;
  end;
  for Index := 0 to Count - 1 do
  begin
    Segment := Items[Index];

    FirstPoint := Segment.FirstPointRealCoord(FScreenObject.ViewDirection);
    SecondPoint := Segment.SecondPointRealCoord(FScreenObject.ViewDirection);

    if (Location.x < FirstPoint.x)
      = (Location.x < SecondPoint.x) then
    begin
      if Distance < Min(Abs(Location.x - FirstPoint.x),
        Abs(Location.x - SecondPoint.x)) then
      begin
        Continue;
      end;
    end;
    if (Location.Y < FirstPoint.y)
      = (Location.Y < SecondPoint.y) then
    begin
      if Distance < Anisotropy*Min(Abs(Location.Y - FirstPoint.y),
        Abs(Location.Y - SecondPoint.y)) then
      begin
        Continue;
      end;
    end;

    TempDistance := DistanceToSegment(Segment);
    if TempDistance < Distance then
    begin
      result := Segment;
      Distance := TempDistance;
      if Distance = 0 then
      begin
        Exit;
      end;
    end;
  end;
end;

constructor TCellElementSegmentList.Create(Model: TBaseModel;
  ScreenObject: TScreenObject);
begin
  inherited Create;
  FCached := False;
  FCleared := False;
  Assert((Model = nil) or (Model is TCustomModel));
  FModel := Model;
  Assert(ScreenObject <> nil);
  FScreenObject := ScreenObject;
  FHigher3DElevationsNeedsUpdating := True;
  FLower3DElevationsNeedsUpdating := True;
end;

destructor TCellElementSegmentList.Destroy;
begin
  FRangeTree.Free;
  FStartPoints.Free;
  FEndPoints.Free;
  FTempMemoryStream.Free;
  FLower3DElevations.Free;
  FHigher3DElevations.Free;
  inherited;
end;

function TCellElementSegmentList.GetSegment(Index: NativeInt):
  TCellElementSegment;
begin
  result := TCellElementSegment(inherited Items[Index]); 
end;

procedure TCellElementSegmentList.RestoreData;
var
  DeCompressor: TDecompressionStream;
  LocalCount: integer;
  Index: Integer;
  Segment: TCellElementSegment;
begin
  Assert(UpToDate);
  Assert(FCached);
  Assert(FCleared);
  Assert(FTempMemoryStream <> nil);
  FTempMemoryStream.Position := 0;
  DeCompressor := TDecompressionStream.Create(FTempMemoryStream);
  try
    DeCompressor.Read(LocalCount, SizeOf(LocalCount));
    Capacity := LocalCount;
    for Index := 0 to LocalCount - 1 do
    begin
      Segment := TCellElementSegment.Create(FScreenObject);
      Add(Segment);
      Segment.Restore(DeCompressor);
//      DeCompressor.Read(Segment.FCol, SizeOf(Segment.FCol));
//      DeCompressor.Read(Segment.FEndPosition, SizeOf(Segment.FEndPosition));
//      DeCompressor.Read(Segment.FLayer, SizeOf(Segment.FLayer));
//      DeCompressor.Read(Segment.FVertexIndex, SizeOf(Segment.FVertexIndex));
//      DeCompressor.Read(Segment.FRow, SizeOf(Segment.FRow));
//      DeCompressor.Read(Segment.FStartPosition, SizeOf(Segment.FStartPosition));
//      DeCompressor.Read(Segment.FX1, SizeOf(Segment.FX1));
//      DeCompressor.Read(Segment.FX2, SizeOf(Segment.FX2));
//      DeCompressor.Read(Segment.FY1, SizeOf(Segment.FY1));
//      DeCompressor.Read(Segment.FY2, SizeOf(Segment.FY2));
//      DeCompressor.Read(Segment.FSectionIndex, SizeOf(Segment.FSectionIndex));
    end;
  finally
    DeCompressor.Free;
  end;
  FCleared := False;
end;

procedure TCellElementSegmentList.SetSegment(Index: NativeInt;
  const Value: TCellElementSegment);
begin
  inherited Items[Index] := Value;
end;

procedure TCellElementSegmentList.SetUpToDate(const Value: boolean);
begin
  FUpToDate := Value;
  if Value then
  begin
    (FModel as TCustomModel).SomeSegmentsUpToDate := True;
  end
  else
  begin
    FCached := False;
    FCleared := False;
    FreeAndNil(FStartPoints);
    FreeAndNil(FEndPoints);
    FreeAndNil(FRangeTree);
    FHigher3DElevationsNeedsUpdating := True;
    FLower3DElevationsNeedsUpdating := True;
  end;
end;

//{ TCellElementSegment }
//
//constructor TCellElementSegment.Create(ScreenObject: IScreenObject);
//begin
//  inherited Create;
//  FPositionInSegmentList := -1;
//  FScreenObject := ScreenObject;
//end;
//
//function TCellElementSegment.FirstPointRealCoord(ViewDirection: TViewDirection): TPoint2D;
//begin
//  result := FSegment[1];
//  if (ViewDirection = vdTop) and (frmGoPhast.Grid <> nil) then
//  begin
//    result := frmGoPhast.Grid.
//      RotateFromGridCoordinatesToRealWorldCoordinates(result);
//  end;
//end;
//
//function TCellElementSegment.IsSame(
//  AnotherSegment: TCellElementSegment): boolean;
//begin
//  result := (Col = AnotherSegment.Col)
//    and (EndPosition = AnotherSegment.EndPosition)
//    and (Layer = AnotherSegment.Layer)
//    and (VertexIndex = AnotherSegment.VertexIndex)
//    and (Row = AnotherSegment.Row)
//    and (StartPosition = AnotherSegment.StartPosition)
//    and (X1 = AnotherSegment.X1)
//    and (X2 = AnotherSegment.X2)
//    and (Y1 = AnotherSegment.Y1)
//    and (Y2 = AnotherSegment.Y2)
//    and (SectionIndex = AnotherSegment.SectionIndex)
//end;
//
//function TCellElementSegment.SegmentLength: double;
//var
//  SubIndex: Integer;
//begin
//  if (Length(FSubSegments) = 0)
//  or ((FScreenObject <> nil)
//    and (FScreenObject.FullObjectIntersectLength)) then
//  begin
//    result := Sqrt(Sqr(X1 - X2) + Sqr(Y1 - Y2));
//  end
//  else
//  begin
//    result := 0;
//    for SubIndex := 0 to Length(FSubSegments) - 1 do
//    begin
//      result := result
//        + Sqrt(Sqr(FSubSegments[SubIndex][1].x - FSubSegments[SubIndex][2].x)
//        + Sqr(FSubSegments[SubIndex][1].y - FSubSegments[SubIndex][2].y));
//    end;
//  end;
//end;
//
//procedure TCellElementSegment.Restore(Stream: TDecompressionStream);
//var
//  SubSegLength: integer;
//begin
//  FCol := ReadCompInt(Stream);
//  Stream.Read(FEndPosition, SizeOf(FEndPosition));
//  FLayer := ReadCompInt(Stream);
//  FVertexIndex := ReadCompInt(Stream);
//  FRow := ReadCompInt(Stream);
//  Stream.Read(FStartPosition, SizeOf(FStartPosition));
//  Stream.Read(FSegment, SizeOf(FSegment));
//  FSectionIndex := ReadCompInt(Stream);
//  LgrEdge := ReadCompBoolean(Stream);
//  FPositionInSegmentList := ReadCompInt(Stream);
//
//  SubSegLength := ReadCompInt(Stream);
//  SetLength(FSubSegments, SubSegLength);
//  if SubSegLength > 0 then
//  begin
//    Stream.Read(FSubSegments[0], SubSegLength*SizeOf(TSegment2D));
//  end;
//end;
//
//function TCellElementSegment.SecondPointRealCoord(ViewDirection: TViewDirection): TPoint2D;
//begin
//  result := FSegment[2];
//  if (ViewDirection = vdTop) and (frmGoPhast.Grid <> nil) then
//  begin
//    result := frmGoPhast.Grid.
//      RotateFromGridCoordinatesToRealWorldCoordinates(result);
//  end;
//end;
//
//procedure TCellElementSegment.Store(Stream: TStream);
//var
//  SubSegLength: integer;
//begin
//  WriteCompInt(Stream, FCol);
//  Stream.Write(FEndPosition, SizeOf(FEndPosition));
//  WriteCompInt(Stream, FLayer);
//  WriteCompInt(Stream, FVertexIndex);
//  WriteCompInt(Stream, FRow);
//  Stream.Write(FStartPosition, SizeOf(FStartPosition));
//  Stream.Write(FSegment, SizeOf(FSegment));
//  WriteCompInt(Stream, FSectionIndex);
//  WriteCompBoolean(Stream, LgrEdge);
//  WriteCompInt(Stream, FPositionInSegmentList);
//
//  SubSegLength := System.Length(FSubSegments);
//  WriteCompInt(Stream, SubSegLength);
//  if SubSegLength > 0 then
//  begin
//    Stream.Write(FSubSegments[0], SubSegLength*SizeOf(TSegment2D));
//  end;
//end;

{ TRealDataListItem }

procedure TRealDataListItem.Assign(Source: TPersistent);
begin
  if Source is TRealDataListItem then
  begin
    FValues := TRealDataListItem(Source).FValues;
    SetLength(FValues, System.Length(FValues));
  end;
  inherited;
end;

procedure TRealDataListItem.DefineProperties(Filer: TFiler);
begin
  inherited;
  Filer.DefineProperty('RealValues', ReadValues,
    WriteValues, (Length > 0));
end;

function TRealDataListItem.GetValuesLength: integer;
begin
  result := System.Length(FValues);
end;

function TRealDataListItem.GetValues(const Index: Integer): double;
begin
  Assert((Index >= 0) and (Index < Length));
  result := FValues[Index];
end;

procedure TRealDataListItem.ReadValues(Reader: TReader);
var
  Positions: TOneDRealArray;
begin
  ReadRealArray(Reader, Positions,
    (Collection as TDataListCollection).ScreenObject.Count);
  FValues := Positions;
end;

procedure TRealDataListItem.SetValuesLength(const Value: integer);
begin
  SetLength(FValues, Value)
end;

procedure TRealDataListItem.SetValues(const Index: Integer;
  const Value: double);
begin
  Assert((Index >= 0) and (Index < Length));
  FValues[Index] := Value;
end;

procedure TRealDataListItem.WriteValues(Writer: TWriter);
begin
  WriteRealArray(Writer, FValues);
end;

{ TIntegerDataListItem }

procedure TIntegerDataListItem.Assign(Source: TPersistent);
begin
  if Source is TIntegerDataListItem then
  begin
    FValues := TIntegerDataListItem(Source).FValues;
    SetLength(FValues, Length);
  end;
  inherited;
end;

procedure TIntegerDataListItem.DefineProperties(Filer: TFiler);
begin
  inherited;
  Filer.DefineProperty('IntegerValues', ReadValues,
    WriteValues, (Length > 0));
end;

function TIntegerDataListItem.GetValues(const Index: Integer): Integer;
begin
  Assert((Index >= 0) and (Index < Length));
  result := FValues[Index];
end;

function TIntegerDataListItem.GetValuesLength: integer;
begin
  result := System.Length(FValues);
end;

procedure TIntegerDataListItem.ReadValues(Reader: TReader);
var
  Positions: TOneDIntegerArray;
begin
  ReadIntegerArray(Reader, Positions,
    (Collection as TDataListCollection).ScreenObject.Count);
  FValues := Positions;
end;

procedure TIntegerDataListItem.SetValues(const Index, Value: Integer);
begin
  Assert((Index >= 0) and (Index < Length));
  FValues[Index] := Value;
end;

procedure TIntegerDataListItem.SetValuesLength(const Value: integer);
begin
  SetLength(FValues, Value);
end;

procedure TIntegerDataListItem.WriteValues(Writer: TWriter);
begin
  WriteIntegerArray(Writer, FValues);
end;

{ TDataListCollection }

constructor TDataListCollection.Create(ItemClass: TCollectionItemClass; const
  ScreenObject: TScreenObject; InvalidateModelEvent: TNotifyEvent);
begin
  inherited create(ItemClass, InvalidateModelEvent);
  FScreenObject := ScreenObject;
  PriorIndex := -1;
end;

function TDataListCollection.GetItemByName(
  ADataSetName: string): TCustomDataListItem;
var
  Index: integer;
  Item: TCustomDataListItem;
begin
  // If the function has already been called, see if the
  // result the previous time should still be the result
  // this time.
  if (PriorIndex >= 0) and (PriorIndex < Count) then
  begin
    Item := Items[PriorIndex] as TCustomDataListItem;
    if ADataSetName = UpperCase(Item.DataSetName) then
    begin
      result := Item;
      Exit;
    end;
  end;
  result := nil;
  ADataSetName := UpperCase(ADataSetName);
  for Index := 0 to Count - 1 do
  begin
    Item := Items[Index] as TCustomDataListItem;
    if ADataSetName = UpperCase(Item.DataSetName) then
    begin
      result := Item;
      // store the result for the next time the function
      // is called.
      PriorIndex := Index;
      Exit;
    end;
  end;
end;

{ TRealDataListCollection }

constructor TRealDataListCollection.Create(const ScreenObject: TScreenObject;
  InvalidateModelEvent: TNotifyEvent);
begin
  inherited Create(TRealDataListItem, ScreenObject, InvalidateModelEvent);
end;

{ TIntegerDataListCollection }

constructor TIntegerDataListCollection.Create(const ScreenObject:
  TScreenObject; InvalidateModelEvent: TNotifyEvent);
begin
  inherited Create(TIntegerDataListItem, ScreenObject, InvalidateModelEvent);
end;

{ TCustomDataListItem }

procedure TCustomDataListItem.Assign(Source: TPersistent);
begin
  if Source is TCustomDataListItem then
  begin
    with TCustomDataListItem(Source) do
    begin
      self.FirstCol := FirstCol;
      self.FirstRow := FirstRow;
      self.FirstLay := FirstLay;
      self.LastCol := LastCol;
      self.LastRow := LastRow;
      self.LastLay := LastLay;
      self.DataSetName := DataSetName;
    end;
  end
  else
  begin
    inherited;
  end;
end;

function TCustomDataListItem.ValueIndex(const Col, Row, Lay: integer): integer;
var
  RowCount: integer;
  ColCount: integer;
begin
  if (Col < FirstCol) or (Col > LastCol)
    or (Row < FirstRow) or (Row > LastRow)
    or (Lay < FirstLay) or (Lay > LastLay) then
  begin
    result := -1;
  end
  else
  begin
    RowCount := LastRow - FirstRow + 1;
    ColCount := LastCol - FirstCol + 1;
    result := (Lay - FirstLay) * RowCount * ColCount
      + (Row - FirstRow) * ColCount
      + (Col - FirstCol);
  end;
end;

{ TDelegateItem }

destructor TDelegateItem.Destroy;
begin
  FDelegate.Free;
  inherited;
end;

function TDelegateItem.GetDelegateClass: string;
begin
  if FDelegate = nil then
  begin
    result := '';
  end
  else
  begin
    result := FDelegate.ClassName;
  end;
end;

procedure TDelegateItem.SetDelegate(const Value: TCustomScreenObjectDelegate);
begin
  FDelegate.Assign(Value);
end;

function TDelegateItem.ScreenObject: TScreenObject;
begin
  result := (Collection as TDelegateCollection).FOwnerScreenObject;
end;

procedure TDelegateItem.SetDelegateClass(const Value: string);
var
  DelegateClass: TCustomScreenObjectDelegateClass;
begin
  FDelegate.Free;
  DelegateClass := TCustomScreenObjectDelegateClass(FindClass(Value));
  FDelegate := DelegateClass.Create(ScreenObject);
end;

{ TDelegateCollection }

constructor TDelegateCollection.Create(OwnerScreenObject: TScreenObject);
begin
  inherited Create(TDelegateItem);
  FOwnerScreenObject := OwnerScreenObject;
end;

function TDelegateCollection.Delegate(
  ModelSelection: TModelSelection): TCustomScreenObjectDelegate;
var
  Index: Integer;
  Item: TDelegateItem;
begin
  if (FCachedDelegate = nil) or
    (FCachedDelegate.ModelSelection <> ModelSelection) then
  begin
    FCachedDelegate := nil;
    for Index := 0 to Count - 1 do
    begin
      Item := Items[Index] as TDelegateItem;
      if (Item.Delegate <> nil) and
        (Item.Delegate.ModelSelection = ModelSelection) then
      begin
        FCachedDelegate := Item.Delegate;
        break;
      end;
    end;

    // Each delegate class referenced here must be registered in the
    // initialization section.
    if FCachedDelegate = nil then
    begin
      Item := Add as TDelegateItem;
      case ModelSelection of
        msUndefined:
          begin
            Assert(False);
          end;
        msPhast:
          begin
            Item.DelegateClass := TPhastDelegate.ClassName;
          end;
        msModflow:
          begin
            Item.DelegateClass := TModflowDelegate.ClassName;
          end;
        msModflowLGR:
          begin
            Item.DelegateClass := TModflowLGRDelegate.ClassName;
          end;
        msModflowLGR2:
          begin
            Item.DelegateClass := TModflowLGR2Delegate.ClassName;
          end;
        msModflowNWT:
          begin
            Item.DelegateClass := TModflowNWTDelegate.ClassName;
          end;
        msModflowFmp:
          begin
            Item.DelegateClass := TModflowFmpDelegate.ClassName;
          end;
        msModflowCfp:
          begin
            Item.DelegateClass := TModflowCfpDelegate.ClassName;
          end;
        msSutra22:
          begin
            Item.DelegateClass := TSutra22Delegate.ClassName;
          end;
        msSutra30:
          begin
            Item.DelegateClass := TSutra30Delegate.ClassName;
          end;
        msSutra40:
          begin
            Item.DelegateClass := TSutra40Delegate.ClassName;
          end;
        msFootPrint:
          begin
            Item.DelegateClass := TFootprintDelegate.ClassName;
          end;
        msModflow2015:
          begin
            Item.DelegateClass := TModflow6Delegate.ClassName;
          end;
        msModflowOwhm2:
          begin
            Item.DelegateClass := TModflowFmp4Delegate.ClassName;
          end;
          // For selecting Item.DelegateClass, the delegate class must
          // be registered. This can be done in the initialization
          // section of this unit at the end of the unit.
        else
          begin
            Assert(False);
          end;
      end;
      FCachedDelegate := Item.Delegate;
    end;
  end;
  result := FCachedDelegate;
end;

{ TCustomScreenObjectDelegate }

procedure TCustomScreenObjectDelegate.AssignCellValue(
  const UsedVariables: TStringList; const DataSet: TDataArray; LayerIndex,
  RowIndex, ColIndex: integer; const Compiler: TRbwParser;
  const Annotation: string; var Expression: TExpression;
  const OtherData: TObject; SectionIndex: integer; ShouldZero: boolean);
var
  AValue: double;
  IntValue: Integer;
  BoolValue: Boolean;
  StringValue: string;
begin
  case DataSet.Orientation of
    dsoTop:
      begin
        LayerIndex := 0;
      end;
    dsoFront:
      begin
        RowIndex := 0;
      end;
    dsoSide:
      begin
        ColIndex := 0;
      end;
    dso3D:
      begin
        // do nothing.
      end;
    else Assert(False);
  end;
  UpdateVariables(UsedVariables, DataSet,
    LayerIndex, RowIndex, ColIndex, Compiler);
  UpdateCurrentSection(SectionIndex);

  FScreenObject.EvaluateDataArrayExpression(DataSet, Expression, Compiler);

  case DataSet.Datatype of
    rdtDouble:
      begin
        if ShouldZero then
        begin
          AValue := 0;
        end
        else
        begin
          AValue := Expression.DoubleResult;
        end;
        if IsInfinite(AValue) or IsNan(AValue) then
        begin
          if DataSet.Name = '' then
          begin
            frmErrorsAndWarnings.AddError(DataSet.Model as TCustomModel,
              Format(ErrorMessageFormulaUnNamed, [FScreenObject.Name]),
              Format(ErrorString, [LayerIndex+1,RowIndex+1,ColIndex+1] ),
              FScreenObject);
          end
          else
          begin
            frmErrorsAndWarnings.AddError(DataSet.Model as TCustomModel,
              Format(ErrorMessageFormulaNamed, [DataSet.Name,FScreenObject.Name]),
              Format(ErrorString, [LayerIndex+1,RowIndex+1,ColIndex+1]), FScreenObject);
          end;
          DataSet.RealData[LayerIndex, RowIndex, ColIndex] := MaxReal
        end
        else
        begin
          DataSet.RealData[LayerIndex, RowIndex, ColIndex] := AValue;
        end;
//        DataSet.RealData[LayerIndex, RowIndex, ColIndex] :=
//          Expression.DoubleResult;
      end;
    rdtInteger:
      begin
        if ShouldZero then
        begin
          IntValue := 0;
        end
        else
        begin
          IntValue := Expression.IntegerResult;
        end;
        DataSet.IntegerData[LayerIndex, RowIndex, ColIndex] :=
          IntValue;
      end;
    rdtBoolean:
      begin
        if ShouldZero then
        begin
          BoolValue := False;
        end
        else
        begin
          BoolValue := Expression.BooleanResult;
        end;
        DataSet.BooleanData[LayerIndex, RowIndex, ColIndex] :=
          BoolValue;
      end;
    rdtString:
      begin
        if ShouldZero then
        begin
          StringValue := '';
        end
        else
        begin
          StringValue := Expression.StringResult;
        end;
        DataSet.StringData[LayerIndex, RowIndex, ColIndex] :=
          StringValue;
      end;
  else
    Assert(False);
  end;
  DataSet.Annotation[LayerIndex, RowIndex, ColIndex] := Annotation;
end;

function TCustomScreenObjectDelegate.BoundaryType: integer;
begin
  result := 0;
end;

constructor TCustomScreenObjectDelegate.Create(ScreenObject: TScreenObject);
begin
  inherited Create;
  FScreenObject := ScreenObject;
  FModel := FScreenObject.FModel;
end;

function TCustomScreenObjectDelegate.DataSetUsed(const DataSet: TDataArray;
  var OtherData: TObject; AModel: TBaseModel): boolean;
var
  LocalModel: TPhastModel;
begin
  OtherData := nil;
  LocalModel := FModel as TPhastModel;
  result := (FScreenObject.IndexOfDataSet(DataSet) >= 0)
    or (FScreenObject.IndexOfBoundaryDataSet(DataSet) >= 0)
    or (DataSet = LocalModel.TopBoundaryType)
    or (DataSet = LocalModel.FrontBoundaryType)
    or (DataSet = LocalModel.SideBoundaryType)
    or (DataSet = LocalModel.Top2DBoundaryType);
end;

function TCustomScreenObjectDelegate.EncloseAnnotation(
  const DataSetFormula: string; const OtherData: TObject): string;
begin
  if Length(DataSetFormula) > 1000 then
  begin
    result := 'Enclosed by ' + FScreenObject.Name + ' with a formula '
      + 'that is too long to show.';
  end
  else
  begin
    result := 'Enclosed by ' + FScreenObject.Name + ' with formula: '
      + DataSetFormula;
  end;
end;

function TCustomScreenObjectDelegate.GetCompiler(
  const Orientation: TDataSetOrientation): TRbwParser;
begin
  result := FScreenObject.GetCompiler(
    Orientation, FScreenObject.EvaluatedAt);
end;

procedure TCustomScreenObjectDelegate.InitializeExpression(
  out Compiler: TRbwParser; out DataSetFunction: string;
  out Expression: TExpression; const DataSet: TDataArray;
  const OtherData: TObject; AModel: TBaseModel);
var
  ResultTypeOK: boolean;
  DI: integer;
  IsBoundary: boolean;
  ErrorFunction: string;
begin
  Compiler := GetCompiler(DataSet.Orientation);
  DI := FScreenObject.IndexOfDataSet(DataSet);
  if DI >= 0 then
  begin
    DataSetFunction := FScreenObject.DataSetFormulas[DI];
    IsBoundary := False;
  end
  else
  begin
    IsBoundary := True;
    DI := FScreenObject.IndexOfBoundaryDataSet(DataSet);
    Assert(DI >= 0);
    DataSetFunction := FScreenObject.BoundaryDataSetFormulas[DI];
  end;

  ErrorFunction := DataSetFunction;
  try
    Compiler.Compile(DataSetFunction);
  except on E: ERbwParserError do
    begin
      ResetScreenObjectFunction(DI, FScreenObject, Compiler,
        DataSet.DataType, E.Message, IsBoundary, ErrorFunction);
    end;
  end;
  Expression := Compiler.CurrentExpression;
  ResultTypeOK := (Expression.ResultType = DataSet.Datatype)
    or ((Expression.ResultType = rdtInteger)
    and (DataSet.Datatype = rdtDouble));
  if not ResultTypeOK then
  begin
    raise EInvalidDataType.Create(Format(StrTheFormula0sIn,
      [Expression.Decompile, FScreenObject.Name]), Expression.Decompile);
  end;
end;

procedure TCustomScreenObjectDelegate.InitializeVariables(
  const UsedVariables: TStringList; const DataSet: TDataArray;
  const Expression: TExpression; const Compiler: TRbwParser);
var
  VarIndex: integer;
  VarName: string;
  VarPosition: integer;
  Variable: TCustomValue;
  AnotherDataSet: TDataArray;
  LocalModel: TCustomModel;
begin
  if Expression = nil then
    Exit;
  LocalModel := DataSet.Model as TCustomModel;
  UsedVariables.Assign(Expression.VariablesUsed);
  for VarIndex := 0 to UsedVariables.Count - 1 do
  begin
    VarName := UsedVariables[VarIndex];
    VarPosition := Compiler.IndexOfVariable(VarName);
    Variable := Compiler.Variables[VarPosition];
    AnotherDataSet := LocalModel.DataArrayManager.GetDataSetByName(VarName);
    if AnotherDataSet <> nil then
    begin
      Assert(AnotherDataSet <> DataSet);
      Assert(AnotherDataSet.DataType = Variable.ResultType);
      AnotherDataSet.Initialize;
      LocalModel.DataArrayManager.AddDataSetToCache(AnotherDataSet);
    end;
  end;
end;

function TCustomScreenObjectDelegate.IntersectAnnotation(
  const DataSetFormula: string; const OtherData: TObject): string;
begin
  if Length(DataSetFormula) > 1000 then
  begin
    result := 'Intersected by ' + FScreenObject.Name + ' with a formula '
      + 'that is too long to show.';
  end
  else
  begin
    result := 'Intersected by ' + FScreenObject.Name + ' with formula: '
      + DataSetFormula;
  end;
end;

procedure TCustomScreenObjectDelegate.OtherIndex(const LayerOrRow,
  RowOrColumn: integer; out First, Last: integer; const DataSet: TDataArray;
  AModel: TBaseModel);
var
  Grid: TCustomModelGrid;
begin
  if (DataSet <> nil) and (DataSet.Orientation <> dso3D) then
  begin
    First := 0;
    Last := 0;
  end
  else
  begin
    case FScreenObject.ElevationCount of
      ecZero:
        begin
          First := 0;
          Last := 0;
        end;
      ecOne, ecTwo:
        begin
          First := 0;
          Grid := (FModel as TPhastModel).Grid;
          case FScreenObject.ViewDirection of
            vdTop:
              begin
                case FScreenObject.EvaluatedAt of
                  eaBlocks: Last := Grid.LayerCount-1;
                  eaNodes: Last := Grid.LayerCount;
                  else Assert(False);
                end;
              end;
            vdFront:
              begin
                case FScreenObject.EvaluatedAt of
                  eaBlocks: Last := Grid.RowCount-1;
                  eaNodes: Last := Grid.RowCount;
                  else Assert(False);
                end;
              end;
            vdSide:
              begin
                case FScreenObject.EvaluatedAt of
                  eaBlocks: Last := Grid.ColumnCount-1;
                  eaNodes: Last := Grid.ColumnCount;
                  else Assert(False);
                end;
              end;
            else Assert(False);
          end;
        end;
    else
      Assert(False);
    end;
  end;
end;

procedure TCustomScreenObjectDelegate.UpdateVariables(
  const UsedVariables: TStringList; const DataSet: TDataArray; Layer, Row,
  Column: integer; const Compiler: TRbwParser);
var
  VarIndex: integer;
  VarName: string;
  VarPosition: integer;
  Variable: TCustomValue;
  AnotherDataSet: TDataArray;
  LocalModel: TCustomModel;
begin
  UpdateGlobalLocations(Column, Row, Layer, DataSet.EvaluatedAt, DataSet.Model as TCustomModel);
  LocalModel := DataSet.Model as TCustomModel;
  for VarIndex := 0 to UsedVariables.Count - 1 do
  begin
    VarName := UsedVariables[VarIndex];
    VarPosition := Compiler.IndexOfVariable(VarName);
    Variable := Compiler.Variables[VarPosition];
    AnotherDataSet := LocalModel.DataArrayManager.GetDataSetByName(VarName);
    if AnotherDataSet <> nil then
    begin

      Assert(AnotherDataSet <> DataSet);
      Assert(AnotherDataSet.DataType = Variable.ResultType);
      if AnotherDataSet.Orientation = dsoTop then
      begin
        Layer := 0;
      end;
      if AnotherDataSet.Orientation = dsoFront then
      begin
        Row := 0;
      end;
      if AnotherDataSet.Orientation = dsoSide then
      begin
        Column := 0;
      end;
      case Variable.ResultType of
        rdtDouble:
          begin
            TRealVariable(Variable).Value :=
              AnotherDataSet.RealData[Layer, Row, Column];
          end;
        rdtInteger:
          begin
            TIntegerVariable(Variable).Value :=
              AnotherDataSet.IntegerData[Layer, Row, Column];
          end;
        rdtBoolean:
          begin
            TBooleanVariable(Variable).Value :=
              AnotherDataSet.BooleanData[Layer, Row, Column];
          end;
        rdtString:
          begin
            TStringVariable(Variable).Value :=
              AnotherDataSet.StringData[Layer, Row, Column];
          end;
      else
        Assert(False);
      end;
    end;
  end;
end;

{ TPhastDelegate }

function TPhastDelegate.ThreeDBoundaryFormula: string;
begin
  if PhastBoundaryType in  [btNone, btSpecifiedHead, btFlux, btLeaky] then
  begin
    result := IntToStr(BoundaryType);
  end
  else
  begin
    result := '0';
  end;
end;

function TPhastDelegate.TwoDBoundaryFormula: string;
begin
  if PhastBoundaryType in  [btNone, btRiver, btWell] then
  begin
    result := IntToStr(BoundaryType);
  end
  else
  begin
    result := '0';
  end;
end;

procedure TPhastDelegate.AssignCellValue(const UsedVariables: TStringList;
  const DataSet: TDataArray; LayerIndex, RowIndex, ColIndex: integer;
  const Compiler: TRbwParser; const Annotation: string;
  var Expression: TExpression; const OtherData: TObject;
  SectionIndex: integer; ShouldZero: boolean);
var
  InterpValue: TInterpValuesItem;
begin
  case DataSet.Orientation of
    dsoTop:
      begin
        LayerIndex := 0;
      end;
    dsoFront:
      begin
        RowIndex := 0;
      end;
    dsoSide:
      begin
        ColIndex := 0;
      end;
    dso3D:
      begin
        // do nothing.
      end;
    else Assert(False);
  end;
  InterpValue := OtherData as TInterpValuesItem;
  if (InterpValue = nil) or not InterpValue.Values.UsePHAST_Interpolation then
  begin
    inherited;
    if (InterpValue <> nil) and (DataSet is TCustomPhastDataSet) then
    begin
      TCustomPhastDataSet(DataSet).IsInterpolatedCell[
        LayerIndex, RowIndex, ColIndex] := False;
    end
  end
  else
  begin
    UpdateGlobalLocations(ColIndex, RowIndex, LayerIndex, DataSet.EvaluatedAt,
      DataSet.Model as TCustomModel);
    UpdateCurrentSection(SectionIndex);

    case DataSet.Datatype of
      rdtDouble:
        begin
          AssignRealDataWithPhastInterpolation(DataSet,
            LayerIndex, RowIndex, ColIndex, Annotation, InterpValue);
        end;
      rdtInteger:
        begin
          AssignIntegerDataWithPhastInterpolation(DataSet,
            LayerIndex, RowIndex, ColIndex, Annotation, InterpValue);
        end;
      rdtBoolean:
        begin
          Assert(False);
        end;
      rdtString:
        begin
          Assert(False);
        end;
    else
      Assert(False);
    end;
  end;
end;

procedure TPhastDelegate.AssignIntegerDataWithPhastInterpolation(
  const DataSet: TDataArray;
  const LayerIndex, RowIndex, ColIndex: integer; const Comment: string;
  const InterpValue: TInterpValuesItem);
var
  Distance, Fraction: double;
  RealValue: double;
  Model: TPhastModel;
begin
  Model:= FModel as TPhastModel;
  if DataSet is TIntegerPhastDataSet then
  begin
    with TIntegerPhastDataSet(DataSet) do
    begin
      CellDistance1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance1;
      CellDistance2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance2;
      CellInterpolationDirection[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.InterpolationDirection;
      IsInterpolatedCell[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.UsePHAST_Interpolation;
      Annotation[LayerIndex, RowIndex, ColIndex] := Comment;
      CellValue1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.IntValue1;
      CellValue2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.IntValue2;
    end;
  end
  else if DataSet is TSparseIntegerPhastDataSet then
  begin
    with TSparseIntegerPhastDataSet(DataSet) do
    begin
      CellDistance1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance1;
      CellDistance2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance2;
      CellInterpolationDirection[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.InterpolationDirection;
      IsInterpolatedCell[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.UsePHAST_Interpolation;
      Annotation[LayerIndex, RowIndex, ColIndex] := Comment;
      CellValue1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.IntValue1;
      CellValue2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.IntValue2;
    end;
  end
  else
  begin
    Assert(false);
  end;

  Distance := 0;
  case InterpValue.Values.InterpolationDirection of
    pidX:
      begin
        case FScreenObject.EvaluatedAt of
          eaBlocks:
            begin
              Distance := (Model.PhastGrid.ColumnPosition[ColIndex]
                + Model.PhastGrid.ColumnPosition[ColIndex + 1]) / 2;
            end;
          eaNodes:
            begin
              Distance := Model.PhastGrid.ColumnPosition[ColIndex];
            end;
        else
          Assert(False);
        end;
      end;
    pidY:
      begin
        case FScreenObject.EvaluatedAt of
          eaBlocks:
            begin
              Distance := (Model.PhastGrid.RowPosition[RowIndex]
                + Model.PhastGrid.RowPosition[RowIndex + 1]) / 2;
            end;
          eaNodes:
            begin
              Distance := Model.PhastGrid.RowPosition[RowIndex];
            end;
        else
          Assert(False);
        end;
      end;
    pidZ:
      begin
        case FScreenObject.EvaluatedAt of
          eaBlocks:
            begin
              Distance := (Model.PhastGrid.LayerElevation[LayerIndex]
                + Model.PhastGrid.LayerElevation[LayerIndex + 1]) / 2;
            end;
          eaNodes:
            begin
              Distance := Model.PhastGrid.LayerElevation[LayerIndex];
            end;
        else
          Assert(False);
        end;
      end;
    pidMix:
      begin
        UpdateVariables(FMixtureVariables, DataSet,
          LayerIndex, RowIndex, ColIndex, FMixtureCompiler);

        FMixtureExpression.Evaluate;

        Distance := 1 - FMixtureExpression.DoubleResult;
      end;
    else Assert(False);
  end;
  if Distance <= InterpValue.Values.Distance1 then
  begin
    DataSet.IntegerData[LayerIndex, RowIndex, ColIndex] :=
      InterpValue.Values.IntValue1;
    Fraction := 1;
  end
  else if Distance >= InterpValue.Values.Distance2 then
  begin
    DataSet.IntegerData[LayerIndex, RowIndex, ColIndex] :=
      InterpValue.Values.IntValue2;
    Fraction := 0;
  end
  else
  begin
    Fraction := 1 - (Distance - InterpValue.Values.Distance1) /
      (InterpValue.Values.Distance2 - InterpValue.Values.Distance1);
    RealValue := Fraction * InterpValue.Values.IntValue1 + (1 - Fraction) *
      InterpValue.Values.IntValue2;
    DataSet.IntegerData[LayerIndex, RowIndex, ColIndex] :=
      Round(RealValue);
  end;
  // Fraction is needed in all cases in order to read
  // TSparseIntegerPhastInterpolationDataSet.RealValue
  // or TIntegerPhastDataSet.RealValue
  if DataSet is TIntegerPhastDataSet then
  begin
    TIntegerPhastDataSet(DataSet).Fraction[
      LayerIndex, RowIndex, ColIndex] := Fraction;
  end
  else if DataSet is TSparseIntegerPhastDataSet then
  begin
    TSparseIntegerPhastDataSet(DataSet).Fraction[
      LayerIndex, RowIndex, ColIndex] := Fraction
  end;
end;

procedure TPhastDelegate.AssignRealDataWithPhastInterpolation(
  const DataSet: TDataArray;
  const LayerIndex, RowIndex, ColIndex: integer; const Comment: string;
  const InterpValue: TInterpValuesItem);
var
  Distance, Fraction: double;
  Model: TPhastModel;
begin
  Model := FModel as TPhastModel;
  if DataSet is TRealPhastDataSet then
  begin
    with TRealPhastDataSet(DataSet) do
    begin
      CellDistance1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance1;
      CellDistance2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance2;
      CellInterpolationDirection[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.InterpolationDirection;
      IsInterpolatedCell[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.UsePHAST_Interpolation;
      Annotation[LayerIndex, RowIndex, ColIndex] := Comment;
      //'Set by PHAST-style interpolation: ' + Name;
      CellValue1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.RealValue1;
      CellValue2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.RealValue2;
    end;
  end
  else if DataSet is TSparseRealPhastDataSet then
  begin
    with TSparseRealPhastDataSet(DataSet) do
    begin
      CellDistance1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance1;
      CellDistance2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance2;
      CellInterpolationDirection[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.InterpolationDirection;
      IsInterpolatedCell[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.UsePHAST_Interpolation;
      Annotation[LayerIndex, RowIndex, ColIndex] := Comment;
      //'Set by PHAST-style interpolation: ' + Name;
      CellValue1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.RealValue1;
      CellValue2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.RealValue2;
    end;
  end
  else
  begin
    Assert(False);
  end;

  Distance := 0;
  case InterpValue.Values.InterpolationDirection of
    pidX:
      begin
        case FScreenObject.EvaluatedAt of
          eaBlocks:
            begin
              Distance := (Model.PhastGrid.ColumnPosition[ColIndex]
                + Model.PhastGrid.ColumnPosition[ColIndex + 1]) / 2;
            end;
          eaNodes:
            begin
              Distance := Model.PhastGrid.ColumnPosition[ColIndex];
            end;
        else
          Assert(False);
        end;
      end;
    pidY:
      begin
        case FScreenObject.EvaluatedAt of
          eaBlocks:
            begin
              Distance := (Model.PhastGrid.RowPosition[RowIndex]
                + Model.PhastGrid.RowPosition[RowIndex + 1]) / 2;
            end;
          eaNodes:
            begin
              Distance := Model.PhastGrid.RowPosition[RowIndex];
            end;
        else
          Assert(False);
        end;
      end;
    pidZ:
      begin
        case FScreenObject.EvaluatedAt of
          eaBlocks:
            begin
              Distance := (Model.PhastGrid.LayerElevation[LayerIndex]
                + Model.PhastGrid.LayerElevation[LayerIndex + 1]) / 2;
            end;
          eaNodes:
            begin
              Distance := Model.PhastGrid.LayerElevation[LayerIndex];
            end;
        else
          Assert(False);
        end;
      end;
  else
    Assert(False);
  end;
  if Distance <= InterpValue.Values.Distance1 then
  begin
    DataSet.RealData[LayerIndex, RowIndex, ColIndex] :=
      InterpValue.Values.RealValue1;
  end
  else if Distance >= InterpValue.Values.Distance2 then
  begin
    DataSet.RealData[LayerIndex, RowIndex, ColIndex] :=
      InterpValue.Values.RealValue2;
  end
  else
  begin
    Fraction := 1 - (Distance - InterpValue.Values.Distance1) /
      (InterpValue.Values.Distance2 - InterpValue.Values.Distance1);
    DataSet.RealData[LayerIndex, RowIndex, ColIndex] :=
      Fraction * InterpValue.Values.RealValue1 + (1 - Fraction) *
      InterpValue.Values.RealValue2;
  end;
end;

procedure TPhastDelegate.AssignSelectedCells(
  AModel: TBaseModel);
var
  CellList: TCellAssignmentList;
  Index: Integer;
  Cell: TCellAssignment;
  Grid: TCustomModelGrid;
begin
  Grid := (AModel as TCustomModel).Grid;
  CellList := TCellAssignmentList.Create;
  try
    case FScreenObject.EvaluatedAt of
      eaBlocks:
        begin
          FSelectedCells.SetExtents(Grid.LayerCount,
            Grid.RowCount, Grid.ColumnCount);
        end;
      eaNodes:
        begin
          FSelectedCells.SetExtents(Grid.LayerCount+1,
            Grid.RowCount+1, Grid.ColumnCount+1);
        end;
      else Assert(False);
    end;
    GetCellsToAssign('', nil, FScreenObject.EvaluatedAt, CellList, alAll,
      AModel);
    for Index := 0 to CellList.Count - 1 do
    begin
      Cell := CellList[Index];
      FSelectedCells[Cell.Layer, Cell.Row, Cell.Column] := True;
    end;

  finally
    CellList.Free;
  end;
end;

procedure TPhastDelegate.AssignValuesToFrontDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll);
var
  DataSetFunction: string;
  Compiler: TRbwParser;
  Expression: TExpression;
  UsedVariables: TStringList;
  CellList: TCellAssignmentList;
  CellAssignment: TCellAssignment;
  AssignmentIndex: Integer;
//  UsedFunction: string;
//  UsedExpression: TExpression;
begin
  CellList := TCellAssignmentList.Create;
  try
    Assert(DataSet <> nil);
    Assert(AssignmentLocation = alAll);
    if not (DataSet.Orientation in [dsoFront, dso3D]) then
    begin
      FScreenObject.RemoveDataSet(DataSet);
      Exit;
    end;

    if DataSetUsed(DataSet, OtherData, AModel) then
    begin
      UsedVariables := TStringList.Create;
      try
        InitializeExpression(Compiler, DataSetFunction,
          Expression, DataSet,
          OtherData, frmGoPhast.PhastModel);

        InitializeVariables(UsedVariables, DataSet, Expression, Compiler);
        GetFrontCellsToAssign(DataSetFunction, OtherData, DataSet,
          CellList, alAll, AModel);
        FScreenObject.UpdateImportedValues(DataSet);
        for AssignmentIndex := 0 to CellList.Count - 1 do
        begin
          CellAssignment := CellList[AssignmentIndex];
          UpdateCurrentSegment(CellAssignment.Segment);
          UpdateCurrentSection(CellAssignment.Section);
          AssignCellValue(UsedVariables, DataSet, CellAssignment.Layer,
            CellAssignment.Row, CellAssignment.Column, Compiler,
            CellAssignment.Annotation, Expression, OtherData,
            CellAssignment.Section, False);
        end;
        (FModel as TPhastModel).DataArrayManager.CacheDataArrays;
      finally
        UsedVariables.Free;
      end;
    end;
  finally
    CellList.Free;
  end;
end;

procedure TPhastDelegate.AssignValuesToSideDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll);
var
  DataSetFunction: string;
  Compiler: TRbwParser;
  Expression: TExpression;
  UsedVariables: TStringList;
  CellList: TCellAssignmentList;
  CellAssignment: TCellAssignment;
  AssignmentIndex: Integer;
//  UsedFunction: string;
//  UsedExpression: TExpression;
begin
  CellList := TCellAssignmentList.Create;
  try
    Assert(DataSet <> nil);
    Assert(AssignmentLocation = alAll);
    if not (DataSet.Orientation in [dsoSide, dso3D]) then
    begin
      FScreenObject.RemoveDataSet(DataSet);
      Exit;
    end;
    if DataSetUsed(DataSet, OtherData, AModel) then
    begin
      UsedVariables := TStringList.Create;
      try
        InitializeExpression(Compiler, DataSetFunction,
          Expression, DataSet,
          OtherData, frmGoPhast.PhastModel);

        InitializeVariables(UsedVariables, DataSet, Expression, Compiler);
        GetSideCellsToAssign(DataSetFunction, OtherData, DataSet,
          CellList, alAll, AModel);
        FScreenObject.UpdateImportedValues(DataSet);
        for AssignmentIndex := 0 to CellList.Count - 1 do
        begin
          CellAssignment := CellList[AssignmentIndex];
          UpdateCurrentSegment(CellAssignment.Segment);
          UpdateCurrentSection(CellAssignment.Section);
          AssignCellValue(UsedVariables, DataSet, CellAssignment.Layer,
            CellAssignment.Row, CellAssignment.Column, Compiler,
            CellAssignment.Annotation, Expression, OtherData,
            CellAssignment.Section, False);
        end;
      finally
        UsedVariables.Free;
        (FModel as TPhastModel).DataArrayManager.CacheDataArrays;
      end;
    end;
  finally
    CellList.Free;
  end;
end;

procedure TPhastDelegate.AssignValuesToTopDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll);
var
  DataSetFunction: string;
  Compiler: TRbwParser;
  Expression: TExpression;
  UsedVariables: TStringList;
  CellList: TCellAssignmentList;
  CellAssignment: TCellAssignment;
  AssignmentIndex: Integer;
//  UsedFunction: string;
//  UsedExpression: TExpression;
begin
  CellList := TCellAssignmentList.Create;
  try
    Assert(DataSet <> nil);
    Assert(AssignmentLocation = alAll);
    if not (DataSet.Orientation in [dsoTop, dso3D]) then
    begin
      FScreenObject.RemoveDataSet(DataSet);
      Exit;
    end;
    if DataSetUsed(DataSet, OtherData, AModel) then
    begin
      UsedVariables := TStringList.Create;
      try
        InitializeExpression(Compiler, DataSetFunction,
          Expression, DataSet,
          OtherData, frmGoPhast.PhastModel);

        InitializeVariables(UsedVariables, DataSet, Expression, Compiler);
        GetTopCellsToAssign(DataSetFunction, OtherData, DataSet,
          CellList, alAll, AModel);
        FScreenObject.UpdateImportedValues(DataSet);
        for AssignmentIndex := 0 to CellList.Count - 1 do
        begin
          CellAssignment := CellList[AssignmentIndex];
          UpdateCurrentSegment(CellAssignment.Segment);
          UpdateCurrentSection(CellAssignment.Section);
          AssignCellValue(UsedVariables, DataSet, CellAssignment.Layer,
            CellAssignment.Row, CellAssignment.Column, Compiler,
            CellAssignment.Annotation, Expression, OtherData,
            CellAssignment.Section, False);
        end;
      finally
        UsedVariables.Free;
        (AModel as TCustomModel).DataArrayManager.CacheDataArrays;
      end;
    end;
  finally
    CellList.Free;
  end;
end;

function TPhastDelegate.BoundaryType: integer;
begin
  result := Ord(PhastBoundaryType);
end;

constructor TPhastDelegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msPhast;
  FSelectedCells := TSelectedCells.Create;
end;

procedure TPhastDelegate.GetCellsToAssign(
  const DataSetFunction: string; OtherData: TObject;
  const EvaluatedAt: TEvaluatedAt; CellList: TCellAssignmentList;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
var
  Grid: TCustomModelGrid;
begin
  Assert(not FScreenObject.Deleted);
  Grid := (AModel as TCustomModel).Grid;
  Assert(CellList.Count = 0);
  if (Grid.ColumnCount <= 0) or (Grid.RowCount <= 0)
    or (Grid.LayerCount <= 0) then
  begin
    Exit;
  end;
  case FScreenObject.ViewDirection of
    vdTop: GetTopCellsToAssign(DataSetFunction, OtherData,
      nil, CellList, AssignmentLocation, AModel);
    vdFront: GetFrontCellsToAssign(DataSetFunction, OtherData,
      nil, CellList, AssignmentLocation, AModel);
    vdSide: GetSideCellsToAssign(DataSetFunction, OtherData,
      nil, CellList, AssignmentLocation, AModel);
    else Assert(False);
  end;
end;

procedure TPhastDelegate.GetFrontCellsToAssign(
  const DataSetFunction: string; OtherData: TObject;
  const DataSet: TDataArray; CellList: TCellAssignmentList;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
var
  TempMaxY: Real;
  TempMaxX: Real;
  TempMinY: Real;
  TempMinX: Real;
  RowLimit: Integer;
  EAnnotation: string;
  IAnnotation: string;
  ASegment: TCellElementSegment;
  SegmentIndex: NativeInt;
  PriorLayer: Integer;
  PriorCol: Integer;
  Annotation: string;
  ElevationIndex: Integer;
  LastElevationIndex: Integer;
  FirstElevationIndex: Integer;
  SectionIndex: Integer;
  CellLocation3D: T3DRealPoint;
  LayerIndex: Integer;
  ColIndex: Integer;
  LastLayer: Integer;
  FirstLayer: Integer;
  LastCol: Integer;
  FirstCol: Integer;
  LocalGrid: TPhastGrid;
  LowerBound: Double;
  UpperBound: Double;
  Middle: Double;
  EvalAt: TEvaluatedAt;
  Orientation: TDataSetOrientation;
  AssignmentMethod: TAssignmentMethod;
  UsedCells: array of array of array of Boolean;
  LocalModel: TCustomModel;
  CellIndex: Integer;
  ACell: TCellAssignment;
begin
  Assert(CellList.Count = 0);
  LocalModel := AModel as TCustomModel;
  LocalGrid := LocalModel.PhastGrid;
  IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
  EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
  UpdateCurrentScreenObject(FScreenObject);
  RowLimit := -1;
  if DataSet = nil then
  begin
    EvalAt := FScreenObject.EvaluatedAt;
    Orientation := dso3D;
  end
  else
  begin
    EvalAt := DataSet.EvaluatedAt;
    Orientation := DataSet.Orientation;
  end;
  if FScreenObject.RestoreCellsFromCache(CellList, EvalAt,
    Orientation, AssignmentLocation, EAnnotation, IAnnotation, AModel) then
  begin
    Exit;
  end;
  try
    case EvalAt of
      eaBlocks:
        begin
          RowLimit := LocalGrid.RowCount - 1;
        end;
      eaNodes:
        begin
          RowLimit := LocalGrid.RowCount;
        end;
    else
      Assert(False);
    end;
    if (FScreenObject.SetValuesOfEnclosedCells
      or (FScreenObject.SetValuesOfIntersectedCells
      and (FScreenObject.ElevationCount <> ecZero)))
      and FScreenObject.Closed then
    begin
      // Get the coordinates of the points.
      TempMinX := FScreenObject.MinX;
      TempMinY := FScreenObject.MinY;
      TempMaxX := FScreenObject.MaxX;
      TempMaxY := FScreenObject.MaxY;
      FScreenObject.GetColumns(LocalGrid, TempMinX, TempMaxX, FirstCol, LastCol);
      if FirstCol > LocalGrid.ColumnCount then
      begin
        FirstCol := LocalGrid.ColumnCount;
      end;
      if LastCol > LocalGrid.ColumnCount then
      begin
        LastCol := LocalGrid.ColumnCount;
      end;
      FScreenObject.GetLayers(LocalGrid, TempMinY, TempMaxY, FirstLayer, LastLayer);
      if FirstLayer > LocalGrid.LayerCount then
      begin
        FirstLayer := LocalGrid.LayerCount;
      end;
      if LastLayer > LocalGrid.LayerCount then
      begin
        LastLayer := LocalGrid.LayerCount;
      end;
      // Find the cells inside the screen object and assign values to them.
      for ColIndex := FirstCol to LastCol do
      begin
        for LayerIndex := FirstLayer to LastLayer do
        begin
          case FScreenObject.EvaluatedAt of
            eaBlocks:
              begin
                CellLocation3D := LocalGrid.ThreeDElementCenter(ZeroBasedID(
                  LayerIndex, 0, ColIndex));
              end;
            eaNodes:
              begin
                CellLocation3D := LocalGrid.ThreeDElementCorner(ZeroBasedID(
                  LayerIndex, 0, ColIndex));
              end;
          else
            Assert(False);
          end;
          if FScreenObject.IsPointInside(CellLocation3D.X,
            CellLocation3D.Z, SectionIndex) then
          begin
            OtherIndex(LayerIndex, ColIndex, FirstElevationIndex,
              LastElevationIndex, DataSet, frmGoPhast.PhastModel);
            if (FirstElevationIndex >= 0)
              and (LastElevationIndex <= RowLimit) then
            begin
              for ElevationIndex := FirstElevationIndex to LastElevationIndex do
              begin
                case FScreenObject.EvaluatedAt of
                  eaBlocks:
                    begin
                      CellLocation3D := LocalGrid.ThreeDElementCenter(ZeroBasedID(
                        LayerIndex, ElevationIndex, ColIndex));
                    end;
                  eaNodes:
                    begin
                      CellLocation3D := LocalGrid.ThreeDElementCorner(ZeroBasedID(
                        LayerIndex, ElevationIndex, ColIndex));
                    end;
                else
                  Assert(False);
                end;
                case FScreenObject.ElevationCount of
                  ecZero: ; // do nothing
                  ecOne:
                    begin
                      FScreenObject.FTopElevation :=
                        FScreenObject.Higher3DElevations[AModel][
                          LayerIndex, ElevationIndex, ColIndex];
                      FScreenObject.FBottomElevation :=
                        FScreenObject.TopElevation
                    end;
                  ecTwo:
                    begin
                      FScreenObject.FTopElevation :=
                        FScreenObject.Higher3DElevations[AModel][
                          LayerIndex, ElevationIndex, ColIndex];
                      FScreenObject.FBottomElevation :=
                        FScreenObject.Lower3DElevations[AModel][
                          LayerIndex, ElevationIndex, ColIndex];
                    end;
                  else Assert(False);
                end;

                if FScreenObject.SetValuesOfIntersectedCells
                  and (FScreenObject.ElevationCount <> ecZero)
                  and ((ElevationIndex = FirstElevationIndex)
                  or (ElevationIndex = LastElevationIndex)) then
                begin
                  AssignmentMethod := amIntersect;
                  if IAnnotation = '' then
                  begin
                    IAnnotation := IntersectAnnotation(DataSetFunction,
                      OtherData);
                  end;
                  Annotation := IAnnotation;
                end
                else
                begin
                  AssignmentMethod := amEnclose;
                  if EAnnotation = '' then
                  begin
                    EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
                  end;
                  Annotation := EAnnotation;
                end;
                UpdateCurrentSection(SectionIndex);
                LocalGrid.BlockExtents(vdFront, FScreenObject.EvaluatedAt,
                  ElevationIndex, LowerBound, UpperBound);
                case FScreenObject.ElevationCount of
                  ecZero:
                    begin
                      CellList.Add(TCellAssignment.Create(LayerIndex,
                        ElevationIndex, ColIndex, nil, SectionIndex, Annotation,
                        AssignmentMethod));
                    end;
                  ecOne:
                    begin
                      if (Orientation = dsoFront) or
                        ((FScreenObject.TopElevation >= LowerBound)
                        and ((FScreenObject.BottomElevation < UpperBound)
                        or ((FScreenObject.BottomElevation = UpperBound)
                        and (ElevationIndex = RowLimit)))) then
                      begin
                        CellList.Add(TCellAssignment.Create(LayerIndex,
                          ElevationIndex, ColIndex, nil,
                          SectionIndex, Annotation, AssignmentMethod));
                      end;
                    end;
                  ecTwo:
                    begin
                      if not FScreenObject.SetValuesOfEnclosedCells then
                      begin
                        if (Orientation = dsoFront)
                          or ((UpperBound >= FScreenObject.TopElevation)
                          and (LowerBound <= FScreenObject.TopElevation))
                          or ((UpperBound >= FScreenObject.BottomElevation)
                          and (LowerBound <= FScreenObject.BottomElevation)) then
                        begin
                          CellList.Add(TCellAssignment.Create(LayerIndex,
                            ElevationIndex, ColIndex, nil, SectionIndex,
                            Annotation, AssignmentMethod));
                        end;
                      end
                      else
                      begin
                        case FScreenObject.EvaluatedAt of
                          eaBlocks:
                            begin
                              Middle := (LowerBound + UpperBound)/2;
                              if (Orientation = dsoFront) or
                                ((FScreenObject.TopElevation >= Middle)
                                and (FScreenObject.BottomElevation
                                <= Middle)) then
                              begin
                                CellList.Add(TCellAssignment.Create(LayerIndex,
                                  ElevationIndex, ColIndex, nil, SectionIndex,
                                  Annotation, AssignmentMethod));
                              end
                              else if FScreenObject.SetValuesOfIntersectedCells
                                and (((UpperBound >= FScreenObject.TopElevation)
                                and (LowerBound <= FScreenObject.TopElevation))
                                or ((UpperBound >= FScreenObject.BottomElevation)
                                and (LowerBound <= FScreenObject.BottomElevation))) then
                              begin
                                CellList.Add(TCellAssignment.Create(LayerIndex,
                                  ElevationIndex, ColIndex, nil, SectionIndex,
                                  Annotation, AssignmentMethod));
                              end;
                            end;
                          eaNodes:
                            begin
                              if (Orientation = dsoFront) or
                                ((FScreenObject.TopElevation >= CellLocation3D.Y)
                                and (FScreenObject.BottomElevation
                                <= CellLocation3D.Y)) then
                              begin
                                CellList.Add(TCellAssignment.Create(LayerIndex,
                                  ElevationIndex, ColIndex, nil,
                                  SectionIndex, Annotation, AssignmentMethod));
                              end
                              else if FScreenObject.SetValuesOfIntersectedCells
                                and ((FScreenObject.TopElevation >= LowerBound)
                                and (FScreenObject.BottomElevation
                                <= UpperBound)) then
                              begin
                                CellList.Add(TCellAssignment.Create(LayerIndex,
                                  ElevationIndex, ColIndex, nil,
                                  SectionIndex, Annotation, AssignmentMethod));
                              end;
                            end;
                          else Assert(False);
                        end;
                      end;
                    end;
                  else Assert(False);
                end;
              end;
            end;
          end;
        end;
      end;
    end;
    if FScreenObject.SetValuesOfIntersectedCells then
    begin
      if FScreenObject.SetValuesOfEnclosedCells then
      begin
        SetLength(UsedCells, LocalModel.LayerCount+1, LocalModel.RowCount+1,
          LocalModel.ColumnCount + 1);
        for CellIndex := 0 to CellList.Count - 1 do
        begin
          ACell := CellList[CellIndex];
          UsedCells[ACell.Layer, ACell.Row, ACell.Column] := True;
        end;
      end;
//      if not FScreenObject.Segments.UpToDate then
//      begin
//        UpdateFrontSegments(Grid, DataSet.EvaluatedAt);
//      end;
      // Assign values here.
      PriorCol := -1;
      PriorLayer := -1;
      FirstElevationIndex := 0;
      LastElevationIndex := -1;
      for SegmentIndex := 0 to FScreenObject.Segments[AModel].Count - 1 do
      begin
        ASegment := FScreenObject.Segments[AModel][SegmentIndex];
        if (ASegment.Col <> PriorCol) or (ASegment.Layer <> PriorLayer) then
        begin
          UpdateCurrentSegment(ASegment);
          OtherIndex(ASegment.Layer, ASegment.Col, FirstElevationIndex,
            LastElevationIndex, DataSet, frmGoPhast.PhastModel);
          PriorCol := ASegment.Col;
          PriorLayer := ASegment.Layer;
        end;
        if (FirstElevationIndex >= 0) and (LastElevationIndex <= RowLimit)
          and (ASegment.Row >= FirstElevationIndex)
          and (ASegment.Row <= LastElevationIndex) then
        begin
          UpdateCurrentSegment(ASegment);
          if IAnnotation = '' then
          begin
            IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
          end;
          Annotation := IAnnotation;
          LocalGrid.BlockExtents(vdFront, FScreenObject.EvaluatedAt,
            ASegment.Row, LowerBound, UpperBound);
          case FScreenObject.ElevationCount of
            ecZero: ; // do nothing
            ecOne:
              begin
                FScreenObject.FTopElevation :=
                  FScreenObject.Higher3DElevations[AModel][
                    ASegment.Layer, ASegment.Row, ASegment.Col];
                FScreenObject.FBottomElevation :=
                  FScreenObject.TopElevation
              end;
            ecTwo:
              begin
                FScreenObject.FTopElevation :=
                  FScreenObject.Higher3DElevations[AModel][
                    ASegment.Layer, ASegment.Row, ASegment.Col];
                FScreenObject.FBottomElevation :=
                  FScreenObject.Lower3DElevations[AModel][
                    ASegment.Layer, ASegment.Row, ASegment.Col];
              end;
            else Assert(False);
          end;
          ACell := nil;
          case FScreenObject.ElevationCount of
            ecZero:
              begin
                ACell := TCellAssignment.Create(ASegment.Layer,
                  ASegment.Row, ASegment.Col, ASegment,
                  ASegment.SectionIndex, Annotation, amIntersect);
//                CellList.Add(ACell);
              end;
            ecOne:
              begin
                if (Orientation = dsoFront) or
                  ((FScreenObject.TopElevation >= LowerBound)
                  and ((FScreenObject.BottomElevation < UpperBound)
                  or ((FScreenObject.BottomElevation = UpperBound)
                  and (ASegment.Row = RowLimit)))) then
                begin
                  ACell := TCellAssignment.Create(ASegment.Layer,
                    ASegment.Row, ASegment.Col, ASegment,
                    ASegment.SectionIndex, Annotation, amIntersect);
//                  CellList.Add(ACell);
                end;
              end;
            ecTwo:
              begin
                case FScreenObject.EvaluatedAt of
                  eaBlocks:
                    begin
                      Middle := (LowerBound + UpperBound)/ 2;
                      if (Orientation = dsoFront) or
                        ((FScreenObject.TopElevation >= Middle)
                        and (FScreenObject.BottomElevation <= Middle)) then
                      begin
                        ACell := TCellAssignment.Create(ASegment.Layer,
                          ASegment.Row, ASegment.Col, ASegment,
                          ASegment.SectionIndex, Annotation, amIntersect);
//                        CellList.Add(ACell);
                      end;
                    end;
                  eaNodes:
                    begin
                      if (Orientation = dsoFront) or
                        ((FScreenObject.TopElevation >= LowerBound)
                        and (FScreenObject.BottomElevation <= UpperBound)) then
                      begin
                        ACell := TCellAssignment.Create(ASegment.Layer,
                          ASegment.Row, ASegment.Col, ASegment,
                          ASegment.SectionIndex, Annotation, amIntersect);
//                        CellList.Add(ACell);
                      end;
                    end;
                  else Assert(False);
                end;
              end;
            else Assert(False);
          end;
          if ACell <> nil then
          begin
            if FScreenObject.SetValuesOfEnclosedCells then
            begin
              if UsedCells[ACell.Layer, ACell.Row, ACell.Column]
                and FScreenObject.SectionClosed[ASegment.SectionIndex] then
              begin
                ACell.Free;
              end
              else
              begin
                CellList.Add(ACell);
                UsedCells[ACell.Layer, ACell.Row, ACell.Column] := True;
              end;
            end
            else
            begin
              CellList.Add(ACell);
            end;
          end;
        end;
      end;
    end;
  finally
    FScreenObject.UpdateCellCache(CellList, EvalAt,
    Orientation, AssignmentLocation, AModel);
  end;
end;

procedure TPhastDelegate.GetSideCellsToAssign(
  const DataSetFunction: string; OtherData: TObject; const DataSet: TDataArray;
  CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
  AModel: TBaseModel);
var
  ASegment: TCellElementSegment;
  SegmentIndex: NativeInt;
  PriorLayer: Integer;
  PriorRow: Integer;
  Annotation: string;
  ElevationIndex: Integer;
  LastElevationIndex: Integer;
  FirstElevationIndex: Integer;
  SectionIndex: Integer;
  CellLocation3D: T3DRealPoint;
  LayerIndex: Integer;
  RowIndex: Integer;
  LastLayer: Integer;
  FirstLayer: Integer;
  LastRow: Integer;
  FirstRow: Integer;
  TempMaxY: Real;
  TempMaxX: Real;
  TempMinY: Real;
  TempMinX: Real;
  ColumnLimit: Integer;
  EAnnotation: string;
  IAnnotation: string;
  LocalGrid: TPhastGrid;
  LowerBound: Double;
  UpperBound: Double;
  Middle: Double;
  EvalAt: TEvaluatedAt;
  Orientation: TDataSetOrientation;
  AssignmentMethod: TAssignmentMethod;
  UsedCells: array of array of array of Boolean;
  LocalModel: TCustomModel;
  CellIndex: Integer;
  ACell: TCellAssignment;
begin
  Assert(CellList.Count = 0);
  LocalModel := AModel as TCustomModel;
  LocalGrid := LocalModel.PhastGrid;
  IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
  EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
  UpdateCurrentScreenObject(FScreenObject);
  ColumnLimit := -1;
  if DataSet = nil then
  begin
    EvalAt := FScreenObject.EvaluatedAt;
    Orientation := dso3D;
  end
  else
  begin
    EvalAt := DataSet.EvaluatedAt;
    Orientation := DataSet.Orientation;
  end;
  if FScreenObject.RestoreCellsFromCache(CellList, EvalAt,
    Orientation, AssignmentLocation, EAnnotation, IAnnotation, AModel) then
  begin
    Exit;
  end;
  try
    case EvalAt of
      eaBlocks:
        begin
          ColumnLimit := LocalGrid.ColumnCount - 1;
        end;
      eaNodes:
        begin
          ColumnLimit := LocalGrid.ColumnCount;
        end;
    else
      Assert(False);
    end;
    if (FScreenObject.SetValuesOfEnclosedCells
      or (FScreenObject.SetValuesOfIntersectedCells
      and (FScreenObject.ElevationCount <> ecZero)))
      and FScreenObject.Closed then
    begin
      // Get the coordinates of the points after rotating them to the grid
      // coordinate system.
      // Even though the last point and first point are identical,
      // the last point still has to be transformed for use with
      // the intersected points.
      TempMinX := FScreenObject.MinY;
      TempMinY := FScreenObject.MinX;
      TempMaxX := FScreenObject.MaxY;
      TempMaxY := FScreenObject.MaxX;
      FScreenObject.GetRows(LocalGrid, TempMinX, TempMaxX, FirstRow, LastRow);
      if FirstRow > LocalGrid.RowCount then
      begin
        FirstRow := LocalGrid.RowCount;
      end;
      if LastRow > LocalGrid.RowCount then
      begin
        LastRow := LocalGrid.RowCount;
      end;
      FScreenObject.GetLayers(LocalGrid, TempMinY, TempMaxY, FirstLayer, LastLayer);
      if FirstLayer > LocalGrid.LayerCount then
      begin
        FirstLayer := LocalGrid.LayerCount;
      end;
      if LastLayer > LocalGrid.LayerCount then
      begin
        LastLayer := LocalGrid.LayerCount;
      end;
      //
      // Find the cells inside the screen object and color them.
      for RowIndex := FirstRow to LastRow do
      begin
        for LayerIndex := FirstLayer to LastLayer do
        begin
          case FScreenObject.EvaluatedAt of
            eaBlocks:
              begin
                CellLocation3D := LocalGrid.ThreeDElementCenter(ZeroBasedID(
                  LayerIndex, RowIndex, 0));
              end;
            eaNodes:
              begin
                CellLocation3D := LocalGrid.ThreeDElementCorner(ZeroBasedID(
                  LayerIndex, RowIndex, 0));
              end;
          else
            Assert(False);
          end;
          if FScreenObject.IsPointInside(
            CellLocation3D.Z, CellLocation3D.Y, SectionIndex) then
          begin
            OtherIndex(LayerIndex, RowIndex, FirstElevationIndex,
              LastElevationIndex, DataSet, frmGoPhast.PhastModel);
            if (FirstElevationIndex >= 0)
              and (LastElevationIndex <= ColumnLimit) then
            begin
              for ElevationIndex := FirstElevationIndex to LastElevationIndex do
              begin
                case FScreenObject.EvaluatedAt of
                  eaBlocks:
                    begin
                      CellLocation3D := LocalGrid.ThreeDElementCenter(ZeroBasedID(
                        LayerIndex, RowIndex, ElevationIndex));
                    end;
                  eaNodes:
                    begin
                      CellLocation3D := LocalGrid.ThreeDElementCorner(ZeroBasedID(
                        LayerIndex, RowIndex, ElevationIndex));
                    end;
                else
                  Assert(False);
                end;
                case FScreenObject.ElevationCount of
                  ecZero: ; // do nothing
                  ecOne:
                    begin
                      FScreenObject.FTopElevation :=
                        FScreenObject.Higher3DElevations[AModel][
                          LayerIndex, RowIndex, ElevationIndex];
                      FScreenObject.FBottomElevation :=
                        FScreenObject.TopElevation
                    end;
                  ecTwo:
                    begin
                      FScreenObject.FTopElevation :=
                        FScreenObject.Higher3DElevations[AModel][
                          LayerIndex, RowIndex, ElevationIndex];
                      FScreenObject.FBottomElevation :=
                        FScreenObject.Lower3DElevations[AModel][
                          LayerIndex, RowIndex, ElevationIndex];
                    end;
                  else Assert(False);
                end;

                if FScreenObject.SetValuesOfIntersectedCells
                  and (FScreenObject.ElevationCount <> ecZero)
                  and ((ElevationIndex = FirstElevationIndex)
                  or (ElevationIndex = LastElevationIndex)) then
                begin
                  AssignmentMethod := amIntersect;
                  if IAnnotation = '' then
                  begin
                    IAnnotation := IntersectAnnotation(
                      DataSetFunction, OtherData);
                  end;
                  Annotation := IAnnotation;
                end
                else
                begin
                  AssignmentMethod := amEnclose;
                  if EAnnotation = '' then
                  begin
                    EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
                  end;
                  Annotation := EAnnotation;
                end;
                UpdateCurrentSection(SectionIndex);
                LocalGrid.BlockExtents(vdSide, FScreenObject.EvaluatedAt,
                  ElevationIndex, LowerBound, UpperBound);
                case FScreenObject.ElevationCount of
                  ecZero:
                    begin
                      CellList.Add(TCellAssignment.Create(LayerIndex, RowIndex,
                        ElevationIndex, nil, SectionIndex, Annotation,
                        AssignmentMethod));
                    end;
                  ecOne:
                    begin
                      if (Orientation = dsoSide) or
                        ((FScreenObject.TopElevation >= LowerBound)
                        and ((FScreenObject.BottomElevation < UpperBound)
                        or ((FScreenObject.BottomElevation = UpperBound)
                        and (ElevationIndex = ColumnLimit)))) then
                      begin
                        CellList.Add(TCellAssignment.Create(LayerIndex, RowIndex,
                          ElevationIndex, nil, SectionIndex, Annotation,
                          AssignmentMethod));
                      end;
                    end;
                  ecTwo:
                    begin
                      if not FScreenObject.SetValuesOfEnclosedCells then
                      begin
                        if (Orientation = dsoSide)
                          or ((UpperBound >= FScreenObject.TopElevation)
                          and (LowerBound <= FScreenObject.TopElevation))
                          or ((UpperBound >= FScreenObject.BottomElevation)
                          and (LowerBound <= FScreenObject.BottomElevation)) then
                        begin
                          CellList.Add(TCellAssignment.Create(LayerIndex,
                            RowIndex, ElevationIndex, nil,
                            SectionIndex, Annotation, AssignmentMethod));
                        end;
                      end
                      else
                      begin
                        case FScreenObject.EvaluatedAt of
                          eaBlocks:
                            begin
                              Middle := (UpperBound + LowerBound)/2;
                              if (Orientation = dsoSide) or
                                ((FScreenObject.TopElevation >= Middle)
                                and (FScreenObject.BottomElevation <= Middle))
                                then
                              begin
                                CellList.Add(TCellAssignment.Create(LayerIndex,
                                  RowIndex, ElevationIndex, nil,
                                  SectionIndex, Annotation, AssignmentMethod));
                              end
                              else if FScreenObject.SetValuesOfIntersectedCells
                                and (((UpperBound >= FScreenObject.TopElevation)
                                and (LowerBound <= FScreenObject.TopElevation))
                                or ((UpperBound >= FScreenObject.BottomElevation)
                                and (LowerBound <= FScreenObject.BottomElevation))) then
                              begin
                                CellList.Add(TCellAssignment.Create(LayerIndex,
                                  RowIndex, ElevationIndex, nil,
                                  SectionIndex, Annotation, AssignmentMethod));
                              end;
                            end;
                          eaNodes:
                            begin
                              if (Orientation = dsoSide) or
                                ((FScreenObject.TopElevation >= CellLocation3D.x)
                                and (FScreenObject.BottomElevation <= CellLocation3D.x))
                                then
                              begin
                                CellList.Add(TCellAssignment.Create(LayerIndex,
                                  RowIndex, ElevationIndex, nil,
                                  SectionIndex, Annotation, AssignmentMethod));
                              end
                              else if FScreenObject.SetValuesOfIntersectedCells
                                and ((FScreenObject.TopElevation >= LowerBound)
                                and (FScreenObject.BottomElevation <= UpperBound)) then
                              begin
                                CellList.Add(TCellAssignment.Create(LayerIndex,
                                  RowIndex, ElevationIndex, nil,
                                  SectionIndex, Annotation, AssignmentMethod));
                              end;
                            end;
                          else Assert(False);
                        end;
                      end;
                    end;
                  else Assert(False);
                end;
              end;
            end;
          end;
        end;
      end;
    end;
    if FScreenObject.SetValuesOfIntersectedCells then
    begin
      if FScreenObject.SetValuesOfEnclosedCells then
      begin
        SetLength(UsedCells, LocalModel.LayerCount+1, LocalModel.RowCount+1,
          LocalModel.ColumnCount + 1);
        for CellIndex := 0 to CellList.Count - 1 do
        begin
          ACell := CellList[CellIndex];
          UsedCells[ACell.Layer, ACell.Row, ACell.Column] := True;
        end;
      end;
//      if not FScreenObject.Segments.UpToDate then
//      begin
//        UpdateSideSegments(Grid, DataSet.EvaluatedAt);
//      end;
      // set values here
      PriorRow := -1;
      PriorLayer := -1;
      FirstElevationIndex := 0;
      LastElevationIndex := -1;
      for SegmentIndex := 0 to FScreenObject.Segments[AModel].Count - 1 do
      begin
        ASegment := FScreenObject.Segments[AModel][SegmentIndex];
        if (ASegment.Row <> PriorRow) or (ASegment.Layer <> PriorLayer) then
        begin
          UpdateCurrentSegment(ASegment);
          OtherIndex(ASegment.Layer, ASegment.Row, FirstElevationIndex,
            LastElevationIndex, DataSet, frmGoPhast.PhastModel);
          PriorRow := ASegment.Row;
          PriorLayer := ASegment.Layer;
        end;
        if (FirstElevationIndex >= 0) and (LastElevationIndex <= ColumnLimit)
          and (ASegment.Col >= FirstElevationIndex)
          and (ASegment.Col <= LastElevationIndex) then
        begin
          UpdateCurrentSegment(ASegment);
          if IAnnotation = '' then
          begin
            IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
          end;
          Annotation := IAnnotation;
          LocalGrid.BlockExtents(vdSide, FScreenObject.EvaluatedAt,
          ASegment.Col, LowerBound, UpperBound);
          case FScreenObject.ElevationCount of
            ecZero: ; // do nothing
            ecOne:
              begin
                FScreenObject.FTopElevation :=
                  FScreenObject.Higher3DElevations[AModel][
                    ASegment.Layer, ASegment.Row, ASegment.Col];
                FScreenObject.FBottomElevation :=
                  FScreenObject.TopElevation
              end;
            ecTwo:
              begin
                FScreenObject.FTopElevation :=
                  FScreenObject.Higher3DElevations[AModel][
                    ASegment.Layer, ASegment.Row, ASegment.Col];
                FScreenObject.FBottomElevation :=
                  FScreenObject.Lower3DElevations[AModel][
                    ASegment.Layer, ASegment.Row, ASegment.Col];
              end;
            else Assert(False);
          end;
          ACell := nil;
          case FScreenObject.ElevationCount of
            ecZero:
              begin
                ACell := TCellAssignment.Create(ASegment.Layer,
                  ASegment.Row, ASegment.Col, ASegment,
                  ASegment.SectionIndex, Annotation, amIntersect);
//                CellList.Add(ACell);
              end;
            ecOne:
              begin
                if (Orientation = dsoSide) or
                  ((FScreenObject.TopElevation >= LowerBound)
                  and ((FScreenObject.BottomElevation < UpperBound)
                  or ((FScreenObject.BottomElevation = UpperBound)
                  and (ASegment.Col = ColumnLimit)))) then
                begin
                  ACell := TCellAssignment.Create(ASegment.Layer,
                    ASegment.Row, ASegment.Col, ASegment,
                    ASegment.SectionIndex, Annotation, amIntersect);
//                  CellList.Add(ACell);
                end;
              end;
            ecTwo:
              begin
                case FScreenObject.EvaluatedAt of
                  eaBlocks:
                    begin
                      Middle := (UpperBound + LowerBound)/2;
                      if (Orientation = dsoSide) or
                        ((FScreenObject.TopElevation >= Middle)
                        and (FScreenObject.BottomElevation <= Middle)) then
                      begin
                        ACell := TCellAssignment.Create(ASegment.Layer,
                          ASegment.Row, ASegment.Col, ASegment,
                          ASegment.SectionIndex, Annotation, amIntersect);
//                        CellList.Add(ACell);
                      end;
                    end;
                  eaNodes:
                    begin
                      if (Orientation = dsoSide) or
                        ((FScreenObject.TopElevation >= LowerBound)
                        and (FScreenObject.BottomElevation <= UpperBound)) then
                      begin
                        ACell := TCellAssignment.Create(ASegment.Layer,
                          ASegment.Row, ASegment.Col, ASegment,
                          ASegment.SectionIndex, Annotation, amIntersect);
//                        CellList.Add(ACell);
                      end;
                    end;
                  else Assert(False);
                end;
              end;
            else Assert(False);
          end;
          if ACell <> nil then
          begin
            if FScreenObject.SetValuesOfEnclosedCells then
            begin
              if UsedCells[ACell.Layer, ACell.Row, ACell.Column]
                and FScreenObject.SectionClosed[ASegment.SectionIndex] then
              begin
                ACell.Free;
              end
              else
              begin
                CellList.Add(ACell);
                UsedCells[ACell.Layer, ACell.Row, ACell.Column] := True;
              end;
            end
            else
            begin
              CellList.Add(ACell);
            end;
          end;
        end;
      end;
    end;
  finally
    FScreenObject.UpdateCellCache(CellList, EvalAt,
      Orientation, AssignmentLocation, AModel);
  end;
end;

procedure TPhastDelegate.GetTopCellsToAssign(
  const DataSetFunction: string; OtherData: TObject; const DataSet: TDataArray;
  CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
  AModel: TBaseModel);
var
  TempMaxY: double;
  TempMaxX: double;
  TempMinY: double;
  TempMinX: double;
  LayerLimit: Integer;
  EAnnotation: string;
  IAnnotation: string;
  ASegment: TCellElementSegment;
  SegmentIndex: NativeInt;
  PriorRow: Integer;
  PriorCol: Integer;
  Annotation: string;
  ElevationIndex: Integer;
  LastElevationIndex: Integer;
  FirstElevationIndex: Integer;
  SectionIndex: Integer;
  CellLocation3D: T3DRealPoint;
  RowIndex: Integer;
  ColIndex: Integer;
  LastRow: Integer;
  FirstRow: Integer;
  LastCol: Integer;
  FirstCol: Integer;
  LocalGrid: TPhastGrid;
  LowerBound: Double;
  UpperBound: Double;
  Middle: double;
  RotatedPoints: TEdgePointArray;
  APoint: TPoint2D;
  EvalAt: TEvaluatedAt;
  Orientation: TDataSetOrientation;
  AssignmentMethod: TAssignmentMethod;
  UsedCells: array of array of array of Boolean;
  LocalModel: TCustomModel;
  CellIndex: Integer;
  ACell: TCellAssignment;
begin
  Assert(CellList <> nil);
  Assert(CellList.Count = 0);
  LocalModel := AModel as TCustomModel;
  LocalGrid := LocalModel.PhastGrid;
  IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
  EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
  UpdateCurrentScreenObject(FScreenObject);
  LayerLimit := -1;
  if DataSet = nil then
  begin
    EvalAt := FScreenObject.EvaluatedAt;
    Orientation := dso3D;
  end
  else
  begin
    EvalAt := DataSet.EvaluatedAt;
    Orientation := DataSet.Orientation;
  end;
  if FScreenObject.RestoreCellsFromCache(CellList, EvalAt,
    Orientation, AssignmentLocation, EAnnotation, IAnnotation, AModel) then
  begin
    Exit;
  end;
  try
    case EvalAt of
      eaBlocks:
        begin
          LayerLimit := LocalGrid.LayerCount - 1;
        end;
      eaNodes:
        begin
          LayerLimit := LocalGrid.LayerCount;
        end;
    else
      Assert(False);
    end;
    if (FScreenObject.SetValuesOfEnclosedCells
      or (FScreenObject.SetValuesOfIntersectedCells
      and (FScreenObject.ElevationCount <> ecZero)))
      and FScreenObject.Closed then
    begin
      FScreenObject.RotatePoints(AModel, RotatedPoints,
        TempMinX, TempMinY, TempMaxX, TempMaxY);

      // Get the coordinates of the points.
      FScreenObject.GetColumns(LocalGrid, TempMinX, TempMaxX, FirstCol, LastCol);
      if FirstCol > LocalGrid.ColumnCount then
      begin
        FirstCol := LocalGrid.ColumnCount;
      end;
      if LastCol > LocalGrid.ColumnCount then
      begin
        LastCol := LocalGrid.ColumnCount;
      end;
      FScreenObject.GetRows(LocalGrid, TempMinY, TempMaxY, FirstRow, LastRow);
      if FirstRow > LocalGrid.RowCount then
      begin
        FirstRow := LocalGrid.RowCount;
      end;
      if LastRow > LocalGrid.RowCount then
      begin
        LastRow := LocalGrid.RowCount;
      end;
      // Find the cells inside the screen object and assign values to them.
      for ColIndex := FirstCol to LastCol do
      begin
        for RowIndex := FirstRow to LastRow do
        begin
          case FScreenObject.EvaluatedAt of
            eaBlocks:
              begin
                CellLocation3D := LocalGrid.ThreeDElementCenter(ZeroBasedID(
                  0, RowIndex, ColIndex));
              end;
            eaNodes:
              begin
                CellLocation3D := LocalGrid.ThreeDElementCorner(ZeroBasedID(
                  0, RowIndex, ColIndex));
              end;
          else
            Assert(False);
          end;
          APoint.x := CellLocation3D.X;
          APoint.y := CellLocation3D.Y;
          APoint := LocalGrid.
            RotateFromGridCoordinatesToRealWorldCoordinates(APoint);
          if FScreenObject.IsPointInside(APoint.X,
            APoint.Y, SectionIndex) then
          begin
            OtherIndex(RowIndex, ColIndex, FirstElevationIndex,
              LastElevationIndex, DataSet, frmGoPhast.PhastModel);
            if (FirstElevationIndex >= 0)
              and (LastElevationIndex <= LayerLimit) then
            begin
              for ElevationIndex := FirstElevationIndex to LastElevationIndex do
              begin
                case FScreenObject.EvaluatedAt of
                  eaBlocks:
                    begin
                      CellLocation3D := LocalGrid.ThreeDElementCenter(ZeroBasedID(
                        ElevationIndex, RowIndex, ColIndex));
                    end;
                  eaNodes:
                    begin
                      CellLocation3D := LocalGrid.ThreeDElementCorner(ZeroBasedID(
                        ElevationIndex, RowIndex, ColIndex));
                    end;
                else
                  Assert(False);
                end;
                case FScreenObject.ElevationCount of
                  ecZero: ; // do nothing
                  ecOne:
                    begin
                      FScreenObject.FTopElevation :=
                        FScreenObject.Higher3DElevations[AModel][
                          ElevationIndex, RowIndex, ColIndex];
                      FScreenObject.FBottomElevation :=
                        FScreenObject.TopElevation
                    end;
                  ecTwo:
                    begin
                      FScreenObject.FTopElevation :=
                        FScreenObject.Higher3DElevations[AModel][
                          ElevationIndex, RowIndex, ColIndex];
                      FScreenObject.FBottomElevation :=
                        FScreenObject.Lower3DElevations[AModel][
                          ElevationIndex, RowIndex, ColIndex];
                    end;
                  else Assert(False);
                end;

                if not FScreenObject.SetValuesOfEnclosedCells then
                begin
                  AssignmentMethod := amIntersect;
                  if IAnnotation = '' then
                  begin
                    IAnnotation := IntersectAnnotation(
                      DataSetFunction, OtherData);
                  end;
                  Annotation := IAnnotation;
                end
                else
                begin
                  AssignmentMethod := amEnclose;
                  if EAnnotation = '' then
                  begin
                    EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
                  end;
                  Annotation := EAnnotation;
                end;
                UpdateCurrentSection(SectionIndex);
                LocalGrid.BlockExtents(vdTop, FScreenObject.EvaluatedAt,
                  ElevationIndex, LowerBound, UpperBound);
                case FScreenObject.ElevationCount of
                  ecZero:
                    begin
                      CellList.Add(TCellAssignment.Create(ElevationIndex,
                        RowIndex, ColIndex, nil, SectionIndex, Annotation,
                        AssignmentMethod));
                    end;
                  ecOne:
                    begin
                      if (Orientation = dsoTop) or
                        ((FScreenObject.TopElevation >= LowerBound)
                        and ((FScreenObject.BottomElevation < UpperBound)
                        or ((FScreenObject.BottomElevation = UpperBound)
                        and (ElevationIndex = LayerLimit)))) then
                      begin
                        CellList.Add(TCellAssignment.Create(ElevationIndex,
                          RowIndex, ColIndex, nil, SectionIndex, Annotation,
                          AssignmentMethod));
                      end;
                    end;
                  ecTwo:
                    begin
                      if not FScreenObject.SetValuesOfEnclosedCells then
                      begin
                        if (Orientation = dsoTop)
                          or ((UpperBound >= FScreenObject.TopElevation)
                          and (LowerBound <= FScreenObject.TopElevation))
                          or ((UpperBound >= FScreenObject.BottomElevation)
                          and (LowerBound <= FScreenObject.BottomElevation)) then
                        begin
                          CellList.Add(TCellAssignment.Create(ElevationIndex,
                            RowIndex, ColIndex, nil, SectionIndex, Annotation,
                            AssignmentMethod));
                        end;
                      end
                      else
                      begin
                        case FScreenObject.EvaluatedAt of
                          eaBlocks:
                            begin
                              Middle := (LowerBound + UpperBound)/2;
                              if (Orientation = dsoTop) or
                                ((FScreenObject.TopElevation >= Middle)
                                and (FScreenObject.BottomElevation <= Middle)) then
                              begin
                                CellList.Add(TCellAssignment.Create(
                                  ElevationIndex, RowIndex,
                                  ColIndex, nil, SectionIndex, Annotation,
                                  AssignmentMethod));
                              end
                              else if FScreenObject.SetValuesOfIntersectedCells
                                and ((UpperBound >= FScreenObject.TopElevation)
                                and (LowerBound <= FScreenObject.TopElevation))
                                or ((UpperBound >= FScreenObject.BottomElevation)
                                and (LowerBound <= FScreenObject.BottomElevation)) then
                              begin
                                CellList.Add(TCellAssignment.Create(
                                  ElevationIndex, RowIndex,
                                  ColIndex, nil, SectionIndex, Annotation,
                                  AssignmentMethod));
                              end;
                            end;
                          eaNodes:
                            begin
                              if (Orientation = dsoTop) or
                                ((FScreenObject.TopElevation >= CellLocation3D.Z)
                                and (FScreenObject.BottomElevation <= CellLocation3D.Z))
                                then
                              begin
                                CellList.Add(TCellAssignment.Create(
                                  ElevationIndex, RowIndex,
                                  ColIndex, nil, SectionIndex, Annotation,
                                  AssignmentMethod));
                              end
                              else if FScreenObject.SetValuesOfIntersectedCells
                                and ((FScreenObject.TopElevation >= LowerBound)
                                and (FScreenObject.BottomElevation <= UpperBound)) then
                              begin
                                CellList.Add(TCellAssignment.Create(
                                  ElevationIndex, RowIndex,
                                  ColIndex, nil, SectionIndex, Annotation,
                                  AssignmentMethod));
                              end;

                            end;
                          else Assert(False);
                        end;
                      end;
                    end;
                  else Assert(False);
                end;
              end;
            end;
          end;
        end;
      end;
    end;
    if FScreenObject.SetValuesOfIntersectedCells then
    begin
      if FScreenObject.SetValuesOfEnclosedCells then
      begin
        SetLength(UsedCells, LocalModel.LayerCount+1, LocalModel.RowCount+1,
          LocalModel.ColumnCount + 1);
        for CellIndex := 0 to CellList.Count - 1 do
        begin
          ACell := CellList[CellIndex];
          UsedCells[ACell.Layer, ACell.Row, ACell.Column] := True;
        end;
      end;
      PriorCol := -1;
      PriorRow := -1;
      FirstElevationIndex := 0;
      LastElevationIndex := -1;
      for SegmentIndex := 0 to FScreenObject.Segments[AModel].Count - 1 do
      begin
        ASegment := FScreenObject.Segments[AModel][SegmentIndex];
        if (ASegment.Col <> PriorCol) or (ASegment.Row <> PriorRow) then
        begin
          UpdateCurrentSegment(ASegment);
          OtherIndex(ASegment.Row, ASegment.Col, FirstElevationIndex,
            LastElevationIndex, DataSet, frmGoPhast.PhastModel);
          PriorCol := ASegment.Col;
          PriorRow := ASegment.Row;
        end;
        if (FirstElevationIndex >= 0) and (LastElevationIndex <= LayerLimit)
          and (ASegment.Layer >= FirstElevationIndex)
          and (ASegment.Layer <= LastElevationIndex) then
        begin
          UpdateCurrentSegment(ASegment);
          if IAnnotation = '' then
          begin
            IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
          end;
          Annotation := IAnnotation;
          LocalGrid.BlockExtents(vdTop, FScreenObject.EvaluatedAt,
            ASegment.Layer, LowerBound, UpperBound);
          case FScreenObject.ElevationCount of
            ecZero: ; // do nothing
            ecOne:
              begin
                FScreenObject.FTopElevation :=
                  FScreenObject.Higher3DElevations[AModel][
                    ASegment.Layer, ASegment.Row, ASegment.Col];
                FScreenObject.FBottomElevation :=
                  FScreenObject.TopElevation
              end;
            ecTwo:
              begin
                FScreenObject.FTopElevation :=
                  FScreenObject.Higher3DElevations[AModel][
                    ASegment.Layer, ASegment.Row, ASegment.Col];
                FScreenObject.FBottomElevation :=
                  FScreenObject.Lower3DElevations[AModel][
                    ASegment.Layer, ASegment.Row, ASegment.Col];
              end;
            else Assert(False);
          end;
          ACell := nil;
          case FScreenObject.ElevationCount of
            ecZero:
              begin
                ACell := TCellAssignment.Create(ASegment.Layer,
                  ASegment.Row, ASegment.Col, ASegment,
                  ASegment.SectionIndex, Annotation, amIntersect);
//                CellList.Add(ACell);
              end;
            ecOne:
              begin
                case FScreenObject.EvaluatedAt of
                  eaBlocks:
                    begin
                      if (Orientation = dsoTop) or
                        ((FScreenObject.TopElevation >= LowerBound)
                        and ((FScreenObject.BottomElevation < UpperBound)
                        or  ((FScreenObject.BottomElevation = UpperBound)
                        and (ASegment.Layer = LocalGrid.LayerCount-1)))) then
                      begin
                        ACell := TCellAssignment.Create(ASegment.Layer,
                          ASegment.Row, ASegment.Col, ASegment,
                          ASegment.SectionIndex, Annotation, amIntersect);
//                        CellList.Add(ACell);
                      end;
                    end;
                  eaNodes:
                    begin
                      if (Orientation = dsoTop) or
                        ((FScreenObject.TopElevation >= LowerBound)
                        and ((FScreenObject.BottomElevation < UpperBound)
                        or  ((FScreenObject.BottomElevation = UpperBound)
                        and (ASegment.Layer = LocalGrid.LayerCount)))) then
                      begin
                        ACell := TCellAssignment.Create(ASegment.Layer,
                          ASegment.Row, ASegment.Col, ASegment,
                          ASegment.SectionIndex, Annotation, amIntersect);
//                        CellList.Add(ACell);
                      end;
                    end;
                  else Assert(False);
                end;
              end;
            ecTwo:
              begin
                case FScreenObject.EvaluatedAt of
                  eaBlocks:
                    begin
                      Middle := (LowerBound + UpperBound)/2;
                      if (Orientation = dsoTop) or
                        ((FScreenObject.TopElevation >= Middle)
                        and (FScreenObject.BottomElevation <= Middle)) then
                      begin
                        ACell := TCellAssignment.Create(ASegment.Layer,
                          ASegment.Row, ASegment.Col, ASegment,
                          ASegment.SectionIndex, Annotation, amIntersect);
//                        CellList.Add(ACell);
                      end;
                    end;
                  eaNodes:
                    begin
                      if (Orientation = dsoTop) or
                        ((FScreenObject.TopElevation >= LowerBound)
                        and (FScreenObject.BottomElevation <= UpperBound)) then
                      begin
                        ACell := TCellAssignment.Create(ASegment.Layer,
                          ASegment.Row, ASegment.Col, ASegment,
                          ASegment.SectionIndex, Annotation, amIntersect)
//                        CellList.Add(ACell);
                      end;
                    end;
                  else Assert(False);
                end;
              end;
            else Assert(False);
          end;
          if ACell <> nil then
          begin
            if FScreenObject.SetValuesOfEnclosedCells then
            begin
              if UsedCells[ACell.Layer, ACell.Row, ACell.Column]
                and FScreenObject.SectionClosed[ASegment.SectionIndex] then
              begin
                ACell.Free;
              end
              else
              begin
                CellList.Add(ACell);
                UsedCells[ACell.Layer, ACell.Row, ACell.Column] := True;
              end;
            end
            else
            begin
              CellList.Add(ACell);
            end;
          end;
        end;
      end;
    end;
  finally
    FScreenObject.UpdateCellCache(CellList, EvalAt,
      Orientation, AssignmentLocation, AModel);
  end;
end;

function TPhastDelegate.DataSetUsed(const DataSet: TDataArray;
  var OtherData: TObject; AModel: TBaseModel): boolean;
var
  DataSetIndex: integer;
  CouldBeBoundary: boolean;
  LocalModel: TPhastModel;
begin
  if DataSet is TSparseArrayPhastInterpolationDataSet then
  begin
    result := True;
  end
  else if DataSet is TCustomPhastDataSet then
  begin
    OtherData := nil;
    CouldBeBoundary := False;
    DataSetIndex := FScreenObject.IndexOfDataSet(DataSet);
    if DataSetIndex < 0 then
    begin
      CouldBeBoundary := True;
      DataSetIndex := FScreenObject.IndexOfBoundaryDataSet(DataSet);
    end;
    result := DataSetIndex >= 0;
    if result and not CouldBeBoundary then
    begin
      OtherData := FScreenObject.InterpValues.Items[DataSetIndex]
        as TInterpValuesItem;
    end;
  end
  else
  begin
    result := inherited DataSetUsed(DataSet, OtherData, AModel);
    if result then
    begin
      LocalModel := FModel as TPhastModel;
      if (DataSet = LocalModel.TopBoundaryType)
        or (DataSet = LocalModel.FrontBoundaryType)
        or (DataSet = LocalModel.SideBoundaryType) then
      begin
        result := PhastBoundaryType in [btSpecifiedHead, btFlux, btLeaky]
      end
      else if (DataSet = LocalModel.Top2DBoundaryType) then
      begin
        result := PhastBoundaryType in [btRiver, btWell];
      end;
    end;
  end;
end;

destructor TPhastDelegate.Destroy;
begin
  FSelectedCells.Free;
  inherited;
end;

function TPhastDelegate.EncloseAnnotation(const DataSetFormula: string;
  const OtherData: TObject): string;
var
  InterpValue: TInterpValuesItem;
begin
  InterpValue := OtherData as TInterpValuesItem;
  if (InterpValue = nil) or not InterpValue.Values.UsePHAST_Interpolation then
  begin
    result := inherited EncloseAnnotation(DataSetFormula, OtherData);
  end
  else
  begin
    result := 'Enclosed by ' + FScreenObject.Name
      + ': Set by PHAST-style interpolation';
  end;
end;

procedure TPhastDelegate.InitializeExpression(out Compiler: TRbwParser;
  out DataSetFormula: string; out Expression: TExpression;
  const DataSet: TDataArray; const OtherData: TObject; AModel: TBaseModel);
var
  InterpValue: TInterpValuesItem;
  LocalExpression: string;
  ResultTypeOK: boolean;
  LocalModel: TPhastModel;
begin
  LocalModel := FModel as TPhastModel;
  if (DataSet = LocalModel.TopBoundaryType)
    or (DataSet = LocalModel.FrontBoundaryType)
    or (DataSet = LocalModel.SideBoundaryType) then
  begin
    Compiler := GetCompiler(DataSet.Orientation);

    DataSetFormula := ThreeDBoundaryFormula;
    Compiler.Compile(DataSetFormula);
    Expression := Compiler.CurrentExpression;
    Exit;
  end;

  if (DataSet = (FModel as TPhastModel).Top2DBoundaryType) then
  begin
    Compiler := GetCompiler(DataSet.Orientation);

    DataSetFormula := TwoDBoundaryFormula;
    Compiler.Compile(DataSetFormula);
    Expression := Compiler.CurrentExpression;
    Exit;
  end;

  InterpValue := OtherData as TInterpValuesItem;
  if (InterpValue = nil) then
  begin
    inherited;
  end
  else if InterpValue is TCustomPhastBoundaryCondition then
  begin
    if TCustomPhastBoundaryCondition(InterpValue).UsePHAST_Interpolation then
    begin
      Compiler := nil;
      Expression := nil;
      DataSetFormula := '';
    end
    else
    begin
      Compiler := GetCompiler(DataSet.Orientation);

      try
        LocalExpression := TCustomPhastBoundaryCondition(InterpValue).
          FormulaExpression;
        Compiler.Compile(LocalExpression);
      except on E: ERbwParserError do
        begin
          LocalExpression := '0';
          TCustomPhastBoundaryCondition(InterpValue).FormulaExpression :=
            LocalExpression;
          Compiler.Compile(LocalExpression);
        end;
      end;
      DataSetFormula := LocalExpression;
      Expression := Compiler.CurrentExpression;
      ResultTypeOK := (Expression.ResultType = DataSet.Datatype)
        or ((Expression.ResultType = rdtInteger) and (DataSet.Datatype =
        rdtDouble));
      if not ResultTypeOK then
      begin
        raise EInvalidDataType.Create(Format(StrTheFormula0sIn,
          [Expression.Decompile, FScreenObject.Name]), Expression.Decompile);
//        raise EInvalidDataType.Create(StrInvalidDataType, Expression.Decompile);
      end;
    end;
  end
  else if not InterpValue.Values.UsePHAST_Interpolation then
  begin
    inherited;
  end
  else
  begin
    Compiler := nil;
    Expression := nil;
    DataSetFormula := '';
  end;
end;

function TPhastDelegate.IntersectAnnotation(const DataSetFormula: string;
  const OtherData: TObject): string;
var
  InterpValue: TInterpValuesItem;
begin
  InterpValue := OtherData as TInterpValuesItem;
  if (InterpValue = nil) or not InterpValue.Values.UsePHAST_Interpolation then
  begin
    result := inherited IntersectAnnotation(DataSetFormula, OtherData);
  end
  else
  begin
    result := 'Intersected by ' + FScreenObject.Name
      + ': Set by PHAST-style interpolation';
  end;
end;

procedure TPhastDelegate.OtherIndex(const LayerOrRow, RowOrColumn: integer;
  out First, Last: integer; const DataSet: TDataArray; AModel: TBaseModel);
var
  IsRiverDataSet: boolean;
  LocalModel: TPhastModel;
begin
  LocalModel := FModel as TPhastModel;
  IsRiverDataSet := (DataSet <> nil)
    and ((FScreenObject.RiverBoundary.BoundaryValue.Count > 0)
    or (FScreenObject.RiverBoundary.Solution.Count > 0));
  if IsRiverDataSet then
  begin
    IsRiverDataSet := (DataSet = LocalModel.Top2DBoundaryType);

    if not IsRiverDataSet then
    begin
      if (DataSet is TSparseArrayPhastInterpolationDataSet) then
      begin
        IsRiverDataSet :=
          (LocalModel.RiverHead.IndexOfDataSet
          (TSparseArrayPhastInterpolationDataSet(DataSet)) >= 0)
          or
          (LocalModel.RiverAssociatedSolution.IndexOfDataSet
          (TSparseArrayPhastInterpolationDataSet(DataSet)) >= 0);
      end;
      if not IsRiverDataSet then
      begin
        IsRiverDataSet := (LocalModel.
          DataArrayManager.RiverDataSets.IndexOf(DataSet) >= 0);
      end;
      if not IsRiverDataSet then
      begin
        if DataSet is TIntegerSparseDataSet then
        begin
          IsRiverDataSet :=
            TIntegerSparseDataSet(DataSet).IsBoundaryTypeDataSet;
        end;
      end;
    end;
  end;
  { TODO :
Changing the layer as woiuld be done here prevents the river data from
being displayed on the status bar.  Find a way around this problem. }

  {if IsRiverDataSet then
  begin
    First := frmGoPhast.PhastGrid.LayerCount;
    Last := First;
  end
  else
  begin  }
    inherited;
//  end;
end;

function TPhastDelegate.PhastBoundaryType: TPhastBoundaryTypes;
begin
  result := btNone;
  if (FScreenObject.SpecifiedHeadBoundary.BoundaryValue.Count > 0)
    or (FScreenObject.SpecifiedHeadBoundary.Solution.Count > 0) then
  begin
    result := btSpecifiedHead;
  end;

  if (FScreenObject.FluxBoundary.BoundaryValue.Count > 0)
    or (FScreenObject.FluxBoundary.Solution.Count > 0) then
  begin
    Assert(result = btNone);
    result := btFlux;
  end;

  if (FScreenObject.LeakyBoundary.BoundaryValue.Count > 0)
    or (FScreenObject.LeakyBoundary.Solution.Count > 0) then
  begin
    Assert(result = btNone);
    result := btLeaky;
  end;

  if (FScreenObject.RiverBoundary.BoundaryValue.Count > 0)
    or (FScreenObject.RiverBoundary.Solution.Count > 0) then
  begin
    Assert(result = btNone);
    result := btRiver;
  end;

  if (FScreenObject.WellBoundary.BoundaryValue.Count > 0)
    or (FScreenObject.WellBoundary.Solution.Count > 0) then
  begin
    Assert(result = btNone);
    result := btWell;
  end;
end;

procedure TPhastDelegate.UpdateFrontSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
var
  RotatedPoints: TEdgePointArray;
  GridMaxX, GridMinX, GridMaxZ, GridMinZ, Temp: double;
  Index: integer;
  APoint, PreviousPoint, NewPoint: TEdgePoint;
  ColIndex, LayerIndex: integer;
  FirstRow: integer;
  LastRow: integer;
  RowIndex: integer;
  ASegment: TCellElementSegment;
  RowLimit: integer;
  FirstLayer, LastLayer, FirstCol, LastCol: integer;
//  TempI: integer;
  TempPoints1, TempPoints2: TEdgePointArray;
  PointIndex: integer;
  Col1, Col2, Layer1, Layer2: integer;
  Position: TEdgePosition;
  Point1, Point2: TEdgePoint;
  RealPoint: TPoint2D;
  ACell: T2DFrontCell;
  IncreasingX, IncreasingY: boolean;
  SectionIndex: integer;
  EndSection: Boolean;
  Grid: TCustomModelGrid;
begin
  Grid := (AModel as TCustomModel).Grid;
  FScreenObject.FSegments.Clear;
  RowLimit := -1;
  case EvaluatedAt of
    eaBlocks:
      begin
        RowLimit := Grid.RowCount - 1;
      end;
    eaNodes:
      begin
        RowLimit := Grid.RowCount;
      end;
  else
    Assert(False);
  end;
  // Get the coordinates of the points.
  SetLength(RotatedPoints, FScreenObject.Count);
  for Index := 0 to FScreenObject.Count - 1 do
  begin
    RotatedPoints[Index] := FScreenObject.EdgePoints[Index];
  end;

  // Get the box outlining the grid.
  if Grid.ColumnCount >= 0 then
  begin
    GridMaxX := Grid.ColumnPosition[Grid.ColumnCount];
    GridMinX := Grid.ColumnPosition[0];
  end
  else
  begin
    GridMaxX := 0;
    GridMinX := 0;
  end;
  if GridMinX > GridMaxX then
  begin
    Temp := GridMinX;
    GridMinX := GridMaxX;
    GridMaxX := Temp;
  end;

  if Grid.LayerCount >= 0 then
  begin
    GridMaxZ := Grid.HighestElevation;
    GridMinZ := Grid.LowestElevation;
  end
  else
  begin
    GridMaxZ := 0;
    GridMinZ := 0;
  end;
  if GridMinZ > GridMaxZ then
  begin
    Temp := GridMinZ;
    GridMinZ := GridMaxZ;
    GridMaxZ := Temp;
  end;

  SectionIndex := 0;
  // loop over vertices
  for Index := 0 to FScreenObject.Count - 1 do
  begin
    Assert(SectionIndex < FScreenObject.SectionCount);
    if (Index > FScreenObject.SectionStart[SectionIndex]) then
    begin
      PreviousPoint := APoint;
    end;
    // color the cells at the vertices.
    APoint := RotatedPoints[Index];
    if (FScreenObject.SectionLength[SectionIndex] = 1) then
    begin
      Inc(SectionIndex);
      if (APoint.X >= GridMinX) and (APoint.X <= GridMaxX)
        and (APoint.Y >= GridMinZ) and (APoint.Y <= GridMaxZ) then
      begin
        ColIndex := FScreenObject.GetACol(Grid, APoint.X);
        if (EvaluatedAt = eaBlocks) and (ColIndex = Grid.ColumnCount) then
        begin
          Dec(ColIndex);
        end;
        LayerIndex := FScreenObject.GetAPhastLayer(Grid, APoint.Y);
        if (EvaluatedAt = eaBlocks) and (LayerIndex = Grid.LayerCount) then
        begin
          Dec(LayerIndex);
        end;

        FirstRow := 0;
        LastRow := RowLimit;
        for RowIndex := FirstRow to LastRow do
        begin
          // point segment front view, PHAST
          ASegment := TCellElementSegment.Create(FScreenObject);
          FScreenObject.FSegments.Add(ASegment);
          ASegment.X1 := APoint.X;
          ASegment.X2 := APoint.X;
          ASegment.Y1 := APoint.Y;
          ASegment.Y2 := APoint.Y;
          ASegment.Col := ColIndex;
          ASegment.Row := RowIndex;
          ASegment.Layer := LayerIndex;
          ASegment.VertexIndex := Index;
          ASegment.StartPosition := epFirst;
          ASegment.EndPosition := epLast;
          ASegment.SectionIndex := SectionIndex-1;
        end;
      end;
    end
    else
    begin
      EndSection := False;
      // get a line segment and color cells along it.
      if (Index = FScreenObject.SectionStart[SectionIndex]) then
      begin
        Continue;
      end;
      if (Index = FScreenObject.SectionEnd[SectionIndex]) then
      begin
        Inc(SectionIndex);
        EndSection := True;
      end;

      // get a line segment and store the values of cells along it.
      FirstCol := FScreenObject.GetACol(Grid, PreviousPoint.X);
      LastCol := FScreenObject.GetACol(Grid, APoint.X);

      FirstLayer := FScreenObject.GetAPhastLayer(Grid, PreviousPoint.Y);
      LastLayer := FScreenObject.GetAPhastLayer(Grid, APoint.Y);

      PointIndex := 0;
      // get points on line segment that intersect the column lines.
      SetLength(TempPoints1, Abs(LastCol - FirstCol) + Abs(LastLayer -
        FirstLayer) + 4);
      PreviousPoint.Position := epFirst;
      TempPoints1[PointIndex] := PreviousPoint;
      Inc(PointIndex);
      if (PreviousPoint.X <> APoint.X) then
      begin
        IncreasingX := APoint.X > PreviousPoint.X;
        if LastCol >= FirstCol then
        begin
          Col1 := FirstCol;
          Col2 := LastCol;
        end
        else
        begin
          Col1 := LastCol;
          Col2 := FirstCol;
        end;
        if (Col1 >= 0) and (Col2 >= 0) then
        begin
          for ColIndex := Col1 to Col2 do
          begin
            if ((ColIndex = 0) or (ColIndex = Grid.ColumnCount+1)) then
            begin
              if (ColIndex = 0) then
              begin
                if IncreasingX then
                begin
                  Position := epFirst;
                end
                else
                begin
                  Position := epLast;
                end;
              end
              else
              begin
                if IncreasingX then
                begin
                  Position := epLast;
                end
                else
                begin
                  Position := epFirst;
                end;
              end;
            end
            else
            begin
              Position := epMiddle;
            end;
            FScreenObject.AddPointFromColumn(ColIndex, Grid, PreviousPoint,
              APoint, TempPoints1, PointIndex, Position);
          end;
        end;
      end
      else
      begin
        Col1 := FirstCol;
        Col2 := LastCol;
      end;

      // get points on line segment that intersect the row lines.
      if (PreviousPoint.Y <> APoint.Y) then
      begin
        IncreasingY := APoint.Y > PreviousPoint.Y;
        if LastLayer >= FirstLayer then
        begin
          Layer1 := FirstLayer;
          Layer2 := LastLayer;
        end
        else
        begin
          Layer1 := LastLayer;
          Layer2 := FirstLayer;
        end;
        if (Layer1 >= 0) and (Layer2 >= 0) then
        begin
          for LayerIndex := Layer1 to Layer2 do
          begin
            if ((LayerIndex = 0) or (LayerIndex = Grid.LayerCount+1)) then
            begin
              if LayerIndex = 0 then
              begin
                if IncreasingY then
                begin
                  Position := epFirst;
                end
                else
                begin
                  Position := epLast;
                end;
              end
              else
              begin
                if IncreasingY then
                begin
                  Position := epLast;
                end
                else
                begin
                  Position := epFirst;
                end;
              end;
            end
            else
            begin
              Position := epMiddle;
            end;
            FScreenObject.AddPointFromLayer(LayerIndex, Grid, PreviousPoint,
              APoint, TempPoints1, PointIndex, Position);
          end;
        end;
      end
      else
      begin
        Layer1 := FirstLayer;
        Layer2 := LastLayer;
      end;
      APoint.Position := epLast;
      TempPoints1[PointIndex] := APoint;
      Inc(PointIndex);

      // Sort the points.
      FScreenObject.SortPoints(TempPoints1, TempPoints2, APoint, PreviousPoint,
        PointIndex);

      case EvaluatedAt of
        eaBlocks:
          begin
            // Get cells and color them.
            for PointIndex := 1 to Length(TempPoints2) - 1 do
            begin
              Point2 := TempPoints2[PointIndex];
              Point1 := TempPoints2[PointIndex - 1];
              NewPoint.X := (Point1.X + Point2.X) / 2;
              NewPoint.Y := (Point1.Y + Point2.Y) / 2;
              if (NewPoint.X >= GridMinX) and (NewPoint.X <= GridMaxX)
                and (NewPoint.Y >= GridMinZ) and (NewPoint.Y <= GridMaxZ) then
              begin
                RealPoint.X := NewPoint.X;
                RealPoint.Y := NewPoint.Y;
                ACell := (Grid as TPhastGrid).FrontContainingCell(RealPoint,
                  EvaluatedAt, Col1, Col2, Layer1, Layer2);

                FirstRow := 0;
                LastRow := RowLimit;
                for RowIndex := FirstRow to LastRow
                  do
                begin
                  // line segment element, front view, PHAST
                  ASegment := TCellElementSegment.Create(FScreenObject);
                  FScreenObject.FSegments.Add(ASegment);
                  ASegment.X1 := Point1.X;
                  ASegment.X2 := Point2.X;
                  ASegment.Y1 := Point1.Y;
                  ASegment.Y2 := Point2.Y;
                  ASegment.Col := ACell.Col;
                  ASegment.Row := RowIndex;
                  ASegment.Layer := ACell.Lay;
                  ASegment.VertexIndex := Index - 1;
                  ASegment.StartPosition := Point1.Position;
                  ASegment.EndPosition := Point2.Position;
                  if PointIndex = 0 then
                  begin
                    ASegment.StartPosition := epFirst;
                  end
                  else if PointIndex = Length(TempPoints2) - 1 then
                  begin
                    ASegment.StartPosition := epLast;
                  end;
                  if EndSection then
                  begin
                    ASegment.SectionIndex := SectionIndex-1;
                  end
                  else
                  begin
                    ASegment.SectionIndex := SectionIndex;
                  end;
                end;
              end;
            end;
          end;
        eaNodes:
          begin
            // Get cells and color them.
            for PointIndex := 1 to Length(TempPoints2) - 1 do
            begin
              Point2 := TempPoints2[PointIndex];
              Point1 := TempPoints2[PointIndex - 1];
              NewPoint.X := (Point1.X + Point2.X) / 2;
              NewPoint.Y := (Point1.Y + Point2.Y) / 2;
              if (NewPoint.X >= GridMinX) and (NewPoint.X <= GridMaxX)
                and (NewPoint.Y >= GridMinZ) and (NewPoint.Y <= GridMaxZ) then
              begin
                RealPoint.X := NewPoint.X;
                RealPoint.Y := NewPoint.Y;
                ACell := (Grid as TPhastGrid).FrontContainingCell(RealPoint,
                  EvaluatedAt, Col1, Col2, Layer1, Layer2);

                FirstRow := 0;
                LastRow := RowLimit;
                for RowIndex := FirstRow to LastRow
                  do
                begin
                  // line segment node, front view, PHAST
                  ASegment := TCellElementSegment.Create(FScreenObject);
                  FScreenObject.FSegments.Add(ASegment);
                  ASegment.X1 := Point1.X;
                  ASegment.X2 := Point2.X;
                  ASegment.Y1 := Point1.Y;
                  ASegment.Y2 := Point2.Y;
                  ASegment.Col := ACell.Col;
                  ASegment.Row := RowIndex;
                  ASegment.Layer := ACell.Lay;
                  ASegment.VertexIndex := Index - 1;
                  ASegment.StartPosition := Point1.Position;
                  ASegment.EndPosition := Point2.Position;
                  if PointIndex = 0 then
                  begin
                    ASegment.StartPosition := epFirst;
                  end
                  else if PointIndex = Length(TempPoints2) - 1 then
                  begin
                    ASegment.StartPosition := epLast;
                  end;
                  if EndSection then
                  begin
                    ASegment.SectionIndex := SectionIndex-1;
                  end
                  else
                  begin
                    ASegment.SectionIndex := SectionIndex;
                  end;
                end;
              end;
            end;
          end;
      else
        Assert(False);
      end;

    end;
  end;
  FScreenObject.FSegments.UpToDate := True;
end;

procedure TPhastDelegate.UpdateSideSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
var
  RotatedPoints: TEdgePointArray;
  APoint, PreviousPoint, AnotherPoint, NewPoint: TEdgePoint;
  GridMaxY, GridMinY, GridMaxZ, GridMinZ, Temp: double;
  Index: integer;
  RowIndex, LayerIndex: integer;
  FirstElevationIndex: integer;
  LastElevationIndex: integer;
  ElevationIndex: integer;
  ColumnLimit: integer;
  ASegment: TCellElementSegment;
  FirstLayer, LastLayer, FirstRow, LastRow: integer;
//  TempI: integer;
  PointIndex: integer;
  TempPoints1, TempPoints2: TEdgePointArray;
  Row1, Row2, Layer1, Layer2: integer;
  Position: TEdgePosition;
  Point1, Point2: TEdgePoint;
  RealPoint: TPoint2D;
  ACell: T2DSideCell;
  IncreasingX, IncreasingY: boolean;
  SectionIndex: integer;
  EndSection: boolean;
  Grid: TCustomModelGrid;
begin
  Grid := (AModel as TCustomModel).Grid;
  FScreenObject.FSegments.Clear;
  ColumnLimit := -1;
  case EvaluatedAt of
    eaBlocks:
      begin
        ColumnLimit := Grid.ColumnCount - 1;
      end;
    eaNodes:
      begin
        ColumnLimit := Grid.ColumnCount;
      end;
  else
    Assert(False);
  end;

  // Get the coordinates of the points after rotating them to the grid
  // coordinate system.
  SetLength(RotatedPoints, FScreenObject.Count);
  for Index := 0 to FScreenObject.Count - 1 do
  begin
    APoint := FScreenObject.EdgePoints[Index];
    AnotherPoint.X := APoint.Y;
    AnotherPoint.Y := APoint.X;
    RotatedPoints[Index] := AnotherPoint;
  end;

  // Get the box outlining the grid.
  if Grid.RowCount >= 0 then
  begin
    GridMaxY := Grid.RowPosition[Grid.RowCount];
    GridMinY := Grid.RowPosition[0];
  end
  else
  begin
    GridMaxY := 0;
    GridMinY := 0;
  end;
  if GridMinY > GridMaxY then
  begin
    Temp := GridMinY;
    GridMinY := GridMaxY;
    GridMaxY := Temp;
  end;

  if Grid.LayerCount >= 0 then
  begin
    GridMaxZ := Grid.HighestElevation;
    GridMinZ := Grid.LowestElevation;
  end
  else
  begin
    GridMaxZ := 0;
    GridMinZ := 0;
  end;
  if GridMinZ > GridMaxZ then
  begin
    Temp := GridMinZ;
    GridMinZ := GridMaxZ;
    GridMaxZ := Temp;
  end;

  SectionIndex := 0;
  // loop over vertices
  for Index := 0 to FScreenObject.Count - 1 do
  begin
    Assert(SectionIndex < FScreenObject.SectionCount);
    if (Index > FScreenObject.SectionStart[SectionIndex]) then
    begin
      PreviousPoint := APoint;
    end;
    // color the cells at the vertices.
    APoint := RotatedPoints[Index];
    if (SectionIndex < FScreenObject.SectionCount)
      and (FScreenObject.SectionLength[SectionIndex] = 1) then
    begin
      Inc(SectionIndex);
      if (APoint.X >= GridMinY) and (APoint.X <= GridMaxY)
        and (APoint.Y >= GridMinZ) and (APoint.Y <= GridMaxZ) then
      begin
        RowIndex := FScreenObject.GetARow(Grid, APoint.X);
        if (EvaluatedAt = eaBlocks) and (RowIndex = Grid.RowCount) then
        begin
          Dec(RowIndex);
        end;
        LayerIndex := FScreenObject.GetAPhastLayer(Grid, APoint.Y);
        if (EvaluatedAt = eaBlocks) and (LayerIndex = Grid.LayerCount) then
        begin
          Dec(LayerIndex);
        end;

        FirstElevationIndex := 0;
        LastElevationIndex := ColumnLimit;
        for ElevationIndex := FirstElevationIndex to LastElevationIndex do
        begin
          // point segment, side view, PHAST
          ASegment := TCellElementSegment.Create(FScreenObject);
          FScreenObject.FSegments.Add(ASegment);
          ASegment.X1 := APoint.X;
          ASegment.X2 := APoint.X;
          ASegment.Y1 := APoint.Y;
          ASegment.Y2 := APoint.Y;
          ASegment.Col := ElevationIndex;
          ASegment.Row := RowIndex;
          ASegment.Layer := LayerIndex;
          ASegment.VertexIndex := Index;
          ASegment.StartPosition := epFirst;
          ASegment.EndPosition := epLast;
          ASegment.SectionIndex := SectionIndex -1;
        end;
      end;
    end
    else
    begin
      EndSection := False;
      if (Index = FScreenObject.SectionStart[SectionIndex]) then
      begin
        Continue;
      end;
      if (Index = FScreenObject.SectionEnd[SectionIndex]) then
      begin
        Inc(SectionIndex);
        EndSection := True;
      end;
      // get a line segment and color cells along it.
      FirstRow := FScreenObject.GetARow(Grid, PreviousPoint.X);
      LastRow := FScreenObject.GetARow(Grid, APoint.X);

      FirstLayer := FScreenObject.GetAPhastLayer(Grid, PreviousPoint.Y);
      LastLayer := FScreenObject.GetAPhastLayer(Grid, APoint.Y);

      PointIndex := 0;
      // get points on line segment that intersect the column lines.
      SetLength(TempPoints1, Abs(LastRow - FirstRow) + Abs(LastLayer -
        FirstLayer) + 4);
      PreviousPoint.Position := epFirst;
      TempPoints1[PointIndex] := PreviousPoint;
      Inc(PointIndex);
      if (PreviousPoint.X <> APoint.X) then
      begin
        IncreasingX := APoint.X > PreviousPoint.X;
        if LastRow >= FirstRow then
        begin
          Row1 := FirstRow;
          Row2 := LastRow;
        end
        else
        begin
          Row1 := LastRow;
          Row2 := FirstRow;
        end;
        if (Row1 >= 0) and (Row2 >= 0) then
        begin
          for RowIndex := Row1 to Row2 do
          begin
            if ((RowIndex = 0) or (RowIndex = Grid.RowCount+1)) then
            begin
              if RowIndex = 0 then
              begin
                if IncreasingX then
                begin
                  Position := epFirst;
                end
                else
                begin
                  Position := epLast;
                end;
              end
              else
              begin
                if IncreasingX then
                begin
                  Position := epLast;
                end
                else
                begin
                  Position := epFirst;
                end;
              end;
            end
            else
            begin
              Position := epMiddle;
            end;
            FScreenObject.AddPointFromRow(RowIndex, Grid, PreviousPoint,
              APoint, TempPoints1, PointIndex, Position);
          end;
        end;
      end
      else
      begin
        Row1 := FirstRow;
        Row2 := LastRow;
      end;

      // get points on line segment that intersect the row lines.
      if (PreviousPoint.Y <> APoint.Y) then
      begin
        IncreasingY := APoint.Y > PreviousPoint.Y;
        if LastLayer >= FirstLayer then
        begin
          Layer1 := FirstLayer;
          Layer2 := LastLayer;
        end
        else
        begin
          Layer1 := LastLayer;
          Layer2 := FirstLayer;
        end;
        if (Layer1 >= 0) and (Layer2 >= 0) then
        begin
          for LayerIndex := Layer1 to Layer2 do
          begin
            if ((LayerIndex = 0) or (LayerIndex = Grid.LayerCount+1)) then
            begin
              if LayerIndex = 0 then
              begin
                if IncreasingY then
                begin
                  Position := epFirst;
                end
                else
                begin
                  Position := epLast;
                end;
              end
              else
              begin
                if IncreasingY then
                begin
                  Position := epLast;
                end
                else
                begin
                  Position := epFirst;
                end;
              end;
            end
            else
            begin
              Position := epMiddle;
            end;
            FScreenObject.AddPointFromLayer(LayerIndex, Grid, PreviousPoint,
              APoint, TempPoints1, PointIndex, Position);
          end;
        end;
      end
      else
      begin
        Layer1 := LastLayer;
        Layer2 := FirstLayer;
      end;
      APoint.Position := epLast;
      TempPoints1[PointIndex] := APoint;
      Inc(PointIndex);

      // Sort the points.
      FScreenObject.SortPoints(TempPoints1, TempPoints2, APoint, PreviousPoint,
        PointIndex);

      case EvaluatedAt of
        eaBlocks:
          begin
            // Get cells and color them.
            for PointIndex := 1 to Length(TempPoints2) - 1 do
            begin
              Point2 := TempPoints2[PointIndex];
              Point1 := TempPoints2[PointIndex - 1];
              NewPoint.X := (Point1.X + Point2.X) / 2;
              NewPoint.Y := (Point1.Y + Point2.Y) / 2;
              if (NewPoint.X >= GridMinY) and (NewPoint.X <= GridMaxY)
                and (NewPoint.Y >= GridMinZ) and (NewPoint.Y <= GridMaxZ) then
              begin
                RealPoint.X := NewPoint.X;
                RealPoint.Y := NewPoint.Y;

                ACell := (Grid as TPhastGrid).SideContainingCell(RealPoint,
                  EvaluatedAt, Row1, Row2, Layer1, Layer2);

                FirstElevationIndex := 0;
                LastElevationIndex := ColumnLimit;
                for ElevationIndex := FirstElevationIndex to
                  LastElevationIndex do
                begin
                  // line segment, elements, side view, PHAST
                  ASegment := TCellElementSegment.Create(FScreenObject);
                  FScreenObject.FSegments.Add(ASegment);
                  ASegment.X1 := Point1.X;
                  ASegment.X2 := Point2.X;
                  ASegment.Y1 := Point1.Y;
                  ASegment.Y2 := Point2.Y;
                  ASegment.Col := ElevationIndex;
                  ASegment.Row := ACell.Row;
                  ASegment.Layer := ACell.Lay;
                  ASegment.VertexIndex := Index - 1;
                  ASegment.StartPosition := Point1.Position;
                  ASegment.EndPosition := Point2.Position;
                  if PointIndex = 0 then
                  begin
                    ASegment.StartPosition := epFirst;
                  end
                  else if PointIndex = Length(TempPoints2) - 1 then
                  begin
                    ASegment.StartPosition := epLast;
                  end;
                  if EndSection then
                  begin
                    ASegment.SectionIndex := SectionIndex-1;
                  end
                  else
                  begin
                    ASegment.SectionIndex := SectionIndex;
                  end;
                end;
              end;
            end;
          end;
        eaNodes:
          begin
            // Get cells and color them.
            for PointIndex := 1 to Length(TempPoints2) - 1 do
            begin
              Point2 := TempPoints2[PointIndex];
              Point1 := TempPoints2[PointIndex - 1];
              NewPoint.X := (Point1.X + Point2.X) / 2;
              NewPoint.Y := (Point1.Y + Point2.Y) / 2;

              if (NewPoint.X >= GridMinY) and (NewPoint.X <= GridMaxY)
                and (NewPoint.Y >= GridMinZ) and (NewPoint.Y <= GridMaxZ) then
              begin
                RealPoint.X := NewPoint.X;
                RealPoint.Y := NewPoint.Y;
                ACell := (Grid as TPhastGrid).SideContainingCell(RealPoint,
                  EvaluatedAt, Row1, Row2, Layer1, Layer2);

                FirstElevationIndex := 0;
                LastElevationIndex := ColumnLimit;
                for ElevationIndex := FirstElevationIndex to
                  LastElevationIndex do
                begin
                  // line segment, nodes, side view, PHAST
                  ASegment := TCellElementSegment.Create(FScreenObject);
                  FScreenObject.FSegments.Add(ASegment);
                  ASegment.X2 := Point2.X;
                  ASegment.X1 := Point1.X;
                  ASegment.Y2 := Point2.Y;
                  ASegment.Y1 := Point1.Y;
                  ASegment.Col := ElevationIndex;
                  ASegment.Row := ACell.Row;
                  ASegment.Layer := ACell.Lay;
                  ASegment.VertexIndex := Index - 1;
                  ASegment.StartPosition := Point1.Position;
                  ASegment.EndPosition := Point2.Position;
                  if PointIndex = 0 then
                  begin
                    ASegment.StartPosition := epFirst;
                  end
                  else if PointIndex = Length(TempPoints2) - 1 then
                  begin
                    ASegment.StartPosition := epLast;
                  end;
                  if EndSection then
                  begin
                    ASegment.SectionIndex := SectionIndex-1;
                  end
                  else
                  begin
                    ASegment.SectionIndex := SectionIndex;
                  end;
                end;
              end;
            end;
          end;
      else
        Assert(False);
      end;
    end;
  end;
  FScreenObject.FSegments.UpToDate := True;
end;

{ TModflowDelegate }

function TModflowDelegate.ElevationOk(const Grid: TCustomModelGrid;
  const PerpendicularIndex: integer; const ColIndex: integer;
  const RowIndex: integer): boolean;
var
  MFGrid: TModflowGrid;
  CellBottom: Double;
  CellTop: Double;
  CellCenter: double;
begin
  result := False;
  case FScreenObject.ViewDirection of
    vdTop:
      begin
        case FScreenObject.ElevationCount of
          ecZero:
            begin
              result := PerpendicularIndex = 0;
            end;
          ecOne:
            begin
              MFGrid := Grid as TModflowGrid;
              if not FScreenObject.UsedModels.UsesModel(MFGrid.Model) then
              begin
                Exit
              end;
              result :=
                (FScreenObject.BottomElevation <=
                  MFGrid.LayerElevations[ColIndex, RowIndex,PerpendicularIndex])
                and (FScreenObject.TopElevation >=
                  MFGrid.LayerElevations[ColIndex, RowIndex,PerpendicularIndex+1]);
            end;
          ecTwo:
            begin
              MFGrid := Grid as TModflowGrid;
              if not FScreenObject.UsedModels.UsesModel(MFGrid.Model) then
              begin
                Exit
              end;
              CellTop := MFGrid.LayerElevations[
                  ColIndex, RowIndex,PerpendicularIndex];
              CellBottom := MFGrid.LayerElevations[
                  ColIndex, RowIndex,PerpendicularIndex+1];
              result :=
                (FScreenObject.BottomElevation < CellTop)
                and (FScreenObject.TopElevation > CellBottom);
              if result and FScreenObject.SetValuesOfEnclosedCells
                and not FScreenObject.SetValuesOfIntersectedCells then
              begin
                CellCenter := (CellBottom+CellTop)/2;
                result := (FScreenObject.TopElevation >= CellCenter)
                  and (CellCenter >= FScreenObject.BottomElevation);
              end;
            end;
          else Assert(False);
        end;
      end;
    vdFront:
      begin
        case FScreenObject.ElevationCount of
          ecZero:
            begin
              result := PerpendicularIndex = 0;
            end;
          ecOne:
            begin
              if not FScreenObject.UsedModels.UsesModel(Grid.Model) then
              begin
                Exit
              end;
              result := (FScreenObject.TopElevation >=
                Grid.RowPosition[PerpendicularIndex+1])
                and (FScreenObject.BottomElevation <=
                  Grid.RowPosition[PerpendicularIndex]);
            end;
          ecTwo:
            begin
              if not FScreenObject.UsedModels.UsesModel(Grid.Model) then
              begin
                Exit
              end;
              result := (FScreenObject.TopElevation >
                Grid.RowPosition[PerpendicularIndex+1])
                and (FScreenObject.BottomElevation <
                  Grid.RowPosition[PerpendicularIndex]);
              if result and FScreenObject.SetValuesOfEnclosedCells
                and not FScreenObject.SetValuesOfIntersectedCells then
              begin
                CellCenter := (Grid.RowPosition[PerpendicularIndex]+Grid.RowPosition[PerpendicularIndex+1])/2;
                result := (FScreenObject.TopElevation >= CellCenter)
                  and (CellCenter >= FScreenObject.BottomElevation);
              end;
            end;
          else Assert(False);
        end;
      end;
    vdSide:
      begin
        case FScreenObject.ElevationCount of
          ecZero:
            begin
              result := PerpendicularIndex = 0;
            end;
          ecOne:
            begin
              if not FScreenObject.UsedModels.UsesModel(Grid.Model) then
              begin
                Exit
              end;
              result := (FScreenObject.TopElevation >=
                Grid.ColumnPosition[PerpendicularIndex])
                and (FScreenObject.BottomElevation <=
                Grid.ColumnPosition[PerpendicularIndex+1]);
            end;
          ecTwo:
            begin
              if not FScreenObject.UsedModels.UsesModel(Grid.Model) then
              begin
                Exit
              end;
              result := (FScreenObject.TopElevation >
                Grid.ColumnPosition[PerpendicularIndex])
                and (FScreenObject.BottomElevation <
                Grid.ColumnPosition[PerpendicularIndex+1]);
              if result and FScreenObject.SetValuesOfEnclosedCells
                and not FScreenObject.SetValuesOfIntersectedCells then
              begin
                CellCenter := (Grid.ColumnPosition[PerpendicularIndex]+Grid.ColumnPosition[PerpendicularIndex+1])/2;
                result := (FScreenObject.TopElevation >= CellCenter)
                  and (CellCenter >= FScreenObject.BottomElevation);
              end;
            end;
          else Assert(False);
        end;
      end;
    else Assert(False);
  end;
//  result := not result;
end;

procedure TModflowDelegate.AssignValuesToFrontDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll);
begin
  AssignValuesToDataSet(DataSet, OtherData, AModel, UseLgrEdgeCells,
    AssignmentLocation);
end;

procedure TModflowDelegate.AssignValuesToSideDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll);
begin
  AssignValuesToDataSet(DataSet, OtherData, AModel, UseLgrEdgeCells,
    AssignmentLocation);
end;

procedure TModflowDelegate.AssignValuesToTopDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll);
begin
  AssignValuesToDataSet(DataSet, OtherData, AModel,
    UseLgrEdgeCells, AssignmentLocation);
end;

function TCustomBlockGridDelegate.IsPointInside(
  const CellLocation3D: T3DRealPoint;
  Grid: TCustomModelGrid; out SectionIndex: integer): boolean;
var
  APoint: TPoint2D;
begin
  result := False;
  case FScreenObject.ViewDirection of
    vdTop:
      begin
        APoint.x := CellLocation3D.X;
        APoint.Y := CellLocation3D.Y;
        APoint := Grid.
          RotateFromGridCoordinatesToRealWorldCoordinates(APoint);
        result := FScreenObject.IsPointInside(
          APoint.X, APoint.Y, SectionIndex);
      end;
    vdFront: result := FScreenObject.IsPointInside(
      CellLocation3D.X, CellLocation3D.Z, SectionIndex);
    vdSide: result := FScreenObject.IsPointInside(
      CellLocation3D.Z, CellLocation3D.Y, SectionIndex);
    else Assert(False);
  end;
end;

function TCustomBlockGridDelegate.GetPerpendiularLimit(
  const Grid: TCustomModelGrid): integer;
begin
  result := -1;
  case FScreenObject.ViewDirection of
    vdTop: result := Grid.LayerCount -1;
    vdFront: result := Grid.RowCount - 1;
    vdSide: result := Grid.ColumnCount - 1;
    else Assert(False);
  end;
end;

function TCustomBlockGridDelegate.AssignElevations(Const ColIndex, RowIndex,
  LayerIndex: integer; AModel: TBaseModel;
  AssignmentLocation: TAssignmentLocation): boolean;
var
  Segments: TCellElementSegmentList;
begin
  if FScreenObject.FAssignmentLocation <> AssignmentLocation then
  begin
    Segments := FScreenObject.FSegModelAssoc.AssociatedSegmentList[AModel];
    Segments.FLower3DElevationsNeedsUpdating := True;
    Segments.FHigher3DElevationsNeedsUpdating := True;
    FScreenObject.FAssignmentLocation := AssignmentLocation;
  end;

  result := True;
  case FScreenObject.ElevationCount of
    ecZero:
      begin
        FScreenObject.FTopElevation := 0;
        FScreenObject.FBottomElevation := 0;
      end;
    ecOne:
      begin
        if not FScreenObject.IsHigher3DElevationAssigned(
          ColIndex, RowIndex, LayerIndex, AModel) then
        begin
          result := False;
        end;
        if result then
        begin
          FScreenObject.FTopElevation := FScreenObject.
            Higher3DElevations[AModel][LayerIndex, RowIndex, ColIndex];
          FScreenObject.FBottomElevation := FScreenObject.FTopElevation;
        end;
      end;
    ecTwo:
      begin
        if not FScreenObject.IsHigher3DElevationAssigned(
          ColIndex, RowIndex, LayerIndex, AModel) then
        begin
          result := False;
        end;
        if result then
        begin
          FScreenObject.FTopElevation := FScreenObject.
            Higher3DElevations[AModel][LayerIndex, RowIndex, ColIndex];
          FScreenObject.FBottomElevation := FScreenObject.
            Lower3DElevations[AModel][LayerIndex, RowIndex, ColIndex];
        end;
      end;
    else Assert(False);
  end;
end;

procedure TCustomBlockGridDelegate.AssignSelectedCells(
  AModel: TBaseModel);
var
  CellList: TCellAssignmentList;
  Index: Integer;
  Cell: TCellAssignment;
  Grid: TCustomModelGrid;
begin
  Grid := (AModel as TCustomModel).Grid;
  if FScreenObject.EvaluatedAt = eaNodes then
  begin
    FSelectedCells.SetExtents(0,0,0);
    Exit;
  end;
  CellList := TCellAssignmentList.Create;
  try
    GetCellsToAssign('', nil, eaBlocks, CellList, alAll, dso3D, AModel);
    case FScreenObject.EvaluatedAt of
      eaBlocks:
        begin
          FSelectedCells.SetExtents(Grid.LayerCount,
            Grid.RowCount, Grid.ColumnCount);
        end;
      eaNodes:
        begin
          FSelectedCells.SetExtents(Grid.LayerCount+1,
            Grid.RowCount+1, Grid.ColumnCount+1);
        end;
      else Assert(False);
    end;
    for Index := 0 to CellList.Count - 1 do
    begin
      Cell := CellList[Index];
      FSelectedCells[Cell.Layer, Cell.Row, Cell.Column] := True;
    end;

  finally
    CellList.Free;
  end;
end;

procedure TCustomBlockGridDelegate.AssignValuesToDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll);
var
  DataSetFunction: string;
  Compiler: TRbwParser;
  Expression: TExpression;
  UsedVariables: TStringList;
  CellList: TCellAssignmentList;
  CellAssignment: TCellAssignment;
  AssignmentIndex: Integer;
  DataObject: TModflowDataObject;
  NewFormula: string;
//  UsedFunction: string;
//  UsedExpression: TExpression;
begin
  CellList := TCellAssignmentList.Create;
  try
    Assert(DataSet <> nil);
    Assert((AssignmentLocation = alAll) or
      FScreenObject.SetValuesOfIntersectedCells);
    if not (DataSet.Orientation in [dsoTop, dso3D]) then
    begin
      // don't remove data set, it may be needed for a PHAST model.
//      FScreenObject.RemoveDataSet(DataSet);
      Exit;
    end;

    if DataSet.EvaluatedAt = eaNodes then
    begin
      Exit;
    end;

  // DataSetUsed doesn't test for transient data sets.
    UsedVariables := TStringList.Create;
    try
      try
        InitializeExpression(Compiler, DataSetFunction,
          Expression, DataSet,
          OtherData, AModel);
      except on EInvalidDataType do
        begin
          if OtherData = nil then
          begin
            raise;
          end
          else
          begin
            DataObject := OtherData as TModflowDataObject;
            NewFormula := '';
            case DataSet.DataType of
              rdtDouble:
                begin
                  NewFormula := '0.';
                end;
              rdtInteger:
                begin
                  NewFormula := '0';
                end;
              rdtBoolean:
                begin
                  NewFormula := 'False';
                end;
              rdtString:
                begin
                  NewFormula := '""';
                end;
              else Assert(False);
            end;
            frmFormulaErrors.AddFormulaError(FScreenObject.Name,
              DataObject.AlternateName, DataObject.DataSetFunction,
              Format(Str0sTreatedAs1s, [DataObject.DataSetFunction, NewFormula]));
            DataObject.DataSetFunction := NewFormula;
            InitializeExpression(Compiler, DataSetFunction,
              Expression, DataSet,
              OtherData, AModel);
          end;
        end;
      end;

      InitializeVariables(UsedVariables, DataSet, Expression, Compiler);
      GetCellsToAssign(DataSetFunction, OtherData,
        DataSet.EvaluatedAt, CellList, AssignmentLocation, DataSet.Orientation,
        AModel);
      FScreenObject.UpdateImportedValues(DataSet);
      for AssignmentIndex := 0 to CellList.Count - 1 do
      begin
        CellAssignment := CellList[AssignmentIndex];
        if (UseLgrEdgeCells = lctIgnore) and CellAssignment.LgrEdge then
        begin
          Continue;
        end;
        UpdateCurrentSegment(CellAssignment.Segment);
        UpdateCurrentSection(CellAssignment.Section);
        AssignCellValue(UsedVariables, DataSet, CellAssignment.Layer,
          CellAssignment.Row, CellAssignment.Column, Compiler,
          CellAssignment.Annotation, Expression, OtherData,
          CellAssignment.Section,
          ((UseLgrEdgeCells = lctZero) and CellAssignment.LgrEdge));
      end;
    finally
      (FModel as TPhastModel).DataArrayManager.CacheDataArrays;
      UsedVariables.Free;
    end;
  finally
    CellList.Free;
  end;
end;

constructor TModflowDelegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msModflow;
  FSelectedCells := TSelectedCells.Create;
end;

procedure TModflowDelegate.UpdateHorizontalRangeOfCellsToCheck(
  var FirstHorizontalIndex, LastHorizontalIndex: Integer;
  const HorizontalIndex, HorizontalLimit: Integer;
  const APoint, PreviousPoint: TEdgePoint);
begin
  // It doesn't intersect the other half of the same cell
  // so test the rest of the upper or lower surface.
  case FScreenObject.ViewDirection of
    vdTop:
      Assert(False);
    vdFront:
      begin
        if APoint.X < PreviousPoint.X then
        begin
          FirstHorizontalIndex := HorizontalIndex - 1;
          LastHorizontalIndex := 0;
        end
        else
        begin
          FirstHorizontalIndex := HorizontalIndex + 1;
          LastHorizontalIndex := HorizontalLimit - 1;
        end;
      end;
    vdSide:
      begin
        if APoint.X < PreviousPoint.X then
        begin
          FirstHorizontalIndex := HorizontalIndex + 1;
          LastHorizontalIndex := HorizontalLimit - 1;
        end
        else
        begin
          FirstHorizontalIndex := HorizontalIndex - 1;
          LastHorizontalIndex := 0;
        end;
      end;
  end;
end;

procedure TCustomBlockGridDelegate.AssignParallellLimits(AModel: TBaseModel;
  out FirstParallelIndexA, LastParallelIndexA,
  FirstParallelIndexB, LastParallelIndexB: Integer);
var
  TempMaxX: double;
  TempMinX: double;
  TempMinY: double;
  TempMaxY: double;
  RotatedPoints: TEdgePointArray;
  Grid: TCustomModelGrid;
begin
  Grid := (AModel as TCustomModel).Grid;
  case FScreenObject.ViewDirection of
    vdTop:
      begin
        FScreenObject.RotatePoints(AModel, RotatedPoints,
          TempMinX, TempMinY, TempMaxX, TempMaxY);
        FScreenObject.GetColumns(Grid, TempMinX, TempMaxX,
          FirstParallelIndexA, LastParallelIndexA);
        if FirstParallelIndexA > Grid.ColumnCount then
        begin
          FirstParallelIndexA := Grid.ColumnCount;
        end;
        if LastParallelIndexA > Grid.ColumnCount then
        begin
          LastParallelIndexA := Grid.ColumnCount;
        end;

        FScreenObject.GetRows(Grid, TempMinY, TempMaxY,
          FirstParallelIndexB, LastParallelIndexB);
        if FirstParallelIndexB > Grid.RowCount then
        begin
          FirstParallelIndexB := Grid.RowCount;
        end;
        if LastParallelIndexB > Grid.RowCount then
        begin
          LastParallelIndexB := Grid.RowCount;
        end;
      end;
    vdFront:
      begin
        TempMinX := FScreenObject.MinX;
        TempMaxX := FScreenObject.MaxX;
        FScreenObject.GetColumns(Grid, TempMinX, TempMaxX,
          FirstParallelIndexA, LastParallelIndexA);
        if FirstParallelIndexA > Grid.ColumnCount then
        begin
          FirstParallelIndexA := Grid.ColumnCount;
        end;
        if LastParallelIndexA > Grid.ColumnCount then
        begin
          LastParallelIndexA := Grid.ColumnCount;
        end;

        FirstParallelIndexB := 0;
        LastParallelIndexB := Grid.LayerCount-1;
      end;
    vdSide:
      begin
        TempMinY := FScreenObject.MinY;
        TempMaxY := FScreenObject.MaxY;
        FScreenObject.GetRows(Grid, TempMinY, TempMaxY,
          FirstParallelIndexA, LastParallelIndexA);
        if FirstParallelIndexA > Grid.RowCount then
        begin
          FirstParallelIndexA := Grid.RowCount;
        end;
        if LastParallelIndexA > Grid.RowCount then
        begin
          LastParallelIndexA := Grid.RowCount;
        end;
        FirstParallelIndexB := 0;
        LastParallelIndexB := Grid.LayerCount-1;
      end;
    else Assert(False);
  end;
end;

procedure TCustomBlockGridDelegate.AssignColAndRowIndicies(
  var ColIndex, RowIndex, LayerIndex : Integer;
  const HorizontalIndex1, HorizontalIndex2, PerpendicularIndex: Integer);
begin
  case FScreenObject.ViewDirection of
    vdTop:
      begin
        ColIndex := HorizontalIndex1;
        RowIndex := HorizontalIndex2;
        LayerIndex := PerpendicularIndex;
      end;
    vdFront:
      begin
        ColIndex := HorizontalIndex1;
        RowIndex := PerpendicularIndex;
        LayerIndex := HorizontalIndex2;
      end;
    vdSide:
      begin
        ColIndex := PerpendicularIndex;
        RowIndex := HorizontalIndex1;
        LayerIndex := HorizontalIndex2;
      end;
    else Assert(False);
  end;
end;

procedure TModflowDelegate.CreateSegment(const Point1,Point2: TEdgePoint;
  const LayerIndex, PerpendicularIndex, HorizontalIndex, VertexIndex,
  SectionIndex: Integer; var ASegment: TCellElementSegment);
begin
  // side or front view, MODFLOW
  ASegment := TCellElementSegment.Create(FScreenObject);
  ASegment.X1 := Point1.X;
  ASegment.X2 := Point2.X;
  ASegment.Y1 := Point1.Y;
  ASegment.Y2 := Point2.Y;
  case FScreenObject.ViewDirection of
    vdFront:
      begin
        ASegment.Col := HorizontalIndex;
        ASegment.Row := PerpendicularIndex;
      end;
    vdSide:
      begin
        ASegment.Col := PerpendicularIndex;
        ASegment.Row := HorizontalIndex;
      end;
    else Assert(False);
  end;
  ASegment.Layer := LayerIndex;
  ASegment.VertexIndex := VertexIndex;
  ASegment.SectionIndex := SectionIndex;
end;

function TModflowDelegate.DataSetUsed(const DataSet: TDataArray;
  var OtherData: TObject; AModel: TBaseModel): boolean;
begin
  result := (FScreenObject.IndexOfDataSet(DataSet) >= 0)
    or (FScreenObject.IndexOfBoundaryDataSet(DataSet) >= 0);
  if not result then
  begin
    result := FScreenObject.ModflowDataSetUsed(DataSet, AModel);
  end;
end;

destructor TModflowDelegate.Destroy;
begin
  FSelectedCells.Free;
  inherited;
end;

procedure TCustomBlockGridDelegate.GetCellsToAssign(
  const DataSetFunction: string; OtherData: TObject;
  const EvaluatedAt: TEvaluatedAt; CellList: TCellAssignmentList;
  AssignmentLocation: TAssignmentLocation; Orientation: TDataSetOrientation;
  AModel: TBaseModel);
const
  Zero: NativeInt = 0;
var
  SegmentIndex: NativeInt;
  ASegment: TCellElementSegment;
  SelectY: Double;
  SelectX: Double;
  Annotation: string;
  SectionIndex: Integer;
  CellLocation3D: T3DRealPoint;
  ParallelIndex2: Integer;
  RowIndex: Integer;
  ColIndex: Integer;
  ParallelIndex1: Integer;
  PerpendicularIndex: Integer;
  FirstParallelIndexA: Integer;
  LastParallelIndexA: Integer;
  FirstParallelIndexB: Integer;
  LastParallelIndexB: Integer;
  PerpendicularLimit: Integer;
  EAnnotation: string;
  IAnnotation: string;
  LayerIndex: Integer;
  LowerLimit, UpperLimit: double;
  AssignmentMethod: TAssignmentMethod;
  Segments: TCellElementSegmentList;
  Grid: TCustomModelGrid;
  UsedCells: array of array of array of Boolean;
  LocalModel: TCustomModel;
  CellIndex: Integer;
  ACell: TCellAssignment;
  PositionCount: NativeInt;
  procedure GetCellBounds;
  begin
    case FScreenObject.ViewDirection of
      vdTop:
        begin
          UpperLimit := Grid.CellElevation[ZeroBasedID(PerpendicularIndex,
            ParallelIndex2, ParallelIndex1)];
          LowerLimit := Grid.CellElevation[ZeroBasedID(PerpendicularIndex+1,
            ParallelIndex2, ParallelIndex1)];
        end;
      vdFront:
        begin
          UpperLimit := Grid.RowPosition[PerpendicularIndex];
          LowerLimit := Grid.RowPosition[PerpendicularIndex+1];
        end;
      vdSide:
        begin
          LowerLimit := Grid.ColumnPosition[PerpendicularIndex];
          UpperLimit := Grid.ColumnPosition[PerpendicularIndex+1];
        end;
      else Assert(False);
    end;
  end;
begin
  Assert(not FScreenObject.Deleted);
  LocalModel := AModel as TCustomModel;
  Grid :=  LocalModel.Grid;
  Assert(CellList.Count = 0);
  if (Grid.ColumnCount <= 0) or (Grid.RowCount <= 0)
    or (Grid.LayerCount <=0) then
  begin
    Exit;
  end;
  IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
  EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
  if FScreenObject.RestoreCellsFromCache(CellList, EvaluatedAt,
    Orientation, AssignmentLocation, EAnnotation, IAnnotation, AModel) then
  begin
    Exit;
  end;
  try
    UpdateCurrentScreenObject(FScreenObject);
    Assert(EvaluatedAt = eaBlocks);
    PerpendicularLimit := GetPerpendiularLimit(Grid);
    if Orientation = dsoTop then
    begin
      PerpendicularLimit := 0
    end
    else
    begin
      Assert(Orientation = dso3D);
    end;
    if (FScreenObject.SetValuesOfEnclosedCells
      or (FScreenObject.SetValuesOfIntersectedCells
      and (FScreenObject.ElevationCount <> ecZero)))
      and FScreenObject.Closed then
    begin
      AssignParallellLimits(AModel,
        FirstParallelIndexA, LastParallelIndexA,
        FirstParallelIndexB, LastParallelIndexB);
      // Find the cells inside the screen object and assign values to them.
      for PerpendicularIndex := 0 to PerpendicularLimit do
      begin
        for ParallelIndex1 := FirstParallelIndexA to LastParallelIndexA do
        begin
          for ParallelIndex2 := FirstParallelIndexB to LastParallelIndexB do
          begin
            AssignColAndRowIndicies(ColIndex, RowIndex, LayerIndex,
              ParallelIndex1, ParallelIndex2, PerpendicularIndex);
            case FScreenObject.EvaluatedAt of
              eaBlocks:
                begin
                  CellLocation3D := Grid.ThreeDElementCenter(ZeroBasedID(
                    LayerIndex, RowIndex, ColIndex));
                end;
              eaNodes:
                begin
                  Assert(False);
                  CellLocation3D := Grid.ThreeDElementCorner(ZeroBasedID(
                    LayerIndex, RowIndex, ColIndex));
                end;
            else
              Assert(False);
            end;
            if IsPointInside(CellLocation3D, Grid, SectionIndex) then
            begin
              if Orientation = dso3D then
              begin

                if not AssignElevations(ColIndex, RowIndex, LayerIndex, AModel,
                  AssignmentLocation) then
                begin
                  Continue;
                end;
                if (FScreenObject.ElevationCount = ecTwo)
                  and  not FScreenObject.SetValuesOfEnclosedCells then
                begin
                  GetCellBounds;
                  if not (((UpperLimit >= FScreenObject.FTopElevation)
                    and (LowerLimit <= FScreenObject.FTopElevation))
                    or ((UpperLimit >= FScreenObject.FBottomElevation)
                    and (LowerLimit <= FScreenObject.FBottomElevation))) then
                  begin
                    Continue;
                  end;
                end
                else
                begin
                  if not ElevationOk(Grid, PerpendicularIndex,
                    ColIndex, RowIndex) then
                  begin
                    Continue;
                  end;
                end;
              end;
              if FScreenObject.SetValuesOfIntersectedCells
                and (FScreenObject.ElevationCount <> ecZero) then
              begin
                AssignmentMethod := amIntersect;
                if IAnnotation = '' then
                begin
                  IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
                end;
                Annotation := IAnnotation;
              end
              else
              begin
                AssignmentMethod := amEnclose;
                if EAnnotation = '' then
                begin
                  EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
                end;
                Annotation := EAnnotation;
              end;
              UpdateCurrentSection(SectionIndex);
              CellList.Add(TCellAssignment.Create(LayerIndex, RowIndex, ColIndex,
                nil, SectionIndex, Annotation, AssignmentMethod));
            end;
          end;
        end;
      end;
    end;
    if FScreenObject.SetValuesOfIntersectedCells then
    begin
      if FScreenObject.SetValuesOfEnclosedCells then
      begin
        SetLength(UsedCells, LocalModel.LayerCount+1, LocalModel.RowCount+1,
          LocalModel.ColumnCount + 1);
        for CellIndex := 0 to CellList.Count - 1 do
        begin
          ACell := CellList[CellIndex];
          UsedCells[ACell.Layer, ACell.Row, ACell.Column] := True;
        end;
      end;
      Segments := FScreenObject.Segments[AModel];
      SelectX := 0;
      SelectY := 0;
      case AssignmentLocation of
        alAll:
          begin
          end;
        alFirstVertex:
          begin
            if Segments.Count > 0 then
            begin
              ASegment := Segments[Zero];
              SelectX := ASegment.X1;
              SelectY := ASegment.Y1;
            end
            else
            begin
              SelectX := 0;
              SelectY := 0;
            end;
          end;
        alLastVertex:
          begin
            if Segments.Count > 0 then
            begin
              PositionCount := Segments.Count - 1;
              ASegment := Segments[PositionCount];
              SelectX := ASegment.X2;
              SelectY := ASegment.Y2;
            end
            else
            begin
              SelectX := 0;
              SelectY := 0;
            end;
          end;
      else
        Assert(False);
      end;
      // Assign values here.
      for SegmentIndex := 0 to Segments.Count - 1 do
      begin
        ASegment := Segments[SegmentIndex];
        case AssignmentLocation of
          alAll:
            begin
            end;
          alFirstVertex:
            begin
              if (SelectX <> ASegment.X1) or (SelectY <> ASegment.Y1) then
              begin
                Continue;
              end;
            end;
          alLastVertex:
            begin
              if (SelectX <> ASegment.X2) or (SelectY <> ASegment.Y2) then
              begin
                Continue;
              end;
            end;
        else
          Assert(False);
        end;
        PerpendicularIndex := -1;
        case FScreenObject.ViewDirection of
          vdTop:
            PerpendicularIndex := ASegment.Layer;
          vdFront:
            PerpendicularIndex := ASegment.Row;
          vdSide:
            PerpendicularIndex := ASegment.Col;
        else
          Assert(False);
        end;
        if Orientation = dso3D then
        begin
          UpdateCurrentSegment(ASegment);
          if not AssignElevations(ASegment.Col, ASegment.Row,
            ASegment.Layer, AModel, AssignmentLocation) then
          begin
            Continue;
          end;
          if not ElevationOK(Grid, PerpendicularIndex,
            ASegment.Col, ASegment.Row) then
          begin
            Continue;
          end;
        end;
        UpdateCurrentSegment(ASegment);
        if IAnnotation = '' then
        begin
          IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
        end;
        Annotation := IAnnotation;
        if Orientation = dso3D then
        begin
          ACell := TCellAssignment.Create(ASegment.Layer, ASegment.Row,
            ASegment.Col, ASegment, ASegment.SectionIndex, Annotation, amIntersect);
        end
        else
        begin
          ACell := TCellAssignment.Create(0, ASegment.Row,
            ASegment.Col, ASegment, ASegment.SectionIndex, Annotation, amIntersect);
        end;
        if FScreenObject.SetValuesOfEnclosedCells then
        begin
          if UsedCells[ACell.Layer, ACell.Row, ACell.Column]
            and FScreenObject.SectionClosed[ASegment.SectionIndex] then
          begin
            ACell.Free;
          end
          else
          begin
            CellList.Add(ACell);
            UsedCells[ACell.Layer, ACell.Row, ACell.Column] := True;
          end;
        end
        else
        begin
          CellList.Add(ACell);
        end;
      end;
    end;
  finally
    FScreenObject.CacheElevationArrays;
    FScreenObject.UpdateCellCache(CellList, EvaluatedAt, Orientation,
      AssignmentLocation, AModel);
  end;
end;

function TModflowDelegate.GetHorizontalIndexFromLocation(const X: Real;
  const Grid: TCustomModelGrid): integer;
begin
  result := -1;
  case FScreenObject.ViewDirection of
    vdTop: Assert(False);
    vdFront: result := FScreenObject.GetACol(Grid, X);
    vdSide: result := FScreenObject.GetARow(Grid, X);
    else Assert(False);
  end;
end;

procedure TModflowDelegate.GetRotatedPoints(var RotatedPoints: TEdgePointArray);
var
  Index: Integer;
begin

  // Get the coordinates of the points.
  SetLength(RotatedPoints, FScreenObject.Count);
  case FScreenObject.ViewDirection of
    vdTop: Assert(False);
    vdFront:
      begin
        for Index := 0 to FScreenObject.Count - 1 do
        begin
          RotatedPoints[Index] := FScreenObject.EdgePoints[Index];
        end;
      end;
    vdSide:
      begin
        for Index := 0 to FScreenObject.Count - 1 do
        begin
          RotatedPoints[Index].X := FScreenObject.EdgePoints[Index].Y;
          RotatedPoints[Index].Y := FScreenObject.EdgePoints[Index].X;
          RotatedPoints[Index].Position :=
            FScreenObject.EdgePoints[Index].Position;
        end;
      end;
    else Assert(False);
  end;
end;

procedure TModflowDelegate.GetSideCellsToAssign(
  const DataSetFunction: string; OtherData: TObject; const DataSet: TDataArray;
  CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
  AModel: TBaseModel);
var
  EvalAt: TEvaluatedAt;
  Orientation: TDataSetOrientation;
begin
  Assert(CellList.Count = 0);
  if DataSet = nil then
  begin
    EvalAt := eaBlocks;
    Orientation := dso3D;
  end
  else
  begin
    EvalAt := DataSet.EvaluatedAt;
    Orientation := DataSet.Orientation;
  end;
  GetCellsToAssign(DataSetFunction, OtherData, EvalAt, CellList,
    AssignmentLocation, Orientation, AModel);
end;

procedure TCustomBlockGridDelegate.GetTopCellsToAssign(
  const DataSetFunction: string; OtherData: TObject; const DataSet: TDataArray;
  CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
  AModel: TBaseModel);
var
  EvalAt: TEvaluatedAt;
  Orientation: TDataSetOrientation;
begin
  Assert(CellList <> nil);
  Assert(CellList.Count = 0);
  if DataSet = nil then
  begin
    EvalAt := eaBlocks;
    Orientation := dso3D;
  end
  else
  begin
    EvalAt := DataSet.EvaluatedAt;
    Orientation := DataSet.Orientation;
  end;
  GetCellsToAssign(DataSetFunction, OtherData, EvalAt, CellList,
    AssignmentLocation, Orientation, AModel);
end;

procedure TModflowDelegate.GetHorizontalLimits(const Grid: TCustomModelGrid;
  var HorizontalLimit: Integer; var PerpendicularLimit: Integer);
begin
  case FScreenObject.ViewDirection of
    vdTop: Assert(False);
    vdFront:
      begin
        PerpendicularLimit := Grid.RowCount - 1;
        HorizontalLimit := Grid.ColumnCount;
      end;
    vdSide:
      begin
        PerpendicularLimit := Grid.ColumnCount - 1;
        HorizontalLimit := Grid.RowCount;
      end;
  end;
end;

function TModflowDelegate.GetColOrRow(const Grid: TCustomModelGrid;
  const APoint: TEdgePoint;
  const GridMinHorizontal, GridMaxHorizontal: Real): integer;
begin
  result := -1;
  if APoint.X < GridMinHorizontal then
  begin

    case FScreenObject.ViewDirection of
      vdTop: Assert(False);
      vdFront: result := -1;
      vdSide: result := Grid.RowCount;
      else Assert(false);
    end;
  end
  else if APoint.X > GridMaxHorizontal then
  begin
    case FScreenObject.ViewDirection of
      vdTop: Assert(False);
      vdFront: result := Grid.ColumnCount;
      vdSide: result := -1;
      else Assert(false);
    end;
  end
  else
  begin
    case FScreenObject.ViewDirection of
      vdTop: Assert(False);
      vdFront: result := FScreenObject.GetACol(Grid, APoint.X);
      vdSide: result := FScreenObject.GetARow(Grid, APoint.X);
      else Assert(false);
    end;
  end;
end;

procedure TModflowDelegate.GetFrontCellsToAssign(
  const DataSetFunction: string; OtherData: TObject; const DataSet: TDataArray;
  CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
  AModel: TBaseModel);
var
  EvalAt: TEvaluatedAt;
  Orientation: TDataSetOrientation;
begin
  Assert(CellList.Count = 0);
  if DataSet = nil then
  begin
    EvalAt := eaBlocks;
    Orientation := dso3D;
  end
  else
  begin
    EvalAt := DataSet.EvaluatedAt;
    Orientation := DataSet.Orientation;
  end;
  GetCellsToAssign(DataSetFunction, OtherData, EvalAt, CellList,
    AssignmentLocation, Orientation, AModel);
end;

procedure TModflowDelegate.GetVerticalLimitsOfGrid(const Grid: TCustomModelGrid;
  out GridMinZ, GridMaxZ: Real);
var
  Temp: real;
begin
  if Grid.LayerCount >= 0 then
  begin
    GridMaxZ := Grid.HighestElevation;
    GridMinZ := Grid.LowestElevation;
  end
  else
  begin
    GridMaxZ := 0;
    GridMinZ := 0;
  end;
  if GridMinZ > GridMaxZ then
  begin
    Temp := GridMinZ;
    GridMinZ := GridMaxZ;
    GridMaxZ := Temp;
  end;
end;

procedure TModflowDelegate.GetHorizontalLimitsOfGrid(const Grid: TCustomModelGrid;
  out GridMinHorizontal, GridMaxHorizontal: real);
var
  Temp: real;
begin
  // Get the box outlining the grid.
  case FScreenObject.ViewDirection of
    vdTop: Assert(False);
    vdFront:
      begin
        if Grid.ColumnCount >= 0 then
        begin
          GridMaxHorizontal := Grid.ColumnPosition[Grid.ColumnCount];
          GridMinHorizontal := Grid.ColumnPosition[0];
        end
        else
        begin
          GridMaxHorizontal := 0;
          GridMinHorizontal := 0;
        end;
      end;
    vdSide:
      begin
        if Grid.RowCount >= 0 then
        begin
          GridMaxHorizontal := Grid.RowPosition[0];
          GridMinHorizontal := Grid.RowPosition[Grid.RowCount];
        end
        else
        begin
          GridMaxHorizontal := 0;
          GridMinHorizontal := 0;
        end;
      end;
  end;

  if GridMinHorizontal > GridMaxHorizontal then
  begin
    Temp := GridMinHorizontal;
    GridMinHorizontal := GridMaxHorizontal;
    GridMaxHorizontal := Temp;
  end;
end;

// CellOutlines is a 2D array of TPoint2D.
// The outline for a cell will be the points at
// @orderedList(
//   @item([Column*2, Layer])
//   @item([Column*2+1, Layer])
//   @item([Column*2+2, Layer])
//   @item([Column*2, Layer+1])
//   @item([Column*2+1, Layer+1])
//   @item([Column*2+2, Layer+1])
// )
function TModflowDelegate.FindLayer(const ColOrRow: integer;
  const Location: TEdgePoint; const CellOutlines: T2DRealPointArray;
  const MovingUp: boolean): integer;
var
  LeftPoint, RightPoint, CenterPoint: TPoint2D;
  Indicator: integer;
  LayerLimit: integer;
  Y: real;
  FirstIndex, LastIndex, MiddleIndex: integer;
begin
  Assert(CellOutlines <> nil);
  Assert(ColOrRow*2+2 < Length(CellOutlines));
  Assert(ColOrRow >= 0);
  Assert(Length(CellOutlines) > 0);
  LayerLimit := Length(CellOutlines[0]);
  Assert(LayerLimit > 0);
  case FScreenObject.ViewDirection of
    vdTop: Assert(False);
    vdFront:
      begin
        LeftPoint := CellOutlines[ColOrRow*2,0];
        RightPoint := CellOutlines[ColOrRow*2+2,0];
      end;
    vdSide:
      begin
        LeftPoint := CellOutlines[ColOrRow*2+2,0];
        RightPoint := CellOutlines[ColOrRow*2,0];
      end;
    else Assert(False);
  end;
  Assert((Location.X >= LeftPoint.x) and (Location.X <= RightPoint.x));
  CenterPoint := CellOutlines[ColOrRow*2+1,0];
  Indicator := -1;
  // Indicator indicates which half of the cell outline X is in.
  case FScreenObject.ViewDirection of
    vdTop: Assert(False);
    vdFront:
      begin
        if Location.X >= CenterPoint.x then
        begin
          Indicator := ColOrRow*2+1;
        end
        else
        begin
          Indicator := ColOrRow*2;
        end;
      end;
    vdSide:
      begin
        if Location.X >= CenterPoint.x then
        begin
          Indicator := ColOrRow*2;
        end
        else
        begin
          Indicator := ColOrRow*2+1;
        end;
      end;
    else Assert(False);
  end;
  // Check if Location is above the top of the grid.
  LeftPoint := CellOutlines[Indicator,0];
  RightPoint := CellOutlines[Indicator+1,0];
  Y := YIntersection(LeftPoint, RightPoint, Location.X);
  if Y < Location.Y then
  begin
    result := -1;
    Exit;
  end;
  // Check if Location is below the bottom of the grid.
  LeftPoint := CellOutlines[Indicator,LayerLimit-1];
  RightPoint := CellOutlines[Indicator+1,LayerLimit-1];
  Y := YIntersection(LeftPoint, RightPoint, Location.X);
  if Y > Location.Y then
  begin
    result := LayerLimit;
    Exit;
  end;
  FirstIndex := 0;
  LastIndex := LayerLimit-1;
  While (LastIndex - FirstIndex > 1) do
  begin
    MiddleIndex := (FirstIndex + LastIndex) div 2;
    LeftPoint := CellOutlines[Indicator,MiddleIndex];
    RightPoint := CellOutlines[Indicator+1,MiddleIndex];
    Y := YIntersection(LeftPoint, RightPoint, Location.X);

    if Y < Location.Y then
    begin
      LastIndex := MiddleIndex;
    end
    else if Y > Location.Y then
    begin
      FirstIndex := MiddleIndex;
    end
    else if MovingUp then
    begin
      LastIndex := MiddleIndex;
    end
    else
    begin
      FirstIndex := MiddleIndex;
    end;
  end;
  result := FirstIndex;
end;

function TModflowDelegate.OutlineVertex(const ColOrRow, Layer,
  PointIndex: integer; const CellOutlines: T2DRealPointArray): TPoint2D;
begin
  case PointIndex of
    0,6:
      begin
        result :=CellOutlines[ColOrRow*2,Layer];
      end;
    1:
      begin
        result :=CellOutlines[ColOrRow*2+1,Layer];
      end;
    2:
      begin
        result :=CellOutlines[ColOrRow*2+2,Layer];
      end;
    3:
      begin
        result :=CellOutlines[ColOrRow*2+2,Layer+1];
      end;
    4:
      begin
        result :=CellOutlines[ColOrRow*2+1,Layer+1];
      end;
    5:
      begin
        result :=CellOutlines[ColOrRow*2,Layer+1];
      end;
    else Assert(False);
  end;
end;

function TModflowDelegate.CountIntersectPointsOnEdge(
  const ColOrRow, Layer, EdgeIndex: integer;
  const FirstPoint, SecondPoint: TPoint2D;
  const CellOutlines: T2DRealPointArray;
  out PointsOnEdge: TRealPointArray): integer;
var
  EdgeSegment: TSegment2D;
  ObjectSegment: TSegment2D;
  PointIndex: integer;
  function Inside(X, X1, X2: real): boolean;
  begin
    result := ((X < X1) and (X > X2)) or ((X > X1) and (X < X2))
  end;
begin
  ObjectSegment := EquateSegment(FirstPoint, SecondPoint);
  EdgeSegment := EquateSegment(OutlineVertex(ColOrRow, Layer, EdgeIndex,
    CellOutlines), OutlineVertex(ColOrRow, Layer, EdgeIndex+1, CellOutlines));
  if not Intersect(ObjectSegment, EdgeSegment) then
  begin
    result := 0;
  end
  else if not Parallel(ObjectSegment, EdgeSegment) then
  begin
    result := 1;
    SetLength(PointsOnEdge, Result);
    PointsOnEdge[0] := IntersectionPoint(ObjectSegment, EdgeSegment);
  end
  else
  begin
    result := 2;
    PointIndex := -1;
    SetLength(PointsOnEdge, Result);
    if IsEqual(ObjectSegment[1], ObjectSegment[2]) then
    begin
      PointsOnEdge[0] := ObjectSegment[1];
      SetLength(PointsOnEdge, 1);
      result := 1;
      Exit;
    end
    else if IsEqual(EdgeSegment[1], EdgeSegment[2]) then
    begin
      PointsOnEdge[0] := EdgeSegment[1];
      result := 1;
      Exit;
    end;
    // At this point we know that neither segment is degenerate.
    if IsEqual(EdgeSegment[1], ObjectSegment[1]) or
      IsEqual(EdgeSegment[1], ObjectSegment[2]) then
    begin
      Inc(PointIndex);
      PointsOnEdge[PointIndex] := EdgeSegment[1];
    end;
    if IsEqual(EdgeSegment[2], ObjectSegment[1]) or
      IsEqual(EdgeSegment[2], ObjectSegment[2]) then
    begin
      Inc(PointIndex);
      PointsOnEdge[PointIndex] := EdgeSegment[2];
      if PointIndex = 1 then
      begin
        Exit;
      end;
    end;
    if Inside(EdgeSegment[1].X, ObjectSegment[1].x, ObjectSegment[2].x)
      or Inside(EdgeSegment[1].Y, ObjectSegment[1].Y, ObjectSegment[2].Y) then
    begin
      Inc(PointIndex);
      Assert(PointIndex < 2);
      PointsOnEdge[PointIndex] := EdgeSegment[1];
    end;
    if Inside(EdgeSegment[2].X, ObjectSegment[1].x, ObjectSegment[2].x)
      or Inside(EdgeSegment[2].Y, ObjectSegment[1].Y, ObjectSegment[2].Y) then
    begin
      Inc(PointIndex);
      Assert(PointIndex < 2);
      PointsOnEdge[PointIndex] := EdgeSegment[2];
    end;
    if Inside(ObjectSegment[1].X, EdgeSegment[1].x, EdgeSegment[2].x)
      or Inside(ObjectSegment[1].Y, EdgeSegment[1].Y, EdgeSegment[2].Y) then
    begin
      Inc(PointIndex);
      Assert(PointIndex < 2);
      PointsOnEdge[PointIndex] := ObjectSegment[1];
    end;
    if Inside(ObjectSegment[2].X, EdgeSegment[1].x, EdgeSegment[2].x)
      or Inside(ObjectSegment[2].Y, EdgeSegment[1].Y, EdgeSegment[2].Y) then
    begin
      Inc(PointIndex);
      Assert(PointIndex < 2);
      PointsOnEdge[PointIndex] := ObjectSegment[2];
    end;
    if PointIndex = 0 then
    begin
      SetLength(PointsOnEdge, 1);
      result := 1;
    end;
    Assert(PointIndex in [0,1]);
  end;
end;

function TModflowDelegate.FindIntersectionSurface(
  const FirstCol, LastCol, LayerIndex: integer;
  const PreviousPoint, APoint: TEdgePoint; var IntersectionLocation: TEdgePoint;
  const CellOutlines: T2DRealPointArray;  Out Col: integer): boolean;
var
  ObjectSegment, EdgeSegment: TSegment2D;
  ColIndex: integer;
  function Intersects: boolean;
    procedure SetOutput;
    var
      Int: TPoint2D;
    begin
      Int := IntersectionPoint(ObjectSegment, EdgeSegment);
      IntersectionLocation.X := Int.x;
      IntersectionLocation.Y := Int.y;
      Col := ColIndex;
      result := True;
    end;
  begin
    result := False;
    EdgeSegment := EquateSegment(CellOutlines[ColIndex*2,LayerIndex],
      CellOutlines[ColIndex*2+1,LayerIndex]);
    if Intersect(ObjectSegment, EdgeSegment) then
    begin
      SetOutput;
      Exit;
    end;
    EdgeSegment := EquateSegment(CellOutlines[ColIndex*2+1,LayerIndex],
      CellOutlines[ColIndex*2+2,LayerIndex]);
    if Intersect(ObjectSegment, EdgeSegment) then
    begin
      SetOutput;
      Exit;
    end;
  end;
begin
  ObjectSegment := EquateSegment(PreviousPoint.X, PreviousPoint.Y,
    APoint.X, APoint.Y);
  result := False;
  if FirstCol < LastCol then
  begin
    for ColIndex := FirstCol to LastCol do
    begin
      result := Intersects;
      if result then Exit;
    end;
  end
  else
  begin
    for ColIndex := FirstCol downto LastCol do
    begin
      result := Intersects;
      if result then Exit;
    end;
  end;
end;

function TModflowDelegate.FindLayerOnEdge(const APoint,
  PreviousPoint: TEdgePoint; var IntersectionLocation: TEdgePoint;
  const CellOutline: T2DRealPointArray; const EdgeIndex: integer): integer;
var
  FirstIndex, LastIndex, MiddleIndex: integer;
  ObjectSegment, EdgeSegment: TSegment2D;
  Int: TPoint2D;
  Candidates: array[0..3] of TPoint2D;
  CandidateCount: integer;
  CandidateIndex: integer;
  Separation, TestSeparation: real;
  function IsBetween(const X, X1, X2: Real): boolean;
  begin
    result := ((X1 >= X) and (X >= X2)) or ((X1 <= X) and (X <= X2));
  end;
begin
  FirstIndex := 0;
  LastIndex := Length(CellOutline[0]) -1;
  Assert(EdgeIndex >= 0);
  Assert(EdgeIndex < Length(CellOutline));
  EdgeSegment := EquateSegment(CellOutline[EdgeIndex,0],
    CellOutline[EdgeIndex,LastIndex]);
  ObjectSegment := EquateSegment(PreviousPoint.X, PreviousPoint.Y,
    APoint.X, APoint.Y);

  if Parallel(EdgeSegment, ObjectSegment) then
  begin
    CandidateCount := 0;
    if IsBetween(ObjectSegment[1].Y, EdgeSegment[1].Y, EdgeSegment[2].Y) then
    begin
      Candidates[CandidateCount] := ObjectSegment[1];
      Inc(CandidateCount);
    end;
    if IsBetween(ObjectSegment[2].Y, EdgeSegment[1].Y, EdgeSegment[2].Y) then
    begin
      Candidates[CandidateCount] := ObjectSegment[2];
      Inc(CandidateCount);
    end;
    if IsBetween(EdgeSegment[1].Y, ObjectSegment[1].Y, ObjectSegment[2].Y) then
    begin
      Candidates[CandidateCount] := EdgeSegment[1];
      Inc(CandidateCount);
    end;
    if IsBetween(EdgeSegment[2].Y, ObjectSegment[1].Y, ObjectSegment[2].Y) then
    begin
      Candidates[CandidateCount] := EdgeSegment[2];
      Inc(CandidateCount);
    end;
    if CandidateCount > 0 then
    begin
      Int := Candidates[0];
      Separation := FastGEO.Distance(ObjectSegment[1], Int);
      for CandidateIndex := 1 to CandidateCount - 1 do
      begin
        TestSeparation := FastGEO.Distance(ObjectSegment[1],
          Candidates[CandidateIndex]);
        if TestSeparation < Separation then
        begin
          Separation := TestSeparation;
          Int := Candidates[CandidateIndex];
        end;
      end;
    end
    else
    begin
      Int := ObjectSegment[1];
    end;
  end
  else
  begin
    Int := IntersectionPoint(EdgeSegment, ObjectSegment);
  end;
  IntersectionLocation.X := Int.X;
  IntersectionLocation.Y := Int.Y;

  while LastIndex - FirstIndex > 1 do
  begin
    MiddleIndex := (FirstIndex + LastIndex) div 2;
    if IntersectionLocation.Y > CellOutline[EdgeIndex,MiddleIndex].Y then
    begin
      LastIndex := MiddleIndex;
    end
    else
    begin
      FirstIndex := MiddleIndex;
    end;
  end;
  result := FirstIndex;
end;

function TModflowDelegate.InCell(const ColOrRow, Layer: integer;
  const TestPoint: TEdgePoint; Const CellOutlines: T2DRealPointArray): boolean;
var
  VertexIndex: integer;
  APoint, AnotherPoint: TPoint2D;
begin
  result := false;

  for VertexIndex := 0 to 5 do
  begin
    APoint := OutlineVertex(ColOrRow, Layer, VertexIndex, CellOutlines);
    AnotherPoint := OutlineVertex(ColOrRow, Layer, VertexIndex+1, CellOutlines);
    if ((TestPoint.Y <= APoint.Y) = (TestPoint.Y > AnotherPoint.Y)) and
      (TestPoint.X - APoint.X - (TestPoint.Y - APoint.Y) *
      (AnotherPoint.X - APoint.X) /
      (AnotherPoint.Y - APoint.Y) < 0) then
    begin
      result := not result;
    end;
  end;
end;

procedure TModflowDelegate.InitializeExpression(out Compiler: TRbwParser;
  out DataSetFunction: string; out Expression: TExpression;
  const DataSet: TDataArray; const OtherData: TObject; AModel: TBaseModel);
var
  DataObject: TModflowDataObject;
  ResultTypeOK: Boolean;
  NameToDisplay: string;
  TypeToCheck: TRbwDataType;
begin
  if OtherData = nil then
  begin
    inherited;
  end
  else
  begin
    DataObject := OtherData as TModflowDataObject;
    Compiler := DataObject.Compiler;
    DataSetFunction := DataObject.DataSetFunction;

    try
      Compiler.Compile(DataSetFunction);
    except on E: ERbwParserError do
      begin
        if DataSet <> nil then
        begin
          NameToDisplay := DataSet.Name;
          frmFormulaErrors.AddFormulaError(FScreenObject.Name,
            NameToDisplay, DataSetFunction, StrInvalidFormula);
        end
        else
        begin
          NameToDisplay := DataObject.AlternateName;
          frmFormulaErrors.AddFormulaError(FScreenObject.Name,
            NameToDisplay, DataSetFunction, StrInvalidFormula);
        end;
        DataSetFunction := '0';
        Compiler.Compile(DataSetFunction);
      end;
    end;
    Expression := Compiler.CurrentExpression;
    if DataSet <> nil then
    begin
      TypeToCheck := DataSet.Datatype;
    end
    else
    begin
      TypeToCheck := DataObject.AlternateDataType;
    end;
    ResultTypeOK := (Expression.ResultType = TypeToCheck)
      or ((Expression.ResultType = rdtInteger)
      and (TypeToCheck = rdtDouble));
    if not ResultTypeOK then
    begin
      raise EInvalidDataType.Create(Format(StrTheFormula0sIn,
        [Expression.Decompile, FScreenObject.Name]), Expression.Decompile);
//      raise EInvalidDataType.Create(StrInvalidDataType, Expression.Decompile);
    end;
  end;
end;

function TModflowDelegate.GetCellOutlines(const Grid: TCustomModelGrid;
  const RowOrCol: integer): T2DRealPointArray;
begin
  case FScreenObject.ViewDirection of
    vdTop: Assert(False);
    vdFront: result := (Grid as TModflowGrid).FrontCellPoints(RowOrCol);
    vdSide: result := (Grid as TModflowGrid).SideCellPoints(RowOrCol);
    else Assert(False);
  end;
end;

procedure TModflowDelegate.UpdateFrontSegments(AModel: TBaseModel;
      const EvaluatedAt: TEvaluatedAt);
begin
  UpdateSegments(AModel, EvaluatedAt);
end;

procedure TModflowDelegate.AddFrontSideSubSegments(
  var ASegment: TCellElementSegment; AModel: TBaseModel;
  const CellOutlines: T2DRealPointArray);
var
  Left, Center, Right: TPoint2D;
  CenterX: double;
  ASeg: TSegment2D;
  BottomSeg: TSegment2D;
  SegIndex: Integer;
  procedure GetChildModelBottom;
  var
    UpperLeft, UpperRight, UpperCenter: TPoint2D;
  begin
    // Assign Left, Center,  and Right
    case FScreenObject.ViewDirection of
      vdTop: Assert(False);
      vdFront:
        begin
          UpperLeft := CellOutlines[ASegment.Col*2,ASegment.Layer];
          UpperRight := CellOutlines[ASegment.Col*2+2,ASegment.Layer];
          UpperCenter := CellOutlines[ASegment.Col*2+1,ASegment.Layer];
          Left := CellOutlines[ASegment.Col*2,ASegment.Layer+1];
          Right := CellOutlines[ASegment.Col*2+2,ASegment.Layer+1];
          Center := CellOutlines[ASegment.Col*2+1,ASegment.Layer+1];
        end;
      vdSide:
        begin
          UpperLeft := CellOutlines[ASegment.Row*2+2,ASegment.Layer];
          UpperRight := CellOutlines[ASegment.Row*2,ASegment.Layer];
          UpperCenter := CellOutlines[ASegment.Row*2+1,ASegment.Layer];
          Left := CellOutlines[ASegment.Row*2+2,ASegment.Layer+1];
          Right := CellOutlines[ASegment.Row*2,ASegment.Layer+1];
          Center := CellOutlines[ASegment.Row*2+1,ASegment.Layer+1];
        end;
      else Assert(False);
    end;
    Left.y := (UpperLeft.y + Left.y)/2;
    Center.y := (UpperCenter.y + Center.y)/2;
    Right.y := (UpperRight.y + Right.y)/2;
    CenterX := Center.x;
  end;
  procedure GetCenterX;
  begin
    case FScreenObject.ViewDirection of
      vdFront:
        begin
          CenterX := CellOutlines[ASegment.Col*2+1,ASegment.Layer].x;
        end;
      vdSide:
        begin
          CenterX := CellOutlines[ASegment.Row*2+1,ASegment.Layer+1].x
        end;
      else Assert(False);
    end;
  end;
var
  TempSegList: TList;

  procedure TestSingleSegment;
  var
    MiddlePoint: TPoint2D;
  begin
    if TempSegList.Count = 1 then
    begin
      MiddlePoint.x := (ASeg[1].x + ASeg[2].x)/2;
      MiddlePoint.y := (ASeg[1].y + ASeg[2].y)/2;
//      EndPoint := ASeg[1];
      if MiddlePoint.x > CenterX then
      begin
        BottomSeg[1] := Right;
      end
      else
      begin
        BottomSeg[1] := Left;
      end;
      AdjustValues(BottomSeg[2].x, MiddlePoint.x, BottomSeg[2].y,
        BottomSeg[1].x, BottomSeg[1].y);
      if MiddlePoint.y > BottomSeg[1].y  then
      begin
        FreeAndNil(ASegment);
      end;
    end;
  end;
  procedure DeleteInvalidSegments;
  var
    SegIndex: integer;
    ATempSeg: TTempSeg;
    MiddlePoint: TPoint2D;
  begin
    for SegIndex := TempSegList.Count - 1 downto 0 do
    begin
      ATempSeg := TempSegList[SegIndex];
      MiddlePoint.x := (ATempSeg.FSeg[1].x + ATempSeg.FSeg[2].x)/2;
      MiddlePoint.Y := (ATempSeg.FSeg[1].Y + ATempSeg.FSeg[2].Y)/2;
      if MiddlePoint.x > CenterX then
      begin
        BottomSeg[1] := Right;
      end
      else
      begin
        BottomSeg[1] := Left;
      end;
      AdjustValues(BottomSeg[2].x, MiddlePoint.x, BottomSeg[2].y,
        BottomSeg[1].x, BottomSeg[1].y);
      if MiddlePoint.y > BottomSeg[1].y  then
      begin
        TempSegList.Delete(SegIndex);
      end;
    end;
  end;
var
  CModel: TBaseModel;
  BoundaryCell: Boolean;
  ChildModel: TChildModel;
  LastLayer: Integer;
  PhastModel: TPhastModel;
  ATempSeg, AnotherSeg: TTempSeg;
  IntSect: TPoint2D;
begin
  if AModel is TChildModel then
  begin
    Exit;
  end;
  PhastModel := FModel as TPhastModel;

  BoundaryCell := PhastModel.IsChildModelEdgeCell(ASegment.Col,
    ASegment.Row, ASegment.Layer, CModel);
  if not BoundaryCell then
  begin
    Exit;
  end;
  ChildModel := CModel as TChildModel;
  LastLayer := ChildModel.Discretization.BottomLayerIndex;
  Assert(LastLayer >= 0);

{
  The general strategy here is to intersect the segment with the boundaries
  of the child grid and to only include those parts of the segment that
  are outside the child grid.

  It is assumed that the child model layer elevations are consistent with
  those of the parent model which may not always be true. There is no
  single correct answer because the bottom elevations of the child cells within
  the parent cell may differ in arbitrary ways.

  Segments that lie on the edge of the grid are a special case. Sometimes
  they are needed and sometimes they must be avoided. The LgrEdge property
  is used to identify them.
}

  case FScreenObject.ViewDirection of
    vdFront:
      begin
        if ASegment.Col = ChildModel.FirstCol then
        begin
          if (ASegment.Layer = LastLayer)
            and (LastLayer <> PhastModel.ModflowGrid.LayerCount-1) then
          begin
            GetChildModelBottom;
            if (ASegment.X1 = CenterX) and (ASegment.X2 = CenterX) then
            begin
              ASegment.LgrEdge := True;
              Exit;
            end
            else
            if (ASegment.X1 <= CenterX) and (ASegment.X2 <= CenterX) then
            begin
              Exit;
            end;

                 
            TempSegList := TObjectList.Create;
            try
              ASeg := ASegment.Segment;
              ATempSeg := TTempSeg.Create;
              TempSegList.Add(ATempSeg);
              ATempSeg.FSeg := ASeg;
              if (ASegment.X1 > CenterX) and (ASegment.X2 <= CenterX) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  AnotherSeg := TTempSeg.Create;
                  AnotherSeg.Assign(ATempSeg);
                  TempSegList.Add(AnotherSeg);
                  AdjustValues(ATempSeg.FSeg[2].x, CenterX, ATempSeg.FSeg[2].y,
                    ATempSeg.FSeg[1].x, ATempSeg.FSeg[1].y);
                  AdjustValues(AnotherSeg.FSeg[1].x, CenterX, AnotherSeg.FSeg[1].y,
                    AnotherSeg.FSeg[2].x, AnotherSeg.FSeg[2].y);
                end;
              end;
              if (ASegment.X2 > CenterX) and (ASegment.X1 <= CenterX) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  if (ATempSeg.FSeg[2].x > CenterX) and (ATempSeg.FSeg[1].x <= CenterX) then
                  begin
                    AnotherSeg := TTempSeg.Create;
                    AnotherSeg.Assign(ATempSeg);
                    TempSegList.Add(AnotherSeg);
                    AdjustValues(ATempSeg.FSeg[1].x, CenterX, ATempSeg.FSeg[1].y,
                      ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                    AdjustValues(AnotherSeg.FSeg[2].x, CenterX, AnotherSeg.FSeg[2].y,
                      AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                  end;
                end;
              end;
              BottomSeg[1] := Right;
              BottomSeg[2] := Center;
              if Intersect(ASegment.Segment, BottomSeg, IntSect.x, IntSect.y) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  if Intersect(ATempSeg.FSeg, BottomSeg, IntSect.x, IntSect.y) then
                  begin
                    AnotherSeg := TTempSeg.Create;
                    AnotherSeg.Assign(ATempSeg);
                    TempSegList.Add(AnotherSeg);
                    AdjustValues(ATempSeg.FSeg[1].x, IntSect.x, ATempSeg.FSeg[1].y,
                      ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                    AdjustValues(AnotherSeg.FSeg[2].x, IntSect.x, AnotherSeg.FSeg[2].y,
                      AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                  end
                end;
              end;
              if TempSegList.Count = 1 then
              begin
                Exit;
              end;
              for SegIndex := TempSegList.Count - 1 downto 0 do
              begin
                ATempSeg := TempSegList[SegIndex];
                IntSect.x := (ATempSeg.FSeg[1].x + ATempSeg.FSeg[2].x)/2;
                if IntSect.x < CenterX then
                begin
                  Continue;
                end;
                IntSect.y := (ATempSeg.FSeg[1].y + ATempSeg.FSeg[2].y)/2;
                ASeg := BottomSeg;
                AdjustValues(ASeg[1].x, IntSect.x, ASeg[1].y,
                  ASeg[2].x, ASeg[2].y);
                if IntSect.y > ASeg[2].y then
                begin
                  TempSegList.Delete(SegIndex);
                end;
              end;
              ASegment.SetSubsegmentLength(TempSegList.Count);
              for SegIndex := 0 to TempSegList.Count - 1 do
              begin
                ATempSeg := TempSegList[SegIndex];
                ASegment.SubSegments[SegIndex] := ATempSeg.FSeg;
              end;
            finally
              TempSegList.Free;
            end;
          end
          else
          begin
            GetCenterX;
            if (ASegment.X1 = CenterX) and (ASegment.X2 = CenterX) then
            begin
              ASegment.LgrEdge := True;
            end
            else if (ASegment.X1 >= CenterX) and (ASegment.X2 >= CenterX) then
            begin
              FreeAndNil(ASegment);
              Exit;
            end;
            if (ASegment.X1 > CenterX) then
            begin
              ASeg := ASegment.Segment;
              AdjustValues(ASeg[2].x, CenterX, ASeg[2].y,
                ASeg[1].x, ASeg[1].y);
              ASegment.SetSubsegmentLength(1);
              ASegment.SubSegments[0] := ASeg;
            end
            else if (ASegment.X2 > CenterX) then
            begin
              ASeg := ASegment.Segment;
              AdjustValues(ASeg[1].x, CenterX, ASeg[1].y,
                ASeg[2].x, ASeg[2].y);
              ASegment.SetSubsegmentLength(1);
              ASegment.SubSegments[0] := ASeg;
            end;
          end;
        end
        else if ASegment.Col = ChildModel.LastCol then
        begin
          if (ASegment.Layer = LastLayer)
            and (LastLayer <> PhastModel.ModflowGrid.LayerCount-1) then
          begin
            GetChildModelBottom;
            if (ASegment.X1 = CenterX) and (ASegment.X2 = CenterX) then
            begin
              ASegment.LgrEdge := True;
              Exit;
            end
            else if (ASegment.X1 >= CenterX) and (ASegment.X2 >= CenterX) then
            begin
              Exit;
            end;
            TempSegList := TObjectList.Create;
            try
              ASeg := ASegment.Segment;
              ATempSeg := TTempSeg.Create;
              TempSegList.Add(ATempSeg);
              ATempSeg.FSeg := ASeg;
              if (ASegment.X1 > CenterX) and (ASegment.X2 <= CenterX) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  AnotherSeg := TTempSeg.Create;
                  AnotherSeg.Assign(ATempSeg);
                  TempSegList.Add(AnotherSeg);
                  AdjustValues(ATempSeg.FSeg[2].x, CenterX, ATempSeg.FSeg[2].y,
                    ATempSeg.FSeg[1].x, ATempSeg.FSeg[1].y);
                  AdjustValues(AnotherSeg.FSeg[1].x, CenterX, AnotherSeg.FSeg[1].y,
                    AnotherSeg.FSeg[2].x, AnotherSeg.FSeg[2].y);
                end;
              end;
              if (ASegment.X2 > CenterX) and (ASegment.X1 <= CenterX) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  if (ATempSeg.FSeg[2].x > CenterX) and (ATempSeg.FSeg[1].x <= CenterX) then
                  begin
                    AnotherSeg := TTempSeg.Create;
                    AnotherSeg.Assign(ATempSeg);
                    TempSegList.Add(AnotherSeg);
                    AdjustValues(ATempSeg.FSeg[1].x, CenterX, ATempSeg.FSeg[1].y,
                      ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                    AdjustValues(AnotherSeg.FSeg[2].x, CenterX, AnotherSeg.FSeg[2].y,
                      AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                  end;
                end;
              end;
              BottomSeg[1] := Left;
              BottomSeg[2] := Center;
              if Intersect(ASegment.Segment, BottomSeg, IntSect.x, IntSect.y) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  if Intersect(ATempSeg.FSeg, BottomSeg, IntSect.x, IntSect.y) then
                  begin
                    AnotherSeg := TTempSeg.Create;
                    AnotherSeg.Assign(ATempSeg);
                    TempSegList.Add(AnotherSeg);
                    AdjustValues(ATempSeg.FSeg[1].x, IntSect.x, ATempSeg.FSeg[1].y,
                      ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                    AdjustValues(AnotherSeg.FSeg[2].x, IntSect.x, AnotherSeg.FSeg[2].y,
                      AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                  end
                end;
              end;
              if TempSegList.Count = 1 then
              begin
                Exit;
              end;
              for SegIndex := TempSegList.Count - 1 downto 0 do
              begin
                ATempSeg := TempSegList[SegIndex];
                IntSect.x := (ATempSeg.FSeg[1].x + ATempSeg.FSeg[2].x)/2;
                if IntSect.x > CenterX then
                begin
                  Continue;
                end;
                IntSect.y := (ATempSeg.FSeg[1].y + ATempSeg.FSeg[2].y)/2;
                ASeg := BottomSeg;
                AdjustValues(ASeg[1].x, IntSect.x, ASeg[1].y,
                  ASeg[2].x, ASeg[2].y);
                if IntSect.y > ASeg[2].y then
                begin
                  TempSegList.Delete(SegIndex);
                end;
              end;
              ASegment.SetSubsegmentLength(TempSegList.Count);
              for SegIndex := 0 to TempSegList.Count - 1 do
              begin
                ATempSeg := TempSegList[SegIndex];
                ASegment.SubSegments[SegIndex] := ATempSeg.FSeg;
              end;
            finally
              TempSegList.Free;
            end;
          end
          else
          begin
            GetCenterX;
            if (ASegment.X1 = CenterX) and (ASegment.X2 = CenterX) then
            begin
              ASegment.LgrEdge := True;
              Exit;
            end
            else if (ASegment.X1 <= CenterX) and (ASegment.X2 <= CenterX) then
            begin
              FreeAndNil(ASegment);
              Exit;
            end;
            if (ASegment.X1 < CenterX) then
            begin
              ASeg := ASegment.Segment;
              AdjustValues(ASeg[2].x, CenterX, ASeg[2].y,
                ASeg[1].x, ASeg[1].y);
              ASegment.SetSubsegmentLength(1);
              ASegment.SubSegments[0] := ASeg;
            end
            else if (ASegment.X2 < CenterX) then
            begin
              ASeg := ASegment.Segment;
              AdjustValues(ASeg[1].x, CenterX, ASeg[1].y,
                ASeg[2].x, ASeg[2].y);
              ASegment.SetSubsegmentLength(1);
              ASegment.SubSegments[0] := ASeg;
            end;
          end;
        end
        else if (ASegment.Layer = LastLayer)
          and (LastLayer <> PhastModel.ModflowGrid.LayerCount-1) then
        begin
          GetChildModelBottom;
          TempSegList := TObjectList.Create;
          try
            ASeg := ASegment.Segment;
            ATempSeg := TTempSeg.Create;
            TempSegList.Add(ATempSeg);
            ATempSeg.FSeg := ASeg;

            BottomSeg[1] := Left;
            BottomSeg[2] := Center;
            if Intersect(ASeg, BottomSeg, IntSect.x, IntSect.y) then
            begin
              for SegIndex := TempSegList.Count - 1 downto 0 do
              begin
                ATempSeg := TempSegList[SegIndex];
                AnotherSeg := TTempSeg.Create;
                AnotherSeg.Assign(ATempSeg);
                TempSegList.Add(AnotherSeg);
                AdjustValues(ATempSeg.FSeg[1].x, IntSect.x, ATempSeg.FSeg[1].y,
                  ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                AdjustValues(AnotherSeg.FSeg[2].x, IntSect.x, AnotherSeg.FSeg[2].y,
                  AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
              end;
            end;
            BottomSeg[1] := Right;
            if Intersect(ASeg, BottomSeg, IntSect.x, IntSect.y) then
            begin
              for SegIndex := TempSegList.Count - 1 downto 0 do
              begin
                ATempSeg := TempSegList[SegIndex];
                if Intersect(ATempSeg.FSeg, BottomSeg, IntSect.x, IntSect.y) then
                begin
                  AnotherSeg := TTempSeg.Create;
                  AnotherSeg.Assign(ATempSeg);
                  TempSegList.Add(AnotherSeg);
                  AdjustValues(ATempSeg.FSeg[1].x, IntSect.x, ATempSeg.FSeg[1].y,
                    ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                  AdjustValues(AnotherSeg.FSeg[2].x, IntSect.x, AnotherSeg.FSeg[2].y,
                    AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                end;
              end;
            end;
            
            ASeg[1] := Center;
            for SegIndex := TempSegList.Count - 1 downto 0 do
            begin
              ATempSeg := TempSegList[SegIndex];
              IntSect.x := (ATempSeg.FSeg[1].x + ATempSeg.FSeg[2].x)/2;
              IntSect.y := (ATempSeg.FSeg[1].y + ATempSeg.FSeg[2].y)/2;
              if IntSect.x < CenterX then
              begin
                ASeg[2] := Left;
              end
              else
              begin
                ASeg[2] := Right;
              end;
              AdjustValues(ASeg[1].x, IntSect.x, ASeg[1].y,
                ASeg[2].x, ASeg[2].y);
              if IntSect.y > ASeg[2].y then
              begin
                TempSegList.Delete(SegIndex);
              end;
            end;
            if TempSegList.Count = 0 then
            begin
              FreeAndNil(ASegment);
              Exit;
            end;
            ASegment.SetSubsegmentLength(TempSegList.Count);
            for SegIndex := 0 to TempSegList.Count - 1 do
            begin
              ATempSeg := TempSegList[SegIndex];
              ASegment.SubSegments[SegIndex] := ATempSeg.FSeg;
            end;
          finally
            TempSegList.Free;
          end;
        end
        else
        begin
          FreeAndNil(ASegment);
        end;
      end;
    vdSide:
      begin
        if ASegment.Row = ChildModel.FirstRow then
        begin
          if (ASegment.Layer = LastLayer)
            and (LastLayer <> PhastModel.ModflowGrid.LayerCount-1) then
          begin
            GetChildModelBottom;
            if (ASegment.X1 = CenterX) and (ASegment.X2 = CenterX) then
            begin
              ASegment.LgrEdge := True;
              Exit;
            end
            else if (ASegment.X1 <= CenterX) and (ASegment.X2 <= CenterX) then
            begin
              Exit;
            end;
            TempSegList := TObjectList.Create;
            try
              ASeg := ASegment.Segment;
              ATempSeg := TTempSeg.Create;
              TempSegList.Add(ATempSeg);
              ATempSeg.FSeg := ASeg;
              if (ASegment.X1 > CenterX) and (ASegment.X2 <= CenterX) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  AnotherSeg := TTempSeg.Create;
                  AnotherSeg.Assign(ATempSeg);
                  TempSegList.Add(AnotherSeg);
                  AdjustValues(ATempSeg.FSeg[2].x, CenterX, ATempSeg.FSeg[2].y,
                    ATempSeg.FSeg[1].x, ATempSeg.FSeg[1].y);
                  AdjustValues(AnotherSeg.FSeg[1].x, CenterX, AnotherSeg.FSeg[1].y,
                    AnotherSeg.FSeg[2].x, AnotherSeg.FSeg[2].y);
                end;
              end;
              if (ASegment.X2 > CenterX) and (ASegment.X1 <= CenterX) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  if (ATempSeg.FSeg[2].x > CenterX) and (ATempSeg.FSeg[1].x <= CenterX) then
                  begin
                    AnotherSeg := TTempSeg.Create;
                    AnotherSeg.Assign(ATempSeg);
                    TempSegList.Add(AnotherSeg);
                    AdjustValues(ATempSeg.FSeg[1].x, CenterX, ATempSeg.FSeg[1].y,
                      ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                    AdjustValues(AnotherSeg.FSeg[2].x, CenterX, AnotherSeg.FSeg[2].y,
                      AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                  end;
                end;
              end;
              BottomSeg[1] := Left;
              BottomSeg[2] := Center;
              if Intersect(ASegment.Segment, BottomSeg, IntSect.x, IntSect.y) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  if Intersect(ATempSeg.FSeg, BottomSeg, IntSect.x, IntSect.y) then
                  begin
                    AnotherSeg := TTempSeg.Create;
                    AnotherSeg.Assign(ATempSeg);
                    TempSegList.Add(AnotherSeg);
                    AdjustValues(ATempSeg.FSeg[1].x, IntSect.x, ATempSeg.FSeg[1].y,
                      ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                    AdjustValues(AnotherSeg.FSeg[2].x, IntSect.x, AnotherSeg.FSeg[2].y,
                      AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                  end
                end;
              end;
              if TempSegList.Count = 1 then
              begin
                Exit;
              end;
              for SegIndex := TempSegList.Count - 1 downto 0 do
              begin
                ATempSeg := TempSegList[SegIndex];
                IntSect.x := (ATempSeg.FSeg[1].x + ATempSeg.FSeg[2].x)/2;
                if IntSect.x > CenterX then
                begin
                  Continue;
                end;
                IntSect.y := (ATempSeg.FSeg[1].y + ATempSeg.FSeg[2].y)/2;
                ASeg := BottomSeg;
                AdjustValues(ASeg[1].x, IntSect.x, ASeg[1].y,
                  ASeg[2].x, ASeg[2].y);
                if IntSect.y > ASeg[2].y then
                begin
                  TempSegList.Delete(SegIndex);
                end;
              end;
              ASegment.SetSubsegmentLength(TempSegList.Count);
              for SegIndex := 0 to TempSegList.Count - 1 do
              begin
                ATempSeg := TempSegList[SegIndex];
                ASegment.SubSegments[SegIndex] := ATempSeg.FSeg;
              end;
            finally
              TempSegList.Free;
            end
          end
          else
          begin
            GetCenterX;
            if (ASegment.X1 = CenterX) and (ASegment.X2 = CenterX) then
            begin
              ASegment.LgrEdge := True;
              Exit;
            end
            else if (ASegment.X1 >= CenterX) and (ASegment.X2 >= CenterX) then
            begin
              FreeAndNil(ASegment);
              Exit;
            end;
            if (ASegment.X1 > CenterX) then
            begin
              ASeg := ASegment.Segment;
              AdjustValues(ASeg[2].x, CenterX, ASeg[2].y,
                ASeg[1].x, ASeg[1].y);
              ASegment.SetSubsegmentLength(1);
              ASegment.SubSegments[0] := ASeg;
            end
            else if (ASegment.X2 > CenterX) then
            begin
              ASeg := ASegment.Segment;
              AdjustValues(ASeg[1].x, CenterX, ASeg[1].y,
                ASeg[2].x, ASeg[2].y);
              ASegment.SetSubsegmentLength(1);
              ASegment.SubSegments[0] := ASeg;
            end;
          end;
        end
        else if ASegment.Row = ChildModel.LastRow then
        begin
          if (ASegment.Layer = LastLayer)
            and (LastLayer <> PhastModel.ModflowGrid.LayerCount-1) then
          begin
            GetChildModelBottom;
            if (ASegment.X1 = CenterX) and (ASegment.X2 = CenterX) then
            begin
              ASegment.LgrEdge := True;
              Exit;
            end
            else if (ASegment.X1 >= CenterX) and (ASegment.X2 >= CenterX) then
            begin
              Exit;
            end;
            TempSegList := TObjectList.Create;
            try
              ASeg := ASegment.Segment;
              ATempSeg := TTempSeg.Create;
              TempSegList.Add(ATempSeg);
              ATempSeg.FSeg := ASeg;
              if (ASegment.X1 > CenterX) and (ASegment.X2 <= CenterX) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  AnotherSeg := TTempSeg.Create;
                  AnotherSeg.Assign(ATempSeg);
                  TempSegList.Add(AnotherSeg);
                  AdjustValues(ATempSeg.FSeg[2].x, CenterX, ATempSeg.FSeg[2].y,
                    ATempSeg.FSeg[1].x, ATempSeg.FSeg[1].y);
                  AdjustValues(AnotherSeg.FSeg[1].x, CenterX, AnotherSeg.FSeg[1].y,
                    AnotherSeg.FSeg[2].x, AnotherSeg.FSeg[2].y);
                end;
              end;
              if (ASegment.X2 > CenterX) and (ASegment.X1 <= CenterX) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  if (ATempSeg.FSeg[2].x > CenterX) and (ATempSeg.FSeg[1].x <= CenterX) then
                  begin
                    AnotherSeg := TTempSeg.Create;
                    AnotherSeg.Assign(ATempSeg);
                    TempSegList.Add(AnotherSeg);
                    AdjustValues(ATempSeg.FSeg[1].x, CenterX, ATempSeg.FSeg[1].y,
                      ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                    AdjustValues(AnotherSeg.FSeg[2].x, CenterX, AnotherSeg.FSeg[2].y,
                      AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                  end;
                end;
              end;
              BottomSeg[1] := Right;
              BottomSeg[2] := Center;
              if Intersect(ASegment.Segment, BottomSeg, IntSect.x, IntSect.y) then
              begin
                for SegIndex := TempSegList.Count - 1 downto 0 do
                begin
                  ATempSeg := TempSegList[SegIndex];
                  if Intersect(ATempSeg.FSeg, BottomSeg, IntSect.x, IntSect.y) then
                  begin
                    AnotherSeg := TTempSeg.Create;
                    AnotherSeg.Assign(ATempSeg);
                    TempSegList.Add(AnotherSeg);
                    AdjustValues(ATempSeg.FSeg[1].x, IntSect.x, ATempSeg.FSeg[1].y,
                      ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                    AdjustValues(AnotherSeg.FSeg[2].x, IntSect.x, AnotherSeg.FSeg[2].y,
                      AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                  end
                end;
              end;
              if TempSegList.Count = 1 then
              begin
                Exit;
              end;
              for SegIndex := TempSegList.Count - 1 downto 0 do
              begin
                ATempSeg := TempSegList[SegIndex];
                IntSect.x := (ATempSeg.FSeg[1].x + ATempSeg.FSeg[2].x)/2;
                if IntSect.x < CenterX then
                begin
                  Continue;
                end;
                IntSect.y := (ATempSeg.FSeg[1].y + ATempSeg.FSeg[2].y)/2;
                ASeg := BottomSeg;
                AdjustValues(ASeg[1].x, IntSect.x, ASeg[1].y,
                  ASeg[2].x, ASeg[2].y);
                if IntSect.y > ASeg[2].y then
                begin
                  TempSegList.Delete(SegIndex);
                end;
              end;
              ASegment.SetSubsegmentLength(TempSegList.Count);
              for SegIndex := 0 to TempSegList.Count - 1 do
              begin
                ATempSeg := TempSegList[SegIndex];
                ASegment.SubSegments[SegIndex] := ATempSeg.FSeg;
              end;
            finally
              TempSegList.Free;
            end
          end
          else
          begin
            GetCenterX;
            if (ASegment.X1 = CenterX) and (ASegment.X2 = CenterX) then
            begin
              ASegment.LgrEdge := true;
              Exit;
            end
            else if (ASegment.X1 <= CenterX) and (ASegment.X2 <= CenterX) then
            begin
              FreeAndNil(ASegment);
              Exit;
            end;
            if (ASegment.X1 < CenterX) then
            begin
              ASeg := ASegment.Segment;
              AdjustValues(ASeg[2].x, CenterX, ASeg[2].y,
                ASeg[1].x, ASeg[1].y);
              ASegment.SetSubsegmentLength(1);
              ASegment.SubSegments[0] := ASeg;
            end
            else if (ASegment.X2 < CenterX) then
            begin
              ASeg := ASegment.Segment;
              AdjustValues(ASeg[1].x, CenterX, ASeg[1].y,
                ASeg[2].x, ASeg[2].y);
              ASegment.SetSubsegmentLength(1);
              ASegment.SubSegments[0] := ASeg;
            end;
          end;
        end
        else if (ASegment.Layer = LastLayer)
          and (LastLayer <> PhastModel.ModflowGrid.LayerCount-1) then
        begin
          GetChildModelBottom;

          ASeg := ASegment.Segment;

          BottomSeg[1] := Left;
          BottomSeg[2] := Center;

          TempSegList := TObjectList.Create;
          try
            case FScreenObject.ViewDirection of
              vdFront:
                begin
                  ATempSeg := TTempSeg.Create;
                  TempSegList.Add(ATempSeg);
                  ATempSeg.FSeg := ASeg;

                  if Intersect(ASeg,BottomSeg, IntSect.x, IntSect.y)  then
                  begin
                    for SegIndex := TempSegList.Count - 1 downto 0 do
                    begin
                      ATempSeg := TempSegList[SegIndex];
                      AnotherSeg := TTempSeg.Create;
                      AnotherSeg.Assign(ATempSeg);
                      TempSegList.Add(AnotherSeg);
                      AdjustValues(ATempSeg.FSeg[1].x, IntSect.x,
                        ATempSeg.FSeg[1].y, ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                      AdjustValues(AnotherSeg.FSeg[2].x, IntSect.x,
                        AnotherSeg.FSeg[2].y, AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                    end;
                  end;

                  BottomSeg[1] := Right;
                  if Intersect(ASeg,BottomSeg, IntSect.x, IntSect.y) then
                  begin
                    for SegIndex := TempSegList.Count - 1 downto 0 do
                    begin
                      ATempSeg := TempSegList[SegIndex];
                      if Intersect(ATempSeg.FSeg,BottomSeg, IntSect.x, IntSect.y)  then
                      begin
                        AnotherSeg := TTempSeg.Create;
                        AnotherSeg.Assign(ATempSeg);
                        TempSegList.Add(AnotherSeg);
                        AdjustValues(ATempSeg.FSeg[1].x, IntSect.x,
                          ATempSeg.FSeg[1].y, ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                        AdjustValues(AnotherSeg.FSeg[2].x, IntSect.x,
                          AnotherSeg.FSeg[2].y, AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                      end;
                    end;
                  end;

                  TestSingleSegment;
                  if ASegment = nil then
                  begin
                    Exit;
                  end;

                  DeleteInvalidSegments;

                end;
              vdSide:
                begin
                  ATempSeg := TTempSeg.Create;
                  TempSegList.Add(ATempSeg);
                  ATempSeg.FSeg := ASeg;

                  if Intersect(ASeg,BottomSeg, IntSect.x, IntSect.y)  then
                  begin
                    for SegIndex := TempSegList.Count - 1 downto 0 do
                    begin
                      ATempSeg := TempSegList[SegIndex];
                      AnotherSeg := TTempSeg.Create;
                      AnotherSeg.Assign(ATempSeg);
                      TempSegList.Add(AnotherSeg);
                      AdjustValues(ATempSeg.FSeg[1].x, IntSect.x,
                        ATempSeg.FSeg[1].y, ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                      AdjustValues(AnotherSeg.FSeg[2].x, IntSect.x,
                        AnotherSeg.FSeg[2].y, AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                    end;
                  end;

                  BottomSeg[1] := Right;
                  if Intersect(ASeg,BottomSeg, IntSect.x, IntSect.y)  then
                  begin
                    for SegIndex := TempSegList.Count - 1 downto 0 do
                    begin
                      ATempSeg := TempSegList[SegIndex];
                      if Intersect(ATempSeg.FSeg,BottomSeg, IntSect.x, IntSect.y)  then
                      begin
                        AnotherSeg := TTempSeg.Create;
                        AnotherSeg.Assign(ATempSeg);
                        TempSegList.Add(AnotherSeg);
                        AdjustValues(ATempSeg.FSeg[1].x, IntSect.x,
                          ATempSeg.FSeg[1].y, ATempSeg.FSeg[2].x, ATempSeg.FSeg[2].y);
                        AdjustValues(AnotherSeg.FSeg[2].x, IntSect.x,
                          AnotherSeg.FSeg[2].y, AnotherSeg.FSeg[1].x, AnotherSeg.FSeg[1].y);
                      end;
                    end;
                  end;

                  TestSingleSegment;
                  if ASegment = nil then
                  begin
                    Exit;
                  end;

                  DeleteInvalidSegments;
                end;
              else Assert(False);
            end;

            if TempSegList.Count = 0 then
            begin
              FreeAndNil(ASegment);
              Exit;
            end;

            ASegment.SetSubsegmentLength(TempSegList.Count);
            for SegIndex := 0 to TempSegList.Count - 1 do
            begin
              ATempSeg := TempSegList[SegIndex];
              ASegment.SubSegments[SegIndex] := ATempSeg.FSeg;
            end;

          finally
            TempSegList.Free;
          end;
        end
        else
        begin
          FreeAndNil(ASegment);
        end;
      end;
    else Assert(False);
  end;

end;

procedure TModflowDelegate.UpdateSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
var
  RotatedPoints: TEdgePointArray;
  GridMaxHorizontal, GridMinHorizontal, GridMaxZ, GridMinZ: real;
  Index: integer;
  APoint, PreviousPoint {, NewPoint}: TEdgePoint;
  HorizontalIndex, LayerIndex: integer;
  PerpendicularIndex: integer;
  ASegment: TCellElementSegment;
  PerpendicularLimit: integer;
  FirstHorizontalIndex, LastHorizontalIndex: integer;
  TempPoints1, TempPoints2: TEdgePointArray;
  NextHorizontalIndex, NextLayer: array [0..11] of integer;
  PointIndex: integer;
  Point1, Point2: TEdgePoint;
  CellOutlines: T2DRealPointArray;
  MaxXIndex, MaxYIndex: integer;
  Y: real;
  FirstPoint, SecondPoint: TPoint2D;
  PointsOnEdge: TRealPointArray;
  EdgeIndex: Integer;
  PointCount: Integer;
  FirstPointInCell, TestPoint: TEdgePoint;
  MinDistance: real;
  FoundEdgePoint: boolean;
  LayerIndicator: integer;
  ObjectSegment, EdgeSegment: TSegment2D;
  Int: TPoint2D;
  EpsilonX, EpsilonY: Real;
  OtherEdgeAssigned: Boolean;
  CornerPoint: TPoint2D;
  SegmentDirection: TSegmentDirection;
  HorizontalLimit: Integer;
  PointDistance: Real;
  SectionIndex: integer;
  EndSection: boolean;
  SecIndex: integer;
  IncrementedSectionIndex: Boolean;
  SegList: TCellElementSegmentList;
  Grid: TCustomModelGrid;
  procedure AssignEpsilon;
  var
    MinX, MaxX, MinY, MaxY: Real;
    PointIndex: integer;
  begin
    if PointCount > 0 then
    begin
      MinX := TempPoints1[0].X;
      MaxX := TempPoints1[0].X;
      MinY := TempPoints1[0].Y;
      MaxY := TempPoints1[0].Y;
      for PointIndex := 1 to PointCount - 1 do
      begin
        if MinX > TempPoints1[PointIndex].X then
        begin
          MinX := TempPoints1[PointIndex].X;
        end
        else if MaxX < TempPoints1[PointIndex].X then
        begin
          MaxX := TempPoints1[PointIndex].X;
        end;
        if MinY > TempPoints1[PointIndex].Y then
        begin
          MinY := TempPoints1[PointIndex].Y;
        end
        else if MaxY < TempPoints1[PointIndex].Y then
        begin
          MaxY := TempPoints1[PointIndex].Y;
        end;
      end;
      EpsilonX := (MaxX-MinX)/10000;
      EpsilonY := (MaxY-MinY)/10000;
      EpsilonX := Max(1e-14, EpsilonX);
      EpsilonY := Max(1e-14, EpsilonY);
    end
    else
    begin
      EpsilonX := 0.0;
      EpsilonY := 0.0;
    end;
  end;
  function HandleTopLeftCorner: boolean;
  begin
    CornerPoint := OutlineVertex(HorizontalIndex, LayerIndex, 0,
      CellOutlines);
    result := (TempPoints1[PointCount].X = CornerPoint.X)
      and (TempPoints1[PointCount].Y = CornerPoint.Y);
    if result then
    begin
      Case SegmentDirection of
        sdUpRight:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex -1;
          end;
        sdUpLeft:
          begin
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex -1;
          end;
        sdUp:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex -1;
          end;
        sdDownRight:
          begin
            // special case
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex;
          end;
        sdDownLeft:
          begin
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex;
          end;
        sdDown:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex+1;
          end
      End;
    end
  end;
  function HandleTopRightCorner: boolean;
  begin
    // Top right corner
    CornerPoint := OutlineVertex(HorizontalIndex, LayerIndex, 2,
      CellOutlines);
    result := (TempPoints1[PointCount].X = CornerPoint.X)
      and (TempPoints1[PointCount].Y = CornerPoint.Y);
    if result then
    begin
      Case SegmentDirection of
        sdUpRight:
          begin
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex -1;
          end;
        sdUpLeft:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex -1;
          end;
        sdUp:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex -1;
          end;
        sdDownRight:
          begin
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex;
          end;
        sdDownLeft:
          begin
            // special case
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex;
          end;
        sdDown:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex+1;
          end
      End;
    end
  end;
  function  HandleBottomRightCorner: boolean;
  begin
    // bottom right corner
    CornerPoint := OutlineVertex(HorizontalIndex, LayerIndex, 3,
      CellOutlines);
    result := (TempPoints1[PointCount].X = CornerPoint.X)
      and (TempPoints1[PointCount].Y = CornerPoint.Y);
    if result then
    begin
      Case SegmentDirection of
        sdUpRight:
          begin
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex;
          end;
        sdUpLeft:
          begin
            // special case
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex;
          end;
        sdUp:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex-1;
          end;
        sdDownRight:
          begin
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex+1;
          end;
        sdDownLeft:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex+1;
          end;
        sdDown:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex+1;
          end
      End;
    end
  end;
  function HandleBottomLeftCorner: boolean;
  begin
    // bottom left corner
    CornerPoint := OutlineVertex(HorizontalIndex, LayerIndex, 5,
      CellOutlines);
    result := (TempPoints1[PointCount].X = CornerPoint.X)
      and (TempPoints1[PointCount].Y = CornerPoint.Y);
    if result then
    begin
      Case SegmentDirection of
        sdUpRight:
          begin
            // special case
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex;
          end;
        sdUpLeft:
          begin
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex;
          end;
        sdUp:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex-1;
          end;
        sdDownRight:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex+1;
          end;
        sdDownLeft:
          begin
            case FScreenObject.ViewDirection of
              vdTop: Assert(False);
              vdFront: NextHorizontalIndex[PointCount] := HorizontalIndex-1;
              vdSide: NextHorizontalIndex[PointCount] := HorizontalIndex+1;
              else Assert(False);
            end;
            NextLayer[PointCount] := LayerIndex+1;
          end;
        sdDown:
          begin
            NextHorizontalIndex[PointCount] := HorizontalIndex;
            NextLayer[PointCount] := LayerIndex+1;
          end
      End;
    end
  end;
begin
  Grid := (AModel as TCustomModel).Grid;
  FScreenObject.FSegments.Clear;
  Assert(EvaluatedAt = eaBlocks);

  GetHorizontalLimits(Grid, HorizontalLimit, PerpendicularLimit);
  SetLength(TempPoints1, 12);

  GetRotatedPoints(RotatedPoints);

  GetHorizontalLimitsOfGrid(Grid, GridMinHorizontal, GridMaxHorizontal);
  GetVerticalLimitsOfGrid(Grid, GridMinZ, GridMaxZ);

  // loop over vertices
  SectionIndex := 0;
  for Index := 0 to FScreenObject.Count - 1 do
  begin
    if Index > FScreenObject.SectionStart[SectionIndex] then
    begin
      PreviousPoint := APoint;
    end;
    for PerpendicularIndex := 0 to PerpendicularLimit do
    begin
      CellOutlines := GetCellOutlines(Grid, PerpendicularIndex);
      Assert(SectionIndex < FScreenObject.SectionCount);

      APoint := RotatedPoints[Index];
      if (SectionIndex < FScreenObject.SectionCount)
        and (FScreenObject.SectionLength[SectionIndex] = 1) then
      begin
        if (APoint.X >= GridMinHorizontal) and (APoint.X <= GridMaxHorizontal)
          and (APoint.Y >= GridMinZ) and (APoint.Y <= GridMaxZ) then
        begin
          HorizontalIndex := GetHorizontalIndexFromLocation(APoint.X, Grid);

          LayerIndex := FindLayer(HorizontalIndex, APoint, CellOutlines, False);
          if (LayerIndex >= 0) and (LayerIndex < Grid.LayerCount) then
          begin
            // point segment, front or side views, elements, MODFLOW.
            CreateSegment(APoint, APoint, LayerIndex, PerpendicularIndex,
              HorizontalIndex, Index, SectionIndex, ASegment);
            AddFrontSideSubSegments(ASegment, Grid.Model, CellOutlines);
            if ASegment <> nil then
            begin
              FScreenObject.FSegments.Add(ASegment);
            end;
          end;
        end;
        if PerpendicularIndex = PerpendicularLimit then
        begin
          Inc(SectionIndex);
        end;
      end
      else
      begin
        EndSection := False;
        // get a line segment and identify the cells along it.
        if (Index = FScreenObject.SectionStart[SectionIndex]) then
        begin
          Continue;
        end;
        IncrementedSectionIndex := False;
        if (Index = FScreenObject.SectionEnd[SectionIndex]) then
        begin
          Inc(SectionIndex);
          EndSection := True;
          IncrementedSectionIndex := True;
        end;

        try
          FirstPointInCell := PreviousPoint;
          FirstHorizontalIndex := GetColOrRow(Grid, PreviousPoint,
            GridMinHorizontal, GridMaxHorizontal);
          LastHorizontalIndex := GetColOrRow(Grid, APoint,
            GridMinHorizontal, GridMaxHorizontal);

          // If the line segment is completely outside the grid,
          // skip this segment.
          if (FirstHorizontalIndex < 0) and (LastHorizontalIndex < 0) then
          begin
            Continue;
          end;
          if (FirstHorizontalIndex >= HorizontalLimit)
            and (LastHorizontalIndex >= HorizontalLimit) then
          begin
            Continue;
          end;

          MaxXIndex := Length(CellOutlines)-1;
          MaxYIndex := Length(CellOutlines[0])-1;
          // Identify first cell intersected by segment - if there is one.
          if FirstHorizontalIndex < 0 then
          begin
            FirstHorizontalIndex := 0;
            if LastHorizontalIndex >= HorizontalLimit then
            begin
              LastHorizontalIndex := HorizontalLimit -1;
            end;
            // Check if the segment intersects the edge and HorizontalIndex = 0.
            // If if doesn't, check the
            // top or bottom surface (depending on whether the segment passes
            // above or below the edge.
            EdgeSegment := EquateSegment(CellOutlines[0,0],
              CellOutlines[0,MaxYIndex]);
            ObjectSegment := EquateSegment(PreviousPoint.X, PreviousPoint.Y,
              APoint.X, APoint.Y);
            Y := IntersectionPoint(EdgeSegment, ObjectSegment).Y;
            if Y > CellOutlines[0,0].Y then
            begin
              // Segment goes above the top of the edge
              if not FindIntersectionSurface(FirstHorizontalIndex,
                LastHorizontalIndex, 0, PreviousPoint, APoint,
                FirstPointInCell, CellOutlines, HorizontalIndex) then
              begin
                // It never intersects the top surface so go on to the
                // next segment in the TScreenObject
                Continue;
              end;
              LayerIndex := 0;
            end
            else if Y < CellOutlines[0,MaxYIndex].Y then
            begin
              // Segment goes below the bottom of the edge
              if not FindIntersectionSurface(FirstHorizontalIndex,
                LastHorizontalIndex, MaxYIndex, PreviousPoint, APoint,
                FirstPointInCell, CellOutlines, HorizontalIndex) then
              begin
                // It never intersects the bottom surface so go on to the
                // next segment in the TScreenObject
                Continue;
              end;
              LayerIndex := Grid.LayerCount -1;
            end
            else
            begin
              // Segment intersects the edge
              HorizontalIndex := 0;
              LayerIndex := FindLayerOnEdge(APoint, PreviousPoint,
                FirstPointInCell, CellOutlines, 0);
            end;
          end
          else if FirstHorizontalIndex >= HorizontalLimit then
          begin
            FirstHorizontalIndex := HorizontalLimit -1;
            if LastHorizontalIndex < 0 then
            begin
              LastHorizontalIndex := 0;
            end;
            // Check if the segment intersects the edge
            // at HorizontalIndex = HorizontalLimit-1.
            // If if doesn't, check the
            // top or bottom surface (depending on whether the segment passes
            // above or below the edge.
            EdgeSegment := EquateSegment(CellOutlines[MaxXIndex,0],
              CellOutlines[MaxXIndex,MaxYIndex]);
            ObjectSegment := EquateSegment(PreviousPoint.X, PreviousPoint.Y,
              APoint.X, APoint.Y);
            Y := IntersectionPoint(EdgeSegment, ObjectSegment).Y;
            if Y > CellOutlines[MaxXIndex,0].Y then
            begin
              // Segment goes above the top of the edge
              if not FindIntersectionSurface(FirstHorizontalIndex,
                LastHorizontalIndex, 0, PreviousPoint, APoint,
                FirstPointInCell, CellOutlines, HorizontalIndex) then
              begin
                // It never intersects the top surface so go on to the
                // next segment in the TScreenObject
                Continue;
              end;
              LayerIndex := 0;
            end
            else if Y < CellOutlines[MaxXIndex,MaxYIndex].Y then
            begin
              // Segment goes below the bottom of the edge
              if not FindIntersectionSurface(FirstHorizontalIndex,
                LastHorizontalIndex, MaxYIndex, PreviousPoint, APoint,
                FirstPointInCell, CellOutlines, HorizontalIndex) then
              begin
                // It never intersects the bottom surface so go on to the
                // next segment in the TScreenObject
                Continue;
              end;
              LayerIndex := Grid.LayerCount -1;
            end
            else
            begin
              // Segment intersects the edge
              HorizontalIndex := Grid.ColumnCount-1;
              LayerIndex := FindLayerOnEdge(APoint, PreviousPoint,
                FirstPointInCell, CellOutlines, HorizontalIndex*2+2);
            end;
          end
          else
          begin
            // The first point is inside the left and right boundaries
            // of the grid.  However, it may be above or below the grid.
            if LastHorizontalIndex >= HorizontalLimit then
            begin
              LastHorizontalIndex := HorizontalLimit -1;
            end
            else if LastHorizontalIndex < 0 then
            begin
              LastHorizontalIndex := 0;
            end;
            // identify the layer for the column or row containg the first point
            LayerIndex := FindLayer(FirstHorizontalIndex, PreviousPoint,
              CellOutlines, APoint.Y > PreviousPoint.Y);
            if LayerIndex < 0 then
            begin
              // First point is above the top of the grid.
              if not FindIntersectionSurface(FirstHorizontalIndex,
                LastHorizontalIndex, 0, PreviousPoint, APoint,
                FirstPointInCell, CellOutlines, HorizontalIndex) then
              begin
                // It never intersects the top surface so go on to the
                // next segment in the TScreenObject
                Continue;
              end;
              LayerIndex := 0;
            end
            else if LayerIndex >= Grid.LayerCount then
            begin
              // First point is below the bottom of the grid.
              if not FindIntersectionSurface(FirstHorizontalIndex,
                LastHorizontalIndex, MaxYIndex, PreviousPoint, APoint,
                FirstPointInCell, CellOutlines, HorizontalIndex) then
              begin
                // It never intersects the bottom surface so go on to the
                // next segment in the TScreenObject
                Continue;
              end;
              LayerIndex := Grid.LayerCount -1;
            end
            else
            begin
              // The first point is inside the grid.
                HorizontalIndex := FirstHorizontalIndex;
            end;
          end;

          if APoint.Y > PreviousPoint.Y then
          begin
            if APoint.X > PreviousPoint.X then
            begin
              SegmentDirection := sdUpRight;
            end
            else if APoint.X < PreviousPoint.X then
            begin
              SegmentDirection := sdUpLeft;
            end
            else
            begin
              SegmentDirection := sdUp;
            end;
          end
          else
          begin
            if APoint.X > PreviousPoint.X then
            begin
              SegmentDirection := sdDownRight;
            end
            else if APoint.X < PreviousPoint.X then
            begin
              SegmentDirection := sdDownLeft;
            end
            else
            begin
              SegmentDirection := sdDown;
            end;
          end;

          // HorizontalIndex and LayerIndex now indicate the first cell intersected by
          // the segment;  (If no cell intersects the segment, you don't get here.
          // FirstPointInCell is the location where the segment intersects the
          // cell.
          repeat
            for PointIndex := 0 to 11 do
            begin
              NextHorizontalIndex[PointIndex] := -1;
              NextLayer[PointIndex] := -1;
            end;
            PointCount := 0;
            TempPoints1[0] := FirstPointInCell;
            HandleTopLeftCorner;
            HandleTopRightCorner;
            HandleBottomRightCorner;
            HandleBottomLeftCorner;
            Inc(PointCount);

            TempPoints1[1] := APoint;
            HandleTopLeftCorner;
            HandleTopRightCorner;
            HandleBottomRightCorner;
            HandleBottomLeftCorner;
            Inc(PointCount);

            FirstPoint := EquatePoint(PreviousPoint.X, PreviousPoint.Y);
            SecondPoint := EquatePoint(APoint.X, APoint.Y);
            for EdgeIndex := 0 to 5 do
            begin
              if CountIntersectPointsOnEdge(HorizontalIndex, LayerIndex,
                EdgeIndex, FirstPoint, SecondPoint, CellOutlines,
                PointsOnEdge) > 0 then
              begin
                for PointIndex := 0 to Length(PointsOnEdge) - 1 do
                begin
                  Assert(PointCount < 12);
                  TempPoints1[PointCount].X := PointsOnEdge[PointIndex].X;
                  TempPoints1[PointCount].Y := PointsOnEdge[PointIndex].Y;
                  // One of these points will be the last point in the
                  // current cell.  Store the indices of the neighboring cell
                  // so it can be easily identified when we get to it.
                  case EdgeIndex of
                    0, 1: // Top edge
                      begin
                        if not HandleTopLeftCorner
                          and not HandleTopRightCorner then
                        begin
                          NextHorizontalIndex[PointCount] := HorizontalIndex;
                          NextLayer[PointCount] := LayerIndex -1;
                        end;
                      end;
                    2: // left edge
                      begin
                        if not HandleTopRightCorner
                          and not HandleBottomRightCorner then
                        begin
                          NextHorizontalIndex[PointCount] := HorizontalIndex+1;
                          NextLayer[PointCount] := LayerIndex;
                        end;
                      end;
                    3,4: // bottom edge
                      begin
                        if not HandleBottomRightCorner
                          and not HandleBottomLeftCorner then
                        begin
                          NextHorizontalIndex[PointCount] := HorizontalIndex;
                          NextLayer[PointCount] := LayerIndex +1;
                        end;
                      end;
                    5: // right edge
                      begin
                        if not HandleBottomLeftCorner
                          and not HandleTopLeftCorner then
                        begin
                          NextHorizontalIndex[PointCount] := HorizontalIndex-1;
                          NextLayer[PointCount] := LayerIndex;
                        end;
                      end;
                    else Assert(False);
                  end;
                  Inc(PointCount);
                end;
              end;
            end;

            // First get appropriate epsilons (margin of error).
            AssignEpsilon;

            FScreenObject.SortPoints(TempPoints1, TempPoints2,
              APoint, PreviousPoint, PointCount, EpsilonX, EpsilonY);
            // Look at each segment defined by a pair of points in TempPoints2.
            // Skip segments that occur before FirstPointInCell.
            // Start checking the midpoints of the remainder of the segments.
            // If the midpont is in the cell, include that segment.
            // Continue until you either reach the end
            // of the array or have reached a segment that isn't in the cell.
            MinDistance := Distance(PreviousPoint, FirstPointInCell);
            for PointIndex := 0 to Length(TempPoints2) - 2 do
            begin
              Point1 := TempPoints2[PointIndex];
              PointDistance := Distance(PreviousPoint, Point1);
              if (PointDistance >= MinDistance) or
                IsEqual(MinDistance, PointDistance, Max(EpsilonX, EpsilonY)) then
              begin
                Point2 := TempPoints2[PointIndex+1];
                TestPoint := MidPoint(Point1,Point2);
                if InCell(HorizontalIndex, LayerIndex, TestPoint,
                  CellOutlines) then
                begin
                  if EndSection then
                  begin
                    SecIndex := SectionIndex-1;
                  end
                  else
                  begin
                    SecIndex := SectionIndex;
                  end;
                  // line segment, front or side views, elements, MODFLOW.
                  CreateSegment(Point1, Point2, LayerIndex,
                    PerpendicularIndex, HorizontalIndex, Index - 1, SecIndex,
                    ASegment);
                  AddFrontSideSubSegments(ASegment, Grid.Model, CellOutlines);
                  if ASegment <> nil then
                  begin
                    FScreenObject.FSegments.Add(ASegment);
                  end;
                  FirstPointInCell := Point2;
                end
                else
                begin
                  break;
                end;
              end;
            end;
            // At this point, the TCellElementSegment's for the current cell
            // intersected by this segment of the TScreenObject have been created.
            // The next thing to do is to identify the next cell intersected by
            // this segment of the TScreenObject (if there is one).
            // FirstPointInCell has been updated to be the last point in the
            // previous cell.  It may either be the last point in this segment
            // of the TScreenObject or a point of intersection between
            // the cell outline and the segment of the  TScreenObject.
            // The intersection points have been stored in TempPoints1.
            // For each intersection point in TempPoints1,
            // the next cell has been indicated by
            // the corresponding values in NextHorizontalIndex and NextLayer.

            // If FirstPointInCell is the last point of this segment of the
            // TScreenObject, go to the next segment.
            if IsEqual(FirstPointInCell.X, APoint.X, 0)
              and IsEqual(FirstPointInCell.Y, APoint.Y, 0) then
            begin
              break;
            end;

            // The last point in the cell must be on the edge of the cell.
            // Identify the next cell.
            FoundEdgePoint := False;
            for PointIndex := 0 to PointCount - 1 do
            begin
              if IsEqual(FirstPointInCell.X, TempPoints1[PointIndex].X, EpsilonX)
                and IsEqual(FirstPointInCell.Y, TempPoints1[PointIndex].Y,
                EpsilonY) then
              begin
                FoundEdgePoint := True;
                HorizontalIndex := NextHorizontalIndex[PointIndex];
                LayerIndex := NextLayer[PointIndex];
                if (HorizontalIndex >= 0) and (LayerIndex >= 0) then
                begin
                  break;
                end;
              end;
            end;
            Assert(FoundEdgePoint);

            if (HorizontalIndex < 0) or (HorizontalIndex >= HorizontalLimit) then
            begin
              // The segment is extending outside the grid and can not re-enter it
              // so go on to the next segment.
              break;
            end;
            if (LayerIndex < 0) or (LayerIndex >= Grid.LayerCount) then
            begin
              // Segment is extending outside the grid.  It might or might not
              // re-enter the grid.  It might re-enter the grid in the
              // other half of the same cell or in a different cell.

              // Indicate top or bottom surface.
              if LayerIndex < 0 then
              begin
                LayerIndicator := 0;
              end
              else
              begin
                LayerIndicator := Grid.LayerCount;
              end;

              // Test if it re-enters the other half of the same cell.
              // ObjectSegment is the current edge of the object.
              ObjectSegment := EquateSegment(PreviousPoint.X, PreviousPoint.Y,
                APoint.X, APoint.Y);
              OtherEdgeAssigned := False;
              // FirstPointInCell is now the location where ObjectSegment
              // exits the cell.
              // CellOutlines[HorizontalIndex*2+1,LayerIndicator].X is the
              // horizontal midpoint of the cell.
              // Check if ObjectSegment exits the cell in the right half of
              // the cell and is heading towards the left half.
              if (FirstPointInCell.X >
                CellOutlines[HorizontalIndex*2+1,LayerIndicator].X)
               and (APoint.X < PreviousPoint.X) then
              begin
                // EdgeSegment is the left edge of the top or bottom half of the
                // cell intersected by the object.
                // This is the other edge from where FirstPointInCell is located.
                if FScreenObject.ViewDirection = vdFront then
                begin
                  EdgeSegment :=
                    EquateSegment(CellOutlines[HorizontalIndex*2+1,LayerIndicator],
                    CellOutlines[HorizontalIndex*2,LayerIndicator]);
                end
                else
                begin
                  Assert(FScreenObject.ViewDirection = vdSide);
                  EdgeSegment :=
                    EquateSegment(CellOutlines[HorizontalIndex*2+1,LayerIndicator],
                    CellOutlines[HorizontalIndex*2+2,LayerIndicator]);
                end;
                OtherEdgeAssigned := True;
              end
              // Check if ObjectSegment exits the cell in the left half of
              // the cell and is heading towards the right half.
              else if (FirstPointInCell.X <
                CellOutlines[HorizontalIndex*2+1,LayerIndicator].X)
               and (APoint.X > PreviousPoint.X) then
              begin
                // EdgeSegment is the right edge of the top or bottom half of the
                // cell intersected by the object.
                // This is the other edge from where FirstPointInCell is located.
                if FScreenObject.ViewDirection = vdFront then
                begin
                  EdgeSegment :=
                    EquateSegment(CellOutlines[HorizontalIndex*2+1,LayerIndicator],
                    CellOutlines[HorizontalIndex*2+2,LayerIndicator]);
                end
                else
                begin
                  Assert(FScreenObject.ViewDirection = vdSide);
                  EdgeSegment :=
                    EquateSegment(CellOutlines[HorizontalIndex*2+1,LayerIndicator],
                    CellOutlines[HorizontalIndex*2,LayerIndicator]);
                end;
                OtherEdgeAssigned := True;
              end;
              if OtherEdgeAssigned and Intersect(ObjectSegment,EdgeSegment) then
              begin
                Int := IntersectionPoint(ObjectSegment,EdgeSegment);
                FirstPointInCell.X := Int.X;
                FirstPointInCell.Y := Int.Y;
                // The segment of the TScreenObject has re-entered the
                // other half of the same cell so you don't need to
                // update HorizontalIndex.
              end
              else
              begin
                UpdateHorizontalRangeOfCellsToCheck(FirstHorizontalIndex,
                  LastHorizontalIndex, HorizontalIndex, HorizontalLimit,
                  APoint, PreviousPoint);
                // Don't try to test beyond the edge of the grid
                if (FirstHorizontalIndex < 0)
                  or (FirstHorizontalIndex >= HorizontalLimit) then
                begin
                  break;
                end;

                // If it doesn't re-enter the grid, go on to next segment
                // of the TScreenObject.
                if not FindIntersectionSurface(FirstHorizontalIndex,
                  LastHorizontalIndex, LayerIndicator, PreviousPoint, APoint,
                  FirstPointInCell, CellOutlines, HorizontalIndex) then
                begin
                  break;
                end;
              end;
              // At this point LayerIndex is outside the valid range.
              // it indicates a a layer above the top layer or below
              // the bottom layer.  Fix it so it is within the grid.
              if LayerIndex < 0 then
              begin
                LayerIndex := 0;
              end
              else
              begin
                LayerIndex := Grid.LayerCount-1;
              end;
              // If you get here, the current segment of TScreenObject
              // has reenterd the grid.
              // FirstPointInCell, ColIndex and LayerIndex have
              // all been updated to the values they will have for the next cell.
            end;

            // At this point, the next cell intersected by
            // the current segment of TScreenObject is identified by
            // HorizontalIndex and LayerIndex
            // The first point at which the segment intersects
            // that cell is indicated by FirstPointInCell.
          until (False);
        finally
          if PerpendicularIndex <> PerpendicularLimit then
          begin
            if IncrementedSectionIndex then
            begin
              Dec(SectionIndex);
            end;
          end;
        end;
      end;
    end;
  end;
  FScreenObject.FSegments.UpToDate := True;
  case FScreenObject.ElevationCount of
    ecZero:
      begin
        // do nothing
      end;
    ecOne:
      begin
        for Index := 0 to FScreenObject.FSegModelAssoc.Count - 1 do
        begin
          SegList := FScreenObject.FSegModelAssoc[Index];
          SegList.FHigher3DElevationsNeedsUpdating := True;
        end;
      end;
    ecTwo:
      begin
        for Index := 0 to FScreenObject.FSegModelAssoc.Count - 1 do
        begin
          SegList := FScreenObject.FSegModelAssoc[Index];
          SegList.FHigher3DElevationsNeedsUpdating := True;
          SegList.FLower3DElevationsNeedsUpdating := True;
        end;
      end;
    else Assert(False);
  end;
end;

procedure TModflowDelegate.UpdateSideSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
begin
  UpdateSegments(AModel, EvaluatedAt);
end;

{ TScreenObject }

function TScreenObject.AddDataSet(const DataSet: TDataArray): Integer;
var
  Item: TInterpValuesItem;
  MixtureSubscription: TObserver;
  FormulaSubscription: TObserver;
begin
  result := IndexOfDataSet(DataSet);
  if (result < 0) and CanAddDataSet(DataSet) then
  begin
    MixtureSubscription := nil;
    FormulaSubscription := nil;
    if FCanInvalidateModel then
    begin
      MixtureSubscription := TObserver.Create(nil);
      MixtureSubscription.UpdateWithName(DataSet.Name + Name + 'Mixture');
      FDataSetMixtureSubscriptions.Add(MixtureSubscription);

      InvalidateModel;
      FormulaSubscription := TObserver.Create(nil);
      FormulaSubscription.UpdateWithName(DataSet.Name + Name);
      FDataSetSubscriptions.Add(FormulaSubscription);
    end;
    result := FDataSets.Add(DataSet);
    FDataSetFormulas.Add(nil);
    // DataSet is notified if the TScreenObject changes.
    if FCanInvalidateModel then
    begin
      self.TalksTo(DataSet);
      // DataSet is notified if the formula for it changes.
      FormulaSubscription.TalksTo(DataSet);
      // The formula is notified if the TScreenObject changes.
      self.TalksTo(FormulaSubscription);
      case ElevationCount of
        ecZero:
          begin
            // do nothing
          end;
        ecOne:
          begin
            // DataSet is notified if the elevation formula changes.
            if FElevSubscription = nil then
            begin
              CreateElevationSubscription;
            end;
            FElevSubscription.TalksTo(DataSet);
          end;
        ecTwo:
          begin
            // DataSet is notified if the elevation formulas changes.
            if FTopElevSubscription = nil then
            begin
              CreateTopElevationSubscription;
            end;
            FTopElevSubscription.TalksTo(DataSet);

            if FBottomElevSubscription = nil then
            begin
              CreateBottomElevationSubscription;
            end;
            FBottomElevSubscription.TalksTo(DataSet);
          end;
      else
        Assert(False);
      end;
      DataSet.Invalidate;

      MixtureSubscription.TalksTo(DataSet);
      self.TalksTo(MixtureSubscription);
    end;

    if FIsUpdating then
    begin
      if DataSet is TCustomPhastDataSet then
      begin
        Item := FInterpValues.Items[result] as TInterpValuesItem;
        Item.Values.DataSet := TCustomPhastDataSet(DataSet);
        Item.Values.MixtureFormula := '0.5';
      end;
    end
    else
    begin
      Item := FInterpValues.Add as TInterpValuesItem;
      if DataSet is TCustomPhastDataSet then
      begin
        Item.Values.Assign(DataSet);
      end;
    end;
  end;
end;

procedure TScreenObject.AssignRealDataWithPhastInterpolation(
  const DataSet: TDataArray; const LayerIndex, RowIndex, ColIndex: integer;
  const Comment: string; const InterpValue: TInterpValuesItem);
var
  Distance, Fraction: double;
begin
  if DataSet is TRealPhastDataSet then
  begin
    with TRealPhastDataSet(DataSet) do
    begin
      CellDistance1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance1;
      CellDistance2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance2;
      CellInterpolationDirection[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.InterpolationDirection;
      IsInterpolatedCell[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.UsePHAST_Interpolation;
      Annotation[LayerIndex, RowIndex, ColIndex] := Comment;
      //'Set by PHAST-style interpolation: ' + Name;
      CellValue1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.RealValue1;
      CellValue2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.RealValue2;
    end;
  end
  else if DataSet is TSparseRealPhastDataSet then
  begin
    with TSparseRealPhastDataSet(DataSet) do
    begin
      CellDistance1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance1;
      CellDistance2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance2;
      CellInterpolationDirection[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.InterpolationDirection;
      IsInterpolatedCell[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.UsePHAST_Interpolation;
      Annotation[LayerIndex, RowIndex, ColIndex] := Comment;
      //'Set by PHAST-style interpolation: ' + Name;
      CellValue1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.RealValue1;
      CellValue2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.RealValue2;
    end;
  end
  else
  begin
    Assert(False);
  end;

  Assert(InterpValue.Values.InterpolationDirection in [pidX, pidY, pidZ]);
  GetInterpDistance(InterpValue, Distance, DataSet,
    LayerIndex, RowIndex, ColIndex);

  if Distance <= InterpValue.Values.Distance1 then
  begin
    DataSet.RealData[LayerIndex, RowIndex, ColIndex] :=
      InterpValue.Values.RealValue1;
  end
  else if Distance >= InterpValue.Values.Distance2 then
  begin
    DataSet.RealData[LayerIndex, RowIndex, ColIndex] :=
      InterpValue.Values.RealValue2;
  end
  else
  begin
    Fraction := 1 - (Distance - InterpValue.Values.Distance1) /
      (InterpValue.Values.Distance2 - InterpValue.Values.Distance1);
    DataSet.RealData[LayerIndex, RowIndex, ColIndex] :=
      Fraction * InterpValue.Values.RealValue1 + (1 - Fraction) *
      InterpValue.Values.RealValue2;
  end;
end;

procedure TScreenObject.AssignIntegerDataWithPhastInterpolation(
  const DataSet: TDataArray; const LayerIndex, RowIndex, ColIndex: integer;
  const Comment: string; const InterpValue: TInterpValuesItem);
var
  Distance, Fraction: double;
  RealValue: double;
begin
  if DataSet is TIntegerPhastDataSet then
  begin
    with TIntegerPhastDataSet(DataSet) do
    begin
      CellDistance1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance1;
      CellDistance2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance2;
      CellInterpolationDirection[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.InterpolationDirection;
      IsInterpolatedCell[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.UsePHAST_Interpolation;
      Annotation[LayerIndex, RowIndex, ColIndex] := Comment;
      CellValue1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.IntValue1;
      CellValue2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.IntValue2;
    end;
  end
  else if DataSet is TSparseIntegerPhastDataSet then
  begin
    with TSparseIntegerPhastDataSet(DataSet) do
    begin
      CellDistance1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance1;
      CellDistance2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.Distance2;
      CellInterpolationDirection[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.InterpolationDirection;
      IsInterpolatedCell[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.UsePHAST_Interpolation;
      Annotation[LayerIndex, RowIndex, ColIndex] := Comment;
      CellValue1[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.IntValue1;
      CellValue2[LayerIndex, RowIndex, ColIndex] :=
        InterpValue.Values.IntValue2;
    end;
  end
  else
  begin
    Assert(false);
  end;
  GetInterpDistance(InterpValue, Distance, DataSet,
    LayerIndex, RowIndex, ColIndex);

  if Distance <= InterpValue.Values.Distance1 then
  begin
    DataSet.IntegerData[LayerIndex, RowIndex, ColIndex] :=
      InterpValue.Values.IntValue1;
    Fraction := 1;
  end
  else if Distance >= InterpValue.Values.Distance2 then
  begin
    DataSet.IntegerData[LayerIndex, RowIndex, ColIndex] :=
      InterpValue.Values.IntValue2;
    Fraction := 0;
  end
  else
  begin
    Fraction := 1 - (Distance - InterpValue.Values.Distance1) /
      (InterpValue.Values.Distance2 - InterpValue.Values.Distance1);
    RealValue := Fraction * InterpValue.Values.IntValue1 + (1 - Fraction) *
      InterpValue.Values.IntValue2;
    DataSet.IntegerData[LayerIndex, RowIndex, ColIndex] :=
      Round(RealValue);
  end;
  // Fraction is needed in all cases in order to read
  // TSparseIntegerPhastInterpolationDataSet.RealValue
  // or TIntegerPhastDataSet.RealValue
  if DataSet is TIntegerPhastDataSet then
  begin
    TIntegerPhastDataSet(DataSet).Fraction[
      LayerIndex, RowIndex, ColIndex] := Fraction;
  end
  else if DataSet is TSparseIntegerPhastDataSet then
  begin
    TSparseIntegerPhastDataSet(DataSet).Fraction[
      LayerIndex, RowIndex, ColIndex] := Fraction
  end;
end;

procedure TScreenObject.DeleteDataSet(const Index: Integer);
var
  FormulaSubscription, MixtureSubscription: TObserver;
  DataSet: TDataArray;
  FormulaObject: IFormulaObject;
begin
  // Get rid of any subscriptions due to the formula.
  MixtureDataSetFormula[Index] := '0';

  if FCanInvalidateModel then
  begin
    MixtureSubscription := FDataSetMixtureSubscriptions[Index] as TObserver;
    DataSet := DataSets[Index];
    self.StopsTalkingTo(MixtureSubscription);
    MixtureSubscription.StopsTalkingTo(DataSet);
    FDataSetMixtureSubscriptions.Delete(Index);
  end;

  // Get rid of any subscriptions due to the formula.
  DataSetFormulas[Index] := '0';

  DataSet := nil;
  if FCanInvalidateModel then
  begin
    FormulaSubscription := FDataSetSubscriptions[Index] as TObserver;
    DataSet := DataSets[Index];
    self.StopsTalkingTo(DataSet);
    FormulaSubscription.StopsTalkingTo(DataSet);
    self.StopsTalkingTo(FormulaSubscription);
    FDataSetSubscriptions.Delete(Index);
    DataSet.Invalidate;
  end;
  FDataSets.Delete(Index);
  FormulaObject := FDataSetFormulas[Index];
  frmGoPhast.PhastModel.FormulaManager.Remove(FormulaObject,
    GlobalRemoveScreenObjectDataArraySubscription,
    GlobalRestoreScreenObjectDataArraySubscription, self);
  FDataSetFormulas.Delete(Index);
  if FCanInvalidateModel then
  begin
    if FElevSubscription <> nil then
    begin
      FElevSubscription.StopsTalkingTo(DataSet);
    end;
    if FTopElevSubscription <> nil then
    begin
      FTopElevSubscription.StopsTalkingTo(DataSet);
    end;
    if FBottomElevSubscription <> nil then
    begin
      FBottomElevSubscription.StopsTalkingTo(DataSet);
    end;
  end;
  InvalidateModel;

  FInterpValues.Delete(Index);
end;

procedure TScreenObject.SetIFACE(const Value: TIface);
begin
  if FIFACE <> Value then
  begin
    InvalidateModel;
    FIFACE := Value;
  end;
end;

procedure TScreenObject.SetImportedHigherSectionElevations(
  const Value: TValueArrayStorage);
begin
  Assert((Value = nil) or (Value.DataType = rdtDouble));
  SetValueStorageField(Value, FImportedHigherSectionElevations);
end;

procedure TScreenObject.SetImportedLowerSectionElevations(
  const Value: TValueArrayStorage);
begin
  Assert((Value = nil) or (Value.DataType = rdtDouble));
  SetValueStorageField(Value, FImportedLowerSectionElevations);
end;

procedure TScreenObject.SetImportedSectionElevations(
  const Value: TValueArrayStorage);
begin
  Assert((Value = nil) or (Value.DataType = rdtDouble));
  SetValueStorageField(Value, FImportedSectionElevations);
end;

procedure TScreenObject.SetImportedValues(const Value: TValueCollection);
begin
  FImportedValues.Assign(Value);
  InvalidateModel;
end;

procedure TScreenObject.SetInterpValues(
  const Value: TInterpValuesCollection);
begin
  FInterpValues.Assign(Value);
  InvalidateModel;
end;

procedure TScreenObject.InitializeExpression(out Compiler: TRbwParser;
  out DataSetFormula: string; out Expression: TExpression;
  const DataSet: TDataArray; const OtherData: TObject);
  procedure NormalHandling;
  var
    ResultTypeOK: boolean;
    DI: integer;
    IsBoundary: boolean;
    TestDataArray: TDataArray;
    ErrorFunction: string;
  begin
    Compiler := GetCompiler(DataSet.Orientation);

    TestDataArray := GetTestDataArray(DataSet);

    DI := IndexOfDataSet(TestDataArray);
    if DI >= 0 then
    begin
      DataSetFormula := DataSetFormulas[DI];
      IsBoundary := False;
    end
    else
    begin
      IsBoundary := True;
      DI := IndexOfBoundaryDataSet(TestDataArray);
      Assert(DI >= 0);
      DataSetFormula := BoundaryDataSetFormulas[DI];
    end;

    ErrorFunction := DataSetFormula;
    try
      Compiler.Compile(DataSetFormula);
    except on E: ERbwParserError do
      begin
        ResetScreenObjectFunction(DI, self, Compiler,
          DataSet.DataType, E.Message, IsBoundary, ErrorFunction);
      end;
    end;
    Expression := Compiler.CurrentExpression;
    ResultTypeOK := (Expression.ResultType = DataSet.Datatype)
      or ((Expression.ResultType = rdtInteger)
      and (DataSet.Datatype = rdtDouble));
    if not ResultTypeOK then
    begin
      raise EInvalidDataType.Create(Format(StrTheFormula0sIn,
        [Expression.Decompile, Name]), Expression.Decompile);
  //      raise EInvalidDataType.Create(StrInvalidDataType, Expression.Decompile);
    end;
  end;
var
  InterpValue: TInterpValuesItem;
  LocalExpression: string;
  ResultTypeOK: boolean;
  Model: TPhastModel;
begin
  Model := FModel as TPhastModel;
  if (DataSet = Model.TopBoundaryType)
    or (DataSet = Model.FrontBoundaryType)
    or (DataSet = Model.SideBoundaryType) then
  begin
    Compiler := GetCompiler(DataSet.Orientation);
    DataSetFormula := ThreeDBoundaryFormula;
    Compiler.Compile(DataSetFormula);
    Expression := Compiler.CurrentExpression;
    Exit;
  end;

  if (DataSet = Model.Top2DBoundaryType) then
  begin
    Compiler := GetCompiler(DataSet.Orientation);
    DataSetFormula := TwoDBoundaryFormula;
    Compiler.Compile(DataSetFormula);
    Expression := Compiler.CurrentExpression;
    Exit;
  end;

  InterpValue := OtherData as TInterpValuesItem;
  if (InterpValue = nil) then
  begin
    NormalHandling;
  end
  else if InterpValue is TCustomPhastBoundaryCondition then
  begin
    if TCustomPhastBoundaryCondition(InterpValue).UsePHAST_Interpolation then
    begin
      Compiler := nil;
      Expression := nil;
      DataSetFormula := '';
    end
    else
    begin
      Compiler := GetCompiler(DataSet.Orientation);
      try
        LocalExpression := TCustomPhastBoundaryCondition(InterpValue).
          FormulaExpression;
        Compiler.Compile(LocalExpression);
      except on E: ERbwParserError do
        begin
          LocalExpression := '0';
          TCustomPhastBoundaryCondition(InterpValue).FormulaExpression :=
            LocalExpression;
          Compiler.Compile(LocalExpression);
        end;
      end;
      DataSetFormula := LocalExpression;
      Expression := Compiler.CurrentExpression;
      ResultTypeOK := (Expression.ResultType = DataSet.Datatype)
        or ((Expression.ResultType = rdtInteger) and (DataSet.Datatype =
        rdtDouble));
      if not ResultTypeOK then
      begin
        raise EInvalidDataType.Create(StrInvalidDataType, Expression.Decompile);
      end;
    end;
  end
  else if not InterpValue.Values.UsePHAST_Interpolation then
  begin
    NormalHandling;
  end
  else
  begin
    Compiler := nil;
    Expression := nil;
    DataSetFormula := '';
  end;
end;

function TScreenObject.GetSubPolygonCount: integer;
begin
  if FSubPolygons = nil then
  begin
    result := 0;
  end
  else
  begin
    result := FSubPolygons.Count;
  end;
end;

function TScreenObject.GetSutraAngle: Double;
begin
  result := FStoredSutraAngle.Value;
end;

function TScreenObject.GetTopElevSubscription: TObserver;
begin
  if FTopElevSubscription = nil then
  begin
    CreateTopElevationSubscription;
  end;
  result := FTopElevSubscription
end;

function TScreenObject.GetWellBoundary: TWellBoundary;
begin
  CreatePhastWellBoundary;
  result := FWellBoundary;
end;

function TScreenObject.GetModflowSubObservations: TSubObservations;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateSubObservations;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowSubObservations;
  end;
end;

function TScreenObject.GetSubPolygon(Index: integer): TSubPolygon;
begin
  Assert(FSubPolygons <> nil);
  result := FSubPolygons[Index];
end;

procedure TScreenObject.SetFluxBoundary(const Value: TFluxBoundary);
begin
  if Value = nil then
  begin
    FreeAndNil(FFluxBoundary);
  end
  else
  begin
    CreatePhastFluxBoundary;
    FFluxBoundary.Assign(Value);
  end;
  InvalidateModel;
end;

procedure TScreenObject.SetFmp4AddedDemandRunoffSplitBoundary(
  const Value: TFmp4AddedDemandRunoffSplitBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4AddedDemandRunoffSplitBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4AddedDemandRunoffSplitBoundary);
  end
  else
  begin
    CreateFmp4AddedDemandRunoffSplitBoundary;
    ModflowBoundaries.FFmp4AddedDemandRunoffSplitBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetFmp4BarePrecipitationConsumptionFractionBoundary(
  const Value: TFmp4BarePrecipitationConsumptionFractionBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4BarePrecipitationConsumptionFractionBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4BarePrecipitationConsumptionFractionBoundary);
  end
  else
  begin
    CreateFmp4BarePrecipitationConsumptionFractionBoundary;
    ModflowBoundaries.FFmp4BarePrecipitationConsumptionFractionBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetFmp4BareRunoffFractionBoundary(
  const Value: TFmp4BareRunoffFractionBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4BareRunoffFractionBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4BareRunoffFractionBoundary);
  end
  else
  begin
    CreateFmp4BareRunoffFractionBoundary;
    ModflowBoundaries.FFmp4BareRunoffFractionBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetFmp4EfficiencyBoundary(
  const Value: TFmp4EfficiencyBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4EfficiencyBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4EfficiencyBoundary);
  end
  else
  begin
    CreateFmp4EfficiencyBoundary;
    ModflowBoundaries.FFmp4EfficiencyBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetFmp4EfficiencyImprovementBoundary(
  const Value: TFmp4EfficiencyImprovementBoundary);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FFmp4EfficiencyImprovementBoundary <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FFmp4EfficiencyImprovementBoundary);
  end
  else
  begin
    CreateFmp4EfficiencyImprovementBoundary;
    ModflowBoundaries.FFmp4EfficiencyImprovementBoundary.Assign(Value);
  end;
end;

procedure TScreenObject.SetLeakyBoundary(const Value: TLeakyBoundary);
begin
  if Value = nil then
  begin
    FreeAndNil(FLeakyBoundary);
  end
  else
  begin
    CreatePhastLeakyBoundary;
    FLeakyBoundary.Assign(Value);
  end;
  InvalidateModel;
end;

procedure TScreenObject.SetRiverBoundary(const Value: TRiverBoundary);
begin
  if Value = nil then
  begin
    FreeAndNil(FRiverBoundary);
  end
  else
  begin
    CreatePhastRiverBoundary;
    FRiverBoundary.Assign(Value);
  end;
  InvalidateModel;
end;

procedure TScreenObject.SetSpecifiedSolutionBoundary(
  const Value: TSpecifiedSolutionBoundary);
begin
  CreatePhastSpecifiedSolutionBoundary;
  FSpecifiedSolutionBoundary.Assign(Value);
  InvalidateModel;
end;

procedure TScreenObject.SetStoredSutraAngle(const Value: TRealStorage);
begin
  FStoredSutraAngle.Assign(Value);
end;

procedure TScreenObject.SetModflowSubObservations(const Value: TSubObservations);
begin
  if (Value = nil) or not Value.Used then
  begin
    if ModflowBoundaries.FModflowSubObservations <> nil then
    begin
      InvalidateModel;
    end;
    FreeAndNil(ModflowBoundaries.FModflowSubObservations);
  end
  else
  begin
    CreateSubObservations;
    ModflowBoundaries.FModflowSubObservations.Assign(Value);
  end;
end;

procedure TScreenObject.SetSutraAngle(const Value: Double);
begin
  FStoredSutraAngle.Value := Value;
end;

procedure TScreenObject.SetSutraBoundaries(const Value: TSutraBoundaries);
begin
  FSutraBoundaries.Assign(Value);
end;

procedure TScreenObject.SetWellBoundary(const Value: TWellBoundary);
begin
  if Value = nil then
  begin
    FreeAndNil(FWellBoundary);
  end
  else
  begin
    CreatePhastWellBoundary;
    FWellBoundary.Assign(Value);
  end;
  InvalidateModel;
end;

procedure TScreenObject.SetSpecifiedHeadBoundary(
  const Value: TSpecifiedHeadBoundary);
begin
  if Value = nil then
  begin
    FreeAndNil(FSpecifiedHeadBoundary);
  end
  else
  begin
    CreatePhastSpecifiedHeadBoundary;
    FSpecifiedHeadBoundary.Assign(Value);
  end;
  InvalidateModel;
end;

function TScreenObject.GetBottomElevSubscription: TObserver;
begin
  if FBottomElevSubscription = nil then
  begin
    CreateBottomElevationSubscription;
  end;
  result := FBottomElevSubscription;
end;

function TScreenObject.GetBoundaryCollection(
  const TimeList: TPhastTimeList): TCustomPhastBoundaryCollection;
var
  List: TList;
  Index: integer;
  Boundary: TCustomPhastBoundaryCollection;
begin
  result := nil;
  List := TList.Create;
  try
    List.Add(FluxBoundary.BoundaryValue);
    List.Add(FluxBoundary.Solution);
    List.Add(LeakyBoundary.BoundaryValue);
    List.Add(LeakyBoundary.Solution);
    List.Add(RiverBoundary.BoundaryValue);
    List.Add(RiverBoundary.Solution);
    List.Add(SpecifiedHeadBoundary.BoundaryValue);
    List.Add(SpecifiedHeadBoundary.Solution);
    List.Add(SpecifiedSolutionBoundary.Solution);
    List.Add(WellBoundary.BoundaryValue);
    List.Add(WellBoundary.Solution);
    for Index := 0 to List.Count - 1 do
    begin
      Boundary := List[Index];
      if Boundary.TimeList = TimeList then
      begin
        result := Boundary;
        Exit;
      end;
    end;
  finally
    List.Free;
  end;
end;

procedure TScreenObject.ResetBoundaryMixtureSubscriptions;
var
  Index: integer;
  BoundaryCondition: TCustomPhastBoundaryCondition;
  List: TList;
  BoundaryIndex: integer;
  BoundaryCollection: TCustomPhastBoundaryCollection;
begin
  List := TList.Create;
  try
    List.Add(FluxBoundary.Solution);
    List.Add(LeakyBoundary.Solution);
    List.Add(RiverBoundary.Solution);
    List.Add(SpecifiedHeadBoundary.Solution);
    List.Add(SpecifiedSolutionBoundary.Solution);
    List.Add(WellBoundary.Solution);
    for BoundaryIndex := 0 to List.Count - 1 do
    begin
      BoundaryCollection := List[BoundaryIndex];
      for Index := 0 to BoundaryCollection.Count - 1 do
      begin
        BoundaryCondition := BoundaryCollection.Items[Index] as
          TCustomPhastBoundaryCondition;
        BoundaryCondition.ResetMixtureSubscription;
      end;
    end;
  finally
    List.Free;
  end;
end;

function TScreenObject.IsBoundaryTimeDataSetUsed(
  const DataSet: TDataArray; out OtherData: TObject): boolean;
var
  Index: integer;
  BoundaryCondition: TCustomPhastBoundaryCondition;
  TimeIndex: integer;
  List: TList;
  BoundaryIndex: integer;
  BoundaryCollection: TCustomPhastBoundaryCollection;
begin
  OtherData := nil;
  result := False;
  if DataSet = nil then
    Exit;
  if DataSet.DataType in [rdtBoolean, rdtString] then
    Exit;
  List := TList.Create;
  try
    case DataSet.DataType of
      rdtDouble:
        begin
          if FFluxBoundary <> nil then
          begin
            List.Add(FluxBoundary.BoundaryValue);
          end;
          if FLeakyBoundary <> nil then
          begin
            List.Add(LeakyBoundary.BoundaryValue);
          end;
          if FRiverBoundary <> nil then
          begin
            List.Add(RiverBoundary.BoundaryValue);
          end;
          if FSpecifiedHeadBoundary <> nil then
          begin
            List.Add(SpecifiedHeadBoundary.BoundaryValue);
          end;
          if FWellBoundary <> nil then
          begin
            List.Add(WellBoundary.BoundaryValue);
          end;
        end;
      rdtInteger:
        begin
          if FFluxBoundary <> nil then
          begin
            List.Add(FluxBoundary.Solution);
          end;
          if FLeakyBoundary <> nil then
          begin
            List.Add(LeakyBoundary.Solution);
          end;
          if FRiverBoundary <> nil then
          begin
            List.Add(RiverBoundary.Solution);
          end;
          if FSpecifiedHeadBoundary <> nil then
          begin
            List.Add(SpecifiedHeadBoundary.Solution);
          end;
          if FWellBoundary <> nil then
          begin
            List.Add(WellBoundary.Solution);
          end;
        end;
    else
      Assert(False);
    end;

    for BoundaryIndex := 0 to List.Count - 1 do
    begin
      BoundaryCollection := List[BoundaryIndex];
      for Index := 0 to BoundaryCollection.Count - 1 do
      begin
        BoundaryCondition := BoundaryCollection.Items[Index] as
          TCustomPhastBoundaryCondition;
        TimeIndex :=
          BoundaryCollection.TimeList.IndexOf(BoundaryCondition.Time);
        if TimeIndex >= 0 then
        begin
          if BoundaryCollection.TimeList.Items[TimeIndex] = DataSet then
          begin
            result := True;
            OtherData := BoundaryCondition;
            Exit;
          end;
        end;
      end;
    end;
  finally
    List.Free;
  end;
end;


procedure TScreenObject.StopTalkingToAnyone;
begin
  inherited;
  if FModflowBoundaries <> nil then
  begin
    FModflowBoundaries.StopTalkingToAnyone;
  end;
  if FFootprintWell <> nil then
  begin
    FFootprintWell.StopTalkingToAnyone;
  end;
end;

function TScreenObject.StoreFlux: boolean;
begin
  result := (FFluxBoundary <> nil) and
    ((FluxBoundary.BoundaryValue.Count > 0)
    or (FluxBoundary.Solution.Count > 0));
end;

function TScreenObject.StoreFmp4AddedDemandRunoffSplitBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Fmp4AddedDemandRunoffSplitBoundary <> nil) and Fmp4AddedDemandRunoffSplitBoundary.Used;
end;

function TScreenObject.StoreFmp4BarePrecipitationConsumptionFractionBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Fmp4BarePrecipitationConsumptionFractionBoundary <> nil)
    and Fmp4BarePrecipitationConsumptionFractionBoundary.Used;
end;

function TScreenObject.StoreFmp4BareRunoffFractionBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Fmp4BareRunoffFractionBoundary <> nil)
    and Fmp4BareRunoffFractionBoundary.Used;
end;

function TScreenObject.StoreFmp4EfficiencyBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Fmp4EfficiencyBoundary <> nil) and Fmp4EfficiencyBoundary.Used;
end;

function TScreenObject.StoreFmp4EfficiencyImprovementBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Fmp4EfficiencyImprovementBoundary <> nil) and Fmp4EfficiencyImprovementBoundary.Used;
end;

function TScreenObject.StoreFootprintWell: Boolean;
begin
  result := (FFootprintWell <> nil) and FFootprintWell.Used;
end;

function TScreenObject.StoreGwtCncBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (GwtCncBoundary <> nil) and GwtCncBoundary.Used;
end;

function TScreenObject.StoreGwtSrcBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (GwtSrcBoundary <> nil) and GwtSrcBoundary.Used;
end;

function TScreenObject.StoreImportedHigherSectionElevations: Boolean;
begin
  result := ImportedHigherSectionElevations.Count > 0;
end;

function TScreenObject.StoreImportedLowerSectionElevations: Boolean;
begin
  result := ImportedLowerSectionElevations.Count > 0;
end;

function TScreenObject.StoreImportedSectionElevations: Boolean;
begin
  result := ImportedSectionElevations.Count > 0;
end;

function TScreenObject.StoreImportedValues: Boolean;
begin
  result := ImportedValues.Count > 0;
end;

function TScreenObject.StoreLeaky: boolean;
begin
  result := (FLeakyBoundary <> nil) and
    ((LeakyBoundary.BoundaryValue.Count > 0)
    or (LeakyBoundary.Solution.Count > 0));
end;

function TScreenObject.StoreModflow6Obs: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Modflow6Obs <> nil)
    and Modflow6Obs.Used;
end;

function TScreenObject.StoreModflowCfpFixedHeads: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowCfpFixedHeads <> nil)
    and ModflowCfpFixedHeads.Used;
end;

function TScreenObject.StoreModflowCfpPipes: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowCfpPipes <> nil)
    and ModflowCfpPipes.Used;
end;

function TScreenObject.StoreModflowCfpRchFraction: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowCfpRchFraction <> nil)
    and ModflowCfpRchFraction.Used;
end;

function TScreenObject.StoreModflowChdBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowChdBoundary <> nil)
    and ModflowChdBoundary.Used;
end;

function TScreenObject.StoreModflowCSub: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowCSub <> nil) and ModflowCSub.Used;
end;

function TScreenObject.StoreModflowDrnBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowDrnBoundary <> nil) and ModflowDrnBoundary.Used;
end;

function TScreenObject.StoreModflowDrtBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowDrtBoundary <> nil) and ModflowDrtBoundary.Used;
end;

function TScreenObject.StoreModflowEtsBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowEtsBoundary <> nil) and ModflowEtsBoundary.Used;
end;

function TScreenObject.StoreModflowEvtBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowEvtBoundary <> nil) and ModflowEvtBoundary.Used;
end;

function TScreenObject.StoreModflowFhbFlowBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFhbFlowBoundary <> nil) and ModflowFhbFlowBoundary.Used;
end;

function TScreenObject.StoreModflowFhbHeadBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFhbHeadBoundary <> nil) and ModflowFhbHeadBoundary.Used;
end;

function TScreenObject.StoreModflowFmp4AddedDemand: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4AddedDemand <> nil) and ModflowFmp4AddedDemand.Used;
end;

function TScreenObject.StoreModflowFmp4ConsumptiveUse: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4ConsumptiveUse <> nil) and ModflowFmp4ConsumptiveUse.Used;
end;

function TScreenObject.StoreModflowFmp4CropCoefficient: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4CropCoefficient <> nil) and ModflowFmp4CropCoefficient.Used;
end;

function TScreenObject.StoreModflowFmp4CropHasSalinityDemand: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4CropHasSalinityDemand <> nil) and ModflowFmp4CropHasSalinityDemand.Used;
end;

function TScreenObject.StoreModflowFmp4EvaporationIrrigationFraction: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4EvaporationIrrigationFraction <> nil) and ModflowFmp4EvaporationIrrigationFraction.Used;
end;

function TScreenObject.StoreModflowFmp4FractionOfIrrigToSurfaceWater: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4FractionOfIrrigToSurfaceWater <> nil) and ModflowFmp4FractionOfIrrigToSurfaceWater.Used;
end;

function TScreenObject.StoreModflowFmp4FractionOfPrecipToSurfaceWater: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4FractionOfPrecipToSurfaceWater <> nil) and ModflowFmp4FractionOfPrecipToSurfaceWater.Used;
end;

function TScreenObject.StoreModflowFmp4Irrigation: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4Irrigation <> nil) and ModflowFmp4Irrigation.Used;
end;

function TScreenObject.StoreModflowFmp4LandUseAreaFraction: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4LandUseAreaFraction <> nil) and ModflowFmp4LandUseAreaFraction.Used;
end;

function TScreenObject.StoreModflowFmp4MultAddedDemand: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4MultAddedDemand <> nil) and ModflowFmp4MultAddedDemand.Used;
end;

function TScreenObject.StoreModflowFmp4MultConsumptiveUse: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4MultConsumptiveUse <> nil) and ModflowFmp4MultConsumptiveUse.Used;
end;

function TScreenObject.StoreModflowFmp4MultCropCoefficient: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4MultCropCoefficient <> nil) and ModflowFmp4MultCropCoefficient.Used;
end;

function TScreenObject.StoreModflowFmp4MultCropHasSalinityDemand: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4MultCropHasSalinityDemand <> nil) and ModflowFmp4MultCropHasSalinityDemand.Used;
end;

function TScreenObject.StoreModflowFmp4MultEvaporationIrrigationFraction: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4MultEvaporationIrrigationFraction <> nil) and ModflowFmp4MultEvaporationIrrigationFraction.Used;
end;

function TScreenObject.StoreModflowFmp4MultFractionOfIrrigToSurfaceWater: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4MultFractionOfIrrigToSurfaceWater <> nil) and ModflowFmp4MultFractionOfIrrigToSurfaceWater.Used;
end;

function TScreenObject.StoreModflowFmp4MultFractionOfPrecipToSurfaceWater: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4MultFractionOfPrecipToSurfaceWater <> nil) and ModflowFmp4MultFractionOfPrecipToSurfaceWater.Used;
end;

function TScreenObject.StoreModflowFmp4MultIrrigation: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4MultIrrigation <> nil) and ModflowFmp4MultIrrigation.Used;
end;

function TScreenObject.StoreModflowFmp4MultLandUseAreaFraction: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4MultLandUseAreaFraction <> nil) and ModflowFmp4MultLandUseAreaFraction.Used;
end;

function TScreenObject.StoreModflowFmp4MultRootDepth: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4MultRootDepth <> nil) and ModflowFmp4MultRootDepth.Used;
end;

function TScreenObject.StoreModflowFmp4MultTranspirationFraction: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4MultTranspirationFraction <> nil) and ModflowFmp4MultTranspirationFraction.Used;
end;

function TScreenObject.StoreModflowFmp4NrdInfilLocationBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4NrdInfilLocationBoundary <> nil) and ModflowFmp4NrdInfilLocationBoundary.Used;
end;

function TScreenObject.StoreModflowFmp4RootDepth: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4RootDepth <> nil) and ModflowFmp4RootDepth.Used;
end;

function TScreenObject.StoreModflowFmp4TranspirationFraction: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmp4TranspirationFraction <> nil) and ModflowFmp4TranspirationFraction.Used;
end;

function TScreenObject.StoreModflowFmpBareEvap: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmpBareEvap <> nil) and ModflowFmpBareEvap.Used;
end;

function TScreenObject.StoreModflowFmpCropID: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmpCropID <> nil) and ModflowFmpCropID.Used;
end;

function TScreenObject.StoreModflowFmpDirectRecharge: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmpDirectRecharge <> nil) and ModflowFmpDirectRecharge.Used;
end;

function TScreenObject.StoreModflowFmpFarmID: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmpFarmID <> nil) and ModflowFmpFarmID.Used;
end;

function TScreenObject.StoreModflowFmpPrecip: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmpPrecip <> nil) and ModflowFmpPrecip.Used;
end;

function TScreenObject.StoreModflowFmpPrecipPotConsumption: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmpPrecipPotConsumption <> nil) and ModflowFmpPrecipPotConsumption.Used;
end;

function TScreenObject.StoreModflowFmpRefEvap: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmpRefEvap <> nil) and ModflowFmpRefEvap.Used;
end;

function TScreenObject.StoreModflowFmpWellBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowFmpWellBoundary <> nil) and ModflowFmpWellBoundary.Used;
end;

function TScreenObject.StoreModflowGhbBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowGhbBoundary <> nil) and ModflowGhbBoundary.Used;
end;

function TScreenObject.StoreModflowHeadObservations: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowHeadObservations <> nil) and ModflowHeadObservations.Used;
end;

function TScreenObject.StoreModflowHfbBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowHfbBoundary <> nil)
    and (ModflowHfbBoundary.Used or ModflowHfbBoundary.UsedMf6);
end;

function TScreenObject.StoreModflowHydmodData: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowHydmodData <> nil) and ModflowHydmodData.Used;
end;

function TScreenObject.StoreModflowLak6: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowLak6 <> nil) and ModflowLak6.Used;
end;

function TScreenObject.StoreModflowLakBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowLakBoundary <> nil) and ModflowLakBoundary.Used;
end;

function TScreenObject.StoreModflowRchBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowRchBoundary <> nil) and ModflowRchBoundary.Used;
end;

function TScreenObject.StoreModflowResBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowResBoundary <> nil) and ModflowResBoundary.Used;
end;

function TScreenObject.StoreModflowRipBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowRipBoundary <> nil) and ModflowRipBoundary.Used;
end;

function TScreenObject.StoreModflowRivBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowRivBoundary <> nil) and ModflowRivBoundary.Used;
end;

function TScreenObject.StoreModflowSfr6Boundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowSfr6Boundary <> nil) and ModflowSfr6Boundary.Used;
end;

function TScreenObject.StoreModflowSfrBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowSfrBoundary <> nil) and ModflowSfrBoundary.Used;
end;

function TScreenObject.StoreModflowStrBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowStrBoundary <> nil) and ModflowStrBoundary.Used;
end;

function TScreenObject.StoreModflowStreamGage: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowStreamGage <> nil) and ModflowStreamGage.Used;
end;

function TScreenObject.StoreModflowSwiObservations: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowSwiObservations <> nil) and ModflowSwiObservations.Used;
end;

function TScreenObject.StoreModflowSwrDirectRunoff: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowSwrDirectRunoff <> nil) and ModflowSwrDirectRunoff.Used;
end;

function TScreenObject.StoreModflowSwrEvap: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowSwrEvap <> nil) and ModflowSwrEvap.Used;
end;

function TScreenObject.StoreModflowSwrLatInflow: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowSwrLatInflow <> nil) and ModflowSwrLatInflow.Used;
end;

function TScreenObject.StoreModflowSwrRain: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowSwrRain <> nil) and ModflowSwrRain.Used;
end;
function TScreenObject.StoreModflowSwrReaches: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowSwrReaches <> nil) and ModflowSwrReaches.Used;
end;

function TScreenObject.StoreModflowSwrStage: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowSwrStage <> nil) and ModflowSwrStage.Used;
end;

function TScreenObject.StoreModflowSwtObservations: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowSwtObservations <> nil) and ModflowSwtObservations.Used;
end;

function TScreenObject.StoreModflowTvkBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowTvkBoundary <> nil) and ModflowTvkBoundary.Used;
end;

function TScreenObject.StoreModflowTvsBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowTvsBoundary <> nil) and ModflowTvsBoundary.Used;
end;

function TScreenObject.StoreModflowUzfBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowUzfBoundary <> nil) and ModflowUzfBoundary.Used;
end;

function TScreenObject.StoreModflowUzfMf6Boundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowUzfMf6Boundary <> nil) and ModflowUzfMf6Boundary.Used;
end;

function TScreenObject.StoreModflowWellBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowWellBoundary <> nil) and ModflowWellBoundary.Used;
end;

function TScreenObject.StoreRiver: boolean;
begin
  result := (FRiverBoundary <> nil) and
    ((RiverBoundary.BoundaryValue.Count > 0)
    or (RiverBoundary.Solution.Count > 0));
end;

function TScreenObject.StoreModflowMawBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowMawBoundary <> nil) and ModflowMawBoundary.Used;
end;

function TScreenObject.StoreModflowMnw1Boundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowMnw1Boundary <> nil) and ModflowMnw1Boundary.Used;
end;

function TScreenObject.StoreModflowMnw2Boundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowMnw2Boundary <> nil) and ModflowMnw2Boundary.Used;
end;

function TScreenObject.StoreModflowMvr: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowMvr <> nil) and ModflowMvr.Used;
end;

function TScreenObject.StoreMt3dLktConcBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Mt3dLktConcBoundary <> nil) and Mt3dLktConcBoundary.Used;
end;

function TScreenObject.StoreMt3dmsConcBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Mt3dmsConcBoundary <> nil) and Mt3dmsConcBoundary.Used;
end;

function TScreenObject.StoreMt3dmsTransObservations: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Mt3dmsTransObservations <> nil) and Mt3dmsTransObservations.Used;
end;

function TScreenObject.StoreMt3dSftConcBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Mt3dSftConcBoundary <> nil) and Mt3dSftConcBoundary.Used;
end;

function TScreenObject.StoreMt3dUzfRechConc: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Mt3dUzfRechConc <> nil) and Mt3dUzfRechConc.Used;
end;

function TScreenObject.StoreMt3dUzSsmSinkConcBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Mt3dUzSsmSinkConcBoundary <> nil) and Mt3dUzSsmSinkConcBoundary.Used;
end;

function TScreenObject.StoreMt3dUztSatEtConcBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Mt3dUztSatEtConcBoundary <> nil) and Mt3dUztSatEtConcBoundary.Used;
end;

function TScreenObject.StoreMt3dUztUnSatEtConcBoundary: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (Mt3dUztUnsatEtConcBoundary <> nil) and Mt3dUztUnsatEtConcBoundary.Used;
end;

function TScreenObject.StoreSpecifiedHead: boolean;
begin
  result := (FSpecifiedHeadBoundary <> nil)
    and ((SpecifiedHeadBoundary.BoundaryValue.Count > 0)
    or (SpecifiedHeadBoundary.Solution.Count > 0));
end;

function TScreenObject.StoreModflowSubObservations: Boolean;
begin
  result := (FModflowBoundaries <> nil)
    and (ModflowSubObservations <> nil) and ModflowSubObservations.Used;
end;

function TScreenObject.StoreWell: boolean;
begin
  result := (FWellBoundary <> nil) and
    ((WellBoundary.BoundaryValue.Count > 0)
    or (WellBoundary.Solution.Count > 0));
end;

function TScreenObject.StrParameters: IModflowParameters;
begin
  result := nil;
  if ModflowStrBoundary <> nil then
  begin
    result := ModflowStrBoundary.Parameters;
  end;
end;

function TScreenObject.ThreeDBoundaryFormula: string;
begin
  if PhastBoundaryType in  [btNone, btSpecifiedHead, btFlux, btLeaky] then
  begin
    result := IntToStr(BoundaryType);
  end
  else
  begin
    result := '0';
  end;
end;

function TScreenObject.TwoDBoundaryFormula: string;
begin
  if PhastBoundaryType in  [btNone, btRiver, btWell] then
  begin
    result := IntToStr(BoundaryType);
  end
  else
  begin
    result := '0';
  end;
end;

procedure ResetScreenObjectMixtureFunction(const DataSetIndex: integer;
  const AScreenObject: TScreenObject; const Compiler: TRbwParser;
  const DataSetDataType: TRbwDataType; const ErrorMessage: string;
  const IsBoundary: boolean);
var
  ScreenObjectFunction: string;
begin
  if IsBoundary then
  begin
    Assert(False);
  end
  else
  begin
    ScreenObjectFunction :=
      AScreenObject.MixtureDataSetFormula[DataSetIndex];
    frmFormulaErrors.AddFormulaError(AScreenObject.Name,
      AScreenObject.DataSets[DataSetIndex].Name,
      ScreenObjectFunction, ErrorMessage);
  end;

  Assert(DataSetDataType = rdtInteger);
  ScreenObjectFunction := '0.5';
  AScreenObject.MixtureDataSetFormula[DataSetIndex] := ScreenObjectFunction;

  Compiler.Compile(ScreenObjectFunction);
end;

procedure TScreenObject.InitializeMixtureExpression(out Compiler:
  TRbwParser; out MixtureFormula: string; out Expression: TExpression;
  const DataSet: TDataArray; const OtherData: TObject);
var
  ResultTypeOK: boolean;
  DI: integer;
  IsBoundary: boolean;
  InterpValue: TInterpValuesItem;
  BoundaryCondition: TCustomPhastBoundaryCondition;
begin
  Compiler := GetCompiler(DataSet.Orientation);
  DI := IndexOfDataSet(DataSet);
  if DI >= 0 then
  begin
    InterpValue := OtherData as TInterpValuesItem;
    MixtureFormula := InterpValue.Values.MixtureFormula;
    IsBoundary := False;
  end
  else
  begin
    IsBoundary := True;
    BoundaryCondition := OtherData as TCustomPhastBoundaryCondition;
    MixtureFormula := BoundaryCondition.MixtureExpression;
    BoundaryCondition.FMixtureObserver.UpToDate := True;
  end;

  try
    Compiler.Compile(MixtureFormula);
  except on E: ERbwParserError do
    begin
      ResetScreenObjectMixtureFunction(DI, self, Compiler,
        DataSet.DataType, E.Message, IsBoundary);
    end;
  end;
  Expression := Compiler.CurrentExpression;
  ResultTypeOK := Expression.ResultType in [rdtInteger, rdtDouble];
  if not ResultTypeOK then
  begin
    raise EInvalidDataType.Create(Format(StrTheFormula0sIn,
      [Expression.Decompile, Name]), Expression.Decompile);
//    raise EInvalidDataType.Create(StrInvalidDataType, Expression.Decompile);
  end;
end;

procedure TScreenObject.AssignNumericValueToDataSet({const Grid: TCustomModelGrid;}
  const DataSet: TDataArray; Value: double; AModel: TBaseModel);
var
  CellList: TCellAssignmentList;
  Index: Integer;
  Cell: TCellAssignment;
begin
  if not UsedModels.UsesModel(AModel) then
  begin
    Exit;
  end;
  CellList := TCellAssignmentList.Create;
  try
    GetCellsToAssign({Grid,} FortranFloatToStr(Value), nil, DataSet, CellList,
      alAll, AModel);
    for Index := 0 to CellList.Count - 1 do
    begin
      Cell := CellList[Index];
      DataSet.RealData[Cell.Layer, Cell.Row, Cell.Column] := Value;
      DataSet.Annotation[Cell.Layer, Cell.Row, Cell.Column] := Cell.Annotation;
    end;
  finally
    CellList.Free;
  end;
end;  

procedure TScreenObject.AssignValuesToModflowDataSet(//const Grid: TCustomModelGrid;
  const DataSet: TDataArray; const Formula: string; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation = alAll);
var
  Compiler: TRbwParser;
  DataSetFunction: string;
  OtherData: TModflowDataObject;
begin
  if not UsedModels.UsesModel(AModel) then
  begin
    Exit;
  end;
  try
    Compiler := GetCompiler(DataSet.Orientation);
    DataSetFunction := Formula;
    case ViewDirection of
      vdTop:
        begin
          OtherData := TModflowDataObject.Create;
          try
            OtherData.Compiler := Compiler;
            OtherData.DataSetFunction := DataSetFunction;
            OtherData.AlternateName := DataSet.Name;
            Delegate.AssignValuesToTopDataSet(DataSet, OtherData,
              AModel, UseLgrEdgeCells, AssignmentLocation);
          finally
            OtherData.Free;
          end;
        end;
      vdFront:
        begin
          OtherData := TModflowDataObject.Create;
          try
            OtherData.Compiler := Compiler;
            OtherData.DataSetFunction := DataSetFunction;
            Delegate.AssignValuesToFrontDataSet(DataSet, OtherData,
              AModel, UseLgrEdgeCells, AssignmentLocation);
          finally
            OtherData.Free;
          end;
        end;
      vdSide:
        begin
          OtherData := TModflowDataObject.Create;
          try
            OtherData.Compiler := Compiler;
            OtherData.DataSetFunction := DataSetFunction;
            Delegate.AssignValuesToSideDataSet(DataSet, OtherData,
              AModel, UseLgrEdgeCells, AssignmentLocation);
          finally
            OtherData.Free;
          end;
        end;
      else Assert(False);
    end;
  finally
    if (FSegments <> nil) and FSegments.UpToDate and not FSegments.FCleared then
    begin
      FSegments.CacheData;
    end;
  end
end;

procedure TScreenObject.AssignValuesWithCellList(Formula: String;
  AModel: TBaseModel; CellList: TCellLocationList; Results: TRealList;
  var Annotation: string; DataIdentifier: string);
var
  Compiler: TRbwParser;
  Expression: TExpression;
  ResultTypeOK: Boolean;
  ErrorFunction: string;
  ErrorMessage: String;
  UsedVariables: TStringList;
  AValue: double;
  AssignmentIndex: Integer;
  CellLocation: TCellLocation;

begin
  // This procedure is used with MODFLOW 6 lakes and SUTRA PEST observations.

  Results.Clear;
  Annotation := '';

  Compiler := nil;
  if AModel.ModelSelection in ModflowSelection then
  begin
    Compiler := GetCompiler(dso3D, eaBlocks);
  end
  else if AModel.ModelSelection in SutraSelection then
  begin
    Compiler := GetCompiler(dso3D, eaNodes);
  end
  else
  begin
    Assert(False);
  end;

  ErrorFunction := Formula;
  try
    Compiler.Compile(Formula);
  except on E: ERbwParserError do
    begin
      ErrorMessage := Format(StrErrorInTheFormula, [DataIdentifier, E.message]);
      frmFormulaErrors.AddFormulaError(Name, DataIdentifier, Formula,
        ErrorMessage);
      Formula := '0';
      Compiler.Compile(Formula);
    end;
  end;

  Expression := Compiler.CurrentExpression;
  ResultTypeOK := Expression.ResultType in [rdtInteger, rdtDouble];
  if not ResultTypeOK then
  begin
    raise EInvalidDataType.Create(Format(StrTheFormula0sIn,
      [Expression.Decompile, Name]), Expression.Decompile);
//    raise EInvalidDataType.Create(StrInvalidDataType, Expression.Decompile);
  end;

  Annotation := Format(StrAssignedBy0sUsi, [Name, Expression.DeCompile]);

  UsedVariables := TStringList.Create;
  try
    InitilizeVariablesWithNilDataSet(Expression, AModel, nil, UsedVariables, Compiler);

    for AssignmentIndex := 0 to CellList.Count - 1 do
    begin
      CellLocation := CellList[AssignmentIndex];
      UpdateCurrentSegment(nil);
      UpdateCurrentSection(-1);
      UpdateImportedValues(nil);

      UpdateVariables(UsedVariables, nil, CellLocation.Layer, CellLocation.Row,
        CellLocation.Column, Compiler, EvaluatedAt, AModel);
      EvaluateDataArrayExpression(nil, Expression, Compiler, DataIdentifier);
      AValue := Expression.DoubleResult;
      Results.Add(AValue);
    end;

  finally
    UsedVariables.Free;
  end;
end;


procedure TScreenObject.AssignValuesToDataSet(const DataSet: TDataArray;
  AModel: TBaseModel; UseLgrEdgeCells: TLgrCellTreatment);
var
  OtherData: TObject;
  InterpValue: TInterpValuesItem;
  Compiler: TRbwParser;
  MixtureFormula: string;
  Expression: TExpression;
  UsedVariables: TStringList;
  BoundaryDataSet: boolean;
  IsBoundaryDataSet: boolean;
  Model: TPhastModel;
  BoundaryCondition: TCustomPhastBoundaryCondition;
  BoundaryPosition: Integer;
  AnObserver: TObserver;
  TestDataArray: TDataArray;
  StackPosition: integer;
begin
  { TODO : Consider removing Grid parameter and getting the grid from the model. }
  if not SetValuesOfIntersectedCells and not SetValuesOfEnclosedCells then
  begin
    Exit;
  end;
  if Deleted or (DataSet = nil) then
  begin
    Exit;
  end;
  if not UsedModels.UsesModel(AModel) then
  begin
    Exit;
  end;

  OtherData := nil;
  Model := FModel as TPhastModel;
  // The boundary data sets should contain an integer value
  // that represents what type of boundary is being assiged.
  BoundaryDataSet := (DataSet = Model.TopBoundaryType)
    or (DataSet = Model.FrontBoundaryType)
    or (DataSet = Model.SideBoundaryType)
    or (DataSet = Model.Top2DBoundaryType);

  if (DataSet.Name = '') or (AModel = Model) then
  begin
    TestDataArray := DataSet;
  end
  else
  begin
    TestDataArray := Model.DataArrayManager.GetDataSetByName(DataSet.Name);
    Assert(TestDataArray <> nil);
  end;

  // if the screen object is deleted, or the data set is not used, quit.
  if ((IndexOfDataSet(TestDataArray) < 0) and (IndexOfBoundaryDataSet(TestDataArray) < 0)
    and not IsBoundaryTimeDataSetUsed(TestDataArray, OtherData)
    and not BoundaryDataSet) then
  begin
    Exit;
  end;
  if BoundaryDataSet and (BoundaryType = 0) then
  begin
    Exit;
  end;
  if not DataSetUsed(TestDataArray, OtherData, AModel) then
    Exit;

  FMixtureCompiler := nil;
  FMixtureExpression := nil;
  UsedVariables := nil;
  StackPosition := -1;
  try
    if (Stack <> nil) then
    begin
      StackPosition := Stack.IndexOf(Name);
      if StackPosition >= 0 then
      begin
        StackPosition := -1;
      end
      else
      begin
        StackPosition := Stack.Add(Name)
      end;
    end
    else
    begin
      StackPosition := -1;
    end;

    if (OtherData <> nil) then
    begin
      InterpValue := OtherData as TInterpValuesItem;
      if InterpValue.Values.UsePHAST_Interpolation
        and (InterpValue.Values.InterpolationDirection = pidMix) then
      begin
        InitializeMixtureExpression(Compiler, MixtureFormula,
          Expression, DataSet, OtherData);

        UsedVariables := TStringList.Create;
        InitializeVariables(UsedVariables, DataSet, Expression, Compiler);

        UpdateCurrentScreenObject(self);
        FMixtureCompiler := Compiler;
        FMixtureExpression := Expression;
      end
      else if not InterpValue.Values.UsePHAST_Interpolation then
      begin
        if InterpValue is TCustomPhastBoundaryCondition then
        begin
          BoundaryCondition := TCustomPhastBoundaryCondition(InterpValue);
          BoundaryCondition.FFormulaObserver.UpToDate := True;
        end;
      end;
    end;
    FMixtureVariables := UsedVariables;

    OtherData := nil;
    IsBoundaryDataSet := (TestDataArray = Model.TopBoundaryType)
      or (TestDataArray = Model.FrontBoundaryType)
      or (TestDataArray = Model.SideBoundaryType)
      or (TestDataArray = Model.Top2DBoundaryType);
    // if the screen object is deleted, or the data set is not used, quit.
    if Deleted or (TestDataArray = nil) or
      ((IndexOfDataSet(TestDataArray) < 0) and (IndexOfBoundaryDataSet(TestDataArray) < 0)
      and not IsBoundaryTimeDataSetUsed(TestDataArray, OtherData)
      and not IsBoundaryDataSet) then
    begin
      Exit;
    end;

    if IsBoundaryDataSet and (BoundaryType = 0) then
    begin
      Exit;
    end;

    BoundaryPosition := IndexOfBoundaryDataSet(DataSet);
    if BoundaryPosition >= 0 then
    begin
      AnObserver := FBoundaryDataSetSubscriptions[BoundaryPosition] as TObserver;
      AnObserver.UpToDate := True;
    end;

    try
      case ViewDirection of
        vdTop: AssignValuesToTopDataSet(DataSet, OtherData, AModel);
        vdFront: AssignValuesToFrontDataSet(DataSet, OtherData, AModel,
          UseLgrEdgeCells);
        vdSide: AssignValuesToSideDataSet(DataSet, OtherData, AModel,
          UseLgrEdgeCells);
        else
          begin
            Assert(False);
          end;
      end;
    except on E: EInvalidDataType do
      begin
        frmFormulaErrors.AddFormulaError(self.Name, DataSet.Name, E.Formula, E.Message);
      end;
    end;
    SetGeometryUpToDate;
    CacheValueArrays;

  finally
    UsedVariables.Free;
    CacheSegments;
    if StackPosition >= 0 then
    begin
      Stack.Delete(StackPosition);
    end;
  end;
end;

function TScreenObject.GetMixtureDataSetFormula(
  const Index: integer): string;
var
  Item: TInterpValuesItem;
begin
  if Index < InterpValues.Count then
  begin
    Item := InterpValues.Items[Index] as TInterpValuesItem;
    result := Item.Values.MixtureFormula;
  end
  else
  begin
    result := ''
  end;
end;

function TScreenObject.GetModflow6Obs: TModflow6Obs;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMf6Obs;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Modflow6Obs;
  end;
end;

function TScreenObject.GetModflowBoundaries: TModflowBoundaries;
begin
  if FModflowBoundaries = nil then
  begin
    FModflowBoundaries := TModflowBoundaries.Create(self);
  end;
  result := FModflowBoundaries
end;

function TScreenObject.GetModflowCfpFixedHeads: TCfpFixedBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateCfpFixedHeads;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.CfpFixedHeads;
  end;
end;

function TScreenObject.GetModflowCfpPipes: TCfpPipeBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateCfpBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.CfpPipes;
  end;
end;

function TScreenObject.GetModflowCfpRchFraction: TCfpRchFractionBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateCfpRchFraction;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.CfpRchFraction;
  end;
end;

function TScreenObject.GetModflowChdBoundary: TChdBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateChdBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowChdBoundary;
  end;
end;

function TScreenObject.GetModflowCSub: TCSubBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateCSubBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowCSub;
  end;
end;

function TScreenObject.GetModflowDrnBoundary: TDrnBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateDrnBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowDrnBoundary;
  end;
end;

function TScreenObject.GetModflowDrtBoundary: TDrtBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateDrtBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowDrtBoundary;
  end;
end;

function TScreenObject.GetModflowEtsBoundary: TEtsBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateEtsBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowEtsBoundary;
  end;
end;

function TScreenObject.GetModflowEvtBoundary: TEvtBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateEvtBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowEvtBoundary;
  end;
end;

function TScreenObject.GetModflowFhbFlowBoundary: TFhbFlowBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFhbFlowBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowFhbFlowBoundary;
  end;
end;

function TScreenObject.GetModflowFhbHeadBoundary: TFhbHeadBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFhbHeadBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowFhbHeadBoundary;
  end;
end;

function TScreenObject.GetModflowFmpPrecip: TFmpPrecipBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFarmPrecip;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FFmpPrecipBoundary;
  end;
end;

function TScreenObject.GetModflowFmpPrecipPotConsumption: TFmp4PrecipPotConsumptionBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowFmpPrecipPotConsumption;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4PrecipPotConsumptionBoundary;
  end;
end;

function TScreenObject.GetModflowFmpRefEvap: TFmpRefEvapBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFarmRefEvap;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FFmpRefEvapBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4AddedDemand: TFmp4AddedDemandBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowAddedDemandBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4AddedDemandBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4ConsumptiveUse: TFmp4ConsumptiveUseBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowConsumptiveUseBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4ConsumptiveUseBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4CropCoefficient: TFmp4CropCoefficientBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowFmp4CropCoefficientBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4CropCoefficientBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4CropHasSalinityDemand: TFmp4CropHasSalinityDemandBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowCropHasSalinityDemandBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4CropHasSalinityDemandBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4EvaporationIrrigationFraction: TFmp4EvaporationIrrigationFractionBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowEvaporationIrrigationFractionBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4EvaporationIrrigationFractionBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4FractionOfIrrigToSurfaceWater: TFmp4FractionOfIrrigToSurfaceWaterBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowFractionOfIrrigToSurfaceWaterBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4FractionOfIrrigToSurfaceWaterBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4FractionOfPrecipToSurfaceWater: TFmp4FractionOfPrecipToSurfaceWaterBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowFractionOfPrecipToSurfaceWaterBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4FractionOfPrecipToSurfaceWaterBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4Irrigation: TFmp4IrrigationBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowIrrigationBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4IrrigationBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4LandUseAreaFraction: TFmp4LandUseAreaFractionBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowFmp4LandUseAreaFractionBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4LandUseAreaFractionBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4MultAddedDemand: TFmp4MultAddedDemandBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMultAddedDemandBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FmpMultAddedDemandBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4MultConsumptiveUse: TFmp4MultConsumptiveUseBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMultConsumptiveUseBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FmpMultConsumptiveUseBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4MultCropCoefficient: TFmp4MultCropCoefficientBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMultCropCoefficientBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FmpMultCropCoefficientBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4MultCropHasSalinityDemand: TFmp4MultCropHasSalinityDemandBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMultCropHasSalinityDemandBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FmpMultCropHasSalinityDemandBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4MultEvaporationIrrigationFraction: TFmp4MultEvaporationIrrigationFractionBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMultEvaporationIrrigationFractionBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FmpMultEvaporationIrrigationFractionBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4MultFractionOfIrrigToSurfaceWater: TFmp4MultFractionOfIrrigToSurfaceWaterBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMultFractionOfIrrigToSurfaceWaterBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FmpMultFractionOfIrrigToSurfaceWaterBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4MultFractionOfPrecipToSurfaceWater: TFmp4MultFractionOfPrecipToSurfaceWaterBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMultFractionOfPrecipToSurfaceWaterBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FmpMultFractionOfPrecipToSurfaceWaterBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4MultIrrigation: TFmp4MultIrrigationBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMultIrrigationBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FmpMultIrrigationBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4MultLandUseAreaFraction: TFmp4MultLandUseAreaFractionBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMultFmp4LandUseAreaFractionBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4MultLandUseAreaFractionBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4MultRootDepth: TFmp4MultRootDepthBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMultRootDepthBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FmpMultRootDepthBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4MultTranspirationFraction: TFmp4MultTranspirationFractionBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMultTranspirationFractionBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FmpMultTranspirationFractionBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4NrdInfilLocationBoundary: TFmp4NrdInfilLocationBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowFmp4NrdInfilLocation;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FFmp4NrdInfilLocationBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4RootDepth: TFmp4RootDepthBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowRootDepthBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4RootDepthBoundary;
  end;
end;

function TScreenObject.GetModflowFmp4TranspirationFraction: TFmp4TranspirationFractionBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowTranspirationFractionBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4TranspirationFractionBoundary;
  end;
end;

function TScreenObject.GetModflowFmpBareEvap: TFmp4BareEvapBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowFmpBareEvap;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FFmp4BareEvap;
  end;
end;

function TScreenObject.GetModflowFmpCropID: TFmpCropIDBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFarmCropID;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FFmpCropIDBoundary;
  end;
end;

function TScreenObject.GetModflowFmpDirectRecharge: TFmp4DirectRechargeBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowFmpDirectRecharge;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.Fmp4DirectRechargeBoundary;
  end;
end;

function TScreenObject.GetModflowFmpFarmID: TFmpFarmIDBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFarmID;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FFmpFarmIDBoundary;
  end;
end;

function TScreenObject.GetModflowFmpWellBoundary: TFmpWellBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateFarmWell;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FFmpWellBoundary;
  end;
end;

function TScreenObject.GetModflowGhbBoundary: TGhbBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateGhbBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowGhbBoundary;
  end;
end;

procedure TScreenObject.CreateHeadObservations;
begin
  if (ModflowBoundaries.FModflowHeadObservations = nil) then
  begin
    ModflowBoundaries.FModflowHeadObservations :=
      THobBoundary.Create(FModel, self);
  end;
end;

function TScreenObject.GetModflowHeadObservations: THobBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateHeadObservations;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowHeadObservations;
  end;
end;

function TScreenObject.GetModflowHfbBoundary: THfbBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateHfbBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowHfbBoundary;
  end;
end;

function TScreenObject.GetModflowHydmodData: THydmodData;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateHydmodData;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowHydmodData;
  end;

end;

function TScreenObject.GetModflowLak6: TLakeMf6;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateLakMf6Boundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowLak6;
  end;
end;

function TScreenObject.GetModflowLakBoundary: TLakBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateLakBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowLakBoundary;
  end;
end;

function TScreenObject.GetModflowMawBoundary: TMawBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMawBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.ModflowMawBoundary;
  end;
end;

function TScreenObject.GetModflowMnw1Boundary: TMnw1Boundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMnw1Boundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowMnw1Boundary;
  end;
end;

function TScreenObject.GetModflowMnw2Boundary: TMnw2Boundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMnw2Boundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowMnw2Boundary;
  end;
end;

function TScreenObject.GetModflowMvr: TMvrBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateModflowMvr;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowMvr;
  end;
end;

function TScreenObject.GetModflowRchBoundary: TRchBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateRchBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowRchBoundary;
  end;
end;

function TScreenObject.GetModflowResBoundary: TResBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateResBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowResBoundary;
  end;
end;

function TScreenObject.GetModflowRipBoundary: TRipBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateRipBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowRipBoundary;
  end;
end;

function TScreenObject.GetModflowRivBoundary: TRivBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateRivBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowRivBoundary;
  end;
end;

function TScreenObject.GetModflowSfr6Boundary: TSfrMf6Boundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateSfr6Boundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.ModflowSfr6Boundary;
  end;
end;

function TScreenObject.GetModflowSfrBoundary: TSfrBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateSfrBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowSfrBoundary;
  end;
end;

function TScreenObject.GetModflowStrBoundary: TStrBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateStrBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowStrBoundary;
  end;
end;

function TScreenObject.GetModflowStreamGage: TStreamGage;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateGagBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowGage;
  end;
end;

function TScreenObject.GetModflowSwiObservations: TSwiObsBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateSwiObsBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowSwiObsBoundary;
  end;
end;

function TScreenObject.GetModflowSwrDirectRunoff: TSwrDirectRunoffBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateSwrDirectRunoffBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FSwrDirectRunoff;
  end;
end;

function TScreenObject.GetModflowSwrEvap: TSwrEvapBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateSwrEvapBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FSwrEvap;
  end;
end;

function TScreenObject.GetModflowSwrLatInflow: TSwrLatInflowBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateSwrLatInflowBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FSwrLatInflow;
  end;
end;

function TScreenObject.GetModflowSwrRain: TSwrRainBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateSwrRainBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FSwrRain;
  end;
end;

function TScreenObject.GetModflowSwrReaches: TSwrReachBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateSwrReachesBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FSwrReaches;
  end;
end;

function TScreenObject.GetModflowSwrStage: TSwrStageBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateSwrStageBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FSwrStage;
  end;
end;

function TScreenObject.GetModflowSwtObservations: TSwtObservations;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateSwtObservations;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowSwtObservations;
  end;
end;

function TScreenObject.GetModflowTvkBoundary: TTvkBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateTvkBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.TvkBoundary;
  end;
end;

function TScreenObject.GetModflowTvsBoundary: TTvsBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateTvsBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.TvsBoundary;
  end;
end;

function TScreenObject.GetModflowUzfBoundary: TUzfBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateUzfBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowUzfBoundary;
  end;
end;

function TScreenObject.GetModflowUzfMf6Boundary: TUzfMf6Boundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateUzfMf6Boundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowUzfMf6Boundary;
  end;
end;

function TScreenObject.GetModflowWellBoundary: TMfWellBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateWelBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FModflowWellBoundary;
  end;
end;

procedure TScreenObject.GetModpathCellList(CellList: TCellAssignmentList;
  AModel: TBaseModel);
begin
  Assert(CellList.Count = 0);
  GetCellsToAssign('0', nil, nil, CellList, alAll, AModel);
end;

function TScreenObject.GetMt3dLktConcBoundary: TMt3dLktConcBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMt3dLktConcBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FMt3dLktConcBoundary;
  end;
end;

function TScreenObject.GetMt3dmsConcBoundary: TMt3dmsConcBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMt3dmsConcBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FMt3dmsConcBoundary;
  end;
end;

function TScreenObject.GetMt3dmsTransObservations: TMt3dmsTransObservations;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMt3dmsTransObservations;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FMt3dmsTransObservations;
  end;
end;

function TScreenObject.GetMt3dSftConcBoundary: TMt3dSftBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMt3dSftConcBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FMt3dSftConcBoundary;
  end;
end;

function TScreenObject.GetMt3dUzfRechConc: TMt3dUztRchConcBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMt3dUzfRchConcBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FMt3dUztRechConc;
  end;
end;

function TScreenObject.GetMt3dUzSsmSinkConcBoundary: TMt3dUzSsmSinkConcBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMt3dUzSsmSinkConcBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FMt3dUzSsmSinkConcBoundary;
  end;
end;

function TScreenObject.GetMt3dUztSatEtConcBoundary: TMt3dUztSatEtConcBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMt3dUztSatEtConcBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FMt3dUztSatEtConcBoundary;
  end;
end;

function TScreenObject.GetMt3dUztUnsatEtConcBoundary: TMt3dUztUnsatEtConcBoundary;
begin
  if (FModel = nil)
    or ((FModel <> nil) and (csLoading in FModel.ComponentState)) then
  begin
    CreateMt3dUztUnsatEtConcBoundary;
  end;
  if FModflowBoundaries = nil then
  begin
    result := nil;
  end
  else
  begin
    result := ModflowBoundaries.FMt3dUztUnsatEtConcBoundary;
  end;
end;

procedure TScreenObject.SetStoredMinimumFraction(const Value: TRealStorage);
begin
  FStoredMinimumFraction.Assign(Value);
end;

procedure TScreenObject.SetMinimumFraction(const Value: double);
begin
  StoredMinimumFraction.Value := value;
end;

procedure TScreenObject.SetMixtureDataSetFormula(const Index: integer;
  const Value: string);
var
  Observer: TObserver;
  OldUseList: TStringList;
  NewUseList: TStringList;
  UseIndex: integer;
  OtherIndex: integer;
  AFunction, OldFunction: string;
  Compiler: TRbwParser;
  ADataSet: TDataArray;
  DS: TObserver;
  Item: TInterpValuesItem;
  Model: TPhastModel;
begin
  Model := FModel as TPhastModel;
  Item := InterpValues.Items[Index] as TInterpValuesItem;
  AFunction := Item.Values.MixtureFormula;
  Observer := nil;
  if AFunction <> Value then
  begin
    if FCanInvalidateModel then
  begin
      InvalidateModel;
      OldFunction := AFunction;
      try
        ADataSet := DataSets[Index];
        Observer := FDataSetMixtureSubscriptions[Index] as TObserver;
        OldUseList := TStringList.Create;
        NewUseList := TStringList.Create;
        try
          Compiler := GetCompiler(ADataSet.Orientation,
            ADataSet.EvaluatedAt);
          if AFunction = '' then
          begin
            AFunction := '0.5';
          end;
          try
            Compiler.Compile(AFunction);
            OldUseList.Assign(Compiler.CurrentExpression.VariablesUsed);
          except on E: ERbwParserError do
              OldUseList.Clear;
          end;

          AFunction := Value;
          if AFunction <> '' then
          begin
            Compiler.Compile(AFunction);
            NewUseList.Assign(Compiler.CurrentExpression.VariablesUsed);
          end;

          Item.Values.MixtureFormula := Value;
          for UseIndex := OldUseList.Count - 1 downto 0 do
          begin
            OtherIndex := NewUseList.IndexOf(OldUseList[UseIndex]);
            if OtherIndex >= 0 then
            begin
              OldUseList.Delete(UseIndex);
              NewUseList.Delete(OtherIndex);
            end;
          end;
          for UseIndex := 0 to OldUseList.Count - 1 do
          begin
            DS := Model.GetObserverByName(OldUseList[UseIndex]);
            Assert(DS <> nil);
            DS.StopsTalkingTo(Observer);
          end;
          for UseIndex := 0 to NewUseList.Count - 1 do
          begin
            DS := Model.GetObserverByName(NewUseList[UseIndex]);
            Assert(DS <> nil);
            DS.TalksTo(Observer);
          end;
          Invalidate;
        finally
          OldUseList.Free;
          NewUseList.Free;
        end;

        if not (csDestroying in Model.ComponentState)
         and not Model.Clearing then
        begin
          Observer.UpToDate := True;
          Observer.UpToDate := False;
          DataSets[Index].Invalidate;
          Observer.UpToDate := True;
        end;
      finally
        if not (csDestroying in Model.ComponentState)
          and not Model.Clearing then
        begin
          if Observer.IsRecursive then
          begin
            Item.Values.MixtureFormula := OldFunction;
          end;
        end;
      end;
    end
    else
    begin
      Item.Values.MixtureFormula := Value;
    end;
  end;
end;

procedure TScreenObject.ResetMixtureSubscriptions;
var
  Index: integer;
  Subscription: TObserver;
begin
  for Index := 0 to FDataSetMixtureSubscriptions.Count - 1 do
  begin
    Subscription := FDataSetMixtureSubscriptions[Index] as TObserver;
    Subscription.UpToDate := True;
  end;
end;

procedure TScreenObject.UpdateMixtureExpression;
begin
  if FFluxBoundary <> nil then
  begin
    FluxBoundary.UpdateMixtureExpression;
  end;
  if FLeakyBoundary <> nil then
  begin
    LeakyBoundary.UpdateMixtureExpression;
  end;
  if FRiverBoundary <> nil then
  begin
    RiverBoundary.UpdateMixtureExpression;
  end;
  if FSpecifiedHeadBoundary <> nil then
  begin
    SpecifiedHeadBoundary.UpdateMixtureExpression;
  end;
  if FWellBoundary <> nil then
  begin
    WellBoundary.UpdateMixtureExpression;
  end;
end;

procedure TScreenObject.UpdateModel(Model: TBaseModel);
begin
  Assert((Model = nil) or (Model is TPhastModel));
  FModel := TPhastModel(Model);
end;

procedure TScreenObject.UpdateModflowTimes(ModflowTimes: TRealList;
  StartTestTime, EndTestTime: double;
  var StartRangeExtended, EndRangeExtended: boolean);
var
  PhastModel: TPhastModel;
begin
  PhastModel := Model as TPhastModel;
  StartRangeExtended := False;
  EndRangeExtended := False;
  if PhastModel.ChdIsSelected
    and (ModflowChdBoundary <> nil)
    and ModflowChdBoundary.Used then
  begin
    ModflowChdBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.GhbIsSelected
    and (ModflowGhbBoundary <> nil)
    and ModflowGhbBoundary.Used then
  begin
    ModflowGhbBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.WelIsSelected
    and (ModflowWellBoundary <> nil)
    and ModflowWellBoundary.Used then
  begin
    ModflowWellBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.RivIsSelected
    and (ModflowRivBoundary <> nil)
    and ModflowRivBoundary.Used then
  begin
    ModflowRivBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.DrnIsSelected
    and (ModflowDrnBoundary <> nil)
    and ModflowDrnBoundary.Used then
  begin
    ModflowDrnBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.DrtIsSelected
    and (ModflowDrtBoundary <> nil)
    and ModflowDrtBoundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    ModflowDrtBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.RchIsSelected
    and (ModflowRchBoundary <> nil)
    and ModflowRchBoundary.Used then
  begin
    ModflowRchBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.EvtIsSelected
    and (ModflowEvtBoundary <> nil)
    and ModflowEvtBoundary.Used then
  begin
    ModflowEvtBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.EtsIsSelected
    and (ModflowEtsBoundary <> nil)
    and ModflowEtsBoundary.Used then
  begin
    ModflowEtsBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.ResIsSelected
    and (ModflowResBoundary <> nil)
    and ModflowResBoundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    ModflowResBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.LakIsSelected
    and (ModflowLakBoundary <> nil)
    and ModflowLakBoundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    ModflowLakBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.SfrIsSelected
    and (ModflowSfrBoundary <> nil)
    and ModflowSfrBoundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    ModflowSfrBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.UzfIsSelected
    and (ModflowUzfBoundary <> nil)
    and ModflowUzfBoundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    ModflowUzfBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.Mnw2IsSelected
    and (ModflowMnw2Boundary <> nil)
    and ModflowMnw2Boundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    ModflowMnw2Boundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.Mt3dIsSelected
    and (Mt3dmsConcBoundary <> nil)
    and Mt3dmsConcBoundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    Mt3dmsConcBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.Mt3dIsSelected
    and (Mt3dUzfRechConc <> nil)
    and Mt3dUzfRechConc.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    Mt3dUzfRechConc.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.Mt3dIsSelected
    and (Mt3dUztSatEtConcBoundary <> nil)
    and Mt3dUztSatEtConcBoundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    Mt3dUztSatEtConcBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.Mt3dIsSelected
    and (Mt3dUztUnsatEtConcBoundary <> nil)
    and Mt3dUztUnsatEtConcBoundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    Mt3dUztUnsatEtConcBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.Mt3dIsSelected
    and (Mt3dUzSsmSinkConcBoundary <> nil)
    and Mt3dUzSsmSinkConcBoundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    Mt3dUzSsmSinkConcBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;

  if PhastModel.StrIsSelected
    and (ModflowStrBoundary <> nil)
    and ModflowStrBoundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    ModflowStrBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;
  if PhastModel.FarmProcess3IsSelected
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    if (ModflowFmpWellBoundary <> nil) and ModflowFmpWellBoundary.Used then
    begin
      ModflowFmpWellBoundary.UpdateTimes(ModflowTimes,
        StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
    end;
    if (ModflowFmpPrecip <> nil) and ModflowFmpPrecip.Used then
    begin
      ModflowFmpPrecip.UpdateTimes(ModflowTimes,
        StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
    end;
    if (ModflowFmpRefEvap <> nil) and ModflowFmpRefEvap.Used then
    begin
      ModflowFmpRefEvap.UpdateTimes(ModflowTimes,
        StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
    end;
    if (ModflowFmpCropID <> nil) and ModflowFmpCropID.Used then
    begin
      ModflowFmpCropID.UpdateTimes(ModflowTimes,
        StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
    end;
    if (ModflowFmpFarmID <> nil) and ModflowFmpFarmID.Used then
    begin
      ModflowFmpFarmID.UpdateTimes(ModflowTimes,
        StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
    end;
  end;

  if PhastModel.CfpRechargeIsSelected(nil)
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    if (ModflowCfpRchFraction <> nil) and ModflowCfpRchFraction.Used then
    begin
      ModflowCfpRchFraction.UpdateTimes(ModflowTimes,
        StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
    end;
  end;

  if PhastModel.RipIsSelected
    and (ModflowRipBoundary <> nil)
    and ModflowRipBoundary.Used
    and (Model.ModelSelection <> msModflow2015)
    then
  begin
    ModflowRipBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;

  if PhastModel.MawIsSelected
    and (ModflowMawBoundary <> nil)
    and ModflowMawBoundary.Used
    and (Model.ModelSelection = msModflow2015)
    then
  begin
    ModflowMawBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;

  if PhastModel.Sfr6IsSelected
    and (ModflowSfr6Boundary <> nil)
    and ModflowSfr6Boundary.Used
    and (Model.ModelSelection = msModflow2015)
    then
  begin
    ModflowSfr6Boundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;

  if PhastModel.HfbIsSelected
    and (ModflowHfbBoundary <> nil)
    and ModflowHfbBoundary.UsedMf6 then
  begin
    ModflowHfbBoundary.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;

  if PhastModel.LakMf6IsSelected
    and (ModflowLak6 <> nil)
    and ModflowLak6.Used
    and (Model.ModelSelection = msModflow2015)
    then
  begin
    ModflowLak6.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;

  if PhastModel.MvrIsSelected
    and (ModflowMvr <> nil)
    and ModflowMvr.Used
    and (Model.ModelSelection = msModflow2015)
    then
  begin
    ModflowMvr.UpdateTimes(ModflowTimes,
      StartTestTime, EndTestTime, StartRangeExtended,EndRangeExtended, Model);
  end;

end;

procedure TScreenObject.CreateValueArrayStorage(
  var StoredValues: TValueArrayStorage);
begin
  if StoredValues = nil then
  begin
    StoredValues := TValueArrayStorage.Create;
  end
  else
  begin
    StoredValues.RestoreData;
  end;
end;

procedure TScreenObject.SetValueStorageField(const Value: TValueArrayStorage;
  var StoredValues: TValueArrayStorage);
begin
  if Value = nil then
  begin
    FreeAndNil(StoredValues);
  end
  else
  begin
    CreateValueArrayStorage(StoredValues);
    StoredValues.Assign(Value);
  end;
end;

//procedure TScreenObject.SetVerticesArePilotPoints(const Value: Boolean);
//begin
//  if FVerticesArePilotPoints <> Value then
//  begin
//    FVerticesArePilotPoints := Value;
//    InvalidateModel;
//  end;
//end;

//procedure TScreenObject.EliminateHoleCells(CellList: TCellAssignmentList);
//const
//  MaxSections = 1000;
//var
//  SO_Polygon: TGpcPolygonClass;
//  ClosedSections: TIntegerList;
//  ASection: NativeInt;
//  PointIndex: Integer;
//  StartIndex: integer;
//  VertexIndex: Integer;
//  EmptyPolygon: TGpcPolygonClass;
//  IntersectionPolygon: TGpcPolygonClass;
//  TranslationIndices: TIntegerList;
//  SearchQuad: TRbwQuadTree;
//  APoint: TPoint2D;
//  ContourIndex: Integer;
//  CellIndex: integer;
//  ACell: TCellAssignment;
//  SectionIndex: integer;
//  HasHoles: Boolean;
//  NewIntersectionPolygon: TGpcPolygonClass;
//  PolySectionIndex: Integer;
//  function HoleSection(ACell: TCellAssignment): Boolean;
//  var
//    ContourIndex: Integer;
//  begin
//    result := False;
//    if ClosedSections = nil then
//    begin
//      Exit;
//    end;
//    ContourIndex := TranslationIndices.IndexOf(ACell.Section);
//    if (ContourIndex >= 0) then
//    begin
//      result := SO_Polygon.Holes[ContourIndex];
//    end;
//  end;
//begin
//  Exit;
//  SO_Polygon := nil;
//  ClosedSections := nil;
//  TranslationIndices := nil;
//  EmptyPolygon := nil;
//  try
//    if Closed and (SectionCount > 1) then
//    begin
//      ClosedSections := TIntegerList.Create;
//      TranslationIndices := TIntegerList.Create;
//      for SectionIndex := 0 to SectionCount - 1 do
//      begin
//        if SectionClosed[SectionIndex] then
//        begin
//          ClosedSections.Add(SectionIndex);
//        end;
//      end;
//      if ClosedSections.Count > 1 then
//      begin
//        EmptyPolygon := TGpcPolygonClass.Create;
//        EmptyPolygon.NumberOfContours := 0;
//        SearchQuad := TRbwQuadTree.Create(nil);
//        try
//          SearchQuad.XMin := MinX;
//          SearchQuad.XMax := MaxX;
//          SearchQuad.YMin := MinY;
//          SearchQuad.YMax := MaxY;
//
//          IntersectionPolygon := nil;
//          SO_Polygon := TGpcPolygonClass.Create;
//          SO_Polygon.NumberOfContours := Min(MaxSections, ClosedSections.Count);
//          for SectionIndex := 0 to ClosedSections.Count - 1 do
//          begin
//            ASection := ClosedSections[SectionIndex];
//            Assert(SectionClosed[ASection]);
//            PolySectionIndex := SectionIndex mod MaxSections;
//            SO_Polygon.VertexCount[PolySectionIndex] :=
//              SectionLength[ASection]-1;
//            StartIndex := SectionStart[ASection];
//            for PointIndex := StartIndex to
//              SectionEnd[ASection] - 1 do
//            begin
//              VertexIndex := PointIndex-StartIndex;
//              APoint := Points[PointIndex];
//              SO_Polygon.Vertices[PolySectionIndex, VertexIndex] := APoint;
//              SearchQuad.AddPoint(APoint.x, APoint.y, Pointer(ASection));
//            end;
//            if ((SectionIndex + 1) mod MaxSections) = 0 then
//            begin
//              if IntersectionPolygon = nil then
//              begin
//                NewIntersectionPolygon := TGpcPolygonClass.CreateFromOperation(
//                  GPC_DIFF, SO_Polygon, EmptyPolygon);
//              end
//              else
//              begin
//                NewIntersectionPolygon := TGpcPolygonClass.CreateFromOperation(
//                  GPC_DIFF, SO_Polygon, IntersectionPolygon);
//              end;
//              IntersectionPolygon.Free;
//              IntersectionPolygon := NewIntersectionPolygon;
//              SO_Polygon.NumberOfContours := Min(MaxSections,
//                ClosedSections.Count - SectionIndex -1);
//            end;
//          end;
//
//          if (ClosedSections.Count mod MaxSections) <> 0 then
//          begin
//            if IntersectionPolygon = nil then
//            begin
//              try
//                IntersectionPolygon := TGpcPolygonClass.CreateFromOperation(
//                  GPC_DIFF, SO_Polygon, EmptyPolygon);
//              finally
//                SO_Polygon.Free;
//                SO_Polygon := IntersectionPolygon;
//              end;
//            end
//            else
//            begin
//              NewIntersectionPolygon := TGpcPolygonClass.CreateFromOperation(
//                GPC_DIFF, SO_Polygon, IntersectionPolygon);
//              IntersectionPolygon.Free;
//              SO_Polygon.Free;
//              SO_Polygon := NewIntersectionPolygon;
//            end;
//          end
//          else
//          begin
//            SO_Polygon.Free;
//            SO_Polygon := IntersectionPolygon;
//          end;
//
//          HasHoles := False;
//          for ContourIndex := 0 to SO_Polygon.NumberOfContours - 1 do
//          begin
//            HasHoles := SO_Polygon.Holes[ContourIndex];
//            if HasHoles then
//            begin
//              break;
//            end;
//          end;
//
//          if not HasHoles then
//          begin
//            Exit;
//          end;
//
//          for ContourIndex := 0 to SO_Polygon.NumberOfContours - 1 do
//          begin
//            APoint := SO_Polygon.Vertices[ContourIndex,0];
//            ASection := NativeInt(SearchQuad.
//              NearestPointsFirstData(APoint.x, APoint.y));
//            TranslationIndices.Add(ASection);
//          end;
//
//          if TranslationIndices.Count <> ClosedSections.Count then
//          begin
//            // The object contains closed sections some of which
//            // share edges. It is assumed that such objects have
//            // no true holes.
//            Exit;
//          end;
//          Assert(TranslationIndices.Count = ClosedSections.Count);
//
//          for CellIndex := CellList.Count - 1 downto 0 do
//          begin
//            ACell := CellList[CellIndex];
//            if HoleSection(ACell) then
//            begin
//              CellList.Delete(CellIndex);
//            end
//          end;
//        finally
//          SearchQuad.Free;
//          SO_Polygon.Free;
//        end;
//      end;
//    end
//  finally
//    ClosedSections.Free;
//    TranslationIndices.Free;
//    EmptyPolygon.Free;
//  end;
//end;

procedure TScreenObject.GetCellsToAssign(
  const DataSetFunction: string; OtherData: TObject;
  const DataSet: TDataArray; CellList: TCellAssignmentList;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
begin
  Assert(not Deleted);
  Assert(CellList.Count = 0);
  case ViewDirection of
    vdTop: Delegate.GetTopCellsToAssign(DataSetFunction, OtherData,
      DataSet, CellList, AssignmentLocation, AModel);
    vdFront: Delegate.GetFrontCellsToAssign(DataSetFunction, OtherData,
      DataSet, CellList, AssignmentLocation, AModel);
    vdSide: Delegate.GetSideCellsToAssign(DataSetFunction, OtherData,
      DataSet, CellList, AssignmentLocation, AModel);
    else Assert(False);
  end;

  if not DuplicatesAllowed then
  begin
    EliminateDuplicates(CellList,Model)
  end;
end;

function TScreenObject.GetChildModel: TBaseModel;
var
  ChildIndex: Integer;
  Item: TChildModelItem;
begin
  if (FChildModelName = '')
    or (ViewDirection <> vdTop)
    or (ElevationCount <> ecZero) then
  begin
    FChildModel := nil;
  end
  else
  begin
    if FChildModel = nil then
    begin
      if frmGoPhast.PhastModel <> nil then
      begin
        for ChildIndex := 0 to frmGoPhast.PhastModel.ChildModels.Count - 1 do
        begin
          Item := frmGoPhast.PhastModel.ChildModels[ChildIndex];
          if Item.ChildModel <> nil then
          begin
            if (Item.ChildModel as TChildModel).ModelName = FChildModelName then
            begin
              FChildModel := Item.ChildModel;
              break;
            end;
          end;
        end;
      end;
    end;
  end;
  result := FChildModel;
end;

function TScreenObject.GetChildModelName: string;
begin
//  if (ViewDirection = vdTop) and (ElevationCount = ecZero) then
  begin
    if (FChildModel <> nil) then
    begin
      result := (FChildModel as TChildModel).ModelName
    end
    else
    begin
      result := FChildModelName;
    end;
  end
//  else
//  begin
//    result := '';
//  end;
end;

procedure TScreenObject.Draw1ElevModflow(const Direction: TViewDirection;
  const Bitmap32: TPersistent; const DrawAsSelected: Boolean; AModel: TBaseModel);
var
  LayerIndex: Integer;
  Segment: TLineSegment;
  SegmentFound: Boolean;
  AnotherSegment: TLineSegment;
  LocalDelegate: TCustomScreenObjectDelegate;
  ModflowGrid: TModflowGrid;
  PointCapacity: Integer;
  SegmentList, NewSegmentList: TList;
  ShouldDraw: Boolean;
  PointCount: Integer;
  RealPoint: TPoint2D;
  ColIndex: Integer;
  RowIndex: Integer;
  SegmentIndex: Integer;
  ObjectIndex: Integer;
  ObjectIndex1: Integer;
  ThreeDPoints: TPointArray;
  LineColor32: TColor32;
  LineDrawn: boolean;
  FrontPoints: T2DRealPointArray;
  Point1, Point2: TPoint2D;
  SidePoints: T2DRealPointArray;
  LineWidth: double;
  function ConvertPoint: TPoint;
  begin
    Assert(FModel <> nil);
    result := (FModel as TPhastModel).ConvertPoint(Direction, RealPoint);
  end;
  function FrontPoint(ThreeDPoint: T3DRealPoint): TPoint2D;
  begin
    result.X := ThreeDPoint.X;
    result.Y := ThreeDPoint.Z;
  end;
  function SidePoint(ThreeDPoint: T3DRealPoint): TPoint2D;
  begin
    result.X := ThreeDPoint.Y;
    result.Y := ThreeDPoint.Z;
  end;
begin
  if DrawAsSelected then
  begin
    LineWidth := 3;
  end
  else
  begin
    LineWidth := 2;
  end;
  if not (AModel as TCustomModel).DisvUsed then
  begin
    LocalDelegate := Delegate as TCustomScreenObjectDelegate;
    ModflowGrid := (AModel as TCustomModel).ModflowGrid;
    try
      LocalDelegate.AssignSelectedCells(AModel);
      if LocalDelegate.SelectedCells.HasCells then
      begin
        PointCapacity := 5;
        SetLength(ThreeDPoints, PointCapacity);
        case Direction of
          vdTop:
            begin
              LayerIndex := ModflowGrid.SelectedLayer;
              if LayerIndex >= ModflowGrid.LayerCount then
              begin
                LayerIndex := ModflowGrid.LayerCount - 1;
              end;
              SegmentList := TList.Create;
              NewSegmentList := TObjectList.Create;
              try
                for ColIndex := 0 to ModflowGrid.ColumnCount - 1 do
                begin
                  for RowIndex := 0 to ModflowGrid.RowCount - 1 do
                  begin
                    if LocalDelegate.
                      SelectedCells[LayerIndex, RowIndex, ColIndex] then
                    begin
                      LineDrawn := False;

                      ShouldDraw := (ColIndex > 0) and LocalDelegate.
                        SelectedCells[LayerIndex, RowIndex, ColIndex - 1];
                      if ShouldDraw then
                      begin
                        // -----------------
                        // |       |       |
                        // |       |       |
                        // |       |       |
                        // |   --------+   |
                        // |       |       |
                        // |       |       |
                        // |       |       |
                        // -----------------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := ModflowGrid.
                          TwoDElementCenter(ColIndex - 1, RowIndex);
                        Segment.Point2 := ModflowGrid.
                          TwoDElementCenter(ColIndex, RowIndex);
                      end;

                      ShouldDraw := (RowIndex > 0) and LocalDelegate.
                        SelectedCells[LayerIndex, RowIndex-1, ColIndex];
                      if ShouldDraw then
                      begin
                        //  ---------
                        //  |       |
                        //  |       |
                        //  |       |
                        //  |   |   |
                        //  |   |   |
                        //  |   |   |
                        //  |   |   |
                        //  ----|----
                        //  |   |   |
                        //  |   |   |
                        //  |   |   |
                        //  |   +   |
                        //  |       |
                        //  |       |
                        //  |       |
                        //  ---------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := ModflowGrid.
                          TwoDElementCenter(ColIndex, RowIndex);
                        Segment.Point2 := ModflowGrid.
                          TwoDElementCenter(ColIndex, RowIndex - 1);
                      end;

                      ShouldDraw := (ColIndex > 0) and (RowIndex > 0)
                        and LocalDelegate.
                        SelectedCells[LayerIndex, RowIndex - 1, ColIndex - 1]
                        and not LocalDelegate.
                        SelectedCells[LayerIndex, RowIndex, ColIndex - 1]
                        and not LocalDelegate.
                        SelectedCells[LayerIndex, RowIndex - 1, ColIndex];
                      if ShouldDraw then
                      begin
                        // ---------
                        // |       |
                        // |       |
                        // |       |
                        // |   \   |
                        // |    \  |
                        // |     \ |
                        // |      \|
                        // -----------------
                        //         |\      |
                        //         | \     |
                        //         |  \    |
                        //         |   +   |
                        //         |       |
                        //         |       |
                        //         |       |
                        //         ---------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := ModflowGrid.
                          TwoDElementCenter(ColIndex, RowIndex);
                        Segment.Point2 := ModflowGrid.
                          TwoDElementCenter(ColIndex - 1, RowIndex-1);
                      end;

                      ShouldDraw := (ColIndex < ModflowGrid.ColumnCount-1)
                        and (RowIndex > 0)
                        and LocalDelegate.
                        SelectedCells[LayerIndex, RowIndex - 1, ColIndex + 1]
                        and not LocalDelegate.
                        SelectedCells[LayerIndex, RowIndex, ColIndex + 1]
                        and not LocalDelegate.
                        SelectedCells[LayerIndex, RowIndex - 1, ColIndex];
                      if ShouldDraw then
                      begin
                        //          ---------
                        //          |       |
                        //          |       |
                        //          |       |
                        //          |   /   |
                        //          |  /    |
                        //          | /     |
                        //          |/      |
                        //  -----------------
                        //  |      /|
                        //  |     / |
                        //  |    /  |
                        //  |   +   |
                        //  |       |
                        //  |       |
                        //  |       |
                        //  ---------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := ModflowGrid.
                          TwoDElementCenter(ColIndex, RowIndex);
                        Segment.Point2 := ModflowGrid.
                          TwoDElementCenter(ColIndex + 1, RowIndex - 1);
                      end;

                      if not LineDrawn then
                      begin
                        LineDrawn := (ColIndex < ModflowGrid.ColumnCount -1)
                          and LocalDelegate.
                          SelectedCells[LayerIndex, RowIndex, ColIndex + 1];
                      end;
                      if not LineDrawn then
                      begin
                        LineDrawn := (RowIndex <  ModflowGrid.RowCount -1)
                          and LocalDelegate.
                          SelectedCells[LayerIndex, RowIndex + 1, ColIndex];
                      end;
                      if not LineDrawn then
                      begin
                        LineDrawn := (ColIndex < ModflowGrid.ColumnCount -1)
                          and (RowIndex < ModflowGrid.RowCount -1)
                          and LocalDelegate.
                          SelectedCells[LayerIndex, RowIndex + 1, ColIndex + 1];
                      end;
                      if not LineDrawn then
                      begin
                        LineDrawn := (ColIndex > 0)
                          and (RowIndex < ModflowGrid.RowCount -1)
                          and LocalDelegate.
                          SelectedCells[LayerIndex, RowIndex + 1, ColIndex - 1];
                      end;
                      if not LineDrawn then
                      begin
                        //   --------
                        //   |  /   |
                        //   | /    |
                        //   |/     |
                        //   |      |
                        //   |      |
                        //   |      |
                        //   --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := ModflowGrid.
                          TwoDColumnEdgeCenter(ColIndex, RowIndex);
                        Segment.Point2 := ModflowGrid.
                          TwoDRowEdgeCenter(ColIndex, RowIndex);

                        //  --------
                        //  |      |
                        //  |      |
                        //  |      |
                        //  |\     |
                        //  | \    |
                        //  |  \   |
                        //  --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := ModflowGrid.
                          TwoDRowEdgeCenter(ColIndex, RowIndex + 1);
                        Segment.Point2 := ModflowGrid.
                          TwoDColumnEdgeCenter(ColIndex, RowIndex);

                        // --------
                        // |      |
                        // |      |
                        // |      |
                        // |     /|
                        // |    / |
                        // |   /  |
                        // --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := ModflowGrid.
                          TwoDColumnEdgeCenter(ColIndex + 1, RowIndex);
                        Segment.Point2 := ModflowGrid.
                          TwoDRowEdgeCenter(ColIndex, RowIndex + 1);

                        // --------
                        // |   \  |
                        // |    \ |
                        // |     \|
                        // |      |
                        // |      |
                        // |      |
                        // --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := ModflowGrid.
                          TwoDColumnEdgeCenter(ColIndex + 1, RowIndex);
                        Segment.Point2 := ModflowGrid.
                          TwoDRowEdgeCenter(ColIndex, RowIndex);
                      end;
                    end;
                  end;
                end;
                while SegmentList.Count > 0 do
                begin
                  NewSegmentList.Clear;
                  Segment := SegmentList[SegmentList.Count - 1];
                  NewSegmentList.Add(Segment);
                  SegmentList.Delete(SegmentList.Count - 1);
                  SegmentFound := True;
                  while SegmentFound do
                  begin
                    SegmentFound := False;
                    for SegmentIndex := SegmentList.Count - 1 downto 0 do
                    begin
                      AnotherSegment := SegmentList[SegmentIndex];
                      if Segment.IsNextSegment(AnotherSegment) then
                      begin
                        Segment := AnotherSegment;
                        NewSegmentList.Add(Segment);
                        SegmentList.Delete(SegmentIndex);
                        SegmentFound := True;
                      end;
                    end;
                  end;
                  PointCount := NewSegmentList.Count + 1;
                  SetLength(ThreeDPoints, PointCount);
                  if NewSegmentList.Count > 0 then
                  begin
                    Segment := NewSegmentList[0];
                    RealPoint := Segment.Point1;
                    ThreeDPoints[0] := ConvertPoint;
                    for ObjectIndex := 0 to NewSegmentList.Count - 1 do
                    begin
                      Segment := NewSegmentList[ObjectIndex];
                      RealPoint := Segment.Point2;
                      ThreeDPoints[ObjectIndex + 1] := ConvertPoint;
                    end;
                    if ColorLine then
                    begin
                      LineColor32 := Color32(LineColor);
                    end
                    else
                    begin
                      LineColor32 := clBlack32;
                    end;
                    DrawBigPolyline32(BitMap32, LineColor32, LineWidth,
                      ThreeDPoints, True, True, 0, PointCount);
                  end;
                end;
              finally
                for ObjectIndex1 := SegmentList.Count - 1 downto 0 do
                begin
                  TObject(SegmentList[ObjectIndex1]).Free;
                end;
                SegmentList.Free;
                NewSegmentList.Free;
              end;
            end;
          vdFront:
            begin
              RowIndex := ModflowGrid.SelectedRow;
              if RowIndex >= ModflowGrid.RowCount then
              begin
                RowIndex := ModflowGrid.RowCount - 1;
              end;
              FrontPoints := nil;
              SegmentList := TList.Create;
              NewSegmentList := TObjectList.Create;
              try
                for ColIndex := 0 to ModflowGrid.ColumnCount - 1 do
                begin
                  for LayerIndex := 0 to ModflowGrid.LayerCount - 1 do
                  begin
                    if LocalDelegate.
                      SelectedCells[LayerIndex, RowIndex, ColIndex] then
                    begin
                      LineDrawn := False;

                      ShouldDraw := (ColIndex > 0) and LocalDelegate.
                        SelectedCells[LayerIndex, RowIndex, ColIndex - 1];
                      if ShouldDraw then
                      begin
                        // -----------------
                        // |       |       |
                        // |       |       |
                        // |       |       |
                        // |   --------+   |
                        // |       |       |
                        // |       |       |
                        // |       |       |
                        // -----------------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := FrontPoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex, RowIndex, ColIndex - 1)));
                        Segment.Point2 := FrontPoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex, RowIndex, ColIndex)));
                      end;

                      ShouldDraw := (LayerIndex > 0) and LocalDelegate.
                        SelectedCells[LayerIndex-1, RowIndex, ColIndex];
                      if ShouldDraw then
                      begin
                        //  ---------
                        //  |       |
                        //  |       |
                        //  |       |
                        //  |   |   |
                        //  |   |   |
                        //  |   |   |
                        //  |   |   |
                        //  ----|----
                        //  |   |   |
                        //  |   |   |
                        //  |   |   |
                        //  |   +   |
                        //  |       |
                        //  |       |
                        //  |       |
                        //  ---------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := FrontPoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex, RowIndex, ColIndex)));
                        Segment.Point2 := FrontPoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex - 1, RowIndex, ColIndex)));
                      end;

                      ShouldDraw := not LineDrawn and (ColIndex > 0)
                        and (LayerIndex > 0)
                        and LocalDelegate. SelectedCells[LayerIndex - 1, RowIndex, ColIndex - 1]
                        and not LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex]
                        and not LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1];
                      if ShouldDraw then
                      begin
                        // ---------
                        // |       |
                        // |       |
                        // |       |
                        // |   \   |
                        // |    \  |
                        // |     \ |
                        // |      \|
                        // -----------------
                        //         |\      |
                        //         | \     |
                        //         |  \    |
                        //         |   +   |
                        //         |       |
                        //         |       |
                        //         |       |
                        //         ---------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := FrontPoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex, RowIndex, ColIndex)));
                        Segment.Point2 := FrontPoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex - 1, RowIndex,
                          ColIndex-1)));
                      end;

                      ShouldDraw := not LineDrawn
                        and (ColIndex > 0)
                        and (LayerIndex < ModflowGrid.LayerCount-1)
                        and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex - 1]
                        and ((LayerIndex = 0) or not LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex])
                        and not LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex - 1]
                        and ((LayerIndex = 0) or not LocalDelegate. SelectedCells[LayerIndex - 1, RowIndex, ColIndex - 1]);
                      if ShouldDraw then
                      begin
                        //          ---------
                        //          |       |
                        //          |       |
                        //          |       |
                        //          |   +   |
                        //          |  /    |
                        //          | /     |
                        //          |/      |
                        //  -----------------
                        //  |      /|
                        //  |     / |
                        //  |    /  |
                        //  |   /   |
                        //  |       |
                        //  |       |
                        //  |       |
                        //  ---------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := FrontPoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex, RowIndex, ColIndex)));
                        Segment.Point2 := FrontPoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex + 1, RowIndex,
                          ColIndex - 1)));
                      end;

                      if not LineDrawn then
                      begin
                        LineDrawn := (ColIndex < ModflowGrid.ColumnCount -1)
                          and LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex + 1];
                      end;
                      if not LineDrawn then
                      begin
                        LineDrawn := (LayerIndex <  ModflowGrid.LayerCount -1)
                          and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex];
                      end;
                      if not LineDrawn then
                      begin
                        LineDrawn := (ColIndex < ModflowGrid.ColumnCount -1)
                          and (LayerIndex < ModflowGrid.LayerCount -1)
                          and LocalDelegate. SelectedCells[LayerIndex + 1, RowIndex, ColIndex + 1];
                      end;
                      if not LineDrawn then
                      begin
                        LineDrawn := (ColIndex > 0)
                          and (LayerIndex < ModflowGrid.LayerCount -1)
                          and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex, ColIndex - 1];
                      end;
                      if not LineDrawn then
                      begin
                        if FrontPoints = nil then
                        begin
                          FrontPoints := ModflowGrid.FrontCellPoints(RowIndex);
                        end;
                        Point1 := FrontPoints[ColIndex * 2, LayerIndex];
                        Point2 := FrontPoints[ColIndex * 2, LayerIndex+1];

                        //   --------
                        //   |  /   |
                        //   | /    |
                        //   |/     |
                        //   |      |
                        //   |      |
                        //   |      |
                        //   --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1.x := Point1.x;
                        Segment.Point1.y := (Point1.y + Point2.y)/2;
                        Segment.Point2 := FrontPoints[ColIndex * 2 +1, LayerIndex];

                        //  --------
                        //  |      |
                        //  |      |
                        //  |      |
                        //  |\     |
                        //  | \    |
                        //  |  \   |
                        //  --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := FrontPoints[ColIndex * 2 + 1,
                          LayerIndex+1];
                        Segment.Point2.x := Point1.x;
                        Segment.Point2.y := (Point1.y + Point2.y)/2;

                        Point1 := FrontPoints[ColIndex * 2 + 2, LayerIndex];
                        Point2 := FrontPoints[ColIndex * 2 + 2, LayerIndex+1];
                        // --------
                        // |      |
                        // |      |
                        // |      |
                        // |     /|
                        // |    / |
                        // |   /  |
                        // --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1.x := Point1.x;
                        Segment.Point1.y := (Point1.y + Point2.y)/2;
                        Segment.Point2 := FrontPoints[ColIndex * 2 +1,
                          LayerIndex+1];

                        // --------
                        // |   \  |
                        // |    \ |
                        // |     \|
                        // |      |
                        // |      |
                        // |      |
                        // --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := FrontPoints[ColIndex * 2 + 1, LayerIndex];
                        Segment.Point2.x := Point1.x;
                        Segment.Point2.y := (Point1.y + Point2.y)/2;
                      end;
                    end;
                  end;
                end;
                while SegmentList.Count > 0 do
                begin
                  NewSegmentList.Clear;
                  Segment := SegmentList[SegmentList.Count - 1];
                  NewSegmentList.Add(Segment);
                  SegmentList.Delete(SegmentList.Count - 1);
                  SegmentFound := True;
                  while SegmentFound do
                  begin
                    SegmentFound := False;
                    for SegmentIndex := SegmentList.Count - 1 downto 0 do
                    begin
                      AnotherSegment := SegmentList[SegmentIndex];
                      if Segment.IsNextSegment(AnotherSegment) then
                      begin
                        Segment := AnotherSegment;
                        NewSegmentList.Add(Segment);
                        SegmentList.Delete(SegmentIndex);
                        SegmentFound := True;
                      end;
                    end;
                  end;
                  PointCount := NewSegmentList.Count + 1;
                  SetLength(ThreeDPoints, PointCount);
                  if NewSegmentList.Count > 0 then
                  begin
                    Segment := NewSegmentList[0];
                    RealPoint := Segment.Point1;
                    ThreeDPoints[0] := ConvertPoint;
                    for ObjectIndex := 0 to NewSegmentList.Count - 1 do
                    begin
                      Segment := NewSegmentList[ObjectIndex];
                      RealPoint := Segment.Point2;
                      ThreeDPoints[ObjectIndex + 1] := ConvertPoint;
                    end;
                    if ColorLine then
                    begin
                      LineColor32 := Color32(LineColor);
                    end
                    else
                    begin
                      LineColor32 := clBlack32;
                    end;
                    DrawBigPolyline32(BitMap32, LineColor32, LineWidth,
                      ThreeDPoints, True, True, 0, PointCount);
                  end;
                end;
              finally
                for ObjectIndex1 := SegmentList.Count - 1 downto 0 do
                begin
                  TObject(SegmentList[ObjectIndex1]).Free;
                end;
                SegmentList.Free;
                NewSegmentList.Free;
              end;
            end;
          vdSide:
            begin
              ColIndex := ModflowGrid.SelectedColumn;
              if ColIndex >= ModflowGrid.ColumnCount then
              begin
                ColIndex := ModflowGrid.ColumnCount - 1;
              end;
              SidePoints := nil;
              SegmentList := TList.Create;
              NewSegmentList := TObjectList.Create;
              try
                for RowIndex := 0 to ModflowGrid.RowCount - 1 do
                begin
                  for LayerIndex := 0 to ModflowGrid.LayerCount - 1 do
                  begin
                    if LocalDelegate.
                      SelectedCells[LayerIndex, RowIndex, ColIndex] then
                    begin
                      LineDrawn := False;

                      ShouldDraw := (RowIndex > 0) and LocalDelegate.
                        SelectedCells[LayerIndex, RowIndex - 1, ColIndex];
                      if ShouldDraw then
                      begin
                        // -----------------
                        // |       |       |
                        // |       |       |
                        // |       |       |
                        // |   --------+   |
                        // |       |       |
                        // |       |       |
                        // |       |       |
                        // -----------------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := SidePoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex, RowIndex - 1, ColIndex)));
                        Segment.Point2 := SidePoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex, RowIndex, ColIndex)));
                      end;

                      ShouldDraw := (LayerIndex > 0) and LocalDelegate.
                        SelectedCells[LayerIndex-1, RowIndex, ColIndex];
                      if ShouldDraw then
                      begin
                        //  ---------
                        //  |       |
                        //  |       |
                        //  |       |
                        //  |   |   |
                        //  |   |   |
                        //  |   |   |
                        //  |   |   |
                        //  ----|----
                        //  |   |   |
                        //  |   |   |
                        //  |   |   |
                        //  |   +   |
                        //  |       |
                        //  |       |
                        //  |       |
                        //  ---------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := SidePoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex, RowIndex, ColIndex)));
                        Segment.Point2 := SidePoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex - 1, RowIndex, ColIndex)));
                      end;

                      ShouldDraw := not LineDrawn and (RowIndex > 0)
                        and (LayerIndex > 0)
                        and LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex - 1, ColIndex]
                        and not LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex]
                        and not LocalDelegate.SelectedCells[LayerIndex, RowIndex - 1, ColIndex];
                      if ShouldDraw then
                      begin
                        // ---------
                        // |       |
                        // |       |
                        // |       |
                        // |   \   |
                        // |    \  |
                        // |     \ |
                        // |      \|
                        // -----------------
                        //         |\      |
                        //         | \     |
                        //         |  \    |
                        //         |   +   |
                        //         |       |
                        //         |       |
                        //         |       |
                        //         ---------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := SidePoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex, RowIndex, ColIndex)));
                        Segment.Point2 := SidePoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex-1, RowIndex - 1,
                            ColIndex)));
                      end;

                      ShouldDraw := not LineDrawn
                        and (RowIndex > 0)
                        and (LayerIndex < ModflowGrid.LayerCount-1)
                        and LocalDelegate.SelectedCells[LayerIndex + 1, RowIndex - 1, ColIndex]
                        and ((LayerIndex = 0) or not LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex, ColIndex])
                        and not LocalDelegate.SelectedCells[LayerIndex, RowIndex + 1, ColIndex]
                        and ((LayerIndex = 0) or not LocalDelegate.SelectedCells[LayerIndex - 1, RowIndex - 1, ColIndex]);
                      if ShouldDraw then
                      begin
                        //          ---------
                        //          |       |
                        //          |       |
                        //          |       |
                        //          |   +   |
                        //          |  /    |
                        //          | /     |
                        //          |/      |
                        //  -----------------
                        //  |      /|
                        //  |     / |
                        //  |    /  |
                        //  |   /   |
                        //  |       |
                        //  |       |
                        //  |       |
                        //  ---------
                        LineDrawn := True;
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := SidePoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex, RowIndex, ColIndex)));
                        Segment.Point2 := SidePoint(ModflowGrid.
                          ThreeDElementCenter(ZeroBasedID(LayerIndex + 1, RowIndex - 1,
                          ColIndex)));
                      end;

                      if not LineDrawn then
                      begin
                        LineDrawn := (RowIndex < ModflowGrid.RowCount -1)
                          and LocalDelegate.
                          SelectedCells[LayerIndex, RowIndex + 1, ColIndex];
                      end;
                      if not LineDrawn then
                      begin
                        LineDrawn := (LayerIndex <  ModflowGrid.LayerCount -1)
                          and LocalDelegate.
                          SelectedCells[LayerIndex + 1, RowIndex, ColIndex];
                      end;
                      if not LineDrawn then
                      begin
                        LineDrawn := (RowIndex < ModflowGrid.RowCount -1)
                          and (LayerIndex < ModflowGrid.LayerCount -1)
                          and LocalDelegate.
                          SelectedCells[LayerIndex + 1, RowIndex + 1, ColIndex];
                      end;
                      if not LineDrawn then
                      begin
                        LineDrawn := (RowIndex > 0)
                          and (LayerIndex < ModflowGrid.LayerCount -1)
                          and LocalDelegate.
                          SelectedCells[LayerIndex + 1, RowIndex - 1, ColIndex];
                      end;
                      if not LineDrawn then
                      begin
                        if SidePoints = nil then
                        begin
                          SidePoints := ModflowGrid.SideCellPoints(ColIndex);
                        end;
                        Point1 := SidePoints[RowIndex * 2, LayerIndex];
                        Point2 := SidePoints[RowIndex * 2, LayerIndex+1];

                        //   --------
                        //   |  /   |
                        //   | /    |
                        //   |/     |
                        //   |      |
                        //   |      |
                        //   |      |
                        //   --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1.x := Point1.x;
                        Segment.Point1.y := (Point1.y + Point2.y)/2;
                        Segment.Point2 := SidePoints[RowIndex * 2 +1, LayerIndex];

                        //  --------
                        //  |      |
                        //  |      |
                        //  |      |
                        //  |\     |
                        //  | \    |
                        //  |  \   |
                        //  --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := SidePoints[RowIndex * 2 + 1,
                          LayerIndex+1];
                        Segment.Point2.x := Point1.x;
                        Segment.Point2.y := (Point1.y + Point2.y)/2;

                        Point1 := SidePoints[RowIndex * 2 + 2, LayerIndex];
                        Point2 := SidePoints[RowIndex * 2 + 2, LayerIndex+1];
                        // --------
                        // |      |
                        // |      |
                        // |      |
                        // |     /|
                        // |    / |
                        // |   /  |
                        // --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1.x := Point1.x;
                        Segment.Point1.y := (Point1.y + Point2.y)/2;
                        Segment.Point2 := SidePoints[RowIndex * 2 +1, LayerIndex+1];

                        // --------
                        // |   \  |
                        // |    \ |
                        // |     \|
                        // |      |
                        // |      |
                        // |      |
                        // --------
                        Segment := TLineSegment.Create;
                        SegmentList.Add(Segment);
                        Segment.Point1 := SidePoints[RowIndex * 2 + 1, LayerIndex];
                        Segment.Point2.x := Point1.x;
                        Segment.Point2.y := (Point1.y + Point2.y)/2;
                      end;
                    end;
                  end;
                end;
                while SegmentList.Count > 0 do
                begin
                  NewSegmentList.Clear;
                  Segment := SegmentList[SegmentList.Count - 1];
                  NewSegmentList.Add(Segment);
                  SegmentList.Delete(SegmentList.Count - 1);
                  SegmentFound := True;
                  while SegmentFound do
                  begin
                    SegmentFound := False;
                    for SegmentIndex := SegmentList.Count - 1 downto 0 do
                    begin
                      AnotherSegment := SegmentList[SegmentIndex];
                      if Segment.IsNextSegment(AnotherSegment) then
                      begin
                        Segment := AnotherSegment;
                        NewSegmentList.Add(Segment);
                        SegmentList.Delete(SegmentIndex);
                        SegmentFound := True;
                      end;
                    end;
                  end;
                  PointCount := NewSegmentList.Count + 1;
                  SetLength(ThreeDPoints, PointCount);
                  if NewSegmentList.Count > 0 then
                  begin
                    Segment := NewSegmentList[0];
                    RealPoint := Segment.Point1;
                    ThreeDPoints[0] := ConvertPoint;
                    for ObjectIndex := 0 to NewSegmentList.Count - 1 do
                    begin
                      Segment := NewSegmentList[ObjectIndex];
                      RealPoint := Segment.Point2;
                      ThreeDPoints[ObjectIndex + 1] := ConvertPoint;
                    end;
                    if ColorLine then
                    begin
                      LineColor32 := Color32(LineColor);
                    end
                    else
                    begin
                      LineColor32 := clBlack32;
                    end;
                    DrawBigPolyline32(BitMap32, LineColor32, LineWidth,
                      ThreeDPoints, True, True, 0, PointCount);
                  end;
                end;
              finally
                for ObjectIndex1 := SegmentList.Count - 1 downto 0 do
                begin
                  TObject(SegmentList[ObjectIndex1]).Free;
                end;
                SegmentList.Free;
                NewSegmentList.Free;
              end;
            end;
        else
          Assert(False);
        end;
      end;
    finally
      LocalDelegate.SelectedCells.Clear;
    end;
  end;
end;

procedure TScreenObject.Draw1ElevPhast(const Direction: TViewDirection;
  const Bitmap32: TPersistent; const DrawAsSelected: Boolean);
var
//  LayerIndex: Integer;
  Segment: TLineSegment;
  SegmentFound: Boolean;
  AnotherSegment: TLineSegment;
  LocalDelegate: TPhastDelegate;
  PointCapacity: Integer;
  SegmentList, NewSegmentList: TList;
  ShouldDraw: Boolean;
  PointCount: Integer;
  RealPoint: TPoint2D;
//  ColIndex: Integer;
//  RowIndex: Integer;
  SegmentIndex: Integer;
  ObjectIndex: Integer;
  ObjectIndex1: Integer;
  ThreeDPoints: TPointArray;
  LineColor32: TColor32;
  LineDrawn: boolean;
//  FrontPoints: T2DRealPointArray;
//  Point1, Point2: TPoint2D;
//  SidePoints: T2DRealPointArray;
  PhastGrid: TPhastGrid;
  ParallelDirection1: TViewDirection;
  ParallelDirection2: TViewDirection;
  PerpendicularIndex: Integer;
  ParallelLimit1: Integer;
  ParallelLimit2: Integer;
  ParallelIndex1: Integer;
  LowerIndex1Bound: Double;
  UpperIndex1Bound: Double;
  CellBelowIndex1Bound: Double;
  Dummy: Double;
  CellAboveIndex1Bound: Double;
  ParallelIndex2: Integer;
  LowerIndex2Bound: Double;
  UpperIndex2Bound: Double;
  CellBelowIndex2Bound: Double;
  CellAboveIndex2Bound: Double;
  LineWidth: double;
  function ConvertPoint: TPoint;
  begin
    Assert(FModel <> nil);
    result := (FModel as TPhastModel).ConvertPoint(Direction, RealPoint);
  end;
  function FrontPoint(ThreeDPoint: T3DRealPoint): TPoint2D;
  begin
    result.X := ThreeDPoint.X;
    result.Y := ThreeDPoint.Z;
  end;
  function SidePoint(ThreeDPoint: T3DRealPoint): TPoint2D;
  begin
    result.X := ThreeDPoint.Y;
    result.Y := ThreeDPoint.Z;
  end;
  function IsSelectedCell(PerpendicularIndex, ParallelIndex2,
    ParallelIndex1: integer): boolean;
  var
    ColIndex, RowIndex, LayerIndex: integer;
  begin
    ColIndex := -1;
    RowIndex := -1;
    LayerIndex := -1;
    case Direction of
      vdTop:
        begin
          ColIndex := ParallelIndex1;
          RowIndex := ParallelIndex2;
          LayerIndex := PerpendicularIndex;
        end;
      vdFront:
        begin
          ColIndex := ParallelIndex1;
          RowIndex := PerpendicularIndex;
          LayerIndex := ParallelIndex2;
        end;
      vdSide:
        begin
          ColIndex := PerpendicularIndex;
          RowIndex := ParallelIndex1;
          LayerIndex := ParallelIndex2;
        end;
      else Assert(False);
    end;
    result := LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex];
  end;
begin
  LocalDelegate := Delegate as TPhastDelegate;
  PhastGrid := (Model as TPhastModel).PhastGrid;
  try
    LocalDelegate.AssignSelectedCells(Model);
    if DrawAsSelected then
    begin
      LineWidth := 2;
    end
    else
    begin
      LineWidth := 3;
    end;
    if LocalDelegate.SelectedCells.HasCells then
    begin
      PointCapacity := 5;
      SetLength(ThreeDPoints, PointCapacity);
      PerpendicularIndex := -1;
      ParallelDirection1 := vdSide;
      ParallelDirection2 := vdFront;
      ParallelLimit1 := -1;
      ParallelLimit2 := -1;
      case Direction of
        vdTop:
          begin
            ParallelDirection1 := vdSide;
            ParallelDirection2 := vdFront;
            PerpendicularIndex := PhastGrid.DisplayLayer;

            case EvaluatedAt of
              eaBlocks:
                begin
                  if PerpendicularIndex >= PhastGrid.LayerCount then
                  begin
                    PerpendicularIndex := PhastGrid.LayerCount - 1;
                  end;
                  ParallelLimit1 := PhastGrid.ColumnCount - 1;
                  ParallelLimit2 := PhastGrid.RowCount - 1;
                end;
              eaNodes:
                begin
                  if PerpendicularIndex > PhastGrid.LayerCount then
                  begin
                    PerpendicularIndex := PhastGrid.LayerCount;
                  end;
                  ParallelLimit1 := PhastGrid.ColumnCount;
                  ParallelLimit2 := PhastGrid.RowCount;
                end;
              else Assert(False);
            end;
          end;
        vdFront:
          begin
            ParallelDirection1 := vdSide;
            ParallelDirection2 := vdTop;
            PerpendicularIndex := PhastGrid.DisplayRow;
            case EvaluatedAt of
              eaBlocks:
                begin
                  if PerpendicularIndex >= PhastGrid.RowCount then
                  begin
                    PerpendicularIndex := PhastGrid.RowCount - 1;
                  end;
                  ParallelLimit1 := PhastGrid.ColumnCount - 1;
                  ParallelLimit2 := PhastGrid.LayerCount - 1;
                end;
              eaNodes:
                begin
                  if PerpendicularIndex > PhastGrid.RowCount then
                  begin
                    PerpendicularIndex := PhastGrid.RowCount;
                  end;
                  ParallelLimit1 := PhastGrid.ColumnCount;
                  ParallelLimit2 := PhastGrid.LayerCount;
                end;
              else Assert(False);
            end;
          end;
        vdSide:
          begin
            ParallelDirection1 := vdFront;
            ParallelDirection2 := vdTop;
            PerpendicularIndex := PhastGrid.DisplayColumn;
            case EvaluatedAt of
              eaBlocks:
                begin
                  if PerpendicularIndex >= PhastGrid.ColumnCount then
                  begin
                    PerpendicularIndex := PhastGrid.ColumnCount - 1;
                  end;
                  ParallelLimit1 := PhastGrid.RowCount - 1;
                  ParallelLimit2 := PhastGrid.LayerCount - 1;
                end;
              eaNodes:
                begin
                  if PerpendicularIndex > PhastGrid.ColumnCount then
                  begin
                    PerpendicularIndex := PhastGrid.ColumnCount;
                  end;
                  ParallelLimit1 := PhastGrid.RowCount;
                  ParallelLimit2 := PhastGrid.LayerCount;
                end;
              else Assert(False);
            end;
          end;
        Else Assert(False);
      end;

      SegmentList := TList.Create;
      NewSegmentList := TObjectList.Create;
      try
        for ParallelIndex1 := 0 to ParallelLimit1 do
        begin

          PhastGrid.DrawBlockExtents(ParallelDirection1, EvaluatedAt,
            ParallelIndex1, LowerIndex1Bound, UpperIndex1Bound);
          if ParallelIndex1 > 0 then
          begin
            PhastGrid.DrawBlockExtents(ParallelDirection1, EvaluatedAt,
              ParallelIndex1-1, CellBelowIndex1Bound, Dummy);
          end;
          if ParallelIndex1 < ParallelLimit1 then
          begin
            PhastGrid.DrawBlockExtents(ParallelDirection1, EvaluatedAt,
              ParallelIndex1+1, Dummy, CellAboveIndex1Bound);
          end;
          for ParallelIndex2 := 0 to ParallelLimit2 do
          begin
            PhastGrid.DrawBlockExtents(ParallelDirection2, EvaluatedAt,
              ParallelIndex2, LowerIndex2Bound, UpperIndex2Bound);
            if ParallelIndex2 > 0 then
            begin
              PhastGrid.DrawBlockExtents(ParallelDirection2, EvaluatedAt,
                ParallelIndex2-1, CellBelowIndex2Bound, Dummy);
            end;
            if ParallelIndex2 < ParallelLimit2 then
            begin
              PhastGrid.DrawBlockExtents(ParallelDirection2, EvaluatedAt,
                ParallelIndex2+1, Dummy, CellAboveIndex2Bound);
            end;
            if IsSelectedCell(PerpendicularIndex, ParallelIndex2,
              ParallelIndex1) then
            begin
              LineDrawn := False;

              ShouldDraw := (ParallelIndex1 > 0) and
                IsSelectedCell(PerpendicularIndex, ParallelIndex2,
                ParallelIndex1 - 1);
              if ShouldDraw then
              begin
                // -----------------
                // |       |       |
                // |       |       |
                // |       |       |
                // |   --------+   |
                // |       |       |
                // |       |       |
                // |       |       |
                // -----------------
                LineDrawn := True;
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (LowerIndex1Bound + UpperIndex1Bound)/2;
                Segment.Point1.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
                Segment.Point2.x := (CellBelowIndex1Bound + LowerIndex1Bound)/2;
                Segment.Point2.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
              end;

              ShouldDraw := (ParallelIndex2 > 0) and
                IsSelectedCell(PerpendicularIndex, ParallelIndex2-1,
                ParallelIndex1);
              if ShouldDraw then
              begin
                //  ---------
                //  |       |
                //  |       |
                //  |       |
                //  |   |   |
                //  |   |   |
                //  |   |   |
                //  |   |   |
                //  ----|----
                //  |   |   |
                //  |   |   |
                //  |   |   |
                //  |   +   |
                //  |       |
                //  |       |
                //  |       |
                //  ---------
                LineDrawn := True;
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (LowerIndex1Bound + UpperIndex1Bound)/2;
                Segment.Point1.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
                Segment.Point2.x := (LowerIndex1Bound + UpperIndex1Bound)/2;
                Segment.Point2.y := (CellBelowIndex2Bound + LowerIndex2Bound)/2;
              end;

              ShouldDraw := (ParallelIndex1 > 0) and (ParallelIndex2 > 0)
                and IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                  ParallelIndex1 - 1)
                and not IsSelectedCell(PerpendicularIndex, ParallelIndex2,
                  ParallelIndex1 - 1)
                and not IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                  ParallelIndex1);
              if ShouldDraw then
              begin
                // ---------
                // |       |
                // |       |
                // |       |
                // |   \   |
                // |    \  |
                // |     \ |
                // |      \|
                // -----------------
                //         |\      |
                //         | \     |
                //         |  \    |
                //         |   +   |
                //         |       |
                //         |       |
                //         |       |
                //         ---------
                LineDrawn := True;
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (LowerIndex1Bound + UpperIndex1Bound)/2;
                Segment.Point1.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
                Segment.Point2.x := (CellBelowIndex1Bound + LowerIndex1Bound)/2;
                Segment.Point2.y := (CellBelowIndex2Bound + LowerIndex2Bound)/2;
              end;

              ShouldDraw := (ParallelIndex1 < ParallelLimit1)
                and (ParallelIndex2 > 0)
                and IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                  ParallelIndex1 + 1)
                and not IsSelectedCell(PerpendicularIndex, ParallelIndex2,
                  ParallelIndex1 + 1)
                and not IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                  ParallelIndex1);
              if ShouldDraw then
              begin
                //          ---------
                //          |       |
                //          |       |
                //          |       |
                //          |   /   |
                //          |  /    |
                //          | /     |
                //          |/      |
                //  -----------------
                //  |      /|
                //  |     / |
                //  |    /  |
                //  |   +   |
                //  |       |
                //  |       |
                //  |       |
                //  ---------
                LineDrawn := True;
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (LowerIndex1Bound + UpperIndex1Bound)/2;
                Segment.Point1.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
                Segment.Point2.x := (UpperIndex1Bound + CellAboveIndex1Bound)/2;
                Segment.Point2.y := (CellBelowIndex2Bound + LowerIndex2Bound)/2;
              end;

              if not LineDrawn then
              begin
                LineDrawn := (ParallelIndex1 < ParallelLimit1)
                  and IsSelectedCell(PerpendicularIndex, ParallelIndex2,
                  ParallelIndex1 + 1);
              end;
              if not LineDrawn then
              begin
                LineDrawn := (ParallelIndex2 <  ParallelLimit2)
                  and IsSelectedCell(PerpendicularIndex, ParallelIndex2 + 1,
                  ParallelIndex1);
              end;
              if not LineDrawn then
              begin
                LineDrawn := (ParallelIndex1 < ParallelLimit1)
                  and (ParallelIndex2 < ParallelLimit2)
                  and IsSelectedCell(PerpendicularIndex, ParallelIndex2 + 1,
                  ParallelIndex1 + 1);
              end;
              if not LineDrawn then
              begin
                LineDrawn := (ParallelIndex1 > 0)
                  and (ParallelIndex2 < ParallelLimit2)
                  and IsSelectedCell(PerpendicularIndex, ParallelIndex2 + 1,
                  ParallelIndex1 - 1);
              end;
              if not LineDrawn then
              begin
                //   --------
                //   |  /   |
                //   | /    |
                //   |/     |
                //   |      |
                //   |      |
                //   |      |
                //   --------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := LowerIndex1Bound;
                Segment.Point1.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
                Segment.Point2.x := (LowerIndex1Bound + UpperIndex1Bound)/2;
                Segment.Point2.y := LowerIndex2Bound;

                //  --------
                //  |      |
                //  |      |
                //  |      |
                //  |\     |
                //  | \    |
                //  |  \   |
                //  --------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (LowerIndex1Bound + UpperIndex1Bound)/2;
                Segment.Point1.y := UpperIndex2Bound;
                Segment.Point2.x := LowerIndex1Bound;
                Segment.Point2.y := (LowerIndex2Bound + UpperIndex2Bound)/2;

                // --------
                // |      |
                // |      |
                // |      |
                // |     /|
                // |    / |
                // |   /  |
                // --------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := UpperIndex1Bound;
                Segment.Point1.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
                Segment.Point2.x := (LowerIndex1Bound + UpperIndex1Bound)/2;
                Segment.Point2.y := UpperIndex2Bound;

                // --------
                // |   \  |
                // |    \ |
                // |     \|
                // |      |
                // |      |
                // |      |
                // --------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (LowerIndex1Bound + UpperIndex1Bound)/2;
                Segment.Point1.y := LowerIndex2Bound;
                Segment.Point2.x := UpperIndex1Bound;
                Segment.Point2.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
              end;
            end;
          end;
        end;
        while SegmentList.Count > 0 do
        begin
          NewSegmentList.Clear;
          Segment := SegmentList[SegmentList.Count - 1];
          NewSegmentList.Add(Segment);
          SegmentList.Delete(SegmentList.Count - 1);
          SegmentFound := True;
          while SegmentFound do
          begin
            SegmentFound := False;
            for SegmentIndex := SegmentList.Count - 1 downto 0 do
            begin
              AnotherSegment := SegmentList[SegmentIndex];
              if Segment.IsNextSegment(AnotherSegment) then
              begin
                Segment := AnotherSegment;
                NewSegmentList.Add(Segment);
                SegmentList.Delete(SegmentIndex);
                SegmentFound := True;
              end;
            end;
          end;
          PointCount := NewSegmentList.Count + 1;
          SetLength(ThreeDPoints, PointCount);
          if NewSegmentList.Count > 0 then
          begin
            Segment := NewSegmentList[0];
            RealPoint := Segment.Point1;
            if Direction = vdTop then
            begin
              RealPoint := PhastGrid.
                RotateFromGridCoordinatesToRealWorldCoordinates(RealPoint)
            end;
            ThreeDPoints[0] := ConvertPoint;
            for ObjectIndex := 0 to NewSegmentList.Count - 1 do
            begin
              Segment := NewSegmentList[ObjectIndex];
              RealPoint := Segment.Point2;
              if Direction = vdTop then
              begin
                RealPoint := PhastGrid.
                  RotateFromGridCoordinatesToRealWorldCoordinates(RealPoint)
              end;
              ThreeDPoints[ObjectIndex + 1] := ConvertPoint;
            end;
            if ColorLine then
            begin
              LineColor32 := Color32(LineColor);
            end
            else
            begin
              LineColor32 := clBlack32;
            end;
            DrawBigPolyline32(BitMap32, LineColor32, LineWidth, ThreeDPoints,
              True, True, 0, PointCount);
          end;
        end;

      finally
        for ObjectIndex1 := SegmentList.Count - 1 downto 0 do
        begin
          TObject(SegmentList[ObjectIndex1]).Free;
        end;
        SegmentList.Free;
        NewSegmentList.Free;
      end;
    end;
  finally
    LocalDelegate.SelectedCells.Clear;
  end;
end;

procedure TScreenObject.Draw1ElevSutra(const Direction: TViewDirection;
  const Bitmap32: TPersistent; const DrawAsSelected: Boolean);
begin
  // incomplete
  { TODO -cSUTRA : This needs to be finished. }
end;

procedure TScreenObject.Draw2ElevPhast(const Direction: TViewDirection;
  const Bitmap32: TPersistent);
const
  UnselectedOpacity = 125;
var
  Segment: TLineSegment;
  SegmentFound: Boolean;
  AnotherSegment: TLineSegment;
  LocalDelegate: TPhastDelegate;
  PhastGrid: TPhastGrid;
  PointCapacity: Integer;
  SegmentList, NewSegmentList: TList;
  ShouldDraw: Boolean;
  PointCount: Integer;
  RealPoint: TPoint2D;
  SegmentIndex: Integer;
  ObjectIndex: Integer;
  ThreeDPoints: TPointArray;
  FillColor32: TColor32;
  LineColor32: TColor32;
  P: TPolygon32;
  MultiplePolygons: boolean;
  Dummy: double;
  PerpendicularIndex, ParallelIndex1, ParallelIndex2: integer;
  CellBelowIndex1Bound, LowerIndex1Bound: double;
  UpperIndex1Bound, CellAboveIndex1Bound: double;
  CellBelowIndex2Bound, LowerIndex2Bound: double;
  UpperIndex2Bound, CellAboveIndex2Bound: double;
  ParallelLimit1: integer;
  ParallelLimit2: integer;
  ParallelDirection1: TViewDirection;
  ParallelDirection2: TViewDirection;
  function ConvertPoint: TPoint;
  begin
    Assert(FModel <> nil);
    result := (FModel as TPhastModel).ConvertPoint(Direction, RealPoint);
  end;
  function IsSelectedCell(PerpendicularIndex, ParallelIndex2,
    ParallelIndex1: integer): boolean;
  var
    ColIndex, RowIndex, LayerIndex: integer;
  begin
    ColIndex := -1;
    RowIndex := -1;
    LayerIndex := -1;
    case Direction of
      vdTop:
        begin
          ColIndex := ParallelIndex1;
          RowIndex := ParallelIndex2;
          LayerIndex := PerpendicularIndex;
        end;
      vdFront:
        begin
          ColIndex := ParallelIndex1;
          RowIndex := PerpendicularIndex;
          LayerIndex := ParallelIndex2;
        end;
      vdSide:
        begin
          ColIndex := PerpendicularIndex;
          RowIndex := ParallelIndex1;
          LayerIndex := ParallelIndex2;
        end;
      else Assert(False);
    end;
    result := LocalDelegate.SelectedCells[LayerIndex, RowIndex, ColIndex];
  end;
begin
  LocalDelegate := Delegate as TPhastDelegate;
  PhastGrid := (Model as TPhastModel).PhastGrid;
  try
    LocalDelegate.AssignSelectedCells(Model);
    if LocalDelegate.SelectedCells.HasCells then
    begin
      PointCapacity := 5;
      PerpendicularIndex := -1;
      ParallelDirection1 := vdSide;
      ParallelDirection2 := vdFront;
      ParallelLimit1 := -1;
      ParallelLimit2 := -1;
      SetLength(ThreeDPoints, PointCapacity);
      case Direction of
        vdTop:
          begin
            ParallelDirection1 := vdSide;
            ParallelDirection2 := vdFront;
            PerpendicularIndex := PhastGrid.DisplayLayer;
            case EvaluatedAt of
              eaBlocks:
                begin
                  if PerpendicularIndex >= PhastGrid.LayerCount then
                  begin
                    PerpendicularIndex := PhastGrid.LayerCount - 1;
                  end;
                  ParallelLimit1 := PhastGrid.ColumnCount - 1;
                  ParallelLimit2 := PhastGrid.RowCount - 1;
                end;
              eaNodes:
                begin
                  ParallelLimit1 := PhastGrid.ColumnCount;
                  ParallelLimit2 := PhastGrid.RowCount;
                end;
              else Assert(False);
            end;
          end;
        vdFront:
          begin
            ParallelDirection1 := vdSide;
            ParallelDirection2 := vdTop;
            PerpendicularIndex := PhastGrid.DisplayRow;
            case EvaluatedAt of
              eaBlocks:
                begin
                  if PerpendicularIndex >= PhastGrid.RowCount then
                  begin
                    PerpendicularIndex := PhastGrid.RowCount - 1;
                  end;
                  ParallelLimit1 := PhastGrid.ColumnCount - 1;
                  ParallelLimit2 := PhastGrid.LayerCount - 1;
                end;
              eaNodes:
                begin
                  ParallelLimit1 := PhastGrid.ColumnCount;
                  ParallelLimit2 := PhastGrid.LayerCount;
                end;
              else Assert(False);
            end;
          end;
        vdSide:
          begin
            ParallelDirection1 := vdFront;
            ParallelDirection2 := vdTop;
            PerpendicularIndex := PhastGrid.DisplayColumn;
            case EvaluatedAt of
              eaBlocks:
                begin
                  if PerpendicularIndex >= PhastGrid.ColumnCount then
                  begin
                    PerpendicularIndex := PhastGrid.ColumnCount - 1;
                  end;
                  ParallelLimit1 := PhastGrid.RowCount - 1;
                  ParallelLimit2 := PhastGrid.LayerCount - 1;
                end;
              eaNodes:
                begin
                  ParallelLimit1 := PhastGrid.RowCount;
                  ParallelLimit2 := PhastGrid.LayerCount;
                end;
              else Assert(False);
            end;
          end;
        Else Assert(False);
      end;
      P := nil;
      MultiplePolygons := false;
      SegmentList := TList.Create;
      NewSegmentList := TObjectList.Create;
      try
        for ParallelIndex1 := 0 to ParallelLimit1 do
        begin
          PhastGrid.DrawBlockExtents(ParallelDirection1, EvaluatedAt,
            ParallelIndex1, LowerIndex1Bound, UpperIndex1Bound);
          if ParallelIndex1 > 0 then
          begin
            PhastGrid.DrawBlockExtents(ParallelDirection1, EvaluatedAt,
              ParallelIndex1-1, CellBelowIndex1Bound, Dummy);
          end;
          if ParallelIndex1 < ParallelLimit1 then
          begin
            PhastGrid.DrawBlockExtents(ParallelDirection1, EvaluatedAt,
              ParallelIndex1+1, Dummy, CellAboveIndex1Bound);
          end;
          for ParallelIndex2 := 0 to ParallelLimit2 do
          begin
            PhastGrid.DrawBlockExtents(ParallelDirection2, EvaluatedAt,
              ParallelIndex2, LowerIndex2Bound, UpperIndex2Bound);
            if ParallelIndex2 > 0 then
            begin
              PhastGrid.DrawBlockExtents(ParallelDirection2, EvaluatedAt,
                ParallelIndex2-1, CellBelowIndex2Bound, Dummy);
            end;
            if ParallelIndex2 < ParallelLimit2 then
            begin
              PhastGrid.DrawBlockExtents(ParallelDirection2, EvaluatedAt,
                ParallelIndex2+1, Dummy, CellAboveIndex2Bound);
            end;
            if IsSelectedCell(PerpendicularIndex,
              ParallelIndex2, ParallelIndex1) then
            begin
              ShouldDraw := True;
              if (ParallelIndex1 > 0) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2, ParallelIndex1-1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex2 > 0) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2 - 1, ParallelIndex1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 > 0) and (ParallelIndex2 > 0) and
                IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                //   --------
                //   |  /   |
                //   | /    |
                //   |/     |
                //   |      |
                //   |      |
                //   |      |
                //   --------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := LowerIndex1Bound;
                Segment.Point1.y := (LowerIndex2Bound+UpperIndex2Bound)/2;
                Segment.Point2.x := (LowerIndex1Bound+UpperIndex1Bound)/2;
                Segment.Point2.y := LowerIndex2Bound;
              end;

              ShouldDraw := True;
              if (ParallelIndex1 > 0) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2, ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex2 < ParallelLimit2) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2 + 1, ParallelIndex1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 > 0) and (ParallelIndex2 < ParallelLimit2)
                and IsSelectedCell(PerpendicularIndex, ParallelIndex2 + 1,
                ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                //  --------
                //  |      |
                //  |      |
                //  |      |
                //  |\     |
                //  | \    |
                //  |  \   |
                //  --------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (LowerIndex1Bound+UpperIndex1Bound)/2;
                Segment.Point1.y :=  UpperIndex2Bound;
                Segment.Point2.x := LowerIndex1Bound;
                Segment.Point2.y := (LowerIndex2Bound+UpperIndex2Bound)/2;
              end;

              ShouldDraw := True;
              if (ParallelIndex1 < ParallelLimit1) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2, ParallelIndex1 + 1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex2 < ParallelLimit2) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2 + 1, ParallelIndex1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 < ParallelLimit1)
                and (ParallelIndex2 < ParallelLimit2)
                and IsSelectedCell(PerpendicularIndex, ParallelIndex2 + 1,
                ParallelIndex1 + 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                // --------
                // |      |
                // |      |
                // |      |
                // |     /|
                // |    / |
                // |   /  |
                // --------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := UpperIndex1Bound;
                Segment.Point1.y := (LowerIndex2Bound+UpperIndex2Bound)/2;
                Segment.Point2.x := (LowerIndex1Bound+UpperIndex1Bound)/2;
                Segment.Point2.y := UpperIndex2Bound;
              end;

              ShouldDraw := True;
              if (ParallelIndex1 < ParallelLimit1) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2, ParallelIndex1 + 1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex2 > 0) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2 - 1, ParallelIndex1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 < ParallelLimit1) and (ParallelIndex2 > 0)
                and IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                ParallelIndex1 + 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                // ---------
                // |    \  |
                // |     \ |
                // |      \|
                // |   +   |
                // |       |
                // |       |
                // |       |
                // ---------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (LowerIndex1Bound+UpperIndex1Bound)/2;
                Segment.Point1.y := LowerIndex2Bound;
                Segment.Point2.x := UpperIndex1Bound;
                Segment.Point2.y := (LowerIndex2Bound+UpperIndex2Bound)/2;
              end;

              ShouldDraw := ParallelIndex1 > 0;
              if (ParallelIndex1 > 0) and not IsSelectedCell(
                PerpendicularIndex, ParallelIndex2, ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex2 > 0) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2 - 1, ParallelIndex1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 > 0) and (ParallelIndex2 > 0) and
                IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                // -----=======-----
                // |       |       |
                // |       |       |
                // |       |       |
                // |       |   +   |
                // |       |       |
                // |       |       |
                // |       |       |
                // -----------------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (CellBelowIndex1Bound+LowerIndex1Bound)/2;
                Segment.Point1.y := LowerIndex2Bound;
                Segment.Point2.x := (LowerIndex1Bound+UpperIndex1Bound)/2;
                Segment.Point2.y := LowerIndex2Bound;
              end;

              ShouldDraw := (ParallelIndex1 > 0);
              if (ParallelIndex1 > 0) and not IsSelectedCell(
                PerpendicularIndex, ParallelIndex2, ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex2 < ParallelLimit2) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2 + 1, ParallelIndex1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 > 0) and (ParallelIndex2 < ParallelLimit2)
                and IsSelectedCell(PerpendicularIndex, ParallelIndex2 + 1,
                ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                // -----------------
                // |       |       |
                // |       |       |
                // |       |       |
                // |       |   +   |
                // |       |       |
                // |       |       |
                // |       |       |
                // -----=======-----
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (LowerIndex1Bound+UpperIndex1Bound)/2;
                Segment.Point1.y := UpperIndex2Bound;
                Segment.Point2.x := (CellBelowIndex1Bound+LowerIndex1Bound)/2;
                Segment.Point2.y := UpperIndex2Bound;
              end;

              ShouldDraw := ParallelIndex2 > 0;
              if (ParallelIndex1 > 0) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2, ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex2 > 0) and not IsSelectedCell(
                PerpendicularIndex, ParallelIndex2 - 1, ParallelIndex1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 > 0) and (ParallelIndex2 > 0) and
                IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                //  ---------
                //  |       |
                //  |       |
                //  |       |
                //  |       |
                //  +       |
                //  +       |
                //  +       |
                //  +--------
                //  +       |
                //  +       |
                //  +       |
                //  |   +   |
                //  |       |
                //  |       |
                //  |       |
                //  ---------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := LowerIndex1Bound;
                Segment.Point1.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
                Segment.Point2.x := LowerIndex1Bound;
                Segment.Point2.y := (CellBelowIndex2Bound + LowerIndex2Bound)/2;
              end;

              ShouldDraw := (ParallelIndex2 > 0);
              if (ParallelIndex1 < ParallelLimit1) and
                IsSelectedCell(PerpendicularIndex, ParallelIndex2,
                ParallelIndex1 + 1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex2 > 0) and not IsSelectedCell(
                PerpendicularIndex, ParallelIndex2 - 1, ParallelIndex1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 < ParallelLimit1) and (ParallelIndex2 > 0)
                and IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                ParallelIndex1 + 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                //  ---------
                //  |       |
                //  |       |
                //  |       |
                //  |       |
                //  |       +
                //  |       +
                //  |       +
                //  --------+
                //  |       +
                //  |       +
                //  |       +
                //  |   +   |
                //  |       |
                //  |       |
                //  |       |
                //  ---------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := UpperIndex1Bound;
                Segment.Point1.y := (CellBelowIndex2Bound + LowerIndex2Bound)/2;
                Segment.Point2.x := UpperIndex1Bound;
                Segment.Point2.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
              end;

              ShouldDraw := (ParallelIndex1 > 0) and (ParallelIndex2 > 0);
              if (ParallelIndex1 > 0) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2, ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 > 0) and (ParallelIndex2 > 0) and
                not IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                // ---------
                // |       |
                // |       |
                // |       |
                // |       |
                // |       |
                // |       |
                // |       |
                // -----------------
                //      \  |       |
                //       \ |       |
                //        \|       |
                //         |   +   |
                //         |       |
                //         |       |
                //         |       |
                //         ---------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := LowerIndex1Bound;
                Segment.Point1.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
                Segment.Point2.x := (CellBelowIndex1Bound + LowerIndex1Bound)/2;
                Segment.Point2.y := LowerIndex2Bound;
              end;

              ShouldDraw := (ParallelIndex1 > 0) and (ParallelIndex2 > 0);
              if (ParallelIndex2 > 0) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2 - 1, ParallelIndex1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 > 0) and (ParallelIndex2 > 0) and
                not IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                ParallelIndex1 - 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                //  ---------
                //  |       |
                //  |       |
                //  |       |
                //  |       |
                //  |       |\
                //  |       | \
                //  |       |  \
                //  -----------------
                //          |       |
                //          |       |
                //          |       |
                //          |   +   |
                //          |       |
                //          |       |
                //          |       |
                //          ---------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := LowerIndex1Bound;
                Segment.Point1.y := (CellBelowIndex2Bound + LowerIndex2Bound)/2;
                Segment.Point2.x := (LowerIndex1Bound + UpperIndex1Bound)/2;
                Segment.Point2.y := LowerIndex2Bound;
              end;

              ShouldDraw := (ParallelIndex1 < ParallelLimit1)
                and (ParallelIndex2 > 0);
              if (ParallelIndex2 > 0) and IsSelectedCell(
                PerpendicularIndex, ParallelIndex2 - 1, ParallelIndex1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 < ParallelLimit1)
                and (ParallelIndex2 > 0)
                and not IsSelectedCell(
                PerpendicularIndex, ParallelIndex2 - 1, ParallelIndex1 + 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                //          ---------
                //          |       |
                //          |       |
                //          |       |
                //          |       |
                //         /|       |
                //        / |       |
                //       /  |       |
                //  -----------------
                //  |       |
                //  |       |
                //  |       |
                //  |   +   |
                //  |       |
                //  |       |
                //  |       |
                //  ---------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (LowerIndex1Bound + UpperIndex1Bound)/2;
                Segment.Point1.y := LowerIndex2Bound;
                Segment.Point2.x := UpperIndex1Bound;
                Segment.Point2.y := (CellBelowIndex2Bound + LowerIndex2Bound)/2;
              end;

              ShouldDraw := (ParallelIndex2 > 0)
                and (ParallelIndex1 < ParallelLimit1);
              if (ParallelIndex1 < ParallelLimit1) and
                IsSelectedCell(PerpendicularIndex, ParallelIndex2,
                ParallelIndex1 + 1) then
              begin
                ShouldDraw := False;
              end;
              if (ParallelIndex1 < ParallelLimit1)
                and (ParallelIndex2 > 0)
                and not IsSelectedCell(PerpendicularIndex, ParallelIndex2 - 1,
                ParallelIndex1 + 1) then
              begin
                ShouldDraw := False;
              end;
              if ShouldDraw then
              begin
                //          ---------
                //          |       |
                //          |       |
                //          |       |
                //          |       |
                //          |       |
                //          |       |
                //          |       |
                //  -----------------
                //  |       |  /
                //  |       | /
                //  |       |/
                //  |   +   |
                //  |       |
                //  |       |
                //  |       |
                //  ---------
                Segment := TLineSegment.Create;
                SegmentList.Add(Segment);
                Segment.Point1.x := (UpperIndex1Bound + CellAboveIndex1Bound)/2;
                Segment.Point1.y :=  LowerIndex2Bound;
                Segment.Point2.x := UpperIndex1Bound;
                Segment.Point2.y := (LowerIndex2Bound + UpperIndex2Bound)/2;
              end;
            end;
          end;
        end;
        while SegmentList.Count > 0 do
        begin
          NewSegmentList.Clear;
          Segment := SegmentList[SegmentList.Count - 1];
          NewSegmentList.Add(Segment);
          SegmentList.Delete(SegmentList.Count - 1);
          SegmentFound := True;
          while SegmentFound do
          begin
            SegmentFound := False;
            for SegmentIndex := SegmentList.Count - 1 downto 0 do
            begin
              AnotherSegment := SegmentList[SegmentIndex];
              if Segment.IsNextSegment(AnotherSegment) then
              begin
                Segment := AnotherSegment;
                NewSegmentList.Add(Segment);
                SegmentList.Delete(SegmentIndex);
                SegmentFound := True;
              end;
            end;
          end;
          PointCount := NewSegmentList.Count + 1;
          SetLength(ThreeDPoints, PointCount);
          if NewSegmentList.Count > 0 then
          begin
            Segment := NewSegmentList[0];
            RealPoint := Segment.Point1;
            if Direction = vdTop then
            begin
              RealPoint := PhastGrid.
                RotateFromGridCoordinatesToRealWorldCoordinates(RealPoint);
            end;
            ThreeDPoints[0] := ConvertPoint;
            for ObjectIndex := 0 to NewSegmentList.Count - 1 do
            begin
              Segment := NewSegmentList[ObjectIndex];
              RealPoint := Segment.Point2;
              if Direction = vdTop then
              begin
                RealPoint := PhastGrid.
                  RotateFromGridCoordinatesToRealWorldCoordinates(RealPoint);
              end;
              ThreeDPoints[ObjectIndex + 1] := ConvertPoint;
            end;
            if ColorLine then
            begin
              LineColor32 := Color32(LineColor);
            end
            else
            begin
              LineColor32 := clBlack32;
            end;
            if FillScreenObject then
            begin
              FillColor32 := Color32(FillColor);
              FillColor32 := SetAlpha(FillColor32, UnselectedOpacity);
            end
            else
            begin
              FillColor32 := clTransparent32;
            end;
            DrawBigPolygon32(Bitmap32, LineColor32, FillColor32, 1,
              ThreeDPoints, P, MultiplePolygons, True, True);
          end;
        end;
      finally
        SegmentList.Free;
        NewSegmentList.Free;
      end;
    end;
  finally
    LocalDelegate.SelectedCells.Clear;
  end;
end;

procedure TScreenObject.Draw2ElevSutra(const Direction: TViewDirection;
  const Bitmap32: TPersistent);
begin
  // incomplete
end;

procedure TScreenObject.Draw2ElevModflow(const Direction: TViewDirection;
  const Bitmap32: TPersistent; AModel: TBaseModel);
var
  LayerIndex: Integer;
  LocalDelegate: TCustomScreenObjectDelegate;
  ModflowGrid: TModflowGrid;
  SegmentList: TList;
  ColIndex: Integer;
  RowIndex: Integer;
  ObjectIndex1: Integer;
  FrontPoints: T2DRealPointArray;
  SidePoints: T2DRealPointArray;
//  LocalPhastModel: TPhastModel;
  LocalModel: TCustomModel;
begin
  LocalModel := AModel as TCustomModel;
  if LocalModel.DisvUsed then
  begin
    Exit;
  end;
//  LocalPhastModel := AModel as TPhastModel;
  LocalDelegate := Delegate;// as TCustomScreenObjectDelegate;
  ModflowGrid := LocalModel.ModflowGrid;
  try
    LocalDelegate.AssignSelectedCells(LocalModel);
    if LocalDelegate.SelectedCells.HasCells then
    begin
      SegmentList := TList.Create;
      try
        case Direction of
          vdTop:
            begin
              LayerIndex := ModflowGrid.SelectedLayer;
              if LayerIndex >= ModflowGrid.LayerCount then
              begin
                LayerIndex := ModflowGrid.LayerCount - 1;
              end;
                for ColIndex := 0 to ModflowGrid.ColumnCount - 1 do
                begin
                  for RowIndex := 0 to ModflowGrid.RowCount - 1 do
                  begin
                    if LocalDelegate.
                      SelectedCells[LayerIndex, RowIndex, ColIndex] then
                    begin
                      //   --------
                      //   |  /   |
                      //   | /    |
                      //   |/     |
                      //   |      |
                      //   |      |
                      //   |      |
                      //   --------
                      DrawModflowTopSegmentInsideTopLeft(RowIndex, ColIndex,
                        SegmentList, LayerIndex, ModflowGrid, LocalDelegate);
                  
                      //  --------
                      //  |      |
                      //  |      |
                      //  |      |
                      //  |\     |
                      //  | \    |
                      //  |  \   |
                      //  --------
                      DrawModflowTopSegmentInsideBottomLeft(SegmentList, LayerIndex,
                        ModflowGrid, LocalDelegate, RowIndex, ColIndex);

                      // --------
                      // |      |
                      // |      |
                      // |      |
                      // |     /|
                      // |    / |
                      // |   /  |
                      // --------
                      DrawModflowTopSegmentInsideBottomRight(RowIndex, ColIndex,
                        SegmentList, LayerIndex, ModflowGrid, LocalDelegate);

                      // ---------
                      // |    \  |
                      // |     \ |
                      // |      \|
                      // |   +   |
                      // |       |
                      // |       |
                      // |       |
                      // ---------
                      DrawModflowTopSegmentInsideTopRight(ModflowGrid,
                        LocalDelegate, RowIndex, ColIndex, SegmentList, LayerIndex);

                      // -----=======-----
                      // |       |       |
                      // |       |       |
                      // |       |       |
                      // |       |   +   |
                      // |       |       |
                      // |       |       |
                      // |       |       |
                      // -----------------
                      DrawModflowTopSegmentTopLeft(
                        RowIndex, ColIndex, SegmentList, LayerIndex, ModflowGrid,
                        LocalDelegate);

                      // -----------------
                      // |       |       |
                      // |       |       |
                      // |       |       |
                      // |       |   +   |
                      // |       |       |
                      // |       |       |
                      // |       |       |
                      // -----=======-----
                      DrawModflowTopSegmentBottomLeft(
                        RowIndex, ColIndex, SegmentList, LayerIndex, ModflowGrid,
                        LocalDelegate);

                      //  ---------
                      //  |       |
                      //  |       |
                      //  |       |
                      //  |       |
                      //  +       |
                      //  +       |
                      //  +       |
                      //  +--------
                      //  +       |
                      //  +       |
                      //  +       |
                      //  |   +   |
                      //  |       |
                      //  |       |
                      //  |       |
                      //  ---------
                      DrawModflowTopSegmentAboveLeft(
                        RowIndex, ColIndex, SegmentList, LayerIndex, ModflowGrid,
                        LocalDelegate);

                      //  ---------
                      //  |       |
                      //  |       |
                      //  |       |
                      //  |       |
                      //  |       +
                      //  |       +
                      //  |       +
                      //  --------+
                      //  |       +
                      //  |       +
                      //  |       +
                      //  |   +   |
                      //  |       |
                      //  |       |
                      //  |       |
                      //  ---------
                      DrawModflowTopSegmentAboveRight(
                        RowIndex, ColIndex, SegmentList, LayerIndex, ModflowGrid,
                        LocalDelegate);

                      // ---------
                      // |       |
                      // |       |
                      // |       |
                      // |       |
                      // |       |
                      // |       |
                      // |       |
                      // -----------------
                      //      \  |       |
                      //       \ |       |
                      //        \|       |
                      //         |   +   |
                      //         |       |
                      //         |       |
                      //         |       |
                      //         ---------
                      DrawModflowTopSegmentLeftOutsideAbove(
                        RowIndex, ColIndex, SegmentList, LayerIndex, ModflowGrid,
                        LocalDelegate);

                      //  ---------
                      //  |       |
                      //  |       |
                      //  |       |
                      //  |       |
                      //  |       |\
                      //  |       | \
                      //  |       |  \
                      //  -----------------
                      //          |       |
                      //          |       |
                      //          |       |
                      //          |   +   |
                      //          |       |
                      //          |       |
                      //          |       |
                      //          ---------
                      DrawModflowTopSegmentAboveOutsideLeft(
                        RowIndex, ColIndex, SegmentList, LayerIndex, ModflowGrid,
                        LocalDelegate);

                      //          ---------
                      //          |       |
                      //          |       |
                      //          |       |
                      //          |       |
                      //         /|       |
                      //        / |       |
                      //       /  |       |
                      //  -----------------
                      //  |       |
                      //  |       |
                      //  |       |
                      //  |   +   |
                      //  |       |
                      //  |       |
                      //  |       |
                      //  ---------
                      DrawModflowTopSegmentAboveOutsideRight(
                        RowIndex, ColIndex, SegmentList, LayerIndex, ModflowGrid,
                        LocalDelegate);

                      //          ---------
                      //          |       |
                      //          |       |
                      //          |       |
                      //          |       |
                      //          |       |
                      //          |       |
                      //          |       |
                      //  -----------------
                      //  |       |  /
                      //  |       | /
                      //  |       |/
                      //  |   +   |
                      //  |       |
                      //  |       |
                      //  |       |
                      //  ---------
                      DrawModflowTopSegmentRightOutsideAbove(
                        RowIndex, ColIndex, SegmentList, LayerIndex,
                        ModflowGrid, LocalDelegate);
                    end;
                  end;
                end;
                DrawSegmentList(Direction, Bitmap32, SegmentList);
            end;
          vdFront:
            begin
              FrontPoints := nil;
              RowIndex := ModflowGrid.SelectedRow;
              if RowIndex >= ModflowGrid.RowCount then
              begin
                RowIndex := ModflowGrid.RowCount - 1;
              end;
              for ColIndex := 0 to ModflowGrid.ColumnCount - 1 do
              begin
                for LayerIndex := 0 to ModflowGrid.LayerCount - 1 do
                begin
                  if LocalDelegate.
                    SelectedCells[LayerIndex, RowIndex, ColIndex] then
                  begin
                    //   --------
                    //   |  /   |
                    //   | /    |
                    //   |/     |
                    //   |      |
                    //   |      |
                    //   |      |
                    //   --------
                    DrawModflowFrontSegmentInsideTopLeft(FrontPoints,
                      RowIndex, ColIndex, LayerIndex, ModflowGrid,
                      LocalDelegate, SegmentList);
                  
                    //  --------
                    //  |      |
                    //  |      |
                    //  |      |
                    //  |\     |
                    //  | \    |
                    //  |  \   |
                    //  --------
                    DrawModflowFrontSegmentInsideBottomLeft(FrontPoints,
                      RowIndex, ColIndex, LayerIndex, ModflowGrid, LocalDelegate,
                      SegmentList);

                    // --------
                    // |      |
                    // |      |
                    // |      |
                    // |     /|
                    // |    / |
                    // |   /  |
                    // --------
                    DrawModflowFrontSegmentInsideBottomRight(
                      RowIndex, ColIndex, LayerIndex, ModflowGrid,
                      LocalDelegate, FrontPoints, SegmentList);

                    // ---------
                    // |    \  |
                    // |     \ |
                    // |      \|
                    // |   +   |
                    // |       |
                    // |       |
                    // |       |
                    // ---------
                    DrawModflowFrontSegmentInsideTopRight(FrontPoints,
                      RowIndex, ColIndex, LayerIndex, ModflowGrid,
                      LocalDelegate, SegmentList);

                    // -----=======-----
                    // |       |       |
                    // |       |       |
                    // |       |       |
                    // |       |   +   |
                    // |       |       |
                    // |       |       |
                    // |       |       |
                    // -----------------
                    DrawModflowFrontSegmentTopLeft(
                      RowIndex, ColIndex, LayerIndex, LocalDelegate,
                      FrontPoints, SegmentList);

                    // -----------------
                    // |       |       |
                    // |       |       |
                    // |       |       |
                    // |       |   +   |
                    // |       |       |
                    // |       |       |
                    // |       |       |
                    // -----=======-----
                    DrawModflowFrontSegmentBottomLeft(ModflowGrid, LocalDelegate,
                      FrontPoints, RowIndex, ColIndex, LayerIndex, SegmentList);

                    //  ---------
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  +       |
                    //  +       |
                    //  +       |
                    //  +--------
                    //  +       |
                    //  +       |
                    //  +       |
                    //  |   +   |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  ---------
                    DrawModflowFrontSegmentAboveLeft(FrontPoints,
                      RowIndex, ColIndex, LayerIndex, LocalDelegate, SegmentList);

                    //  ---------
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |       +
                    //  |       +
                    //  |       +
                    //  --------+
                    //  |       +
                    //  |       +
                    //  |       +
                    //  |   +   |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  ---------
                    DrawModflowFrontSegmentAboveRight(
                      RowIndex, ColIndex, LayerIndex, ModflowGrid, LocalDelegate,
                      FrontPoints, SegmentList);

                    // ---------
                    // |       |
                    // |       |
                    // |       |
                    // |       |
                    // |       |
                    // |       |
                    // |       |
                    // -----------------
                    //      \  |       |
                    //       \ |       |
                    //        \|       |
                    //         |   +   |
                    //         |       |
                    //         |       |
                    //         |       |
                    //         ---------
                    DrawModflowFrontSegmentLeftOutsideAbove(FrontPoints,
                      RowIndex, ColIndex, LayerIndex, LocalDelegate, SegmentList);

                    //  ---------
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |       |\
                    //  |       | \
                    //  |       |  \
                    //  -----------------
                    //          |       |
                    //          |       |
                    //          |       |
                    //          |   +   |
                    //          |       |
                    //          |       |
                    //          |       |
                    //          ---------
                    DrawModflowFrontSegmentAboveOutsideLeft(FrontPoints,
                      RowIndex, ColIndex, LayerIndex, LocalDelegate, SegmentList);

                    //          ---------
                    //          |       |
                    //          |       |
                    //          |       |
                    //          |       |
                    //         /|       |
                    //        / |       |
                    //       /  |       |
                    //  -----------------
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |   +   |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  ---------
                    DrawModflowFrontSegmentAboveOutsideRight(LocalDelegate,
                      FrontPoints, RowIndex, ColIndex, LayerIndex,
                      ModflowGrid, SegmentList);

                  //          ---------
                  //          |       |
                  //          |       |
                  //          |       |
                  //          |       |
                  //          |       |
                  //          |       |
                  //          |       |
                  //  -----------------
                  //  |       |  /
                  //  |       | /
                  //  |       |/
                  //  |   +   |
                  //  |       |
                  //  |       |
                  //  |       |
                  //  ---------
                    DrawModflowFrontSegmentRightOutsideAbove(FrontPoints,
                      RowIndex, ColIndex, LayerIndex, ModflowGrid,
                      LocalDelegate, SegmentList);
                  end;
                end;
              end;
              DrawSegmentList(Direction, Bitmap32, SegmentList);
            end;
          vdSide:
            begin
              SidePoints := nil;
              ColIndex := ModflowGrid.SelectedColumn;
              if ColIndex >= ModflowGrid.ColumnCount then
              begin
                ColIndex := ModflowGrid.ColumnCount - 1;
              end;
              for RowIndex := 0 to ModflowGrid.RowCount - 1 do
              begin
                for LayerIndex := 0 to ModflowGrid.LayerCount - 1 do
                begin
                  if LocalDelegate.
                    SelectedCells[LayerIndex, RowIndex, ColIndex] then
                  begin
                    //   --------
                    //   |  /   |
                    //   | /    |
                    //   |/     |
                    //   |      |
                    //   |      |
                    //   |      |
                    //   --------
                    DrawModflowSideSegmentInsideTopLeft(ModflowGrid,
                      LocalDelegate, SidePoints,
                      RowIndex, ColIndex, LayerIndex, SegmentList);

                    //  --------
                    //  |      |
                    //  |      |
                    //  |      |
                    //  |\     |
                    //  | \    |
                    //  |  \   |
                    //  --------
                    DrawModflowSideSegmentInsideBottomLeft(SidePoints,
                      RowIndex, ColIndex, LayerIndex, ModflowGrid,
                      LocalDelegate, SegmentList);

                    // --------
                    // |      |
                    // |      |
                    // |      |
                    // |     /|
                    // |    / |
                    // |   /  |
                    // --------
                    DrawModflowSideSegmentInsideBottomRight(SidePoints,
                      RowIndex, ColIndex, LayerIndex, ModflowGrid,
                      LocalDelegate, SegmentList);
                  
                    // ---------
                    // |    \  |
                    // |     \ |
                    // |      \|
                    // |   +   |
                    // |       |
                    // |       |
                    // |       |
                    // ---------
                    DrawModflowSideSegmentInsideTopRight(LayerIndex, ModflowGrid,
                      LocalDelegate, SidePoints, RowIndex, ColIndex, SegmentList);

                    // -----=======-----
                    // |       |       |
                    // |       |       |
                    // |       |       |
                    // |       |   +   |
                    // |       |       |
                    // |       |       |
                    // |       |       |
                    // -----------------
                    DrawModflowSideSegmentTopLeft(RowIndex, ColIndex, LayerIndex,
                      LocalDelegate, SidePoints, SegmentList);

                    // -----------------
                    // |       |       |
                    // |       |       |
                    // |       |       |
                    // |       |   +   |
                    // |       |       |
                    // |       |       |
                    // |       |       |
                    // -----=======-----
                    DrawModflowSideSegmentBottomLeft(SidePoints,
                      RowIndex, ColIndex, LayerIndex, ModflowGrid,
                      LocalDelegate, SegmentList);

                    //  ---------
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  +       |
                    //  +       |
                    //  +       |
                    //  +--------
                    //  +       |
                    //  +       |
                    //  +       |
                    //  |   +   |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  ---------
                    DrawModflowSideSegmentAboveLeft(
                      RowIndex, ColIndex, LayerIndex, LocalDelegate,
                      SidePoints, SegmentList);

                    //  ---------
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |       +
                    //  |       +
                    //  |       +
                    //  --------+
                    //  |       +
                    //  |       +
                    //  |       +
                    //  |   +   |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  ---------
                    DrawModflowSideSegmentAboveRight(SidePoints,
                      RowIndex, ColIndex, LayerIndex, ModflowGrid, LocalDelegate,
                      SegmentList);

                    // ---------
                    // |       |
                    // |       |
                    // |       |
                    // |       |
                    // |       |
                    // |       |
                    // |       |
                    // -----------------
                    //      \  |       |
                    //       \ |       |
                    //        \|       |
                    //         |   +   |
                    //         |       |
                    //         |       |
                    //         |       |
                    //         ---------
                    DrawModflowSideSegmentLeftOutsideAbove(
                      RowIndex, ColIndex, LayerIndex, LocalDelegate, SidePoints,
                      SegmentList);

                    //  ---------
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |       |\
                    //  |       | \
                    //  |       |  \
                    //  -----------------
                    //          |       |
                    //          |       |
                    //          |       |
                    //          |   +   |
                    //          |       |
                    //          |       |
                    //          |       |
                    //          ---------
                    DrawModflowSideSegmentAboveOutsideLeft(SidePoints,
                      RowIndex, ColIndex, LayerIndex, LocalDelegate, SegmentList);

                    //          ---------
                    //          |       |
                    //          |       |
                    //          |       |
                    //          |       |
                    //         /|       |
                    //        / |       |
                    //       /  |       |
                    //  -----------------
                    //  |       |
                    //  |       |
                    //  |       |
                    //  |   +   |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  ---------
                    DrawModflowSideSegmentAboveOutsideRight(
                      RowIndex, ColIndex, LayerIndex, ModflowGrid, LocalDelegate,
                      SidePoints, SegmentList);

                    //          ---------
                    //          |       |
                    //          |       |
                    //          |       |
                    //          |       |
                    //          |       |
                    //          |       |
                    //          |       |
                    //  -----------------
                    //  |       |  /
                    //  |       | /
                    //  |       |/
                    //  |   +   |
                    //  |       |
                    //  |       |
                    //  |       |
                    //  ---------
                    DrawModflowSideSegmentRightOutsideAbove(SidePoints,
                      LocalDelegate, ModflowGrid,
                      LayerIndex, ColIndex, RowIndex, SegmentList);
                  end;
                end;
              end;
              DrawSegmentList(Direction, Bitmap32, SegmentList);
            end;
          else
            Assert(False);
        end;
      finally
        for ObjectIndex1 := SegmentList.Count - 1 downto 0 do
        begin
          TObject(SegmentList[ObjectIndex1]).Free;
        end;
        SegmentList.Free;
      end;
    end;
  finally
    LocalDelegate.SelectedCells.Clear;
  end;
end;

procedure TScreenObject.CreateBoundaryDataSets;
begin
  if FBoundaryDataSets = nil then
  begin
    FBoundaryDataSets := TList.Create;
  end;
end;

procedure TScreenObject.CreateBoundaryDataSetSubscriptions;
begin
  if FBoundaryDataSetSubscriptions = nil then
  begin
    FBoundaryDataSetSubscriptions := TObjectList.Create;
  end;
end;

procedure TScreenObject.CreateBoundaryDataSetFormulas;
begin
  if FBoundaryDataSetFormulas = nil then
  begin
    FBoundaryDataSetFormulas := TIformulaList.Create;
  end;
end;

procedure TScreenObject.CreateSectionStarts;
begin
  if FSectionStarts = nil then
  begin
    FSectionStarts := TValueArrayStorage.Create;
    FSectionStarts.DataType := rdtInteger;
  end;
end;

procedure TScreenObject.CreateBottomElevationSubscription;
begin
  if FBottomElevSubscription = nil then
  begin
    FBottomElevSubscription := TObserver.Create(nil);
  end;
  FBottomElevSubscription.UpdateWithName(Name + '_Bottom_Elevation_Formula');
  FBottomElevSubscription.OnUpToDateSet := Changed;
  FBottomElevSubscription.OnNotify := Changed;
end;

procedure TScreenObject.CreateTopElevationSubscription;
begin
  if FTopElevSubscription = nil then
  begin
    FTopElevSubscription := TObserver.Create(nil);
  end;
  FTopElevSubscription.UpdateWithName(Name + '_Top_Elevation_Formula');
  FTopElevSubscription.OnUpToDateSet := Changed;
  FTopElevSubscription.OnNotify := Changed;
end;

procedure TScreenObject.CreateUzfBoundary;
begin
  if (ModflowBoundaries.FModflowUzfBoundary = nil) then
  begin
    ModflowBoundaries.FModflowUzfBoundary := TUzfBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateElevationSubscription;
begin
  if FElevSubscription = nil then
  begin
    FElevSubscription := TObserver.Create(nil);
  end;
  FElevSubscription.UpdateWithName(Name + '_Elevation_Formula');
  FElevSubscription.OnUpToDateSet := Changed;
  FElevSubscription.OnNotify := Changed;
end;

procedure TScreenObject.CreatePhastWellBoundary;
begin
  if FWellBoundary = nil then
  begin
    FWellBoundary := TWellBoundary.Create(self, FModel);
    FWellBoundary.ScreenObject := self;
  end;
end;

procedure TScreenObject.CreatePhastSpecifiedSolutionBoundary;
begin
  if FSpecifiedSolutionBoundary = nil then
  begin
    FSpecifiedSolutionBoundary :=
      TSpecifiedSolutionBoundary.Create(self, FModel);
    FSpecifiedSolutionBoundary.ScreenObject := self;
  end;
end;

procedure TScreenObject.CreatePhastSpecifiedHeadBoundary;
begin
  if FSpecifiedHeadBoundary = nil then
  begin
    FSpecifiedHeadBoundary := TSpecifiedHeadBoundary.Create(self, FModel);
    FSpecifiedHeadBoundary.ScreenObject := self;
  end;
end;

procedure TScreenObject.CreatePhastRiverBoundary;
begin
  if FRiverBoundary = nil then
  begin
    FRiverBoundary := TRiverBoundary.Create(self, FModel);
    FRiverBoundary.ScreenObject := self;
  end;
end;

procedure TScreenObject.CreatePhastLeakyBoundary;
begin
  if FLeakyBoundary = nil then
  begin
    FLeakyBoundary := TLeakyBoundary.Create(self, FModel);
    FLeakyBoundary.ScreenObject := self;
    FLeakyBoundary.Orientation := FViewDirection;
  end;
end;

procedure TScreenObject.CreatePhastFluxBoundary;
begin
  if FFluxBoundary = nil then
  begin
    FFluxBoundary := TFluxBoundary.Create(self, FModel);
    FFluxBoundary.ScreenObject := self;
    FFluxBoundary.Orientation := FViewDirection;
  end;
end;

procedure TScreenObject.CreateCfpBoundary;
begin
  if (ModflowBoundaries.FCfpPipes = nil) then
  begin
    ModflowBoundaries.FCfpPipes := TCfpPipeBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateCfpFixedHeads;
begin
  if (ModflowBoundaries.FCfpFixedHeads = nil) then
  begin
    ModflowBoundaries.FCfpFixedHeads := TCfpFixedBoundary.Create(FModel, self);
  end;

end;

procedure TScreenObject.CreateCfpRchFraction;
begin
  if (ModflowBoundaries.FCfpRchFraction = nil) then
  begin
    ModflowBoundaries.FCfpRchFraction := TCfpRchFractionBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateChdBoundary;
begin
  if (ModflowBoundaries.FModflowChdBoundary = nil) then
  begin
    ModflowBoundaries.FModflowChdBoundary := TChdBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateCSubBoundary;
begin
  if (ModflowBoundaries.FModflowCSub = nil) then
  begin
    ModflowBoundaries.FModflowCSub := TCSubBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateGhbBoundary;
begin
  if (ModflowBoundaries.FModflowGhbBoundary = nil) then
  begin
    ModflowBoundaries.FModflowGhbBoundary := TGhbBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFarmWell;
begin
  if (ModflowBoundaries.FFmpWellBoundary = nil) then
  begin
    ModflowBoundaries.FFmpWellBoundary := TFmpWellBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFarmPrecip;
begin
  if (ModflowBoundaries.FFmpPrecipBoundary = nil) then
  begin
    ModflowBoundaries.FFmpPrecipBoundary := TFmpPrecipBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFarmRefEvap;
begin
  if (ModflowBoundaries.FFmpRefEvapBoundary = nil) then
  begin
    ModflowBoundaries.FFmpRefEvapBoundary := TFmpRefEvapBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFarmCropID;
begin
  if (ModflowBoundaries.FFmpCropIDBoundary = nil) then
  begin
    ModflowBoundaries.FFmpCropIDBoundary := TFmpCropIDBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFarmID;
begin
  if (ModflowBoundaries.FFmpFarmIDBoundary = nil) then
  begin
    ModflowBoundaries.FFmpFarmIDBoundary := TFmpFarmIDBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFhbFlowBoundary;
begin
  if (ModflowBoundaries.FModflowFhbFlowBoundary = nil) then
  begin
    ModflowBoundaries.FModflowFhbFlowBoundary := TFhbFlowBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFhbHeadBoundary;
begin
  if (ModflowBoundaries.FModflowFhbHeadBoundary = nil) then
  begin
    ModflowBoundaries.FModflowFhbHeadBoundary := TFhbHeadBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFmp4AddedDemandRunoffSplitBoundary;
begin
  if (ModflowBoundaries.FFmp4AddedDemandRunoffSplitBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4AddedDemandRunoffSplitBoundary :=
      TFmp4AddedDemandRunoffSplitBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFmp4BarePrecipitationConsumptionFractionBoundary;
begin
  if (ModflowBoundaries.FFmp4BarePrecipitationConsumptionFractionBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4BarePrecipitationConsumptionFractionBoundary :=
      TFmp4BarePrecipitationConsumptionFractionBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFmp4BareRunoffFractionBoundary;
begin
  if (ModflowBoundaries.FFmp4BareRunoffFractionBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4BareRunoffFractionBoundary :=
      TFmp4BareRunoffFractionBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFmp4EfficiencyBoundary;
begin
  if (ModflowBoundaries.FFmp4EfficiencyBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4EfficiencyBoundary :=
      TFmp4EfficiencyBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateFmp4EfficiencyImprovementBoundary;
begin
  if (ModflowBoundaries.FFmp4EfficiencyImprovementBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4EfficiencyImprovementBoundary :=
      TFmp4EfficiencyImprovementBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateWelBoundary;
begin
  if (ModflowBoundaries.FModflowWellBoundary = nil) then
  begin
    ModflowBoundaries.FModflowWellBoundary :=
      TMfWellBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateRipBoundary;
begin
  if (ModflowBoundaries.FModflowRipBoundary = nil) then
  begin
    ModflowBoundaries.FModflowRipBoundary := TRipBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateRivBoundary;
begin
  if (ModflowBoundaries.FModflowRivBoundary = nil) then
  begin
    ModflowBoundaries.FModflowRivBoundary := TRivBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateDrnBoundary;
begin
  if (ModflowBoundaries.FModflowDrnBoundary = nil) then
  begin
    ModflowBoundaries.FModflowDrnBoundary := TDrnBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateDrtBoundary;
begin
  if (ModflowBoundaries.FModflowDrtBoundary = nil) then
  begin
    ModflowBoundaries.FModflowDrtBoundary := TDrtBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateMawBoundary;
begin
  if (ModflowBoundaries.FModflowMawBoundary = nil) then
  begin
    ModflowBoundaries.FModflowMawBoundary := TMawBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateMf6Obs;
begin
  if (ModflowBoundaries.FModflow6Obs = nil) then
  begin
    ModflowBoundaries.FModflow6Obs := TModflow6Obs.Create(InvalidateModelEvent, self);
  end;
end;

procedure TScreenObject.CreateMnw1Boundary;
begin
  if (ModflowBoundaries.FModflowMnw1Boundary = nil) then
  begin
    ModflowBoundaries.FModflowMnw1Boundary := TMnw1Boundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateMnw2Boundary;
begin
  if (ModflowBoundaries.FModflowMnw2Boundary = nil) then
  begin
    ModflowBoundaries.FModflowMnw2Boundary := TMnw2Boundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowAddedDemandBoundary;
begin
  if (ModflowBoundaries.FFmp4AddedDemandBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4AddedDemandBoundary :=
      TFmp4AddedDemandBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowConsumptiveUseBoundary;
begin
  if (ModflowBoundaries.FFmp4ConsumptiveUseBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4ConsumptiveUseBoundary :=
      TFmp4ConsumptiveUseBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowCropHasSalinityDemandBoundary;
begin
  if (ModflowBoundaries.FFmp4CropHasSalinityDemandBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4CropHasSalinityDemandBoundary :=
      TFmp4CropHasSalinityDemandBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowEvaporationIrrigationFractionBoundary;
begin
  if (ModflowBoundaries.FFmp4EvaporationIrrigationFractionBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4EvaporationIrrigationFractionBoundary :=
      TFmp4EvaporationIrrigationFractionBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowFmp4CropCoefficientBoundary;
begin
  if (ModflowBoundaries.FFmp4CropCoefficientBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4CropCoefficientBoundary :=
      TFmp4CropCoefficientBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowFmp4LandUseAreaFractionBoundary;
begin
  if (ModflowBoundaries.FFmp4LandUseAreaFractionBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4LandUseAreaFractionBoundary :=
      TFmp4LandUseAreaFractionBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowFmp4NrdInfilLocation;
begin
  if (ModflowBoundaries.FFmp4NrdInfilLocationBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4NrdInfilLocationBoundary :=
      TFmp4NrdInfilLocationBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowFmpBareEvap;
begin
  if (ModflowBoundaries.FFmp4BareEvap = nil) then
  begin
    ModflowBoundaries.FFmp4BareEvap :=
      TFmp4BareEvapBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowFmpDirectRecharge;
begin
  if (ModflowBoundaries.FFmp4DirectRechargeBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4DirectRechargeBoundary :=
      TFmp4DirectRechargeBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowFmpPrecipPotConsumption;
begin
  if (ModflowBoundaries.FFmp4PrecipPotConsumptionBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4PrecipPotConsumptionBoundary :=
      TFmp4PrecipPotConsumptionBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowFractionOfIrrigToSurfaceWaterBoundary;
begin
  if (ModflowBoundaries.FFmp4FractionOfIrrigToSurfaceWaterBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4FractionOfIrrigToSurfaceWaterBoundary :=
      TFmp4FractionOfIrrigToSurfaceWaterBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowFractionOfPrecipToSurfaceWaterBoundary;
begin
  if (ModflowBoundaries.FFmp4FractionOfPrecipToSurfaceWaterBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4FractionOfPrecipToSurfaceWaterBoundary :=
      TFmp4FractionOfPrecipToSurfaceWaterBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowIrrigationBoundary;
begin
  if (ModflowBoundaries.FFmp4IrrigationBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4IrrigationBoundary :=
      TFmp4IrrigationBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMultAddedDemandBoundary;
begin
  if (ModflowBoundaries.FFmpMultAddedDemandBoundary = nil) then
  begin
    ModflowBoundaries.FFmpMultAddedDemandBoundary :=
      TFmp4MultAddedDemandBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMultConsumptiveUseBoundary;
begin
  if (ModflowBoundaries.FFmpMultConsumptiveUseBoundary = nil) then
  begin
    ModflowBoundaries.FFmpMultConsumptiveUseBoundary :=
      TFmp4MultConsumptiveUseBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMultCropCoefficientBoundary;
begin
  if (ModflowBoundaries.FFmpMultCropCoefficientBoundary = nil) then
  begin
    ModflowBoundaries.FFmpMultCropCoefficientBoundary :=
      TFmp4MultCropCoefficientBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMultCropHasSalinityDemandBoundary;
begin
  if (ModflowBoundaries.FFmpMultCropHasSalinityDemandBoundary = nil) then
  begin
    ModflowBoundaries.FFmpMultCropHasSalinityDemandBoundary :=
      TFmp4MultCropHasSalinityDemandBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMultEvaporationIrrigationFractionBoundary;
begin
  if (ModflowBoundaries.FFmpMultEvaporationIrrigationFractionBoundary = nil) then
  begin
    ModflowBoundaries.FFmpMultEvaporationIrrigationFractionBoundary :=
      TFmp4MultEvaporationIrrigationFractionBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMultFmp4LandUseAreaFractionBoundary;
begin
  if (ModflowBoundaries.FFmp4MultLandUseAreaFractionBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4MultLandUseAreaFractionBoundary :=
      TFmp4MultLandUseAreaFractionBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMultFractionOfIrrigToSurfaceWaterBoundary;
begin
  if (ModflowBoundaries.FFmpMultFractionOfIrrigToSurfaceWaterBoundary = nil) then
  begin
    ModflowBoundaries.FFmpMultFractionOfIrrigToSurfaceWaterBoundary :=
      TFmp4MultFractionOfIrrigToSurfaceWaterBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMultFractionOfPrecipToSurfaceWaterBoundary;
begin
  if (ModflowBoundaries.FFmpMultFractionOfPrecipToSurfaceWaterBoundary = nil) then
  begin
    ModflowBoundaries.FFmpMultFractionOfPrecipToSurfaceWaterBoundary :=
      TFmp4MultFractionOfPrecipToSurfaceWaterBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMultIrrigationBoundary;
begin
  if (ModflowBoundaries.FFmpMultIrrigationBoundary = nil) then
  begin
    ModflowBoundaries.FFmpMultIrrigationBoundary :=
      TFmp4MultIrrigationBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMultRootDepthBoundary;
begin
  if (ModflowBoundaries.FFmpMultRootDepthBoundary = nil) then
  begin
    ModflowBoundaries.FFmpMultRootDepthBoundary :=
      TFmp4MultRootDepthBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMultTranspirationFractionBoundary;
begin
  if (ModflowBoundaries.FFmpMultTranspirationFractionBoundary = nil) then
  begin
    ModflowBoundaries.FFmpMultTranspirationFractionBoundary :=
      TFmp4MultTranspirationFractionBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowMvr;
begin
  if (ModflowBoundaries.FModflowMvr = nil) then
  begin
    ModflowBoundaries.FModflowMvr :=
      TMvrBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowRootDepthBoundary;
begin
  if (ModflowBoundaries.FFmp4RootDepthBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4RootDepthBoundary :=
      TFmp4RootDepthBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateModflowTranspirationFractionBoundary;
begin
  if (ModflowBoundaries.FFmp4TranspirationFractionBoundary = nil) then
  begin
    ModflowBoundaries.FFmp4TranspirationFractionBoundary :=
      TFmp4TranspirationFractionBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateTvkBoundary;
begin
  if (ModflowBoundaries.FTvkBoundary = nil) then
  begin
    ModflowBoundaries.FTvkBoundary := TTvkBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateTvsBoundary;
begin
  if (ModflowBoundaries.FTvsBoundary = nil) then
  begin
    ModflowBoundaries.FTvsBoundary := TTvsBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateUzfMf6Boundary;
begin
  if (ModflowBoundaries.FModflowUzfMf6Boundary = nil) then
  begin
    ModflowBoundaries.FModflowUzfMf6Boundary :=
      TUzfMf6Boundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateMt3dLktConcBoundary;
begin
  if (ModflowBoundaries.FMt3dLktConcBoundary = nil) then
  begin
    ModflowBoundaries.FMt3dLktConcBoundary :=
      TMt3dLktConcBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateMt3dmsConcBoundary;
begin
  if (ModflowBoundaries.FMt3dmsConcBoundary = nil) then
  begin
    ModflowBoundaries.FMt3dmsConcBoundary :=
      TMt3dmsConcBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateMt3dmsTransObservations;
begin
  if (ModflowBoundaries.FMt3dmsTransObservations = nil) then
  begin
    ModflowBoundaries.FMt3dmsTransObservations :=
      TMt3dmsTransObservations.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateMt3dSftConcBoundary;
begin
  if (ModflowBoundaries.FMt3dSftConcBoundary = nil) then
  begin
    ModflowBoundaries.FMt3dSftConcBoundary :=
      TMt3dSftBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateMt3dUzfRchConcBoundary;
begin
  if (ModflowBoundaries.FMt3dUztRechConc = nil) then
  begin
    ModflowBoundaries.FMt3dUztRechConc :=
      TMt3dUztRchConcBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateMt3dUzSsmSinkConcBoundary;
begin
  if (ModflowBoundaries.FMt3dUzSsmSinkConcBoundary = nil) then
  begin
    ModflowBoundaries.FMt3dUzSsmSinkConcBoundary :=
      TMt3dUzSsmSinkConcBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateMt3dUztSatEtConcBoundary;
begin
  if (ModflowBoundaries.FMt3dUztSatEtConcBoundary = nil) then
  begin
    ModflowBoundaries.FMt3dUztSatEtConcBoundary :=
      TMt3dUztSatEtConcBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateMt3dUztUnsatEtConcBoundary;
begin
  if (ModflowBoundaries.FMt3dUztUnsatEtConcBoundary = nil) then
  begin
    ModflowBoundaries.FMt3dUztUnsatEtConcBoundary :=
      TMt3dUztUnsatEtConcBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateRchBoundary;
begin
  if (ModflowBoundaries.FModflowRchBoundary = nil) then
  begin
    ModflowBoundaries.FModflowRchBoundary := TRchBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateEvtBoundary;
begin
  if (ModflowBoundaries.FModflowEvtBoundary = nil) then
  begin
    ModflowBoundaries.FModflowEvtBoundary := TEvtBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateEtsBoundary;
begin
  if (ModflowBoundaries.FModflowEtsBoundary = nil) then
  begin
    ModflowBoundaries.FModflowEtsBoundary := TEtsBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateResBoundary;
begin
  if (ModflowBoundaries.FModflowResBoundary = nil) then
  begin
    ModflowBoundaries.FModflowResBoundary := TResBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateHydmodData;
begin
  if (ModflowBoundaries.FModflowHydmodData = nil) then
  begin
    ModflowBoundaries.FModflowHydmodData := THydmodData.Create(FModel as TCustomModel, self);
  end;
end;

procedure TScreenObject.CreateLakBoundary;
begin
  if (ModflowBoundaries.FModflowLakBoundary = nil) then
  begin
    ModflowBoundaries.FModflowLakBoundary := TLakBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateLakMf6Boundary;
begin
  if (ModflowBoundaries.FModflowLak6 = nil) then
  begin
    ModflowBoundaries.FModflowLak6 := TLakeMf6.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateHfbBoundary;
begin
  if (ModflowBoundaries.FModflowHfbBoundary = nil) then
  begin
    ModflowBoundaries.FModflowHfbBoundary := THfbBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateStrBoundary;
begin
  if (ModflowBoundaries.FModflowStrBoundary = nil) then
  begin
    ModflowBoundaries.FModflowStrBoundary := TStrBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateSfr6Boundary;
begin
  if (ModflowBoundaries.FModflowSfr6Boundary = nil) then
  begin
    ModflowBoundaries.FModflowSfr6Boundary := TSfrMf6Boundary.Create(FModel as TCustomModel, self);
  end;
end;

procedure TScreenObject.CreateSfrBoundary;
begin
  if (ModflowBoundaries.FModflowSfrBoundary = nil) then
  begin
    ModflowBoundaries.FModflowSfrBoundary := TSfrBoundary.Create(FModel, self);
  end;
end;

procedure TScreenObject.CreateGagBoundary;
var
  OnInvalidateModelEvent: TNotifyEvent;
begin
  if (ModflowBoundaries.FModflowGage = nil) then
  begin
    { TODO -cRefactor : Consider replacing FModel with a TNotifyEvent or interface. }
    if FModel = nil then
    begin
      OnInvalidateModelEvent := nil;
    end
    else
    begin
      OnInvalidateModelEvent := FModel.DoInvalidate;
    end;
    ModflowBoundaries.FModflowGage :=
      TStreamGage.Create(OnInvalidateModelEvent, self);
  end;
end;


procedure TScreenObject.DeleteExtraSections;
var
  SectionIndex: Integer;
  Value1: integer;
  Value2: integer;
  procedure DeleteSection(SecIndex, ValueIndex: integer);
  var
    ImportIndex: Integer;
    ImportItem: TValueArrayItem;
  begin
    SectionStarts.Delete(SecIndex);
    if Assigned(FImportedHigherSectionElevations)
      and (ValueIndex < FImportedHigherSectionElevations.Count) then
    begin
      FImportedHigherSectionElevations.Delete(ValueIndex);
    end;
    if Assigned(FImportedLowerSectionElevations)
      and (ValueIndex < FImportedLowerSectionElevations.Count) then
    begin
      FImportedLowerSectionElevations.Delete(ValueIndex);
    end;
    if Assigned(FImportedSectionElevations)
      and (ValueIndex < FImportedSectionElevations.Count) then
    begin
      FImportedSectionElevations.Delete(ValueIndex);
    end;
    for ImportIndex := 0 to FImportedValues.Count - 1 do
    begin
      ImportItem := FImportedValues.Items[ImportIndex];
      if ValueIndex < ImportItem.Values.Count then
      begin
        ImportItem.Values.Delete(ValueIndex);
      end;
    end;
  end;
begin
  for SectionIndex := SectionStarts.Count - 2 downto 0 do
  begin
    Value1 := SectionStarts.IntValues[SectionIndex];
    Value2 := SectionStarts.IntValues[SectionIndex + 1];
    if (Value2 >= Count) or (Value1 = Value2) then
    begin
      if Value2 >= Count then
      begin
        DeleteSection(SectionIndex + 1, SectionIndex + 2);
      end
      else
      begin
        DeleteSection(SectionIndex + 1, SectionIndex + 1);
      end;
//      SectionStarts.Delete(SectionIndex + 1);
    end;
    if Value1 = 0 then
    begin
      DeleteSection(SectionIndex, SectionIndex);
//      SectionStarts.Delete(SectionIndex);
    end;
  end;
  for SectionIndex := SectionStarts.Count - 1 downto 0 do
  begin
    Value1 := SectionStarts.IntValues[SectionIndex];
    if Value1 >= count then
    begin
      DeleteSection(SectionIndex, SectionIndex+1);
//      SectionStarts.Delete(SectionIndex);
    end
    else if Value1 = 0 then
    begin
      DeleteSection(SectionIndex, SectionIndex);
    end
    else
    begin
      break;
    end;
  end;
end;

procedure TScreenObject.DeleteHfbParameter(const ParameterName: string);
begin
  if ModflowHfbBoundary <> nil then
  begin
    if ModflowHfbBoundary.ParameterName = ParameterName then
    begin
      ModflowHfbBoundary.ParameterName := ''
    end;
  end;
end;

procedure TScreenObject.AssignTopDataSetValues(
  Expression: TExpression; const DataSetFunction: string; Compiler: TRbwParser;
  UsedVariables: TStringList; OtherData: TObject; const DataSet: TDataArray;
  AModel: TBaseModel; AssignmentLocation: TAssignmentLocation = alAll);
var
  CellList: TCellAssignmentList;
  CellAssignment: TCellAssignment;
  AssignmentIndex: Integer;
begin
  CellList := TCellAssignmentList.Create;
  try
    InitializeVariables(UsedVariables, DataSet, Expression, Compiler);
    Delegate.GetTopCellsToAssign(DataSetFunction, OtherData, DataSet,
      CellList, AssignmentLocation, AModel);
    for AssignmentIndex := 0 to CellList.Count - 1 do
    begin
      CellAssignment := CellList[AssignmentIndex];
      UpdateCurrentSegment(CellAssignment.Segment);
      UpdateCurrentSection(CellAssignment.Section);
      UpdateImportedValues(DataSet);
      AssignCellValue(UsedVariables, DataSet, CellAssignment.Layer,
        CellAssignment.Row, CellAssignment.Column, Compiler,
        CellAssignment.Annotation, Expression, OtherData);
    end;
  finally
    CellList.Free;
  end;
end;

function TScreenObject.GetImportedHigherSectionElevations: TValueArrayStorage;
begin
  CreateValueArrayStorage(FImportedHigherSectionElevations);
  result := FImportedHigherSectionElevations;
end;

function TScreenObject.GetImportedLowerSectionElevations: TValueArrayStorage;
begin
  CreateValueArrayStorage(FImportedLowerSectionElevations);
  result := FImportedLowerSectionElevations;
end;

function TScreenObject.GetImportedSectionElevations: TValueArrayStorage;
begin
  CreateValueArrayStorage(FImportedSectionElevations);
  result := FImportedSectionElevations;
end;

procedure TScreenObject.GetInterpDistance(const InterpValue: TInterpValuesItem;
  var Distance: Double; const DataSet: TDataArray;
  const LayerIndex, RowIndex, ColIndex: Integer);
var
  DI: Integer;
  Compiler: TRbwParser;
  TempFormula: string;
begin
  Distance := 0;
  case InterpValue.Values.InterpolationDirection of
    pidX:
      begin
        case EvaluatedAt of
          eaBlocks:
            begin
              Distance := ((FModel as TPhastModel).PhastGrid.
                ColumnPosition[ColIndex]
                + (FModel as TPhastModel).PhastGrid.
                ColumnPosition[ColIndex + 1]) / 2;
            end;
          eaNodes:
            begin
              Distance := (FModel as TPhastModel).PhastGrid.
                ColumnPosition[ColIndex];
            end;
        else
          Assert(False);
        end;
      end;
    pidY:
      begin
        case EvaluatedAt of
          eaBlocks:
            begin
              Distance := ((FModel as TPhastModel).PhastGrid.
                RowPosition[RowIndex]
                + (FModel as TPhastModel).PhastGrid.
                RowPosition[RowIndex + 1]) / 2;
            end;
          eaNodes:
            begin
              Distance := (FModel as TPhastModel).PhastGrid.
                RowPosition[RowIndex];
            end;
        else
          Assert(False);
        end;
      end;
    pidZ:
      begin
        case EvaluatedAt of
          eaBlocks:
            begin
              Distance := ((FModel as TPhastModel).PhastGrid.
                LayerElevation[LayerIndex]
                + (FModel as TPhastModel).PhastGrid.
                LayerElevation[LayerIndex + 1]) / 2;
            end;
          eaNodes:
            begin
              Distance := (FModel as TPhastModel).PhastGrid.
                LayerElevation[LayerIndex];
            end;
        else
          Assert(False);
        end;
      end;
    pidMix:
      begin
        UpdateVariables(FMixtureVariables, DataSet, LayerIndex, RowIndex,
          ColIndex, FMixtureCompiler);
        try
          FMixtureExpression.Evaluate;
        except on E: ERbwParserError do
          begin
            DI := IndexOfDataSet(DataSet);

            frmFormulaErrors.AddFormulaError(Name, 'Mixture formula for: '
              + DataSet.Name, MixtureDataSetFormula[DI], E.Message);
            MixtureDataSetFormula[DI] := '0.5';

            Compiler := GetCompiler(DataSet.Orientation);
            TempFormula := MixtureDataSetFormula[DI];
            Compiler.Compile(TempFormula);
            FMixtureExpression := Compiler.CurrentExpression;
            FMixtureExpression.Evaluate;
          end;
        end;
        Distance := 1 - FMixtureExpression.DoubleResult;
      end;
  else
    Assert(False);
  end;
end;

function TScreenObject.PhastBoundaryType: TPhastBoundaryTypes;
begin
  result := btNone;
  if (SpecifiedHeadBoundary.BoundaryValue.Count > 0)
    or (SpecifiedHeadBoundary.Solution.Count > 0) then
  begin
    result := btSpecifiedHead;
  end;

  if (FluxBoundary.BoundaryValue.Count > 0)
    or (FluxBoundary.Solution.Count > 0) then
  begin
    Assert(result = btNone);
    result := btFlux;
  end;

  if (LeakyBoundary.BoundaryValue.Count > 0)
    or (LeakyBoundary.Solution.Count > 0) then
  begin
    Assert(result = btNone);
    result := btLeaky;
  end;

  if (RiverBoundary.BoundaryValue.Count > 0)
    or (RiverBoundary.Solution.Count > 0) then
  begin
    Assert(result = btNone);
    result := btRiver;
  end;

  if (WellBoundary.BoundaryValue.Count > 0)
    or (WellBoundary.Solution.Count > 0) then
  begin
    Assert(result = btNone);
    result := btWell;
  end;
end;

function TScreenObject.BoundaryType: integer;
begin
  result := Ord(PhastBoundaryType);
end;

function TScreenObject.BoundaryTypeUsed: TPhastBoundaryTypes;
begin
  result := btNone;
  if (FFluxBoundary <> nil)
    and ((FluxBoundary.BoundaryValue.Count > 0)
    or (FluxBoundary.Solution.Count > 0)) then
  begin
    Assert(result = btNone);
    result := btFlux;
  end;

  if (FLeakyBoundary <> nil)
    and ((LeakyBoundary.BoundaryValue.Count > 0)
    or (LeakyBoundary.Solution.Count > 0)) then
  begin
    Assert(result = btNone);
    result := btLeaky;
  end;

  if (FRiverBoundary <> nil)
    and ((RiverBoundary.BoundaryValue.Count > 0)
    or (RiverBoundary.Solution.Count > 0)) then
  begin
    Assert(result = btNone);
    result := btRiver;
  end;

  if (FSpecifiedHeadBoundary <> nil)
    and ((SpecifiedHeadBoundary.BoundaryValue.Count > 0)
    or (SpecifiedHeadBoundary.Solution.Count > 0)) then
  begin
    Assert(result = btNone);
    result := btSpecifiedHead;
  end;

  if (FWellBoundary <> nil)
    and ((WellBoundary.BoundaryValue.Count > 0)
    or (WellBoundary.Solution.Count > 0)) then
  begin
    Assert(result = btNone);
    result := btWell;
  end;
end;

procedure TScreenObject.OtherIndex(const LayerOrRow, RowOrColumn: integer;
  out First, Last: integer; const DataSet: TDataArray);
var
  IsRiverDataSet: boolean;
  Model: TPhastModel;
begin
  Model := FModel as TPhastModel;
  IsRiverDataSet := (RiverBoundary.BoundaryValue.Count > 0)
    or (RiverBoundary.Solution.Count > 0);
  if IsRiverDataSet then
  begin
    IsRiverDataSet := (DataSet = Model.Top2DBoundaryType);

    if not IsRiverDataSet then
    begin
      if (DataSet is TSparseArrayPhastInterpolationDataSet) then
      begin
        IsRiverDataSet :=
          (Model.RiverHead.IndexOfDataSet
          (TSparseArrayPhastInterpolationDataSet(DataSet)) >= 0)
          or
          (Model.RiverAssociatedSolution.IndexOfDataSet
          (TSparseArrayPhastInterpolationDataSet(DataSet)) >= 0);
      end;
      if not IsRiverDataSet then
      begin
        IsRiverDataSet := (Model.DataArrayManager.RiverDataSets.IndexOf(DataSet) >= 0);
      end;
      if not IsRiverDataSet then
      begin
        if DataSet is TIntegerSparseDataSet then
        begin
          IsRiverDataSet :=
            TIntegerSparseDataSet(DataSet).IsBoundaryTypeDataSet;
        end;
      end;
    end;
  end;
  { TODO :
Changing the layer as would be done here prevents the river data from
being displayed on the status bar.  Find a way around this problem. }

  {if IsRiverDataSet then
  begin
    First := frmGoPhast.PhastGrid.LayerCount;
    Last := First;
  end
  else
  begin  }
    Delegate.OtherIndex(LayerOrRow, RowOrColumn, First, Last, DataSet, Model)
//  end;
end;

{ TCustomPhastBoundaryCondition }

procedure TCustomPhastBoundaryCondition.AddMixtureSubscriptions;
begin
  AddDataSetSubscriptions(FMixtureDataSetList, FMixtureObserver,
    ResetMixtureFormula, Values.MixtureFormula);
end;

procedure TCustomPhastBoundaryCondition.AddFormulaSubscriptions;
begin
  AddDataSetSubscriptions(FFormulaDataSetList, FFormulaObserver,
    ResetFormulaExpression, FFormulaObject.Formula);
end;

procedure TCustomPhastBoundaryCondition.Assign(Source: TPersistent);
var
  OtherBoundary: TCustomPhastBoundaryCondition;
  Item: TInterpValuesItem;
begin
  if Source is TCustomPhastBoundaryCondition then
  begin
    OtherBoundary := TCustomPhastBoundaryCondition(Source);
    MixtureExpression := OtherBoundary.MixtureExpression;
    InterpolationDirection := OtherBoundary.InterpolationDirection;
    FormulaExpression := OtherBoundary.FormulaExpression;
    Time := OtherBoundary.Time;
    // Fix source in case the MixtureExpression was invalid.
    OtherBoundary.MixtureExpression := MixtureExpression;
  end
  else if Source is TInterpValuesItem then
  begin
    Item := TInterpValuesItem(Source);
    MixtureExpression := Item.Values.MixtureFormula;
    InterpolationDirection := Item.Values.InterpolationDirection;
    // Fix source in case the MixtureExpression was invalid.
    Item.Values.MixtureFormula := MixtureExpression;
  end;
  inherited;
end;

procedure GlobalRemovePhastBoundarySubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TCustomPhastBoundaryCondition).RemoveSubscription(Sender, AName);
end;

procedure GlobalRestorePhastBoundarySubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
  (Subject as TCustomPhastBoundaryCondition).RestoreSubscription(Sender, AName);
end;

procedure GlobalRemoveFormulaObjectSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
// Because, these formulas are only used during export,
// nothing needs to be done here.
//  (Subject as TFormulaOrderedItem).RemoveSubscription(Sender, AName);
end;

procedure GlobalRestoreFormulaObjectSubscription(Sender: TObject; Subject: TObject;
  const AName: string);
begin
// Because, these formulas are only used during export,
// nothing needs to be done here.
//  (Subject as TFormulaOrderedItem).RestoreSubscription(Sender, AName);
end;


constructor TCustomPhastBoundaryCondition.Create(Collection: TCollection);
begin
  inherited;
  FFormulaObserver := TObserver.Create(nil);
  FMixtureDataSetList := TList.Create;
  FMixtureObserver := TObserver.Create(nil);
  FFormulaDataSetList := TList.Create;
  FFormulaObject := frmGoPhast.PhastModel.FormulaManager.Add;
  FFormulaObject.Parser := frmGoPhast.PhastModel.rpThreeDFormulaCompilerNodes;
  FFormulaObject.AddSubscriptionEvents(
    GlobalRemovePhastBoundarySubscription, GlobalRestorePhastBoundarySubscription, self);
end;

destructor TCustomPhastBoundaryCondition.Destroy;
begin
  RemoveMixtureSubscriptions;
  FMixtureObserver.Free;
  FMixtureDataSetList.Free;
  FFormulaObserver.Free;
  FFormulaDataSetList.Free;
  frmGoPhast.PhastModel.FormulaManager.Remove(FFormulaObject,
    GlobalRemovePhastBoundarySubscription, GlobalRestorePhastBoundarySubscription, self);
  inherited;
end;

function TCustomPhastBoundaryCondition.GetScreenObject: TScreenObject;
begin
  result := (Collection as TCustomPhastBoundaryCollection).FScreenObject as TScreenObject;
end;

function TCustomPhastBoundaryCondition.GetDataSet:
  TSparseArrayPhastInterpolationDataSet;
begin
  result := (Collection as TCustomPhastBoundaryCollection).GetDataSet(Time);
end;

procedure TCustomPhastBoundaryCondition.AddDataSetSubscriptions(
  DataSetList: TList; Observer: TObserver; Reset: TResetProcedure;
  NewFormula: string);
var
  Expression: TExpression;
  TempFormula: string;
  Compiler: TRbwParser;
  DS: TDataArray;
  AScreenObject: TScreenObject;
  Model: TPhastModel;
  Obs: TObserver;
  UseIndex: Integer;
  UsedVariables: TStringList;
begin
  Model := (Collection as TCustomPhastBoundaryCollection).Model as TPhastModel;
  if Model = nil then
  begin
    Exit;
  end;
  if ScreenObject.Model = nil then
  begin
    Exit;
  end;
  AScreenObject := ScreenObject;
  DS := GetDataSet;
  if (AScreenObject <> nil) and (DS <> nil) then
  begin
    Observer.OnUpToDateSet := (DS as TSparseArrayPhastInterpolationDataSet).ATimeList.Changed;
    AScreenObject.TalksTo(Observer);
    Compiler := AScreenObject.GetCompiler(DS.Orientation, AScreenObject.EvaluatedAt);
    TempFormula := NewFormula;
    try
      Compiler.Compile(TempFormula);
    except
      on ERbwParserError do
      begin
        Reset(Compiler);
//        TempFormula := '0.5';
//        Values.MixtureFormula := TempFormula;
//        Compiler.Compile(TempFormula);
      end;
    end;
    Expression := Compiler.CurrentExpression;
    UsedVariables := TStringList.Create;
    try
      UsedVariables.Assign(Expression.VariablesUsed);
      for UseIndex := 0 to UsedVariables.Count - 1 do
      begin
        Obs := Model.GetObserverByName(UsedVariables[UseIndex]);
        Assert(Obs <> nil);
        Obs.TalksTo(Observer);
        DataSetList.Add(Obs);
      end;
    finally
      UsedVariables.Free;
    end;
    Observer.UpToDate := True;
    Observer.UpToDate := False;
  end;
end;

procedure TCustomPhastBoundaryCondition.RemoveDataSetSubscriptions(DataSetList: TList; Observer: TObserver);
var
  AScreenObject: TScreenObject;
  DS: TObserver;
  Index: Integer;
begin
  Observer.OnUpToDateSet := nil;
  AScreenObject := ScreenObject;
  if AScreenObject <> nil then
  begin
    AScreenObject.StopsTalkingTo(Observer);
  end;
  Observer.StopTalkingToAnyone;
  for Index := 0 to DataSetList.Count - 1 do
  begin
    DS := DataSetList[Index];
    DS.StopsTalkingTo(Observer);
  end;
  DataSetList.Clear;
end;

function TCustomPhastBoundaryCondition.GetDistance1: double;
begin
  result := Values.Distance1;
end;

function TCustomPhastBoundaryCondition.GetDistance2: double;
begin
  result := Values.Distance2;
end;

function TCustomPhastBoundaryCondition.GetFormulaExpression: string;
begin
  result := FFormulaObject.Formula
end;

function TCustomPhastBoundaryCondition.GetInterpolationDirection:
  TInterpolationDirection;
begin
  result := Values.InterpolationDirection;
end;

function TCustomPhastBoundaryCondition.GetMixtureFormula: string;
begin
  result := Values.MixtureFormula;
end;

function TCustomPhastBoundaryCondition.GetUsePHAST_Interpolation: boolean;
begin
  result := Values.UsePHAST_Interpolation;
end;

procedure TCustomPhastBoundaryCondition.InvalidateModel;
begin
  if ScreenObject <> nil then
  begin
    ScreenObject.InvalidateModel;
  end;
end;

procedure TCustomPhastBoundaryCondition.RemoveMixtureSubscriptions;
begin
  RemoveDataSetSubscriptions(FMixtureDataSetList, FMixtureObserver);
end;

procedure TCustomPhastBoundaryCondition.RemoveSubscription(Sender: TObject;
  const AName: string);
var
  Model: TPhastModel;
  DS: TObserver;
begin
  Model := (Collection as TCustomPhastBoundaryCollection).Model as TPhastModel;
  if Model <> nil then
  begin
    DS := Model.GetObserverByName(AName);
    Assert(DS <> nil);
    DS.StopsTalkingTo(FFormulaObserver);
  end;
end;

procedure TCustomPhastBoundaryCondition.RemoveFormulaSubscriptions;
begin
  RemoveDataSetSubscriptions(FFormulaDataSetList, FFormulaObserver);
end;

procedure TCustomPhastBoundaryCondition.ResetFormulaExpression(
  Compiler: TRbwParser);
var
  TempFormula: string;
begin
  TempFormula := '0.';
  frmGoPhast.PhastModel.FormulaManager.ChangeFormula(
    FFormulaObject, TempFormula, Compiler,
    GlobalRemovePhastBoundarySubscription,
    GlobalRestorePhastBoundarySubscription, self);
  Compiler.Compile(TempFormula);
end;

procedure TCustomPhastBoundaryCondition.ResetMixtureFormula(
  Compiler: TRbwParser);
var
  TempFormula: string;
begin
  TempFormula := '0.5';
  Values.MixtureFormula := TempFormula;
  Compiler.Compile(TempFormula);
end;

procedure TCustomPhastBoundaryCondition.ResetMixtureSubscription;
begin
  FMixtureObserver.UpToDate := True;
end;

procedure TCustomPhastBoundaryCondition.RestoreSubscription(Sender: TObject;
  const AName: string);
var
  Model: TPhastModel;
  Observer: TObserver;
  DataArray: TSparseArrayPhastInterpolationDataSet;
begin
  Model := (Collection as TCustomPhastBoundaryCollection).Model as TPhastModel;
  if Model <> nil then
  begin
    Observer := Model.GetObserverByName(AName);
    Assert(Observer <> nil);
    Observer.TalksTo(FFormulaObserver);

    DataArray := GetDataSet;
    if  (DataArray <> nil) then
    begin
      FFormulaObserver.UpToDate := False;
      DataArray.ATimeList.Changed(FFormulaObserver);
    end;
  end;
end;

procedure TCustomPhastBoundaryCondition.SetDistance1(const Value: double);
begin
  if Values.Distance1 <> Value then
  begin
    Values.Distance1 := Value;
    InvalidateModel;
  end;
end;

procedure TCustomPhastBoundaryCondition.SetDistance2(const Value: double);
begin
  if Values.Distance2 <> Value then
  begin
    Values.Distance2 := Value;
    InvalidateModel;
  end;
end;

procedure TCustomPhastBoundaryCondition.SetFormula(const Value: string);
begin
    FFormula := Value;
//  if FFormula <> Value then
//  begin
//    InvalidateModel;
//  end;
end;

procedure TCustomPhastBoundaryCondition.SetFormulaExpression(
  const Value: string);
begin
  if FormulaExpression <> Value then
  begin
    RemoveFormulaSubscriptions;
    frmGoPhast.PhastModel.FormulaManager.ChangeFormula(
      FFormulaObject, Value, frmGoPhast.PhastModel.rpThreeDFormulaCompilerNodes,
      GlobalRemovePhastBoundarySubscription,
      GlobalRestorePhastBoundarySubscription, self);
    if (ScreenObject <> nil) and ScreenObject.FCanInvalidateModel then
    begin
      AddFormulaSubscriptions;
    end;
    InvalidateModel;
  end;
end;

procedure TCustomPhastBoundaryCondition.SetInterpolationDirection(
  const Value: TInterpolationDirection);
begin
  if Values.InterpolationDirection <> Value then
  begin
    Values.InterpolationDirection := Value;
    if Value = pidMix then
    begin
      AddMixtureSubscriptions;
    end
    else
    begin
      RemoveMixtureSubscriptions;
    end;
    InvalidateModel;
  end;
end;

procedure TCustomPhastBoundaryCondition.SetMixtureExpression(
  const Value: string);
begin
  if Values.MixtureFormula <> Value then
  begin
    RemoveMixtureSubscriptions;
    Values.MixtureFormula := Value;
    if (Values.InterpolationDirection = pidMix)
      and (ScreenObject <> nil)
      and ScreenObject.FCanInvalidateModel then
    begin
      AddMixtureSubscriptions;
    end;
    InvalidateModel;
  end;
end;

procedure TCustomPhastBoundaryCondition.SetMixtureFormula(const Value: string);
begin
  FMixtureFormula := Value;
end;

procedure TCustomPhastBoundaryCondition.SetTime(const Value: double);
begin
  if FTime <> Value then
  begin
    FTime := Value;
    InvalidateModel;
  end;
end;

procedure TCustomPhastBoundaryCondition.SetUsePHAST_Interpolation(
  const Value: boolean);
begin
  if Values.UsePHAST_Interpolation <> Value then
  begin
    Values.UsePHAST_Interpolation := Value;
    InvalidateModel;
  end;
end;

procedure TCustomPhastBoundaryCondition.UpdateFormulaExpression;
begin
  FormulaExpression := FFormula;
end;

procedure TCustomPhastBoundaryCondition.UpdateMixtureExpression;
begin
  MixtureExpression := FMixtureFormula;
end;

{ TRealPhastBoundaryCondition }

function TRealPhastBoundaryCondition.GetDatatype: TRbwDataType;
begin
  result := rdtDouble;
end;

function TRealPhastBoundaryCondition.GetValue1: double;
begin
  result := Values.RealValue1;
end;

function TRealPhastBoundaryCondition.GetValue2: double;
begin
  result := Values.RealValue2;
end;

procedure TRealPhastBoundaryCondition.SetValue1(const Value: double);
begin
  if Values.RealValue1 <> Value then
  begin
    Values.RealValue1 := Value;
    InvalidateModel;
  end;
end;

procedure TRealPhastBoundaryCondition.SetValue2(const Value: double);
begin
  if Values.RealValue2 <> Value then
  begin
    Values.RealValue2 := Value;
    InvalidateModel;
  end;
end;

{ TIntegerPhastBoundaryCondition }

function TIntegerPhastBoundaryCondition.GetDatatype: TRbwDataType;
begin
  result := rdtInteger;
end;

function TIntegerPhastBoundaryCondition.GetValue1: integer;
begin
  result := Values.IntValue1;
end;

function TIntegerPhastBoundaryCondition.GetValue2: integer;
begin
  result := Values.IntValue2;
end;

procedure TIntegerPhastBoundaryCondition.SetValue1(const Value: integer);
begin
  if Values.IntValue1 <> Value then
  begin
    Values.IntValue1 := Value;
    InvalidateModel;
  end;
end;

procedure TIntegerPhastBoundaryCondition.SetValue2(const Value: integer);
begin
  if Values.IntValue2 <> Value then
  begin
    Values.IntValue2 := Value;
    InvalidateModel;
  end;
end;

{ TRealPhastBoundaries }

constructor TRealPhastBoundaries.Create(Model: TBaseModel);
begin
  inherited Create(TRealPhastBoundaryCondition, Model);
end;

function TRealPhastBoundaries.GetDatatype: TRbwDataType;
begin
  result := rdtDouble;
end;

{ TIntegerPhastBoundaries }

constructor TIntegerPhastBoundaries.Create(Model: TBaseModel);
begin
  inherited Create(TIntegerPhastBoundaryCondition, Model);
end;

function TIntegerPhastBoundaries.GetDatatype: TRbwDataType;
begin
  result := rdtInteger;
end;

{ TFluxBoundary }

constructor TFluxBoundary.Create(ScreenObject: TScreenObject;
  Model: TBaseModel);
begin
  inherited Create(ScreenObject, Model);
  FBoundaryValue.PropName := 'Flux';
  FSolution.PropName := 'Flux_Associated_Solution';
end;

procedure TFluxBoundary.SetScreenObject(const Value: TScreenObject);
begin
  inherited;
  if (FSolution <> nil) and (FBoundaryValue <> nil) then
  begin
    FSolution.ScreenObject := Value;
    FBoundaryValue.ScreenObject := Value;
  end;
end;

procedure TFluxBoundary.SetOrientation(const Value: TViewDirection);
var
  LocalModel: TPhastModel;
begin
  inherited;
  if (Model <> nil) and (FBoundaryValue <> nil) and (FSolution <> nil) then
  begin
    LocalModel := Model as TPhastModel;
    case Value of
      vdTop:
        begin
          FBoundaryValue.TimeList := LocalModel.TopFluxBoundaryFlux;
          FSolution.TimeList :=
            LocalModel.TopFluxBoundaryChemistry;
        end;
      vdFront:
        begin
          FBoundaryValue.TimeList := LocalModel.FrontFluxBoundaryFlux;
          FSolution.TimeList :=
            LocalModel.FrontFluxBoundaryChemistry;
        end;
      vdSide:
        begin
          FBoundaryValue.TimeList := LocalModel.SideFluxBoundaryFlux;
          FSolution.TimeList :=
            LocalModel.SideFluxBoundaryChemistry;
        end;
    else
      Assert(False);
    end;
  end;
end;

{ TLeakyBoundary }

procedure TLeakyBoundary.Reset;
begin
  if (BoundaryValue.Count = 0) and (Solution.Count = 0) then
  begin
    Thickness := '';
    HydraulicConductivity := '';
    InvalidateModel;
  end;
end;

procedure TLeakyBoundary.Assign(Source: TPersistent);
var
  SourceBoundary: TLeakyBoundary;
begin
  InvalidateModel;
  if Source is TLeakyBoundary then
  begin
    SourceBoundary := TLeakyBoundary(Source);
    Thickness := SourceBoundary.Thickness;
    HydraulicConductivity := SourceBoundary.HydraulicConductivity;
  end;
  inherited;
end;

constructor TLeakyBoundary.Create(ScreenObject: TScreenObject;
  Model: TBaseModel);
begin
  inherited Create(ScreenObject, Model);
  FBoundaryValue.PropName := 'Leaky_Head';
  FSolution.PropName := 'Leaky_Associated_Solution';
end;

function TLeakyBoundary.GetHydraulicConductivity: string;
var
  DataSetName: string;
begin
  if (BoundaryValue.Count > 0) or (Solution.Count > 0) then
  begin
    if (ScreenObject <> nil) and (Model <> nil) then
    begin
      case Orientation of
        vdTop:
          begin
            DataSetName := rsTopLeakyHydraulicConductivity;
          end;
        vdFront:
          begin
            DataSetName := rsFrontLeakyHydraulicConductivity;
          end;
        vdSide:
          begin
            DataSetName := rsSideLeakyHydraulicConductivity;
          end;
      end;
      Result := BoundaryDataSetFormula(DataSetName);
    end
    else
    begin
      result := FHydraulicConductivity;
    end;
  end
  else
  begin
    result := '';
  end;
end;

function TLeakyBoundary.GetThickness: string;
var
  DataSetName: string;
begin
  if (BoundaryValue.Count > 0) or (Solution.Count > 0) then
  begin
    if (ScreenObject <> nil) and (Model <> nil) then
    begin
      case Orientation of
        vdTop:
          begin
            DataSetName := rsTopLeakyThickness;
          end;
        vdFront:
          begin
            DataSetName := rsFrontLeakyThickness;
          end;
        vdSide:
          begin
            DataSetName := rsSideLeakyThickness;
          end;
      end;
      Result := BoundaryDataSetFormula(DataSetName);
    end
    else
    begin
      result := FThickness;
    end;
  end
  else
  begin
    result := '';
  end;
end;

procedure TLeakyBoundary.Loaded;
begin
  if (BoundaryValue.Count > 0) or (Solution.Count > 0) then
  begin
    SetHydraulicConductivity(FHydraulicConductivity);
    SetThickness(FThickness)
  end;
end;

procedure TLeakyBoundary.PartialAssign(Source: TPersistent);
var
  SourceBoundary: TLeakyBoundary;
begin
  if Source is TLeakyBoundary then
  begin
    SourceBoundary := TLeakyBoundary(Source);
    BoundaryValue := SourceBoundary.BoundaryValue;
    Solution := SourceBoundary.Solution;
    InvalidateModel;
  end
  else
  begin
    Assert(False);
  end;
end;

procedure TLeakyBoundary.SetHydraulicConductivity(const Value: string);
begin
  if FHydraulicConductivity <> Trim(Value) then
  begin
    FHydraulicConductivity := Trim(Value);
    InvalidateModel;
  end;
  case Orientation of
    vdTop:
      begin
        UpdateBoundaryDataSet(rsTopLeakyHydraulicConductivity,
          FHydraulicConductivity);
      end;
    vdFront:
      begin
        UpdateBoundaryDataSet(rsFrontLeakyHydraulicConductivity,
          FHydraulicConductivity);
      end;
    vdSide:
      begin
        UpdateBoundaryDataSet(rsSideLeakyHydraulicConductivity,
          FHydraulicConductivity);
      end;
  else
    Assert(False);
  end;
end;

procedure TLeakyBoundary.SetOrientation(const Value: TViewDirection);
var
  LocalModel: TPhastModel;
begin
  inherited;
  if Model <> nil then
  begin
    LocalModel := Model as TPhastModel;
    case Value of
      vdTop:
        begin
          FSolution.TimeList :=
            LocalModel.TopLeakyAssociatedSolution;
          FBoundaryValue.TimeList := LocalModel.TopLeakyHead;
        end;
      vdFront:
        begin
          FSolution.TimeList :=
            LocalModel.FrontLeakyAssociatedSolution;
          FBoundaryValue.TimeList := LocalModel.FrontLeakyHead;
        end;
      vdSide:
        begin
          FSolution.TimeList :=
            LocalModel.SideLeakyAssociatedSolution;
          FBoundaryValue.TimeList := LocalModel.SideLeakyHead;
        end;
    else
      Assert(False);
    end;
  end;
end;

procedure TLeakyBoundary.SetThickness(const Value: string);
begin
  if FThickness <> trim(Value) then
  begin
    FThickness := trim(Value);
    InvalidateModel;
  end;
  case Orientation of
    vdTop:
      begin
        UpdateBoundaryDataSet(rsTopLeakyThickness, FThickness);
      end;
    vdFront:
      begin
        UpdateBoundaryDataSet(rsFrontLeakyThickness, FThickness);
      end;
    vdSide:
      begin
        UpdateBoundaryDataSet(rsSideLeakyThickness, FThickness);
      end;
  else
    Assert(False);
  end;
end;

{ TRiverBoundary }

procedure TRiverBoundary.Assign(Source: TPersistent);
var
  SourceBoundary: TRiverBoundary;
begin
  if Source is TRiverBoundary then
  begin
    SourceBoundary := TRiverBoundary(Source);
    Description := SourceBoundary.Description;
    Width := SourceBoundary.Width;
    Depth := SourceBoundary.Depth;
    BedThickness := SourceBoundary.BedThickness;
    BedHydraulicConductivity := SourceBoundary.BedHydraulicConductivity;
    InvalidateModel;
  end;
  inherited;
end;

constructor TRiverBoundary.Create(ScreenObject: TScreenObject;
  Model: TBaseModel);
begin
  inherited Create(ScreenObject, Model);

  if Model = nil then
  begin
    FSolution.TimeList := nil;
    FBoundaryValue.TimeList := nil;
  end
  else
  begin
    FSolution.TimeList := (Model as TPhastModel).RiverAssociatedSolution;
    FBoundaryValue.TimeList := (Model as TPhastModel).RiverHead;
  end;
  FBoundaryValue.PropName := 'River_Head';
  FSolution.PropName := 'River_Associated_Solution';
end;

function TRiverBoundary.GetBedHydraulicConductivity: string;
begin
  if (BoundaryValue.Count > 0) or (Solution.Count > 0) then
  begin
    if (ScreenObject <> nil) and (Model <> nil) then
    begin
      Result := BoundaryDataSetFormula(rsRiverHydraulicConductivity);
    end
    else
    begin
      result := FBedHydraulicConductivity;
    end;
  end
  else
  begin
    result := '';
  end;
end;

function TRiverBoundary.GetBedThickness: string;
begin
  if (BoundaryValue.Count > 0) or (Solution.Count > 0) then
  begin
    if (ScreenObject <> nil) and (Model <> nil) then
    begin
      Result := BoundaryDataSetFormula(rsRiverBedThickness);
    end
    else
    begin
      result := FBedThickness;
    end;
  end
  else
  begin
    result := '';
  end;
end;

function TRiverBoundary.GetDepth: string;
begin
  if (BoundaryValue.Count > 0) or (Solution.Count > 0) then
  begin
    if (ScreenObject <> nil) and (Model <> nil) then
    begin
      Result := BoundaryDataSetFormula(rsRiverDepth);
    end
    else
    begin
      result := FDepth;
    end;
  end
  else
  begin
    result := '';
  end;
end;

function TRiverBoundary.GetWidth: string;
begin
  if (BoundaryValue.Count > 0) or (Solution.Count > 0) then
  begin
    if (ScreenObject <> nil) and (Model <> nil) then
    begin
      Result := BoundaryDataSetFormula(rsRiverWidth);
    end
    else
    begin
      result := FWidth;
    end;
  end
  else
  begin
    result := '';
  end;
end;

function TRiverBoundary.IsBoundary: boolean;
begin
  result := (BoundaryValue.Count > 0) and (Width <> '') and (Depth <> '')
    and (BedThickness <> '') and (BedHydraulicConductivity <> '');
  if result and (Model as TPhastModel).SoluteTransport then
  begin
    result := (Solution.Count > 0)
  end;
end;

procedure TRiverBoundary.Loaded;
begin
  if (BoundaryValue.Count > 0) or (Solution.Count > 0) then
  begin
    SetBedHydraulicConductivity(FBedHydraulicConductivity);
    SetBedThickness(FBedThickness);
    SetDepth(FDepth);
    SetWidth(FWidth);
  end;
end;

procedure TRiverBoundary.PartialAssign(Source: TPersistent);
var
  SourceBoundary: TRiverBoundary;
begin
  if Source is TRiverBoundary then
  begin
    SourceBoundary := TRiverBoundary(Source);
    BoundaryValue := SourceBoundary.BoundaryValue;
    Solution := SourceBoundary.Solution;
    InvalidateModel;
  end
  else
  begin
    Assert(False);
  end;
end;

procedure TRiverBoundary.SetBedHydraulicConductivity(const Value: string);
begin
  if FBedHydraulicConductivity <> Trim(Value) then
  begin
    FBedHydraulicConductivity := Trim(Value);
    InvalidateModel;
  end;
  UpdateBoundaryDataSet(rsRiverHydraulicConductivity,
    FBedHydraulicConductivity);
end;

procedure TRiverBoundary.SetBedThickness(const Value: string);
begin
  if FBedThickness <> Trim(Value) then
  begin
    FBedThickness := Trim(Value);
    InvalidateModel;
  end;
  UpdateBoundaryDataSet(rsRiverBedThickness, FBedThickness);
end;

procedure TRiverBoundary.SetDepth(const Value: string);
begin
  if FDepth <> Trim(Value) then
  begin
    FDepth := Trim(Value);
    InvalidateModel;
  end;
  UpdateBoundaryDataSet(rsRiverDepth, FDepth);
end;

procedure TRiverBoundary.SetDescription(const Value: string);
begin
  if FDescription <> Trim(Value) then
  begin
    FDescription := Trim(Value);
    InvalidateModel;
  end;
end;

procedure TRiverBoundary.SetWidth(const Value: string);
begin
  if FWidth <> Trim(Value) then
  begin
    FWidth := Trim(Value);
    InvalidateModel;
  end;
  UpdateBoundaryDataSet(rsRiverWidth, FWidth);
end;

{ TSpecifiedHeadBoundary }

procedure TSpecifiedHeadBoundary.Assign(Source: TPersistent);
var
  SourceBoundary: TSpecifiedHeadBoundary;
begin
  if Source is TSpecifiedHeadBoundary then
  begin
    SourceBoundary := TSpecifiedHeadBoundary(Source);
    SolutionType := SourceBoundary.SolutionType;
    InvalidateModel;
  end;
  inherited;
end;

constructor TSpecifiedHeadBoundary.Create(ScreenObject: TScreenObject;
  Model: TBaseModel);
begin
  inherited Create(ScreenObject, Model);
  if Model = nil then
  begin
    FSolution.TimeList := nil;
    FBoundaryValue.TimeList := nil;
  end
  else
  begin
    FSolution.TimeList :=
      (Model as TPhastModel).SpecifiedHeadAssociatedSolution;
    FBoundaryValue.TimeList := (Model as TPhastModel).SpecifiedHeadHead;
  end;
  FBoundaryValue.PropName := 'Specified_Head';
  FSolution.PropName := 'Specified_Head_Solution';
end;

procedure TSpecifiedHeadBoundary.Loaded;
begin
  if (AssociatedSolution.Count  > 0) or (Head.Count > 0)then
  begin
    SetSolutionType(FSolutionType);
  end;
end;

procedure TSpecifiedHeadBoundary.SetSolutionType(
  const Value: TSolutionType);
var
  TempFormula: string;
begin
  if (FSolutionType <> Value) then
  begin
    FSolutionType := Value;
    TempFormula := IntToStr(Ord(FSolutionType));
    UpdateBoundaryDataSet(rsSolutionType, TempFormula);
    InvalidateModel;
  end
  else
  begin
    TempFormula := IntToStr(Ord(FSolutionType));
    UpdateBoundaryDataSet(rsSolutionType, TempFormula);
  end;
end;

{ TSpecifiedSolutionBoundary }

procedure TSpecifiedSolutionBoundary.Assign(Source: TPersistent);
var
  SourceBoundary: TSpecifiedSolutionBoundary;
begin
  if Source is TSpecifiedSolutionBoundary then
  begin
    SourceBoundary := TSpecifiedSolutionBoundary(Source);
    Solution := SourceBoundary.Solution;
    InvalidateModel;
  end
  else
  begin
    inherited;
  end;
end;

procedure TSpecifiedSolutionBoundary.Clear;
begin
  Solution.Clear;
end;

constructor TSpecifiedSolutionBoundary.Create(ScreenObject: TScreenObject;
  Model: TBaseModel);
begin
  FSolution := TIntegerPhastBoundaries.Create(Model);
  if Model = nil then
  begin
    FSolution.TimeList := nil;
  end
  else
  begin
    FSolution.TimeList := (Model as TPhastModel).SpecifiedSolution;
  end;
  FSolution.PropName := 'Specified_Solution';
  inherited Create(ScreenObject, Model);
end;

destructor TSpecifiedSolutionBoundary.Destroy;
begin
  FSolution.Free;
  inherited;
end;

procedure TSpecifiedSolutionBoundary.SetScreenObject(
  const Value: TScreenObject);
begin
  inherited;
  FSolution.ScreenObject := Value;
end;

procedure TSpecifiedSolutionBoundary.SetSolution(
  const Value: TIntegerPhastBoundaries);
begin
  FSolution.Assign(Value);
  InvalidateModel;
end;

{ TCustomPhastBoundaryCollection }

procedure TCustomPhastBoundaryCollection.Clear;
begin
  inherited;
  if (TimeList <> nil) and (FScreenObject <> nil)
    and FScreenObject.CanInvalidateModel then
  begin
    TimeList.Invalidate;
  end;
end;


constructor TCustomPhastBoundaryCollection.Create(
  ItemClass: TCollectionItemClass; Model: TBaseModel);
var
  InvalidateModelEvent: TNotifyEvent;
begin
  FModel := Model;
  if Model = nil then
  begin
    InvalidateModelEvent := nil;
  end
  else
  begin
    InvalidateModelEvent := Model.DoInvalidate;
  end;
  inherited Create(ItemClass, InvalidateModelEvent);
end;

function TCustomPhastBoundaryCollection.GetDataSet(
  const ATime: double): TSparseArrayPhastInterpolationDataSet;
var
  TimeIndex: integer;
  AnArray: TSparseArrayPhastInterpolationDataSet;
  Model: TPhastModel;
begin
  Model := self.Model as TPhastModel;
  TimeIndex := TimeList.IndexOf(ATime);
  if TimeIndex < 0 then
  begin
    AnArray := nil;
    case GetDatatype of
      rdtDouble:
        begin
          AnArray := TSparseRealPhastDataSet.Create(Model);
        end;
      rdtInteger:
        begin
          AnArray := TSparseIntegerPhastDataSet.Create(Model);
        end;
    else
      Assert(False);
    end;
    Assert(ScreenObject <> nil);
    case ScreenObject.ViewDirection of
      vdTop:
        begin
          case FTimeList.BoundaryType of
            btRiver, btWell:
              begin
                AnArray.BoundaryDataType := Model.Top2DBoundaryType;
              end;
          else
            begin
              AnArray.BoundaryDataType := Model.TopBoundaryType;
            end;
          end;

        end;
      vdFront:
        begin
          AnArray.BoundaryDataType := Model.FrontBoundaryType;
        end;
      vdSide:
        begin
          AnArray.BoundaryDataType := Model.SideBoundaryType;
        end;
    else
      Assert(False);
    end;

    AnArray.Orientation := TimeList.Orientation;
    AnArray.ATimeList := TimeList;
    TimeIndex := TimeList.Add(ATime, AnArray);
  end;
  result := TimeList.Items[TimeIndex] ;
end;

procedure TSpecifiedSolutionBoundary.UpdateFormulaExpression;
begin
  FSolution.UpdateFormulaExpression;
end;

procedure TSpecifiedSolutionBoundary.UpdateMixtureExpression;
begin
  FSolution.UpdateMixtureExpression;
end;

{ TWellBoundary }

procedure TWellBoundary.Assign(Source: TPersistent);
var
  SourceBoundary: TWellBoundary;
begin
  if Source is TWellBoundary then
  begin
    SourceBoundary := TWellBoundary(Source);
    Description := SourceBoundary.Description;
    LandSurfaceDatum := SourceBoundary.LandSurfaceDatum;
    Diameter := SourceBoundary.Diameter;
    AllocateByPressureAndMobility :=
      SourceBoundary.AllocateByPressureAndMobility;
    WellElevationFormat := SourceBoundary.WellElevationFormat;
    Intervals := SourceBoundary.Intervals;
    InvalidateModel;
  end;
  inherited;
end;

procedure TWellBoundary.Clear;
begin
  inherited;
  Intervals.Clear;
  InvalidateModel;
end;

constructor TWellBoundary.Create(ScreenObject: TScreenObject;
  Model: TBaseModel);
var
  InvalidateModelEvent: TNotifyEvent;
begin
  if Model = nil then
  begin
    InvalidateModelEvent := nil;
  end
  else
  begin
    InvalidateModelEvent := Model.DoInvalidate;
  end;
  inherited Create(ScreenObject, Model);
  FAllocateByPressureAndMobility := true;
  FIntervals := TWellIntervals.Create(ScreenObject, InvalidateModelEvent);

  if Model = nil then
  begin
    FSolution.TimeList := nil;
    FBoundaryValue.TimeList := nil;
  end
  else
  begin
    FSolution.TimeList := (Model as TPhastModel).WellSolution;
    FBoundaryValue.TimeList :=
      (Model as TPhastModel).WellInjectionOrPumpingRate;
  end;
end;

destructor TWellBoundary.Destroy;
begin
  FIntervals.Free;
  inherited;
end;

function TWellBoundary.IsBoundary: boolean;
begin
  result := (BoundaryValue.Count > 0) and (Intervals.Count > 0);
  if result and (Model as TPhastModel).SoluteTransport then
  begin
    result := (Solution.Count > 0)
  end;
end;

procedure TWellBoundary.PartialAssign(Source: TPersistent);
var
  SourceBoundary: TWellBoundary;
begin
  if Source is TWellBoundary then
  begin
    SourceBoundary := TWellBoundary(Source);
    Solution := SourceBoundary.Solution;
    BoundaryValue := SourceBoundary.BoundaryValue;
    InvalidateModel;
  end
  else
  begin
    Assert(False);
  end;
end;

procedure TWellBoundary.SetAllocateByPressureAndMobility(
  const Value: boolean);
begin
  FAllocateByPressureAndMobility := Value;
end;

procedure TWellBoundary.SetDescription(const Value: string);
begin
  if FDescription <> Value then
  begin
    FDescription := Value;
    InvalidateModel;
  end;
end;

procedure TWellBoundary.SetDiameter(const Value: double);
begin
  if FDiameter <> Value then
  begin
    FDiameter := Value;
    InvalidateModel;
  end;
end;

procedure TWellBoundary.SetIntervals(const Value: TWellIntervals);
begin
  FIntervals.Assign(Value);
  InvalidateModel;
end;

procedure TWellBoundary.SetLandSurfaceDatum(const Value: double);
begin
  if FLandSurfaceDatum <> Value then
  begin
    FLandSurfaceDatum := Value;
    InvalidateModel;
  end;
end;

procedure TWellBoundary.SetWellElevationFormat(
  const Value: TWellElevationFormat);
begin
  if FWellElevationFormat <> Value then
  begin
    FWellElevationFormat := Value;
    InvalidateModel;
  end;
end;

{ TWellInterval }

procedure TWellInterval.Assign(Source: TPersistent);
var
  SourceInterval: TWellInterval;
begin
  if Source is TWellInterval then
  begin
    SourceInterval := TWellInterval(Source);
    FirstElevation := SourceInterval.FirstElevation;
    SecondElevation := SourceInterval.SecondElevation;
    InvalidateModel;
  end
  else
  begin
    inherited;
  end;
end;

procedure TWellInterval.InvalidateModel;
var
  ScreenObject: TScreenObject;
begin
  ScreenObject:= (Collection as TWellIntervals).ScreenObject;
  if ScreenObject <> nil then
  begin
    ScreenObject.InvalidateModel;
  end;
end;

procedure TWellInterval.SetFirstElevation(const Value: double);
begin
  if FFirstElevation <> Value then
  begin
    FFirstElevation := Value;
    InvalidateModel;
  end;
end;

procedure TWellInterval.SetSecondElevation(const Value: double);
begin
  if FSecondElevation <> Value then
  begin
    FSecondElevation := Value;
    InvalidateModel;
  end;
end;

{ TWellIntervals }

constructor TWellIntervals.Create(ScreenObject: TScreenObject;
  InvalidateModelEvent: TNotifyEvent);
begin
  inherited Create(TWellInterval, InvalidateModelEvent);
  FScreenObject := ScreenObject;
end;

{ TCustomPhastBoundary }

constructor TCustomPhastBoundary.Create(ScreenObject: TScreenObject;
  Model: TBaseModel);
begin
  FModel := Model;
  inherited Create;
  SetScreenObject(ScreenObject);
end;

procedure TCustomPhastBoundary.InvalidateModel;
begin
  if ScreenObject <> nil then
  begin
    ScreenObject.InvalidateModel;
  end;
end;

procedure TCustomPhastBoundary.SetModel(const Value: TBaseModel);
begin
  assert ((Value = nil) or (Value is TPhastModel));
  FModel := Value;
end;

procedure TCustomPhastBoundary.SetScreenObject(const Value: TScreenObject);
begin
  FScreenObject := Value;
end;

procedure TCustomPhastBoundary.UpdateBoundaryDataSet(
  const DataArray: TDataArray; var Formula: string);
var
  NewPosition: integer;
  OldFormula: string;
  OldUses: TStringList;
  NewUses: TStringList;
  Compiler: TRbwParser;
  Index: Integer;
  Position: Integer;
  Observer: TObserver;
  ObserverIndex: Integer;
  ObserverName: string;
  DS: TObserver;
begin
  if ScreenObject <> nil then
  begin
    if ScreenObject.FModel <> nil then
    begin
      Compiler := ScreenObject.GetCompiler(DataArray.Orientation, DataArray.EvaluatedAt);
    end
    else
    begin
      Compiler := nil;
    end;
    if Formula = '' then
    begin
      NewPosition := ScreenObject.IndexOfBoundaryDataSet(DataArray);
      if NewPosition >= 0 then
      begin
        if ScreenObject.FCanInvalidateModel then
        begin
          OldFormula := ScreenObject.BoundaryDataSetFormulas[NewPosition];
          Observer :=ScreenObject.FBoundaryDataSetSubscriptions[NewPosition] as TObserver;
          if (OldFormula <> '') and (Model <> nil) and (Compiler <> nil) then
          begin
            Compiler.Compile(OldFormula);
            OldUses := Compiler.CurrentExpression.VariablesUsed;
            for ObserverIndex := 0 to OldUses.Count - 1 do
            begin
              ObserverName := OldUses[ObserverIndex];
              DS := (Model as TPhastModel).GetObserverByName(ObserverName);
              DS.StopsTalkingTo(Observer);
            end;
          end;
        end;
        ScreenObject.DeleteBoundaryDataSet(NewPosition);
      end;
    end
    else
    begin
      NewPosition :=
        ScreenObject.AddBoundaryDataSet(DataArray);
      OldFormula := ScreenObject.BoundaryDataSetFormulas[NewPosition];
      if ScreenObject.FCanInvalidateModel then
      begin
        Observer := ScreenObject.FBoundaryDataSetSubscriptions[NewPosition] as TObserver;
      end
      else
      begin
        Observer := nil;
      end;
      ScreenObject.BoundaryDataSetFormulas[NewPosition] := Formula;
      Formula := ScreenObject.BoundaryDataSetFormulas[NewPosition];
      if ScreenObject.FCanInvalidateModel then
      begin
        OldUses := TStringList.Create;
        NewUses := TStringList.Create;
        try

          if (OldFormula <> '') and (Model <> nil) and (Compiler <> nil) then
          begin
            Compiler.Compile(OldFormula);
            OldUses.Assign(Compiler.CurrentExpression.VariablesUsed);
          end
          else
          begin
            FreeAndNil(OldUses);
          end;
          if (Formula <> '')  and (Model <> nil) and (Compiler <> nil) then
          begin
            Compiler.Compile(Formula);
            NewUses.Assign(Compiler.CurrentExpression.VariablesUsed);
          end
          else
          begin
            FreeAndNil(NewUses);
          end;
          if (OldUses <> nil) and (NewUses <> nil) then
          begin
            for Index := OldUses.Count - 1 downto 0 do
            begin
              Position := NewUses.IndexOf(OldUses[Index]);
              if Position >= 0 then
              begin
                OldUses.Delete(Index);
                NewUses.Delete(Position);
              end;
            end;
          end;
          if OldUses <> nil then
          begin
            for ObserverIndex := 0 to OldUses.Count - 1 do
            begin
              ObserverName := OldUses[ObserverIndex];
              DS := (Model as TPhastModel).GetObserverByName(ObserverName);
              DS.StopsTalkingTo(Observer);
            end;
          end;
          if NewUses <> nil then
          begin
            for ObserverIndex := 0 to NewUses.Count - 1 do
            begin
              ObserverName := NewUses[ObserverIndex];
              DS := (Model as TPhastModel).GetObserverByName(ObserverName);
              DS.TalksTo(Observer);
            end;
          end;
        finally
          NewUses.Free;
          OldUses.Free;
        end;
      end;
    end;
  end;
end;

procedure TCustomPhastBoundary.UpdateBoundaryDataSet(const DataSetName: string;
  var Formula: string);
var
  BoundaryPosition: integer;
  Model: TPhastModel;
  DataArray : TDataArray;
begin
  if ScreenObject <> nil then
  begin
    if (FModel = nil) or (csLoading in FModel.ComponentState) then
    begin
      Exit;
    end;
    
    Model := (FModel as TPhastModel);
    BoundaryPosition :=
      Model.DataArrayManager.IndexOfBoundaryDataSet(DataSetName);
    Assert(BoundaryPosition >= 0);
    DataArray := Model.DataArrayManager.BoundaryDataSets[BoundaryPosition];
    UpdateBoundaryDataSet(DataArray, Formula);
  end;
end;

{ TCustomOrientedPhastBoundary }

procedure TCustomOrientedPhastBoundary.Assign(Source: TPersistent);
var
  SourceBoundary: TCustomOrientedPhastBoundary;
begin
  if Source is TCustomOrientedPhastBoundary then
  begin
    SourceBoundary := TCustomOrientedPhastBoundary(Source);
    Orientation := SourceBoundary.Orientation;
  end;
  inherited;
end;

procedure TCustomOrientedPhastBoundary.SetScreenObject(
  const Value: TScreenObject);
begin
  inherited;
  if Value <> nil then
  begin
    Orientation := Value.ViewDirection;
  end
end;

procedure TCustomOrientedPhastBoundary.SetOrientation(
  const Value: TViewDirection);
begin
  if FOrientation <> Value then
  begin
    FOrientation := Value;
    InvalidateModel;
  end;
end;

{ TMultiValueScreenObject }

procedure TMultiValueScreenObject.Assign(Source: TPersistent);
var
  SourceObject: TMultiValueScreenObject;
begin
  if Source is TMultiValueScreenObject then
  begin
    SourceObject := TMultiValueScreenObject(Source);
    IntegerValues := SourceObject.IntegerValues;
    RealValues := SourceObject.RealValues;
  end;
  inherited;
end;

constructor TMultiValueScreenObject.Create(AnOwner: TComponent);
var
  InvalidateModelEvent: TNotifyEvent;
begin
  inherited;
  if Model = nil then
  begin
    InvalidateModelEvent := nil;
  end
  else
  begin
    InvalidateModelEvent := Model.DoInvalidate;
  end;
  FRealValues := TRealDataListCollection.Create(self, InvalidateModelEvent);
  FIntegerValues := TIntegerDataListCollection.Create(self, InvalidateModelEvent);
end;

destructor TMultiValueScreenObject.Destroy;
begin
  FRealValues.Free;
  FIntegerValues.Free;
  inherited;
end;

procedure TMultiValueScreenObject.SetIntegerValues(
  const Value: TIntegerDataListCollection);
begin
  FIntegerValues.Assign(Value);
  InvalidateModel;
end;

procedure TMultiValueScreenObject.SetRealValues(
  const Value: TRealDataListCollection);
begin
  FRealValues.Assign(Value);
  InvalidateModel;
end;

{ TScreenObjectItem }

function TScreenObjectItem.GetMixtureFormulas: TStrings;
var
  Index: integer;
begin
  FMixtureFormulas.Clear;
  FMixtureFormulas.Capacity := ScreenObject.DataSetCount;
  for Index := 0 to ScreenObject.DataSetCount - 1 do
  begin
    FMixtureFormulas.Add(ScreenObject.MixtureDataSetFormula[Index]);
  end;
  Result := FMixtureFormulas;
end;

function TScreenObjectItem.GetPoints: TPointCollection;
begin
  Result := FPoints;
end;

{ TScreenObjectCollection }

constructor TScreenObjectCollection.Create(Model: TBaseModel);
begin
  FModel := Model;
  Assert((FModel = nil) or (FModel is TPhastModel));
  inherited Create(TScreenObjectItem);
end;

procedure TCustomPhastBoundaryCollection.SetTimeList(
  const Value: TPhastTimeList);
begin
  FTimeList := Value;
end;

procedure TCustomPhastBoundaryCollection.UpdateFormulaExpression;
var
  Index: integer;
  Item: TCustomPhastBoundaryCondition;
begin
  for Index := 0 to Count - 1 do
  begin
    Item := Items[Index] as TCustomPhastBoundaryCondition;
    Item.UpdateFormulaExpression;
  end;
end;

procedure TCustomPhastBoundaryCollection.UpdateMixtureExpression;
var
  Index: integer;
  Item: TCustomPhastBoundaryCondition;
begin
  for Index := 0 to Count - 1 do
  begin
    Item := Items[Index] as TCustomPhastBoundaryCondition;
    Item.UpdateMixtureExpression;
  end;
end;

procedure TCustomInterpolatedBoundary.SetScreenObject(
  const Value: TScreenObject);
begin
  inherited;
  FSolution.ScreenObject := Value;
  FBoundaryValue.ScreenObject := Value;
end;

procedure TCustomInterpolatedBoundary.SetSolution(
  const Value: TIntegerPhastBoundaries);
begin
  FSolution.Assign(Value);
  InvalidateModel;
end;

procedure TCustomInterpolatedBoundary.Assign(Source: TPersistent);
var
  SourceBoundary: TCustomInterpolatedBoundary;
begin
  if Source is TCustomInterpolatedBoundary then
  begin
    SourceBoundary := TCustomInterpolatedBoundary(Source);
    BoundaryValue := SourceBoundary.BoundaryValue;
    Solution := SourceBoundary.Solution;
    InvalidateModel;
  end
  else
  begin
    inherited;
  end;
end;

procedure TCustomInterpolatedBoundary.Clear;
begin
  if (BoundaryValue.Count > 0) or (Solution.Count > 0) then
  begin
    InvalidateModel;
  end;
  BoundaryValue.Clear;
  Solution.Clear;
end;

constructor TCustomInterpolatedBoundary.Create(ScreenObject: TScreenObject;
  Model: TBaseModel);
begin
  FSolution := TIntegerPhastBoundaries.Create(Model);
  FBoundaryValue := TRealPhastBoundaries.Create(Model);

  inherited Create(ScreenObject, Model);
end;

destructor TCustomInterpolatedBoundary.Destroy;
begin
  FSolution.Free;
  FBoundaryValue.Free;
  inherited;
end;

procedure TCustomInterpolatedBoundary.SetBoundaryValue(
  const Value: TRealPhastBoundaries);
begin
  FBoundaryValue.Assign(Value);
  InvalidateModel;
end;

procedure TCustomInterpolatedBoundary.UpdateFormulaExpression;
begin
  FBoundaryValue.UpdateFormulaExpression;
  FSolution.UpdateFormulaExpression;
end;

procedure TCustomInterpolatedBoundary.UpdateMixtureExpression;
begin
  FBoundaryValue.UpdateMixtureExpression;
  FSolution.UpdateMixtureExpression;
end;

{ TIntersectEdge }

procedure TIntersectEdge.Assign(Segment: TCellElementSegment);
begin
  StartPoint.x := Segment.X1;
  StartPoint.y := Segment.Y1;
  EndPoint.x := Segment.X2;
  EndPoint.y := Segment.Y2;
end;

procedure TIntersectEdge.Assign(P1, P2: TPoint2D);
begin
  StartPoint := P1;
  EndPoint := P2;
end;

procedure TIntersectEdge.Reverse;
var
  Temp : TPoint2D;
begin
  Temp := StartPoint;
  StartPoint := EndPoint;
  EndPoint := Temp;
end;

{ TScreenObjectList }

function TScreenObjectList.Add(ScreenObject: TScreenObject): integer;
begin
  result := FList.Add(ScreenObject);
end;

procedure TScreenObjectList.Assign(AnotherList: TScreenObjectList);
begin
  FList.Assign(AnotherList.FList);
end;

procedure TScreenObjectList.Clear;
begin
  FList.Clear;
end;

constructor TScreenObjectList.Create;
begin
  FList := TList.Create;
end;

destructor TScreenObjectList.Destroy;
begin
  FList.Free;
  inherited;
end;

function TScreenObjectList.GetCapacity: integer;
begin
  result := FList.Capacity;
end;

function TScreenObjectList.GetCount: integer;
begin
  result := FList.Count;
end;

function TScreenObjectList.GetItems(Index: integer): TScreenObject;
begin
  result := FList[Index];
end;

function TScreenObjectList.IndexOf(AScreenObject: TScreenObject): Integer;
begin
  result := FList.IndexOf(AScreenObject);
end;

procedure TScreenObjectList.SetCapacity(const Value: integer);
begin
  FList.Capacity := Value;
end;

{ TModflowBoundaries }

procedure TModflowBoundaries.Assign(Source: TModflowBoundaries);
var
  InvalidateEvent: TNotifyEvent;
begin
  if Model = nil then
  begin
    InvalidateEvent := nil;
  end
  else
  begin
    InvalidateEvent := Model.DoInvalidate;
  end;

  if Source.FModflowChdBoundary = nil then
  begin
    FreeAndNil(FModflowChdBoundary);
  end
  else
  begin
    if FModflowChdBoundary = nil then
    begin
      FModflowChdBoundary := TChdBoundary.Create(Model, FScreenObject);
    end;
    FModflowChdBoundary.Assign(Source.FModflowChdBoundary);
  end;

  if Source.FModflowGhbBoundary = nil then
  begin
    FreeAndNil(FModflowGhbBoundary);
  end
  else
  begin
    if FModflowGhbBoundary = nil then
    begin
      FModflowGhbBoundary := TGhbBoundary.Create(Model, FScreenObject);
    end;
    FModflowGhbBoundary.Assign(Source.FModflowGhbBoundary);
  end;

  if Source.FModflowWellBoundary = nil then
  begin
    FreeAndNil(FModflowWellBoundary);
  end
  else
  begin
    if FModflowWellBoundary = nil then
    begin
      FModflowWellBoundary := TMfWellBoundary.Create(Model, FScreenObject);
    end;
    FModflowWellBoundary.Assign(Source.FModflowWellBoundary);
  end;

  if Source.FModflowRivBoundary = nil then
  begin
    FreeAndNil(FModflowRivBoundary);
  end
  else
  begin
    if FModflowRivBoundary = nil then
    begin
      FModflowRivBoundary := TRivBoundary.Create(Model, FScreenObject);
    end;
    FModflowRivBoundary.Assign(Source.FModflowRivBoundary);
  end;

  if Source.FModflowDrnBoundary = nil then
  begin
    FreeAndNil(FModflowDrnBoundary);
  end
  else
  begin
    if FModflowDrnBoundary = nil then
    begin
      FModflowDrnBoundary := TDrnBoundary.Create(Model, FScreenObject);
    end;
    FModflowDrnBoundary.Assign(Source.FModflowDrnBoundary);
  end;

  if Source.FModflowDrtBoundary = nil then
  begin
    FreeAndNil(FModflowDrtBoundary);
  end
  else
  begin
    if FModflowDrtBoundary = nil then
    begin
      FModflowDrtBoundary := TDrtBoundary.Create(Model, FScreenObject);
    end;
    FModflowDrtBoundary.Assign(Source.FModflowDrtBoundary);
  end;

  if Source.FModflowRchBoundary = nil then
  begin
    FreeAndNil(FModflowRchBoundary);
  end
  else
  begin
    if FModflowRchBoundary = nil then
    begin
      FModflowRchBoundary := TRchBoundary.Create(Model, FScreenObject);
    end;
    FModflowRchBoundary.Assign(Source.FModflowRchBoundary);
  end;

  if Source.FModflowEvtBoundary = nil then
  begin
    FreeAndNil(FModflowEvtBoundary);
  end
  else
  begin
    if FModflowEvtBoundary = nil then
    begin
      FModflowEvtBoundary := TEvtBoundary.Create(Model, FScreenObject);
    end;
    FModflowEvtBoundary.Assign(Source.FModflowEvtBoundary);
  end;

  if Source.FModflowEtsBoundary = nil then
  begin
    FreeAndNil(FModflowEtsBoundary);
  end
  else
  begin
    if FModflowEtsBoundary = nil then
    begin
      FModflowEtsBoundary := TEtsBoundary.Create(Model, FScreenObject);
    end;
    FModflowEtsBoundary.Assign(Source.FModflowEtsBoundary);
  end;

  if Source.FModflowResBoundary = nil then
  begin
    FreeAndNil(FModflowResBoundary);
  end
  else
  begin
    if FModflowResBoundary = nil then
    begin
      FModflowResBoundary := TResBoundary.Create(Model, FScreenObject);
    end;
    FModflowResBoundary.Assign(Source.FModflowResBoundary);
  end;

  if Source.FModflowLakBoundary = nil then
  begin
    FreeAndNil(FModflowLakBoundary);
  end
  else
  begin
    if FModflowLakBoundary = nil then
    begin
      FModflowLakBoundary := TLakBoundary.Create(Model, FScreenObject);
    end;
    FModflowLakBoundary.Assign(Source.FModflowLakBoundary);
  end;

  if Source.FModflowSfrBoundary = nil then
  begin
    FreeAndNil(FModflowSfrBoundary);
  end
  else
  begin
    if FModflowSfrBoundary = nil then
    begin
      FModflowSfrBoundary := TSfrBoundary.Create(Model, FScreenObject);
    end;
    FModflowSfrBoundary.Assign(Source.FModflowSfrBoundary);
  end;

  if Source.FModflowStrBoundary = nil then
  begin
    FreeAndNil(FModflowStrBoundary);
  end
  else
  begin
    if FModflowStrBoundary = nil then
    begin
      FModflowStrBoundary := TStrBoundary.Create(Model, FScreenObject);
    end;
    FModflowStrBoundary.Assign(Source.FModflowStrBoundary);
  end;

  if Source.FModflowUzfBoundary = nil then
  begin
    FreeAndNil(FModflowUzfBoundary);
  end
  else
  begin
    if FModflowUzfBoundary = nil then
    begin
      FModflowUzfBoundary := TUzfBoundary.Create(Model, FScreenObject);
    end;
    FModflowUzfBoundary.Assign(Source.FModflowUzfBoundary);
  end;

  if Source.FModflowHeadObservations = nil then
  begin
    FreeAndNil(FModflowHeadObservations);
  end
  else
  begin
    if FModflowHeadObservations = nil then
    begin
      FModflowHeadObservations := THobBoundary.Create(Model, FScreenObject);
    end;
    FModflowHeadObservations.Assign(Source.FModflowHeadObservations);
  end;

  if Source.FModflowHfbBoundary = nil then
  begin
    FreeAndNil(FModflowHfbBoundary);
  end
  else
  begin
    if FModflowHfbBoundary = nil then
    begin
      FModflowHfbBoundary := THfbBoundary.Create(Model, FScreenObject);
    end;
    FModflowHfbBoundary.Assign(Source.FModflowHfbBoundary);
  end;

  if Source.FModflowGage = nil then
  begin
    FreeAndNil(FModflowGage);
  end
  else
  begin
    if FModflowGage = nil then
    begin
      FModflowGage := TStreamGage.Create(InvalidateEvent, FScreenObject);
    end;
    FModflowGage.Assign(Source.FModflowGage);
  end;

  if Source.FModflowMnw2Boundary = nil then
  begin
    FreeAndNil(FModflowMnw2Boundary);
  end
  else
  begin
    if FModflowMnw2Boundary = nil then
    begin
      FModflowMnw2Boundary := TMnw2Boundary.Create(Model, FScreenObject);
    end;
    FModflowMnw2Boundary.Assign(Source.FModflowMnw2Boundary);
  end;

  if Source.FModflowMnw1Boundary = nil then
  begin
    FreeAndNil(FModflowMnw1Boundary);
  end
  else
  begin
    if FModflowMnw1Boundary = nil then
    begin
      FModflowMnw1Boundary := TMnw1Boundary.Create(Model, FScreenObject);
    end;
    FModflowMnw1Boundary.Assign(Source.FModflowMnw1Boundary);
  end;

  if Source.FModflowHydmodData = nil then
  begin
    FreeAndNil(FModflowHydmodData);
  end
  else
  begin
    if FModflowHydmodData = nil then
    begin
      FModflowHydmodData := THydmodData.Create(Model as TCustomModel, FScreenObject);
    end;
    FModflowHydmodData.Assign(Source.FModflowHydmodData);
  end;

  if Source.FMt3dmsConcBoundary = nil then
  begin
    FreeAndNil(FMt3dmsConcBoundary);
  end
  else
  begin
    if FMt3dmsConcBoundary = nil then
    begin
      FMt3dmsConcBoundary := TMt3dmsConcBoundary.Create(Model, FScreenObject);
    end;
    FMt3dmsConcBoundary.Assign(Source.FMt3dmsConcBoundary);
  end;

  if Source.FMt3dmsTransObservations = nil then
  begin
    FreeAndNil(FMt3dmsTransObservations);
  end
  else
  begin
    if FMt3dmsTransObservations = nil then
    begin
      FMt3dmsTransObservations := TMt3dmsTransObservations.Create(Model, FScreenObject);
    end;
    FMt3dmsTransObservations.Assign(Source.FMt3dmsTransObservations);
  end;

  if Source.FMt3dUztRechConc = nil then
  begin
    FreeAndNil(FMt3dUztRechConc);
  end
  else
  begin
    if FMt3dUztRechConc = nil then
    begin
      FMt3dUztRechConc := TMt3dUztRchConcBoundary.Create(Model, FScreenObject);
    end;
    FMt3dUztRechConc.Assign(Source.FMt3dUztRechConc);
  end;

  if Source.FMt3dUztSatEtConcBoundary = nil then
  begin
    FreeAndNil(FMt3dUztSatEtConcBoundary);
  end
  else
  begin
    if FMt3dUztSatEtConcBoundary = nil then
    begin
      FMt3dUztSatEtConcBoundary := TMt3dUztSatEtConcBoundary.Create(Model, FScreenObject);
    end;
    FMt3dUztSatEtConcBoundary.Assign(Source.FMt3dUztSatEtConcBoundary);
  end;

  if Source.FMt3dUztUnsatEtConcBoundary = nil then
  begin
    FreeAndNil(FMt3dUztUnsatEtConcBoundary);
  end
  else
  begin
    if FMt3dUztUnsatEtConcBoundary = nil then
    begin
      FMt3dUztUnsatEtConcBoundary := TMt3dUztUnsatEtConcBoundary.Create(Model, FScreenObject);
    end;
    FMt3dUztUnsatEtConcBoundary.Assign(Source.FMt3dUztUnsatEtConcBoundary);
  end;

  if Source.FMt3dUzSsmSinkConcBoundary = nil then
  begin
    FreeAndNil(FMt3dUzSsmSinkConcBoundary);
  end
  else
  begin
    if FMt3dUzSsmSinkConcBoundary = nil then
    begin
      FMt3dUzSsmSinkConcBoundary := TMt3dUzSsmSinkConcBoundary.Create(Model, FScreenObject);
    end;
    FMt3dUzSsmSinkConcBoundary.Assign(Source.FMt3dUzSsmSinkConcBoundary);
  end;

  if Source.FMt3dLktConcBoundary = nil then
  begin
    FreeAndNil(FMt3dLktConcBoundary);
  end
  else
  begin
    if FMt3dLktConcBoundary = nil then
    begin
      FMt3dLktConcBoundary := TMt3dLktConcBoundary.Create(Model, FScreenObject);
    end;
    FMt3dLktConcBoundary.Assign(Source.FMt3dLktConcBoundary);
  end;

  if Source.FMt3dSftConcBoundary = nil then
  begin
    FreeAndNil(FMt3dSftConcBoundary);
  end
  else
  begin
    if FMt3dSftConcBoundary = nil then
    begin
      FMt3dSftConcBoundary := TMt3dSftBoundary.Create(Model, FScreenObject);
    end;
    FMt3dSftConcBoundary.Assign(Source.FMt3dSftConcBoundary);
  end;

  if Source.FModflowFhbHeadBoundary = nil then
  begin
    FreeAndNil(FModflowFhbHeadBoundary);
  end
  else
  begin
    if FModflowFhbHeadBoundary = nil then
    begin
      FModflowFhbHeadBoundary := TFhbHeadBoundary.Create(Model, FScreenObject);
    end;
    FModflowFhbHeadBoundary.Assign(Source.FModflowFhbHeadBoundary);
  end;

  if Source.FModflowFhbFlowBoundary = nil then
  begin
    FreeAndNil(FModflowFhbFlowBoundary);
  end
  else
  begin
    if FModflowFhbFlowBoundary = nil then
    begin
      FModflowFhbFlowBoundary := TFhbFlowBoundary.Create(Model, FScreenObject);
    end;
    FModflowFhbFlowBoundary.Assign(Source.FModflowFhbFlowBoundary);
  end;

  if Source.FFmpWellBoundary = nil then
  begin
    FreeAndNil(FFmpWellBoundary);
  end
  else
  begin
    if FFmpWellBoundary = nil then
    begin
      FFmpWellBoundary := TFmpWellBoundary.Create(Model, FScreenObject);
    end;
    FFmpWellBoundary.Assign(Source.FFmpWellBoundary);
  end;

  if Source.FFmpPrecipBoundary = nil then
  begin
    FreeAndNil(FFmpPrecipBoundary);
  end
  else
  begin
    if FFmpPrecipBoundary = nil then
    begin
      FFmpPrecipBoundary := TFmpPrecipBoundary.Create(Model, FScreenObject);
    end;
    FFmpPrecipBoundary.Assign(Source.FFmpPrecipBoundary);
  end;

  if Source.FFmpRefEvapBoundary = nil then
  begin
    FreeAndNil(FFmpRefEvapBoundary);
  end
  else
  begin
    if FFmpRefEvapBoundary = nil then
    begin
      FFmpRefEvapBoundary := TFmpRefEvapBoundary.Create(Model, FScreenObject);
    end;
    FFmpRefEvapBoundary.Assign(Source.FFmpRefEvapBoundary);
  end;

  if Source.FFmpCropIDBoundary = nil then
  begin
    FreeAndNil(FFmpCropIDBoundary);
  end
  else
  begin
    if FFmpCropIDBoundary = nil then
    begin
      FFmpCropIDBoundary := TFmpCropIDBoundary.Create(Model, FScreenObject);
    end;
    FFmpCropIDBoundary.Assign(Source.FFmpCropIDBoundary);
  end;

  if Source.FFmpFarmIDBoundary = nil then
  begin
    FreeAndNil(FFmpFarmIDBoundary);
  end
  else
  begin
    if FFmpFarmIDBoundary = nil then
    begin
      FFmpFarmIDBoundary := TFmpFarmIDBoundary.Create(Model, FScreenObject);
    end;
    FFmpFarmIDBoundary.Assign(Source.FFmpFarmIDBoundary);
  end;

  if Source.FCfpPipes = nil then
  begin
    FreeAndNil(FCfpPipes);
  end
  else
  begin
    if FCfpPipes = nil then
    begin
      FCfpPipes := TCfpPipeBoundary.Create(Model, FScreenObject);
    end;
    FCfpPipes.Assign(Source.FCfpPipes);
  end;

  if Source.FCfpFixedHeads = nil then
  begin
    FreeAndNil(FCfpFixedHeads);
  end
  else
  begin
    if FCfpFixedHeads = nil then
    begin
      FCfpFixedHeads := TCfpFixedBoundary.Create(Model, FScreenObject);
    end;
    FCfpFixedHeads.Assign(Source.FCfpFixedHeads);
  end;

  if Source.FCfpRchFraction = nil then
  begin
    FreeAndNil(FCfpRchFraction);
  end
  else
  begin
    if FCfpRchFraction = nil then
    begin
      FCfpRchFraction := TCfpRchFractionBoundary.Create(Model, FScreenObject);
    end;
    FCfpRchFraction.Assign(Source.FCfpRchFraction);
  end;

  if Source.FSwrRain = nil then
  begin
    FreeAndNil(FSwrRain);
  end
  else
  begin
    if FSwrRain = nil then
    begin
      FSwrRain := TSwrRainBoundary.Create(Model, FScreenObject);
    end;
    FSwrRain.Assign(Source.FSwrRain);
  end;

  if Source.FSwrEvap = nil then
  begin
    FreeAndNil(FSwrEvap);
  end
  else
  begin
    if FSwrEvap = nil then
    begin
      FSwrEvap := TSwrEvapBoundary.Create(Model, FScreenObject);
    end;
    FSwrEvap.Assign(Source.FSwrEvap);
  end;

  if Source.FSwrLatInflow = nil then
  begin
    FreeAndNil(FSwrLatInflow);
  end
  else
  begin
    if FSwrLatInflow = nil then
    begin
      FSwrLatInflow := TSwrLatInflowBoundary.Create(Model, FScreenObject);
    end;
    FSwrLatInflow.Assign(Source.FSwrLatInflow);
  end;

  if Source.FSwrStage = nil then
  begin
    FreeAndNil(FSwrStage);
  end
  else
  begin
    if FSwrStage = nil then
    begin
      FSwrStage := TSwrStageBoundary.Create(Model, FScreenObject);
    end;
    FSwrStage.Assign(Source.FSwrStage);
  end;

  if Source.FSwrDirectRunoff = nil then
  begin
    FreeAndNil(FSwrDirectRunoff);
  end
  else
  begin
    if FSwrDirectRunoff = nil then
    begin
      FSwrDirectRunoff := TSwrDirectRunoffBoundary.Create(Model, FScreenObject);
    end;
    FSwrDirectRunoff.Assign(Source.FSwrDirectRunoff);
  end;

  if Source.FSwrReaches = nil then
  begin
    FreeAndNil(FSwrReaches);
  end
  else
  begin
    if FSwrReaches = nil then
    begin
      FSwrReaches := TSwrReachBoundary.Create(Model, FScreenObject);
    end;
    FSwrReaches.Assign(Source.FSwrReaches);
  end;

  if Source.FModflowSwiObsBoundary = nil then
  begin
    FreeAndNil(FModflowSwiObsBoundary);
  end
  else
  begin
    if FModflowSwiObsBoundary = nil then
    begin
      FModflowSwiObsBoundary := TSwiObsBoundary.Create(Model, FScreenObject);
    end;
    FModflowSwiObsBoundary.Assign(Source.FModflowSwiObsBoundary);
  end;

  if Source.FModflowRipBoundary = nil then
  begin
    FreeAndNil(FModflowRipBoundary);
  end
  else
  begin
    if FModflowRipBoundary = nil then
    begin
      FModflowRipBoundary := TRipBoundary.Create(Model, FScreenObject);
    end;
    FModflowRipBoundary.Assign(Source.FModflowRipBoundary);
  end;

  if Source.FMt3dUztRechConc = nil then
  begin
    FreeAndNil(FMt3dUztRechConc);
  end
  else
  begin
    if FMt3dUztRechConc = nil then
    begin
      FMt3dUztRechConc := TMt3dUztRchConcBoundary.Create(Model, FScreenObject);
    end;
    FMt3dUztRechConc.Assign(Source.FMt3dUztRechConc);
  end;

  if Source.FMt3dUztSatEtConcBoundary = nil then
  begin
    FreeAndNil(FMt3dUztSatEtConcBoundary);
  end
  else
  begin
    if FMt3dUztSatEtConcBoundary = nil then
    begin
      FMt3dUztSatEtConcBoundary := TMt3dUztSatEtConcBoundary.Create(Model, FScreenObject);
    end;
    FMt3dUztSatEtConcBoundary.Assign(Source.FMt3dUztSatEtConcBoundary);
  end;

  if Source.FMt3dUztUnsatEtConcBoundary = nil then
  begin
    FreeAndNil(FMt3dUztUnsatEtConcBoundary);
  end
  else
  begin
    if FMt3dUztUnsatEtConcBoundary = nil then
    begin
      FMt3dUztUnsatEtConcBoundary := TMt3dUztUnsatEtConcBoundary.Create(Model, FScreenObject);
    end;
    FMt3dUztUnsatEtConcBoundary.Assign(Source.FMt3dUztUnsatEtConcBoundary);
  end;

  if Source.FMt3dUzSsmSinkConcBoundary = nil then
  begin
    FreeAndNil(FMt3dUzSsmSinkConcBoundary);
  end
  else
  begin
    if FMt3dUzSsmSinkConcBoundary = nil then
    begin
      FMt3dUzSsmSinkConcBoundary := TMt3dUzSsmSinkConcBoundary.Create(Model, FScreenObject);
    end;
    FMt3dUzSsmSinkConcBoundary.Assign(Source.FMt3dUzSsmSinkConcBoundary);
  end;

  if Source.FModflowSfr6Boundary = nil then
  begin
    FreeAndNil(FModflowSfr6Boundary);
  end
  else
  begin
    if FModflowSfr6Boundary = nil then
    begin
      FModflowSfr6Boundary := TSfrMf6Boundary.Create(Model as TCustomModel, FScreenObject);
    end;
    FModflowSfr6Boundary.Assign(Source.FModflowSfr6Boundary);
  end;

  if Source.FModflowMawBoundary = nil then
  begin
    FreeAndNil(FModflowMawBoundary);
  end
  else
  begin
    if FModflowMawBoundary = nil then
    begin
      FModflowMawBoundary := TMawBoundary.Create(Model, FScreenObject);
    end;
    FModflowMawBoundary.Assign(Source.FModflowMawBoundary);
  end;

  if Source.FModflow6Obs = nil then
  begin
    FreeAndNil(FModflow6Obs);
  end
  else
  begin
    if FModflow6Obs = nil then
    begin
      FModflow6Obs := TModflow6Obs.Create(InvalidateEvent, FScreenObject);
    end;
    FModflow6Obs.Assign(Source.FModflow6Obs);
  end;

  if Source.FModflowLak6 = nil then
  begin
    FreeAndNil(FModflowLak6);
  end
  else
  begin
    if FModflowLak6 = nil then
    begin
      FModflowLak6 := TLakeMf6.Create(Model, FScreenObject);
    end;
    FModflowLak6.Assign(Source.FModflowLak6);
  end;

  if Source.FModflowMvr = nil then
  begin
    FreeAndNil(FModflowMvr);
  end
  else
  begin
    if FModflowMvr = nil then
    begin
      FModflowMvr := TMvrBoundary.Create(Model, FScreenObject);
    end;
    FModflowMvr.Assign(Source.FModflowMvr);
  end;

  if Source.FModflowUzfMf6Boundary = nil then
  begin
    FreeAndNil(FModflowUzfMf6Boundary);
  end
  else
  begin
    if FModflowUzfMf6Boundary = nil then
    begin
      FModflowUzfMf6Boundary := TUzfMf6Boundary.Create(Model, FScreenObject);
    end;
    FModflowUzfMf6Boundary.Assign(Source.FModflowUzfMf6Boundary);
  end;

  if Source.FModflowCSub = nil then
  begin
    FreeAndNil(FModflowCSub);
  end
  else
  begin
    if FModflowCSub = nil then
    begin
      FModflowCSub := TCSubBoundary.Create(Model, FScreenObject);
    end;
    FModflowCSub.Assign(Source.FModflowCSub);
  end;

  if Source.FModflowSubObservations = nil then
  begin
    FreeAndNil(FModflowSubObservations);
  end
  else
  begin
    if FModflowSubObservations = nil then
    begin
      FModflowSubObservations := TSubObservations.Create(InvalidateEvent, FScreenObject);
    end;
    FModflowSubObservations.Assign(Source.FModflowSubObservations);
  end;

  if Source.FModflowSwtObservations = nil then
  begin
    FreeAndNil(FModflowSwtObservations);
  end
  else
  begin
    if FModflowSwtObservations = nil then
    begin
      FModflowSwtObservations := TSwtObservations.Create(InvalidateEvent, FScreenObject);
    end;
    FModflowSwtObservations.Assign(Source.FModflowSwtObservations);
  end;

  if Source.FGwtCncBoundary = nil then
  begin
    FreeAndNil(FGwtCncBoundary);
  end
  else
  begin
    if FGwtCncBoundary = nil then
    begin
      FGwtCncBoundary := TCncBoundary.Create(Model, FScreenObject);
    end;
    FGwtCncBoundary.Assign(Source.FGwtCncBoundary);
  end;

  if Source.FGwtSrcBoundary = nil then
  begin
    FreeAndNil(FGwtSrcBoundary);
  end
  else
  begin
    if FGwtSrcBoundary = nil then
    begin
      FGwtSrcBoundary := TSrcBoundary.Create(Model, FScreenObject);
    end;
    FGwtSrcBoundary.Assign(Source.FGwtSrcBoundary);
  end;

  if Source.FFmp4EfficiencyBoundary = nil then
  begin
    FreeAndNil(FFmp4EfficiencyBoundary);
  end
  else
  begin
    if FFmp4EfficiencyBoundary = nil then
    begin
      FFmp4EfficiencyBoundary := TFmp4EfficiencyBoundary.Create(Model, FScreenObject);
    end;
    FFmp4EfficiencyBoundary.Assign(Source.FFmp4EfficiencyBoundary);
  end;

  if Source.Fmp4EfficiencyImprovementBoundary = nil then
  begin
    FreeAndNil(Fmp4EfficiencyImprovementBoundary);
  end
  else
  begin
    if Fmp4EfficiencyImprovementBoundary = nil then
    begin
      Fmp4EfficiencyImprovementBoundary :=
        TFmp4EfficiencyImprovementBoundary.Create(Model, FScreenObject);
    end;
    Fmp4EfficiencyImprovementBoundary.Assign(Source.Fmp4EfficiencyImprovementBoundary);
  end;

  if Source.Fmp4BareRunoffFractionBoundary = nil then
  begin
    FreeAndNil(Fmp4BareRunoffFractionBoundary);
  end
  else
  begin
    if Fmp4BareRunoffFractionBoundary = nil then
    begin
      Fmp4BareRunoffFractionBoundary :=
        TFmp4BareRunoffFractionBoundary.Create(Model, FScreenObject);
    end;
    Fmp4BareRunoffFractionBoundary.Assign(Source.Fmp4BareRunoffFractionBoundary);
  end;

  if Source.Fmp4BarePrecipitationConsumptionFractionBoundary = nil then
  begin
    FreeAndNil(Fmp4BarePrecipitationConsumptionFractionBoundary);
  end
  else
  begin
    if Fmp4BarePrecipitationConsumptionFractionBoundary = nil then
    begin
      Fmp4BarePrecipitationConsumptionFractionBoundary :=
        TFmp4BarePrecipitationConsumptionFractionBoundary.Create(Model, FScreenObject);
    end;
    Fmp4BarePrecipitationConsumptionFractionBoundary.Assign(
      Source.Fmp4BarePrecipitationConsumptionFractionBoundary);
  end;

  if Source.FFmp4BareEvap = nil then
  begin
    FreeAndNil(FFmp4BareEvap);
  end
  else
  begin
    if FFmp4BareEvap = nil then
    begin
      FFmp4BareEvap :=
        TFmp4BareEvapBoundary.Create(Model, FScreenObject);
    end;
    FFmp4BareEvap.Assign(Source.FFmp4BareEvap);
  end;

  if Source.FFmp4DirectRechargeBoundary = nil then
  begin
    FreeAndNil(FFmp4DirectRechargeBoundary);
  end
  else
  begin
    if FFmp4DirectRechargeBoundary = nil then
    begin
      FFmp4DirectRechargeBoundary :=
        TFmp4DirectRechargeBoundary.Create(Model, FScreenObject);
    end;
    FFmp4DirectRechargeBoundary.Assign(Source.FFmp4DirectRechargeBoundary);
  end;

  if Source.FFmp4PrecipPotConsumptionBoundary = nil then
  begin
    FreeAndNil(FFmp4PrecipPotConsumptionBoundary);
  end
  else
  begin
    if FFmp4PrecipPotConsumptionBoundary = nil then
    begin
      FFmp4PrecipPotConsumptionBoundary :=
        TFmp4PrecipPotConsumptionBoundary.Create(Model, FScreenObject);
    end;
    FFmp4PrecipPotConsumptionBoundary.Assign(Source.FFmp4PrecipPotConsumptionBoundary);
  end;

  if Source.FFmp4NrdInfilLocationBoundary = nil then
  begin
    FreeAndNil(FFmp4NrdInfilLocationBoundary);
  end
  else
  begin
    if FFmp4NrdInfilLocationBoundary = nil then
    begin
      FFmp4NrdInfilLocationBoundary :=
        TFmp4NrdInfilLocationBoundary.Create(Model, FScreenObject);
    end;
    FFmp4NrdInfilLocationBoundary.Assign(Source.FFmp4NrdInfilLocationBoundary);
  end;

  if Source.FFmp4LandUseAreaFractionBoundary = nil then
  begin
    FreeAndNil(FFmp4LandUseAreaFractionBoundary);
  end
  else
  begin
    if FFmp4LandUseAreaFractionBoundary = nil then
    begin
      FFmp4LandUseAreaFractionBoundary :=
        TFmp4LandUseAreaFractionBoundary.Create(Model, FScreenObject);
    end;
    FFmp4LandUseAreaFractionBoundary.Assign(Source.FFmp4LandUseAreaFractionBoundary);
  end;

  if Source.FFmp4MultLandUseAreaFractionBoundary = nil then
  begin
    FreeAndNil(FFmp4MultLandUseAreaFractionBoundary);
  end
  else
  begin
    if FFmp4MultLandUseAreaFractionBoundary = nil then
    begin
      FFmp4MultLandUseAreaFractionBoundary :=
        TFmp4MultLandUseAreaFractionBoundary.Create(Model, FScreenObject);
    end;
    FFmp4MultLandUseAreaFractionBoundary.Assign(Source.FFmp4MultLandUseAreaFractionBoundary);
  end;

  if Source.FFmp4CropCoefficientBoundary = nil then
  begin
    FreeAndNil(FFmp4CropCoefficientBoundary);
  end
  else
  begin
    if FFmp4CropCoefficientBoundary = nil then
    begin
      FFmp4CropCoefficientBoundary :=
        TFmp4CropCoefficientBoundary.Create(Model, FScreenObject);
    end;
    FFmp4CropCoefficientBoundary.Assign(Source.FFmp4CropCoefficientBoundary);
  end;

  if Source.FFmpMultCropCoefficientBoundary = nil then
  begin
    FreeAndNil(FFmpMultCropCoefficientBoundary);
  end
  else
  begin
    if FFmpMultCropCoefficientBoundary = nil then
    begin
      FFmpMultCropCoefficientBoundary :=
        TFmp4MultCropCoefficientBoundary.Create(Model, FScreenObject);
    end;
    FFmpMultCropCoefficientBoundary.Assign(Source.FFmpMultCropCoefficientBoundary);
  end;

  if Source.FFmp4ConsumptiveUseBoundary = nil then
  begin
    FreeAndNil(FFmp4ConsumptiveUseBoundary);
  end
  else
  begin
    if FFmp4ConsumptiveUseBoundary = nil then
    begin
      FFmp4ConsumptiveUseBoundary :=
        TFmp4ConsumptiveUseBoundary.Create(Model, FScreenObject);
    end;
    FFmp4ConsumptiveUseBoundary.Assign(Source.FFmp4ConsumptiveUseBoundary);
  end;

  if Source.FFmpMultConsumptiveUseBoundary = nil then
  begin
    FreeAndNil(FFmpMultConsumptiveUseBoundary);
  end
  else
  begin
    if FFmpMultConsumptiveUseBoundary = nil then
    begin
      FFmpMultConsumptiveUseBoundary :=
        TFmp4MultConsumptiveUseBoundary.Create(Model, FScreenObject);
    end;
    FFmpMultConsumptiveUseBoundary.Assign(Source.FFmpMultConsumptiveUseBoundary);
  end;

  if Source.FFmp4IrrigationBoundary = nil then
  begin
    FreeAndNil(FFmp4IrrigationBoundary);
  end
  else
  begin
    if FFmp4IrrigationBoundary = nil then
    begin
      FFmp4IrrigationBoundary :=
        TFmp4IrrigationBoundary.Create(Model, FScreenObject);
    end;
    FFmp4IrrigationBoundary.Assign(Source.FFmp4IrrigationBoundary);
  end;

  if Source.FFmpMultIrrigationBoundary = nil then
  begin
    FreeAndNil(FFmpMultIrrigationBoundary);
  end
  else
  begin
    if FFmpMultIrrigationBoundary = nil then
    begin
      FFmpMultIrrigationBoundary :=
        TFmp4MultIrrigationBoundary.Create(Model, FScreenObject);
    end;
    FFmpMultIrrigationBoundary.Assign(Source.FFmpMultIrrigationBoundary);
  end;

  if Source.FFmp4RootDepthBoundary = nil then
  begin
    FreeAndNil(FFmp4RootDepthBoundary);
  end
  else
  begin
    if FFmp4RootDepthBoundary = nil then
    begin
      FFmp4RootDepthBoundary :=
        TFmp4RootDepthBoundary.Create(Model, FScreenObject);
    end;
    FFmp4RootDepthBoundary.Assign(Source.FFmp4RootDepthBoundary);
  end;

  if Source.FFmpMultRootDepthBoundary = nil then
  begin
    FreeAndNil(FFmpMultRootDepthBoundary);
  end
  else
  begin
    if FFmpMultRootDepthBoundary = nil then
    begin
      FFmpMultRootDepthBoundary :=
        TFmp4MultRootDepthBoundary.Create(Model, FScreenObject);
    end;
    FFmpMultRootDepthBoundary.Assign(Source.FFmpMultRootDepthBoundary);
  end;

  if Source.FFmp4TranspirationFractionBoundary = nil then
  begin
    FreeAndNil(FFmp4TranspirationFractionBoundary);
  end
  else
  begin
    if FFmp4TranspirationFractionBoundary = nil then
    begin
      FFmp4TranspirationFractionBoundary :=
        TFmp4TranspirationFractionBoundary.Create(Model, FScreenObject);
    end;
    FFmp4TranspirationFractionBoundary.Assign(Source.FFmp4TranspirationFractionBoundary);
  end;

  if Source.FFmpMultTranspirationFractionBoundary = nil then
  begin
    FreeAndNil(FFmpMultTranspirationFractionBoundary);
  end
  else
  begin
    if FFmpMultTranspirationFractionBoundary = nil then
    begin
      FFmpMultTranspirationFractionBoundary :=
        TFmp4MultTranspirationFractionBoundary.Create(Model, FScreenObject);
    end;
    FFmpMultTranspirationFractionBoundary.Assign(Source.FFmpMultTranspirationFractionBoundary);
  end;

  if Source.FFmp4EvaporationIrrigationFractionBoundary = nil then
  begin
    FreeAndNil(FFmp4EvaporationIrrigationFractionBoundary);
  end
  else
  begin
    if FFmp4EvaporationIrrigationFractionBoundary = nil then
    begin
      FFmp4EvaporationIrrigationFractionBoundary :=
        TFmp4EvaporationIrrigationFractionBoundary.Create(Model, FScreenObject);
    end;
    FFmp4EvaporationIrrigationFractionBoundary.Assign(Source.FFmp4EvaporationIrrigationFractionBoundary);
  end;

  if Source.FFmpMultEvaporationIrrigationFractionBoundary = nil then
  begin
    FreeAndNil(FFmpMultEvaporationIrrigationFractionBoundary);
  end
  else
  begin
    if FFmpMultEvaporationIrrigationFractionBoundary = nil then
    begin
      FFmpMultEvaporationIrrigationFractionBoundary :=
        TFmp4MultEvaporationIrrigationFractionBoundary.Create(Model, FScreenObject);
    end;
    FFmpMultEvaporationIrrigationFractionBoundary.Assign(Source.FFmpMultEvaporationIrrigationFractionBoundary);
  end;

  if Source.FFmp4FractionOfPrecipToSurfaceWaterBoundary = nil then
  begin
    FreeAndNil(FFmp4FractionOfPrecipToSurfaceWaterBoundary);
  end
  else
  begin
    if FFmp4FractionOfPrecipToSurfaceWaterBoundary = nil then
    begin
      FFmp4FractionOfPrecipToSurfaceWaterBoundary :=
        TFmp4FractionOfPrecipToSurfaceWaterBoundary.Create(Model, FScreenObject);
    end;
    FFmp4FractionOfPrecipToSurfaceWaterBoundary.Assign(Source.FFmp4FractionOfPrecipToSurfaceWaterBoundary);
  end;

  if Source.FFmpMultFractionOfPrecipToSurfaceWaterBoundary = nil then
  begin
    FreeAndNil(FFmpMultFractionOfPrecipToSurfaceWaterBoundary);
  end
  else
  begin
    if FFmpMultFractionOfPrecipToSurfaceWaterBoundary = nil then
    begin
      FFmpMultFractionOfPrecipToSurfaceWaterBoundary :=
        TFmp4MultFractionOfPrecipToSurfaceWaterBoundary.Create(Model, FScreenObject);
    end;
    FFmpMultFractionOfPrecipToSurfaceWaterBoundary.Assign(Source.FFmpMultFractionOfPrecipToSurfaceWaterBoundary);
  end;

  if Source.FFmp4FractionOfIrrigToSurfaceWaterBoundary = nil then
  begin
    FreeAndNil(FFmp4FractionOfIrrigToSurfaceWaterBoundary);
  end
  else
  begin
    if FFmp4FractionOfIrrigToSurfaceWaterBoundary = nil then
    begin
      FFmp4FractionOfIrrigToSurfaceWaterBoundary :=
        TFmp4FractionOfIrrigToSurfaceWaterBoundary.Create(Model, FScreenObject);
    end;
    FFmp4FractionOfIrrigToSurfaceWaterBoundary.Assign(Source.FFmp4FractionOfIrrigToSurfaceWaterBoundary);
  end;

  if Source.FFmpMultFractionOfIrrigToSurfaceWaterBoundary = nil then
  begin
    FreeAndNil(FFmpMultFractionOfIrrigToSurfaceWaterBoundary);
  end
  else
  begin
    if FFmpMultFractionOfIrrigToSurfaceWaterBoundary = nil then
    begin
      FFmpMultFractionOfIrrigToSurfaceWaterBoundary :=
        TFmp4MultFractionOfIrrigToSurfaceWaterBoundary.Create(Model, FScreenObject);
    end;
    FFmpMultFractionOfIrrigToSurfaceWaterBoundary.Assign(Source.FFmpMultFractionOfIrrigToSurfaceWaterBoundary);
  end;

  if Source.FFmp4AddedDemandBoundary = nil then
  begin
    FreeAndNil(FFmp4AddedDemandBoundary);
  end
  else
  begin
    if FFmp4AddedDemandBoundary = nil then
    begin
      FFmp4AddedDemandBoundary :=
        TFmp4AddedDemandBoundary.Create(Model, FScreenObject);
    end;
    FFmp4AddedDemandBoundary.Assign(Source.FFmp4AddedDemandBoundary);
  end;

  if Source.FFmpMultAddedDemandBoundary = nil then
  begin
    FreeAndNil(FFmpMultAddedDemandBoundary);
  end
  else
  begin
    if FFmpMultAddedDemandBoundary = nil then
    begin
      FFmpMultAddedDemandBoundary :=
        TFmp4MultAddedDemandBoundary.Create(Model, FScreenObject);
    end;
    FFmpMultAddedDemandBoundary.Assign(Source.FFmpMultAddedDemandBoundary);
  end;

  if Source.FFmp4CropHasSalinityDemandBoundary = nil then
  begin
    FreeAndNil(FFmp4CropHasSalinityDemandBoundary);
  end
  else
  begin
    if FFmp4CropHasSalinityDemandBoundary = nil then
    begin
      FFmp4CropHasSalinityDemandBoundary :=
        TFmp4CropHasSalinityDemandBoundary.Create(Model, FScreenObject);
    end;
    FFmp4CropHasSalinityDemandBoundary.Assign(Source.FFmp4CropHasSalinityDemandBoundary);
  end;

  if Source.FFmpMultCropHasSalinityDemandBoundary = nil then
  begin
    FreeAndNil(FFmpMultCropHasSalinityDemandBoundary);
  end
  else
  begin
    if FFmpMultCropHasSalinityDemandBoundary = nil then
    begin
      FFmpMultCropHasSalinityDemandBoundary :=
        TFmp4MultCropHasSalinityDemandBoundary.Create(Model, FScreenObject);
    end;
    FFmpMultCropHasSalinityDemandBoundary.Assign(Source.FFmpMultCropHasSalinityDemandBoundary);
  end;

  if Source.FFmp4AddedDemandRunoffSplitBoundary = nil then
  begin
    FreeAndNil(FFmp4AddedDemandRunoffSplitBoundary);
  end
  else
  begin
    if FFmp4AddedDemandRunoffSplitBoundary = nil then
    begin
      FFmp4AddedDemandRunoffSplitBoundary :=
        TFmp4AddedDemandRunoffSplitBoundary.Create(Model, FScreenObject);
    end;
    FFmp4AddedDemandRunoffSplitBoundary.Assign(Source.FFmp4AddedDemandRunoffSplitBoundary);
  end;

  if Source.FTvkBoundary = nil then
  begin
    FreeAndNil(FTvkBoundary);
  end
  else
  begin
    if FTvkBoundary = nil then
    begin
      FTvkBoundary := TTvkBoundary.Create(Model, FScreenObject);
    end;
    FTvkBoundary.Assign(Source.FTvkBoundary);
  end;

  if Source.FTvsBoundary = nil then
  begin
    FreeAndNil(FTvsBoundary);
  end
  else
  begin
    if FTvsBoundary = nil then
    begin
      FTvsBoundary := TTvsBoundary.Create(Model, FScreenObject);
    end;
    FTvsBoundary.Assign(Source.FTvsBoundary);
  end;

  FreeUnusedBoundaries;
end;

constructor TModflowBoundaries.Create(ScreenObject: TObject);
begin
  FScreenObject := ScreenObject;
end;

procedure TModflowBoundaries.CreateGwtTimeLists(AModel: TBaseModel);
begin
  if ModflowRchBoundary <> nil then
  begin
    ModflowRchBoundary.CreateGwtTimeLists(AModel);
  end;
end;

destructor TModflowBoundaries.Destroy;
begin
  FTvsBoundary.Free;
  FTvkBoundary.Free;
  FFmp4AddedDemandRunoffSplitBoundary.Free;
  FFmpMultCropHasSalinityDemandBoundary.Free;
  FFmp4CropHasSalinityDemandBoundary.Free;
  FFmpMultAddedDemandBoundary.Free;
  FFmp4AddedDemandBoundary.Free;
  FFmpMultFractionOfIrrigToSurfaceWaterBoundary.Free;
  FFmp4FractionOfIrrigToSurfaceWaterBoundary.Free;
  FFmpMultFractionOfPrecipToSurfaceWaterBoundary.Free;
  FFmp4FractionOfPrecipToSurfaceWaterBoundary.Free;
  FFmpMultEvaporationIrrigationFractionBoundary.Free;
  FFmp4EvaporationIrrigationFractionBoundary.Free;
  FFmpMultTranspirationFractionBoundary.Free;
  FFmp4TranspirationFractionBoundary.Free;
  FFmpMultRootDepthBoundary.Free;
  FFmp4RootDepthBoundary.Free;
  FFmpMultIrrigationBoundary.Free;
  FFmp4IrrigationBoundary.Free;
  FFmpMultConsumptiveUseBoundary.Free;
  FFmp4ConsumptiveUseBoundary.Free;
  FFmpMultCropCoefficientBoundary.Free;
  FFmp4CropCoefficientBoundary.Free;
  FFmp4MultLandUseAreaFractionBoundary.Free;
  FFmp4LandUseAreaFractionBoundary.Free;
  FFmp4NrdInfilLocationBoundary.Free;
  FFmp4PrecipPotConsumptionBoundary.Free;
  FFmp4DirectRechargeBoundary.Free;
  FFmp4BareEvap.Free;
  FFmp4BarePrecipitationConsumptionFractionBoundary.Free;
  FFmp4BareRunoffFractionBoundary.Free;
  FFmp4EfficiencyImprovementBoundary.Free;
  FFmp4EfficiencyBoundary.Free;
  FGwtSrcBoundary.Free;
  FGwtCncBoundary.Free;
  FModflowSwtObservations.Free;
  FModflowSubObservations.Free;
  FModflowCSub.Free;
  FModflow6Obs.Free;
  FModflowMawBoundary.Free;
  FModflowSfr6Boundary.Free;
  FMt3dUzSsmSinkConcBoundary.Free;
  FMt3dUztUnsatEtConcBoundary.Free;
  FMt3dUztSatEtConcBoundary.Free;
  FMt3dUztRechConc.Free;
  FModflowRipBoundary.Free;
  FModflowSwiObsBoundary.Free;
  FModflowMnw1Boundary.Free;
  FSwrRain.Free;
  FSwrEvap.Free;
  FSwrStage.Free;
  FSwrLatInflow.Free;
  FSwrDirectRunoff.Free;
  FSwrReaches.Free;
  FCfpRchFraction.Free;
  CfpFixedHeads.Free;
  CfpPipes.Free;
  FmpFarmIDBoundary.Free;
  FmpCropIDBoundary.Free;
  FFmpRefEvapBoundary.Free;
  FFmpPrecipBoundary.Free;
  FFmpWellBoundary.Free;
  FModflowFhbFlowBoundary.Free;
  FModflowFhbHeadBoundary.Free;
  FMt3dmsTransObservations.Free;
  FMt3dmsConcBoundary.Free;
  FMt3dLktConcBoundary.Free;
  FMt3dSftConcBoundary.Free;
  FModflowHydmodData.Free;
  FModflowMnw2Boundary.Free;
  FModflowGage.Free;
  FModflowHfbBoundary.Free;
  FModflowHeadObservations.Free;
  FModflowUzfBoundary.Free;
  FModflowStrBoundary.Free;
  FModflowSfrBoundary.Free;
  FModflowLakBoundary.Free;
  FModflowResBoundary.Free;
  FModflowEtsBoundary.Free;
  FModflowEvtBoundary.Free;
  FModflowRchBoundary.Free;
  FModflowDrtBoundary.Free;
  FModflowDrnBoundary.Free;
  FModflowRivBoundary.Free;
  FModflowWellBoundary.Free;
  FModflowGhbBoundary.Free;
  FModflowChdBoundary.Free;
  FModflowLak6.Free;
  FModflowMvr.Free;
  FModflowUzfMf6Boundary.Free;
  inherited;
end;

procedure TModflowBoundaries.FreeUnusedBoundaries;
begin
  if (FModflowChdBoundary <> nil) and not FModflowChdBoundary.Used then
  begin
    FreeAndNil(FModflowChdBoundary);
  end;
  if (FModflowEtsBoundary <> nil) and not FModflowEtsBoundary.Used then
  begin
    FreeAndNil(FModflowEtsBoundary);
  end;
  if (FModflowEvtBoundary <> nil) and not FModflowEvtBoundary.Used then
  begin
    FreeAndNil(FModflowEvtBoundary);
  end;
  if (FModflowDrnBoundary <> nil) and not FModflowDrnBoundary.Used then
  begin
    FreeAndNil(FModflowDrnBoundary);
  end;
  if (FModflowDrtBoundary <> nil) and not FModflowDrtBoundary.Used then
  begin
    FreeAndNil(FModflowDrtBoundary);
  end;
  if (FModflowGhbBoundary <> nil) and not FModflowGhbBoundary.Used then
  begin
    FreeAndNil(FModflowGhbBoundary);
  end;
  if (FModflowLakBoundary <> nil) and not FModflowLakBoundary.Used then
  begin
    FreeAndNil(FModflowLakBoundary);
  end;
  if (FModflowRchBoundary <> nil) and not FModflowRchBoundary.Used then
  begin
    FreeAndNil(FModflowRchBoundary);
  end;
  if (FModflowResBoundary <> nil) and not FModflowResBoundary.Used then
  begin
    FreeAndNil(FModflowResBoundary);
  end;
  if (FModflowRivBoundary <> nil) and not FModflowRivBoundary.Used then
  begin
    FreeAndNil(FModflowRivBoundary);
  end;
  if (FModflowSfrBoundary <> nil) and not FModflowSfrBoundary.Used then
  begin
    FreeAndNil(FModflowSfrBoundary);
  end;
  if (FModflowStrBoundary <> nil) and not FModflowStrBoundary.Used then
  begin
    FreeAndNil(FModflowStrBoundary);
  end;
  if (FModflowWellBoundary <> nil) and not FModflowWellBoundary.Used then
  begin
    FreeAndNil(FModflowWellBoundary);
  end;
  if (FModflowUzfBoundary <> nil) and not FModflowUzfBoundary.Used then
  begin
    FreeAndNil(FModflowUzfBoundary);
  end;
  if (FModflowHeadObservations <> nil) and not FModflowHeadObservations.Used then
  begin
    FreeAndNil(FModflowHeadObservations);
  end;
  if (FModflowHfbBoundary <> nil)
    and not (FModflowHfbBoundary.Used or FModflowHfbBoundary.UsedMf6) then
  begin
    FreeAndNil(FModflowHfbBoundary);
  end;
  if (FModflowGage <> nil) and not FModflowGage.Used then
  begin
    FreeAndNil(FModflowGage);
  end;
  if (FModflowMnw2Boundary <> nil) and not FModflowMnw2Boundary.Used then
  begin
    FreeAndNil(FModflowMnw2Boundary);
  end;
  if (FModflowHydmodData <> nil) and not FModflowHydmodData.Used then
  begin
    FreeAndNil(FModflowHydmodData);
  end;
  if (FMt3dmsConcBoundary <> nil) and not FMt3dmsConcBoundary.Used then
  begin
    FreeAndNil(FMt3dmsConcBoundary);
  end;
  if (FMt3dmsTransObservations <> nil) and not FMt3dmsTransObservations.Used then
  begin
    FreeAndNil(FMt3dmsTransObservations);
  end;
  if (FModflowFhbHeadBoundary <> nil) and not FModflowFhbHeadBoundary.Used then
  begin
    FreeAndNil(FModflowFhbHeadBoundary);
  end;
  if (FModflowFhbFlowBoundary <> nil) and not FModflowFhbFlowBoundary.Used then
  begin
    FreeAndNil(FModflowFhbFlowBoundary);
  end;
  if (FFmpWellBoundary <> nil) and not FFmpWellBoundary.Used then
  begin
    FreeAndNil(FFmpWellBoundary);
  end;
  if (FFmpPrecipBoundary <> nil) and not FFmpPrecipBoundary.Used then
  begin
    FreeAndNil(FFmpPrecipBoundary);
  end;
  if (FFmpRefEvapBoundary <> nil) and not FFmpRefEvapBoundary.Used then
  begin
    FreeAndNil(FFmpRefEvapBoundary);
  end;
  if (FFmpFarmIDBoundary <> nil) and not FFmpFarmIDBoundary.Used then
  begin
    FreeAndNil(FFmpFarmIDBoundary);
  end;
  if (FFmpCropIDBoundary <> nil) and not FFmpCropIDBoundary.Used then
  begin
    FreeAndNil(FFmpCropIDBoundary);
  end;

  if (FCfpPipes <> nil) and not FCfpPipes.Used then
  begin
    FreeAndNil(FCfpPipes);
  end;
  if (FCfpFixedHeads <> nil) and not FCfpFixedHeads.Used then
  begin
    FreeAndNil(FCfpFixedHeads);
  end;
  if (FCfpRchFraction <> nil) and not FCfpRchFraction.Used then
  begin
    FreeAndNil(FCfpRchFraction);
  end;
  if (FSwrRain <> nil) and not FSwrRain.Used then
  begin
    FreeAndNil(FSwrRain);
  end;
  if (FSwrEvap <> nil) and not FSwrEvap.Used then
  begin
    FreeAndNil(FSwrEvap);
  end;
  if (FSwrLatInflow <> nil) and not FSwrLatInflow.Used then
  begin
    FreeAndNil(FSwrLatInflow);
  end;
  if (FSwrStage <> nil) and not FSwrStage.Used then
  begin
    FreeAndNil(FSwrStage);
  end;
  if (FSwrDirectRunoff <> nil) and not FSwrDirectRunoff.Used then
  begin
    FreeAndNil(FSwrDirectRunoff);
  end;
  if (FSwrReaches <> nil) and not FSwrReaches.Used then
  begin
    FreeAndNil(FSwrReaches);
  end;
  if (FModflowSwiObsBoundary <> nil) and Not FModflowSwiObsBoundary.Used then
  begin
    FreeAndNil(FModflowSwiObsBoundary);
  end;
  if (FModflowRipBoundary <> nil) and not FModflowRipBoundary.Used then
  begin
    FreeAndNil(FModflowRipBoundary);
  end;

  if (FMt3dUztRechConc <> nil) and not FMt3dUztRechConc.Used then
  begin
    FreeAndNil(FMt3dUztRechConc);
  end;
  if (FMt3dUztSatEtConcBoundary <> nil) and not FMt3dUztSatEtConcBoundary.Used then
  begin
    FreeAndNil(FMt3dUztSatEtConcBoundary);
  end;
  if (FMt3dUztUnsatEtConcBoundary <> nil) and not FMt3dUztUnsatEtConcBoundary.Used then
  begin
    FreeAndNil(FMt3dUztUnsatEtConcBoundary);
  end;
  if (FMt3dUzSsmSinkConcBoundary <> nil) and not FMt3dUzSsmSinkConcBoundary.Used then
  begin
    FreeAndNil(FMt3dUzSsmSinkConcBoundary);
  end;
  if (FMt3dLktConcBoundary <> nil) and not FMt3dLktConcBoundary.Used then
  begin
    FreeAndNil(FMt3dLktConcBoundary);
  end;

  if (FModflowSfr6Boundary <> nil) and not FModflowSfr6Boundary.Used then
  begin
    FreeAndNil(FModflowSfr6Boundary);
  end;
  if (FModflowMawBoundary <> nil) and not FModflowMawBoundary.Used then
  begin
    FreeAndNil(FModflowMawBoundary);
  end;
  if (FModflow6Obs <> nil) and not FModflow6Obs.Used then
  begin
    FreeAndNil(FModflow6Obs);
  end;
  if (FModflowLak6 <> nil) and not FModflowLak6.Used then
  begin
    FreeAndNil(FModflowLak6);
  end;
  if (FModflowMvr <> nil) and not FModflowMvr.Used then
  begin
    FreeAndNil(FModflowMvr);
  end;
  if (FModflowUzfMf6Boundary <> nil) and not FModflowUzfMf6Boundary.Used then
  begin
    FreeAndNil(FModflowUzfMf6Boundary);
  end;

  if (FMt3dSftConcBoundary <> nil) and not FMt3dSftConcBoundary.Used then
  begin
    FreeAndNil(FMt3dSftConcBoundary);
  end;

  if (FModflowCSub <> nil) and not FModflowCSub.Used then
  begin
    FreeAndNil(FModflowCSub);
  end;

  if (FModflowSubObservations <> nil) and not FModflowSubObservations.Used then
  begin
    FreeAndNil(FModflowSubObservations);
  end;

  if (FModflowSwtObservations <> nil) and not FModflowSwtObservations.Used then
  begin
    FreeAndNil(FModflowSwtObservations);
  end;

  if (FGwtCncBoundary <> nil) and not FGwtCncBoundary.Used then
  begin
    FreeAndNil(FGwtCncBoundary);
  end;

  if (FGwtSrcBoundary <> nil) and not FGwtSrcBoundary.Used then
  begin
    FreeAndNil(FGwtSrcBoundary);
  end;

  if (FFmp4EfficiencyBoundary <> nil) and not FFmp4EfficiencyBoundary.Used then
  begin
    FreeAndNil(FFmp4EfficiencyBoundary);
  end;

  if (FFmp4EfficiencyImprovementBoundary <> nil)
    and not FFmp4EfficiencyImprovementBoundary.Used then
  begin
    FreeAndNil(FFmp4EfficiencyImprovementBoundary);
  end;

  if (FFmp4BareRunoffFractionBoundary <> nil)
    and not FFmp4BareRunoffFractionBoundary.Used then
  begin
    FreeAndNil(FFmp4BareRunoffFractionBoundary);
  end;

  if (FFmp4BarePrecipitationConsumptionFractionBoundary <> nil)
    and not FFmp4BarePrecipitationConsumptionFractionBoundary.Used then
  begin
    FreeAndNil(FFmp4BarePrecipitationConsumptionFractionBoundary);
  end;

  if (FFmp4BareEvap <> nil)
    and not FFmp4BareEvap.Used then
  begin
    FreeAndNil(FFmp4BareEvap);
  end;

  if (FFmp4DirectRechargeBoundary <> nil)
    and not FFmp4DirectRechargeBoundary.Used then
  begin
    FreeAndNil(FFmp4DirectRechargeBoundary);
  end;

  if (FFmp4PrecipPotConsumptionBoundary <> nil)
    and not FFmp4PrecipPotConsumptionBoundary.Used then
  begin
    FreeAndNil(FFmp4PrecipPotConsumptionBoundary);
  end;

  if (FFmp4NrdInfilLocationBoundary <> nil)
    and not FFmp4NrdInfilLocationBoundary.Used then
  begin
    FreeAndNil(FFmp4NrdInfilLocationBoundary);
  end;

  if (FFmp4LandUseAreaFractionBoundary <> nil)
    and not FFmp4LandUseAreaFractionBoundary.Used then
  begin
    FreeAndNil(FFmp4LandUseAreaFractionBoundary);
  end;

  if (FFmp4MultLandUseAreaFractionBoundary <> nil)
    and not FFmp4MultLandUseAreaFractionBoundary.Used then
  begin
    FreeAndNil(FFmp4MultLandUseAreaFractionBoundary);
  end;

  if (FFmp4CropCoefficientBoundary <> nil)
    and not FFmp4CropCoefficientBoundary.Used then
  begin
    FreeAndNil(FFmp4CropCoefficientBoundary);
  end;

  if (FFmpMultCropCoefficientBoundary <> nil)
    and not FFmpMultCropCoefficientBoundary.Used then
  begin
    FreeAndNil(FFmpMultCropCoefficientBoundary);
  end;

  if (FFmp4ConsumptiveUseBoundary <> nil)
    and not FFmp4ConsumptiveUseBoundary.Used then
  begin
    FreeAndNil(FFmp4ConsumptiveUseBoundary);
  end;

  if (FFmpMultConsumptiveUseBoundary <> nil)
    and not FFmpMultConsumptiveUseBoundary.Used then
  begin
    FreeAndNil(FFmpMultConsumptiveUseBoundary);
  end;

  if (FFmp4IrrigationBoundary <> nil)
    and not FFmp4IrrigationBoundary.Used then
  begin
    FreeAndNil(FFmp4IrrigationBoundary);
  end;

  if (FFmpMultIrrigationBoundary <> nil)
    and not FFmpMultIrrigationBoundary.Used then
  begin
    FreeAndNil(FFmpMultIrrigationBoundary);
  end;

  if (FFmp4RootDepthBoundary <> nil)
    and not FFmp4RootDepthBoundary.Used then
  begin
    FreeAndNil(FFmp4RootDepthBoundary);
  end;

  if (FFmpMultRootDepthBoundary <> nil)
    and not FFmpMultRootDepthBoundary.Used then
  begin
    FreeAndNil(FFmpMultRootDepthBoundary);
  end;

  if (FFmp4TranspirationFractionBoundary <> nil)
    and not FFmp4TranspirationFractionBoundary.Used then
  begin
    FreeAndNil(FFmp4TranspirationFractionBoundary);
  end;

  if (FFmpMultTranspirationFractionBoundary <> nil)
    and not FFmpMultTranspirationFractionBoundary.Used then
  begin
    FreeAndNil(FFmpMultTranspirationFractionBoundary);
  end;

  if (FFmp4EvaporationIrrigationFractionBoundary <> nil)
    and not FFmp4EvaporationIrrigationFractionBoundary.Used then
  begin
    FreeAndNil(FFmp4EvaporationIrrigationFractionBoundary);
  end;

  if (FFmpMultEvaporationIrrigationFractionBoundary <> nil)
    and not FFmpMultEvaporationIrrigationFractionBoundary.Used then
  begin
    FreeAndNil(FFmpMultEvaporationIrrigationFractionBoundary);
  end;

  if (FFmp4FractionOfPrecipToSurfaceWaterBoundary <> nil)
    and not FFmp4FractionOfPrecipToSurfaceWaterBoundary.Used then
  begin
    FreeAndNil(FFmp4FractionOfPrecipToSurfaceWaterBoundary);
  end;

  if (FFmpMultFractionOfPrecipToSurfaceWaterBoundary <> nil)
    and not FFmpMultFractionOfPrecipToSurfaceWaterBoundary.Used then
  begin
    FreeAndNil(FFmpMultFractionOfPrecipToSurfaceWaterBoundary);
  end;

  if (FFmp4FractionOfIrrigToSurfaceWaterBoundary <> nil)
    and not FFmp4FractionOfIrrigToSurfaceWaterBoundary.Used then
  begin
    FreeAndNil(FFmp4FractionOfIrrigToSurfaceWaterBoundary);
  end;

  if (FFmpMultFractionOfIrrigToSurfaceWaterBoundary <> nil)
    and not FFmpMultFractionOfIrrigToSurfaceWaterBoundary.Used then
  begin
    FreeAndNil(FFmpMultFractionOfIrrigToSurfaceWaterBoundary);
  end;

  if (FFmp4AddedDemandBoundary <> nil)
    and not FFmp4AddedDemandBoundary.Used then
  begin
    FreeAndNil(FFmp4AddedDemandBoundary);
  end;

  if (FFmpMultAddedDemandBoundary <> nil)
    and not FFmpMultAddedDemandBoundary.Used then
  begin
    FreeAndNil(FFmpMultAddedDemandBoundary);
  end;

  if (FFmp4CropHasSalinityDemandBoundary <> nil)
    and not FFmp4CropHasSalinityDemandBoundary.Used then
  begin
    FreeAndNil(FFmp4CropHasSalinityDemandBoundary);
  end;

  if (FFmpMultCropHasSalinityDemandBoundary <> nil)
    and not FFmpMultCropHasSalinityDemandBoundary.Used then
  begin
    FreeAndNil(FFmpMultCropHasSalinityDemandBoundary);
  end;

  if (FFmp4AddedDemandRunoffSplitBoundary <> nil)
    and not FFmp4AddedDemandRunoffSplitBoundary.Used then
  begin
    FreeAndNil(FFmp4AddedDemandRunoffSplitBoundary);
  end;

  if (FTvkBoundary <> nil)
    and not FTvkBoundary.Used then
  begin
    FreeAndNil(FTvkBoundary);
  end;

  if (FTvsBoundary <> nil)
    and not FTvsBoundary.Used then
  begin
    FreeAndNil(FTvsBoundary);
  end;

end;

procedure TModflowBoundaries.Invalidate;
begin
  if FModflowChdBoundary <> nil then
  begin
    FModflowChdBoundary.Invalidate;
  end;

  if FModflowEtsBoundary <> nil then
  begin
    FModflowEtsBoundary.Invalidate;
  end;

  if FModflowEvtBoundary <> nil then
  begin
    FModflowEvtBoundary.Invalidate;
  end;

  if FModflowDrnBoundary <> nil then
  begin
    FModflowDrnBoundary.Invalidate;
  end;

  if FModflowDrtBoundary <> nil then
  begin
    FModflowDrtBoundary.Invalidate;
  end;

  if FModflowGhbBoundary <> nil then
  begin
    FModflowGhbBoundary.Invalidate;
  end;

  if FModflowLakBoundary <> nil then
  begin
    FModflowLakBoundary.Invalidate;
  end;

  if FModflowRchBoundary <> nil then
  begin
    FModflowRchBoundary.Invalidate;
  end;

  if FModflowResBoundary <> nil then
  begin
    FModflowResBoundary.Invalidate;
  end;

  if FModflowRivBoundary <> nil then
  begin
    FModflowRivBoundary.Invalidate;
  end;

  if FModflowSfrBoundary <> nil then
  begin
    FModflowSfrBoundary.Invalidate;
  end;

  if FModflowSfrBoundary <> nil then
  begin
    FModflowSfrBoundary.Invalidate;
  end;

  if FModflowStrBoundary <> nil then
  begin
    FModflowStrBoundary.Invalidate;
  end;

  if FModflowWellBoundary <> nil then
  begin
    FModflowWellBoundary.Invalidate;
  end;

  if FModflowUzfBoundary <> nil then
  begin
    FModflowUzfBoundary.Invalidate;
  end;

  if FModflowHeadObservations <> nil then
  begin
    FModflowHeadObservations.Invalidate;
  end;

  if FModflowHfbBoundary <> nil then
  begin
    FModflowHfbBoundary.Invalidate;
  end;

//  if FModflowGage <> nil then
//  begin
//    FModflowGage.Invalidate;
//  end;

  if FModflowMnw1Boundary <> nil then
  begin
    FModflowMnw1Boundary.Invalidate;
  end;

  if FModflowMnw2Boundary <> nil then
  begin
    FModflowMnw2Boundary.Invalidate;
  end;

  if FModflowHydmodData <> nil then
  begin
    FModflowHydmodData.Invalidate;
  end;

  if FMt3dmsConcBoundary <> nil then
  begin
    FMt3dmsConcBoundary.Invalidate;
  end;

  if FMt3dmsTransObservations <> nil then
  begin
    FMt3dmsTransObservations.Invalidate;
  end;

  if FModflowFhbHeadBoundary <> nil then
  begin
    FModflowFhbHeadBoundary.Invalidate;
  end;

  if FModflowFhbFlowBoundary <> nil then
  begin
    FModflowFhbFlowBoundary.Invalidate;
  end;

  if FFmpWellBoundary <> nil then
  begin
    FFmpWellBoundary.Invalidate;
  end;

  if FFmpPrecipBoundary <> nil then
  begin
    FFmpPrecipBoundary.Invalidate;
  end;

  if FFmpRefEvapBoundary <> nil then
  begin
    FFmpRefEvapBoundary.Invalidate;
  end;

  if FFmpRefEvapBoundary <> nil then
  begin
    FFmpRefEvapBoundary.Invalidate;
  end;

  if FFmpCropIDBoundary <> nil then
  begin
    FFmpCropIDBoundary.Invalidate;
  end;

  if FFmpFarmIDBoundary <> nil then
  begin
    FFmpFarmIDBoundary.Invalidate;
  end;

  if FCfpPipes <> nil then
  begin
    FCfpPipes.Invalidate;
  end;

  if FCfpFixedHeads <> nil then
  begin
    FCfpFixedHeads.Invalidate;
  end;

  if FCfpRchFraction <> nil then
  begin
    FCfpRchFraction.Invalidate;
  end;

  if FSwrRain <> nil then
  begin
    FSwrRain.Invalidate;
  end;

  if FSwrEvap <> nil then
  begin
    FSwrEvap.Invalidate;
  end;

  if FSwrLatInflow <> nil then
  begin
    FSwrLatInflow.Invalidate;
  end;

  if FSwrStage <> nil then
  begin
    FSwrStage.Invalidate;
  end;

  if FSwrDirectRunoff <> nil then
  begin
    FSwrDirectRunoff.Invalidate;
  end;

  if FSwrReaches <> nil then
  begin
    FSwrReaches.Invalidate;
  end;

  if FModflowSwiObsBoundary <> nil then
  begin
    FModflowSwiObsBoundary.Invalidate
  end;

  if FModflowRipBoundary <> nil then
  begin
    FModflowRipBoundary.Invalidate;
  end;

  if FMt3dUztRechConc <> nil then
  begin
    FMt3dUztRechConc.Invalidate;
  end;

  if FMt3dUztSatEtConcBoundary <> nil then
  begin
    FMt3dUztSatEtConcBoundary.Invalidate;
  end;

  if FMt3dUztUnsatEtConcBoundary <> nil then
  begin
    FMt3dUztUnsatEtConcBoundary.Invalidate;
  end;

  if FMt3dUzSsmSinkConcBoundary <> nil then
  begin
    FMt3dUzSsmSinkConcBoundary.Invalidate;
  end;

  if FMt3dLktConcBoundary <> nil then
  begin
    FMt3dLktConcBoundary.Invalidate;
  end;

  if FMt3dSftConcBoundary <> nil then
  begin
    FMt3dSftConcBoundary.Invalidate;
  end;

  if FModflowMawBoundary <> nil then
  begin
    FModflowMawBoundary.Invalidate;
  end;

  if FModflowLak6 <> nil then
  begin
    FModflowLak6.Invalidate;
  end;

  if FModflowMvr <> nil then
  begin
    FModflowMvr.Invalidate;
  end;

  if FModflowUzfMf6Boundary <> nil then
  begin
    FModflowUzfMf6Boundary.Invalidate;
  end;

  if FModflowCSub <> nil then
  begin
    FModflowCSub.Invalidate;
  end;

  if FGwtCncBoundary <> nil then
  begin
    FGwtCncBoundary.Invalidate;
  end;

  if FGwtSrcBoundary <> nil then
  begin
    FGwtSrcBoundary.Invalidate;
  end;

  if FFmp4EfficiencyBoundary <> nil then
  begin
    FFmp4EfficiencyBoundary.Invalidate;
  end;

  if Fmp4EfficiencyImprovementBoundary <> nil then
  begin
    Fmp4EfficiencyImprovementBoundary.Invalidate;
  end;

  if Fmp4BareRunoffFractionBoundary <> nil then
  begin
    Fmp4BareRunoffFractionBoundary.Invalidate;
  end;

  if FFmp4BarePrecipitationConsumptionFractionBoundary <> nil then
  begin
    FFmp4BarePrecipitationConsumptionFractionBoundary.Invalidate;
  end;

  if FFmp4BareEvap <> nil then
  begin
    FFmp4BareEvap.Invalidate;
  end;

  if FFmp4DirectRechargeBoundary <> nil then
  begin
    FFmp4DirectRechargeBoundary.Invalidate;
  end;

  if FFmp4PrecipPotConsumptionBoundary <> nil then
  begin
    FFmp4PrecipPotConsumptionBoundary.Invalidate;
  end;

  if FFmp4NrdInfilLocationBoundary <> nil then
  begin
    FFmp4NrdInfilLocationBoundary.Invalidate;
  end;

  if FFmp4LandUseAreaFractionBoundary <> nil then
  begin
    FFmp4LandUseAreaFractionBoundary.Invalidate;
  end;

  if FFmp4MultLandUseAreaFractionBoundary <> nil then
  begin
    FFmp4MultLandUseAreaFractionBoundary.Invalidate;
  end;

  if FFmp4CropCoefficientBoundary <> nil then
  begin
    FFmp4CropCoefficientBoundary.Invalidate;
  end;

  if FFmpMultCropCoefficientBoundary <> nil then
  begin
    FFmpMultCropCoefficientBoundary.Invalidate;
  end;

  if FFmp4ConsumptiveUseBoundary <> nil then
  begin
    FFmp4ConsumptiveUseBoundary.Invalidate;
  end;

  if FFmpMultConsumptiveUseBoundary <> nil then
  begin
    FFmpMultConsumptiveUseBoundary.Invalidate;
  end;

  if FFmp4IrrigationBoundary <> nil then
  begin
    FFmp4IrrigationBoundary.Invalidate;
  end;

  if FFmpMultIrrigationBoundary <> nil then
  begin
    FFmpMultIrrigationBoundary.Invalidate;
  end;

  if FFmp4RootDepthBoundary <> nil then
  begin
    FFmp4RootDepthBoundary.Invalidate;
  end;

  if FFmpMultRootDepthBoundary <> nil then
  begin
    FFmpMultRootDepthBoundary.Invalidate;
  end;

  if FFmp4TranspirationFractionBoundary <> nil then
  begin
    FFmp4TranspirationFractionBoundary.Invalidate;
  end;

  if FFmpMultTranspirationFractionBoundary <> nil then
  begin
    FFmpMultTranspirationFractionBoundary.Invalidate;
  end;

  if FFmp4EvaporationIrrigationFractionBoundary <> nil then
  begin
    FFmp4EvaporationIrrigationFractionBoundary.Invalidate;
  end;

  if FFmpMultEvaporationIrrigationFractionBoundary <> nil then
  begin
    FFmpMultEvaporationIrrigationFractionBoundary.Invalidate;
  end;

  if FFmp4FractionOfPrecipToSurfaceWaterBoundary <> nil then
  begin
    FFmp4FractionOfPrecipToSurfaceWaterBoundary.Invalidate;
  end;

  if FFmpMultFractionOfPrecipToSurfaceWaterBoundary <> nil then
  begin
    FFmpMultFractionOfPrecipToSurfaceWaterBoundary.Invalidate;
  end;

  if FFmp4FractionOfIrrigToSurfaceWaterBoundary <> nil then
  begin
    FFmp4FractionOfIrrigToSurfaceWaterBoundary.Invalidate;
  end;

  if FFmpMultFractionOfIrrigToSurfaceWaterBoundary <> nil then
  begin
    FFmpMultFractionOfIrrigToSurfaceWaterBoundary.Invalidate;
  end;

  if FFmp4AddedDemandBoundary <> nil then
  begin
    FFmp4AddedDemandBoundary.Invalidate;
  end;

  if FFmpMultAddedDemandBoundary <> nil then
  begin
    FFmpMultAddedDemandBoundary.Invalidate;
  end;

  if FFmp4CropHasSalinityDemandBoundary <> nil then
  begin
    FFmp4CropHasSalinityDemandBoundary.Invalidate;
  end;

  if FFmpMultCropHasSalinityDemandBoundary <> nil then
  begin
    FFmpMultCropHasSalinityDemandBoundary.Invalidate;
  end;

  if FFmp4AddedDemandRunoffSplitBoundary <> nil then
  begin
    FFmp4AddedDemandRunoffSplitBoundary.Invalidate;
  end;

  if FTvkBoundary <> nil then
  begin
    FTvkBoundary.Invalidate;
  end;

  if FTvsBoundary <> nil then
  begin
    FTvsBoundary.Invalidate;
  end;
end;

procedure TModflowBoundaries.Loaded;
begin
  FreeUnusedBoundaries;

  if FModflowSfr6Boundary <> nil then
  begin
    FModflowSfr6Boundary.Loaded;
  end;

  if FModflowHydmodData <> nil then
  begin
    FModflowHydmodData.Loaded;
  end;

  if SwrReaches <> nil then
  begin
    SwrReaches.Loaded;
  end;

  if ModflowMawBoundary <> nil then
  begin
    ModflowMawBoundary.Loaded;
  end;

  if ModflowLak6 <> nil then
  begin
    ModflowLak6.Loaded;
  end;

  if ModflowUzfMf6Boundary <> nil then
  begin
    ModflowUzfMf6Boundary.Loaded;
  end;

  if ModflowMvr <> nil then
  begin
    ModflowMvr.Loaded;
  end;

  if Mt3dLktConcBoundary <> nil then
  begin
    Mt3dLktConcBoundary.Loaded;
  end;

  if Mt3dSftConcBoundary <> nil then
  begin
    Mt3dSftConcBoundary.Loaded;
  end;

  if ModflowCSub <> nil then
  begin
    ModflowCSub.Loaded;
  end;

  if ModflowSubObservations <> nil then
  begin
    ModflowSubObservations.Loaded;
  end;

  if ModflowSwtObservations <> nil then
  begin
    ModflowSwtObservations.Loaded;
  end;

  if GwtCncBoundary <> nil then
  begin
    GwtCncBoundary.Loaded;
  end;

  if GwtSrcBoundary <> nil then
  begin
    GwtSrcBoundary.Loaded;
  end;

//  if Fmp4EfficiencyBoundary <> nil then
//  begin
//    Fmp4EfficiencyBoundary.Loaded;
//  end;
  
end;

procedure TModflowBoundaries.RemoveModelLink(AModel: TBaseModel);
begin
  if FModflowChdBoundary <> nil then
  begin
    FModflowChdBoundary.RemoveModelLink(AModel);
  end;
  if FModflowEtsBoundary <> nil then
  begin
    FModflowEtsBoundary.RemoveModelLink(AModel);
  end;
  if FModflowEvtBoundary <> nil then
  begin
    FModflowEvtBoundary.RemoveModelLink(AModel);
  end;
  if FModflowDrnBoundary <> nil then
  begin
    FModflowDrnBoundary.RemoveModelLink(AModel);
  end;
  if FModflowDrtBoundary <> nil then
  begin
    FModflowDrtBoundary.RemoveModelLink(AModel);
  end;
  if FModflowGhbBoundary <> nil then
  begin
    FModflowGhbBoundary.RemoveModelLink(AModel);
  end;
  if FModflowLakBoundary <> nil then
  begin
    FModflowLakBoundary.RemoveModelLink(AModel);
  end;
  if FModflowRchBoundary <> nil then
  begin
    FModflowRchBoundary.RemoveModelLink(AModel);
  end;
  if FModflowResBoundary <> nil then
  begin
    FModflowResBoundary.RemoveModelLink(AModel);
  end;
  if FModflowRivBoundary <> nil then
  begin
    FModflowRivBoundary.RemoveModelLink(AModel);
  end;
  if FModflowSfrBoundary <> nil then
  begin
    FModflowSfrBoundary.RemoveModelLink(AModel);
  end;
  if FModflowStrBoundary <> nil then
  begin
    FModflowStrBoundary.RemoveModelLink(AModel);
  end;
  if FModflowWellBoundary <> nil then
  begin
    FModflowWellBoundary.RemoveModelLink(AModel);
  end;
  if FModflowUzfBoundary <> nil then
  begin
    FModflowUzfBoundary.RemoveModelLink(AModel);
  end;
  if FModflowHeadObservations <> nil then
  begin
    FModflowHeadObservations.RemoveModelLink(AModel);
  end;
//  if FModflowHfbBoundary <> nil then
//  begin
//    FModflowHfbBoundary.RemoveModelLink(AModel);
//  end;
//  if FModflowGage <> nil then
//  begin
//    FModflowGage.RemoveModelLink(AModel);
//  end;
  if FModflowMnw2Boundary <> nil then
  begin
    FModflowMnw2Boundary.RemoveModelLink(AModel);
  end;
//  if FModflowHydmodData <> nil then
//  begin
//    FModflowHydmodData.RemoveModelLink(AModel);
//  end;
  if FMt3dmsConcBoundary <> nil then
  begin
    FMt3dmsConcBoundary.RemoveModelLink(AModel);
  end;
  if FMt3dmsTransObservations <> nil then
  begin
    FMt3dmsTransObservations.RemoveModelLink(AModel);
  end;
  if FModflowFhbHeadBoundary <> nil then
  begin
    FModflowFhbHeadBoundary.RemoveModelLink(AModel);
  end;
  if FModflowFhbFlowBoundary <> nil then
  begin
    FModflowFhbFlowBoundary.RemoveModelLink(AModel);
  end;
  if FFmpWellBoundary <> nil then
  begin
    FFmpWellBoundary.RemoveModelLink(AModel);
  end;
  if FFmpPrecipBoundary <> nil then
  begin
    FFmpPrecipBoundary.RemoveModelLink(AModel);
  end;
  if FFmpRefEvapBoundary <> nil then
  begin
    FFmpRefEvapBoundary.RemoveModelLink(AModel);
  end;
  if FFmpCropIDBoundary <> nil then
  begin
    FFmpCropIDBoundary.RemoveModelLink(AModel);
  end;
  if FFmpFarmIDBoundary <> nil then
  begin
    FFmpFarmIDBoundary.RemoveModelLink(AModel);
  end;
  if FCfpRchFraction <> nil then
  begin
    FCfpRchFraction.RemoveModelLink(AModel);
  end;

//  if FCfpPipes <> nil then
//  begin
//    FCfpPipes.RemoveModelLink(AModel);
//  end;
//  if FCfpFixedHeads <> nil then
//  begin
//    FCfpFixedHeads.RemoveModelLink(AModel);
//  end;

  if FSwrRain <> nil then
  begin
    FSwrRain.RemoveModelLink(AModel);
  end;
  if FSwrEvap <> nil then
  begin
    FSwrEvap.RemoveModelLink(AModel);
  end;
  if FSwrLatInflow <> nil then
  begin
    FSwrLatInflow.RemoveModelLink(AModel);
  end;
  if FSwrStage <> nil then
  begin
    FSwrStage.RemoveModelLink(AModel);
  end;
  if FSwrDirectRunoff <> nil then
  begin
    FSwrDirectRunoff.RemoveModelLink(AModel);
  end;
  if FSwrReaches <> nil then
  begin
    FSwrReaches.RemoveModelLink(AModel);
  end;
  if FModflowSwiObsBoundary <> nil then
  begin
    FModflowSwiObsBoundary.RemoveModelLink(AModel);
  end;
  if FModflowRipBoundary <> nil then
  begin
    FModflowRipBoundary.RemoveModelLink(AModel);
  end;

  if FMt3dUztRechConc <> nil then
  begin
    FMt3dUztRechConc.RemoveModelLink(AModel);
  end;

  if FMt3dUztSatEtConcBoundary <> nil then
  begin
    FMt3dUztSatEtConcBoundary.RemoveModelLink(AModel);
  end;

  if FMt3dUztUnsatEtConcBoundary <> nil then
  begin
    FMt3dUztUnsatEtConcBoundary.RemoveModelLink(AModel);
  end;

  if FMt3dUzSsmSinkConcBoundary <> nil then
  begin
    FMt3dUzSsmSinkConcBoundary.RemoveModelLink(AModel);
  end;

  if FMt3dLktConcBoundary <> nil then
  begin
    FMt3dLktConcBoundary.RemoveModelLink(AModel);
  end;

  if FModflowMawBoundary <> nil then
  begin
    FModflowMawBoundary.RemoveModelLink(AModel);
  end;

//  if FModflow6Obs <> nil then
//  begin
//    FModflow6Obs.RemoveModelLink(AModel);
//  end;

  if FModflowLak6 <> nil then
  begin
    FModflowLak6.RemoveModelLink(AModel);
  end;

  if FModflowMvr <> nil then
  begin
    FModflowMvr.RemoveModelLink(AModel);
  end;

  if FModflowUzfMf6Boundary <> nil then
  begin
    FModflowUzfMf6Boundary.RemoveModelLink(AModel);
  end;

  if FMt3dLktConcBoundary <> nil then
  begin
    FMt3dLktConcBoundary.RemoveModelLink(AModel);
  end;

  if FMt3dSftConcBoundary <> nil then
  begin
    FMt3dSftConcBoundary.RemoveModelLink(AModel);
  end;

  if FModflowCSub <> nil then
  begin
    FModflowCSub.RemoveModelLink(AModel);
  end;

  if FGwtCncBoundary <> nil then
  begin
    FGwtCncBoundary.RemoveModelLink(AModel);
  end;

  if FGwtSrcBoundary <> nil then
  begin
    FGwtSrcBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4EfficiencyBoundary <> nil then
  begin
    FFmp4EfficiencyBoundary.RemoveModelLink(AModel);
  end;

  if Fmp4EfficiencyImprovementBoundary <> nil then
  begin
    Fmp4EfficiencyImprovementBoundary.RemoveModelLink(AModel);
  end;

  if Fmp4BareRunoffFractionBoundary <> nil then
  begin
    Fmp4BareRunoffFractionBoundary.RemoveModelLink(AModel);
  end;

  if Fmp4BarePrecipitationConsumptionFractionBoundary <> nil then
  begin
    Fmp4BarePrecipitationConsumptionFractionBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4BareEvap <> nil then
  begin
    FFmp4BareEvap.RemoveModelLink(AModel);
  end;

  if FFmp4DirectRechargeBoundary <> nil then
  begin
    FFmp4DirectRechargeBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4PrecipPotConsumptionBoundary <> nil then
  begin
    FFmp4PrecipPotConsumptionBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4NrdInfilLocationBoundary <> nil then
  begin
    FFmp4NrdInfilLocationBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4LandUseAreaFractionBoundary <> nil then
  begin
    FFmp4LandUseAreaFractionBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4MultLandUseAreaFractionBoundary <> nil then
  begin
    FFmp4MultLandUseAreaFractionBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4CropCoefficientBoundary <> nil then
  begin
    FFmp4CropCoefficientBoundary.RemoveModelLink(AModel);
  end;

  if FFmpMultCropCoefficientBoundary <> nil then
  begin
    FFmpMultCropCoefficientBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4ConsumptiveUseBoundary <> nil then
  begin
    FFmp4ConsumptiveUseBoundary.RemoveModelLink(AModel);
  end;

  if FFmpMultConsumptiveUseBoundary <> nil then
  begin
    FFmpMultConsumptiveUseBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4IrrigationBoundary <> nil then
  begin
    FFmp4IrrigationBoundary.RemoveModelLink(AModel);
  end;

  if FFmpMultIrrigationBoundary <> nil then
  begin
    FFmpMultIrrigationBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4RootDepthBoundary <> nil then
  begin
    FFmp4RootDepthBoundary.RemoveModelLink(AModel);
  end;

  if FFmpMultRootDepthBoundary <> nil then
  begin
    FFmpMultRootDepthBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4TranspirationFractionBoundary <> nil then
  begin
    FFmp4TranspirationFractionBoundary.RemoveModelLink(AModel);
  end;

  if FFmpMultTranspirationFractionBoundary <> nil then
  begin
    FFmpMultTranspirationFractionBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4EvaporationIrrigationFractionBoundary <> nil then
  begin
    FFmp4EvaporationIrrigationFractionBoundary.RemoveModelLink(AModel);
  end;

  if FFmpMultEvaporationIrrigationFractionBoundary <> nil then
  begin
    FFmpMultEvaporationIrrigationFractionBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4FractionOfPrecipToSurfaceWaterBoundary <> nil then
  begin
    FFmp4FractionOfPrecipToSurfaceWaterBoundary.RemoveModelLink(AModel);
  end;

  if FFmpMultFractionOfPrecipToSurfaceWaterBoundary <> nil then
  begin
    FFmpMultFractionOfPrecipToSurfaceWaterBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4FractionOfIrrigToSurfaceWaterBoundary <> nil then
  begin
    FFmp4FractionOfIrrigToSurfaceWaterBoundary.RemoveModelLink(AModel);
  end;

  if FFmpMultFractionOfIrrigToSurfaceWaterBoundary <> nil then
  begin
    FFmpMultFractionOfIrrigToSurfaceWaterBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4AddedDemandBoundary <> nil then
  begin
    FFmp4AddedDemandBoundary.RemoveModelLink(AModel);
  end;

  if FFmpMultAddedDemandBoundary <> nil then
  begin
    FFmpMultAddedDemandBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4CropHasSalinityDemandBoundary <> nil then
  begin
    FFmp4CropHasSalinityDemandBoundary.RemoveModelLink(AModel);
  end;

  if FFmpMultCropHasSalinityDemandBoundary <> nil then
  begin
    FFmpMultCropHasSalinityDemandBoundary.RemoveModelLink(AModel);
  end;

  if FFmp4AddedDemandRunoffSplitBoundary <> nil then
  begin
    FFmp4AddedDemandRunoffSplitBoundary.RemoveModelLink(AModel);
  end;

  if FTvkBoundary <> nil then
  begin
    FTvkBoundary.RemoveModelLink(AModel);
  end;

  if FTvsBoundary <> nil then
  begin
    FTvsBoundary.RemoveModelLink(AModel);
  end;

  {
    FModflow6Obs: TModflow6Obs;
    FModflowLak6: TLakeMf6;
    FModflowMvr: TMvrBoundary;
    FModflowUzfMf6Boundary: TUzfMf6Boundary;
  }

end;

procedure TModflowBoundaries.ReplaceAnMt3dTime(OldTime, NewTime: Double);
begin
  if FMt3dmsConcBoundary <> nil then
  begin
    FMt3dmsConcBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dUztRechConc <> nil then
  begin
    FMt3dUztRechConc.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dUztSatEtConcBoundary <> nil then
  begin
    FMt3dUztSatEtConcBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dUztUnsatEtConcBoundary <> nil then
  begin
    FMt3dUztUnsatEtConcBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dUzSsmSinkConcBoundary <> nil then
  begin
    FMt3dUzSsmSinkConcBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dLktConcBoundary <> nil then
  begin
    FMt3dLktConcBoundary.Values.ReplaceATime(OldTime, NewTime);
    FMt3dLktConcBoundary.RunoffConcentration.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dSftConcBoundary <> nil then
  begin
    FMt3dSftConcBoundary.Values.ReplaceATime(OldTime, NewTime);
    FMt3dSftConcBoundary.Precipitation.ReplaceATime(OldTime, NewTime);
    FMt3dSftConcBoundary.RunOff.ReplaceATime(OldTime, NewTime);
    FMt3dSftConcBoundary.ConstConc.ReplaceATime(OldTime, NewTime);
  end;

end;

procedure TModflowBoundaries.ReplaceATime(OldTime, NewTime: Double);
var
  OutletIndex: Integer;
  Outlet: TLakeOutlet;
begin
  if FModflowChdBoundary <> nil then
  begin
    FModflowChdBoundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowChdBoundary.Parameters.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowEtsBoundary <> nil then
  begin
    FModflowEtsBoundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowEtsBoundary.Parameters.ReplaceATime(OldTime, NewTime);
    FModflowEtsBoundary.EtsSurfDepthCollection.ReplaceATime(OldTime, NewTime);
    FModflowEtsBoundary.EvapotranspirationLayers.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowEvtBoundary <> nil then
  begin
    FModflowEvtBoundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowEvtBoundary.Parameters.ReplaceATime(OldTime, NewTime);
    FModflowEvtBoundary.EvtSurfDepthCollection.ReplaceATime(OldTime, NewTime);
    FModflowEvtBoundary.EvapotranspirationLayers.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowDrnBoundary <> nil then
  begin
    FModflowDrnBoundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowDrnBoundary.Parameters.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowDrtBoundary <> nil then
  begin
    FModflowDrtBoundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowDrtBoundary.Parameters.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowGhbBoundary <> nil then
  begin
    FModflowGhbBoundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowGhbBoundary.Parameters.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowLakBoundary <> nil then
  begin
    FModflowLakBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowRchBoundary <> nil then
  begin
    FModflowRchBoundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowRchBoundary.Parameters.ReplaceATime(OldTime, NewTime);
    FModflowRchBoundary.RechargeLayers.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowResBoundary <> nil then
  begin
    FModflowResBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowRivBoundary <> nil then
  begin
    FModflowRivBoundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowRivBoundary.Parameters.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowSfrBoundary <> nil then
  begin
  // FModflowSfrBoundary.Values only ever has one item and its duration
  // doesn't need to be altered because its starting and ending times shouldn't
  // be used.
//    FModflowSfrBoundary.Values.ReplaceATime(OldTime, NewTime);

    FModflowSfrBoundary.ChannelValues.ReplaceATime(OldTime, NewTime);
    FModflowSfrBoundary.UpstreamSegmentValues.ReplaceATime(OldTime, NewTime);
    FModflowSfrBoundary.DownstreamSegmentValues.ReplaceATime(OldTime, NewTime);
    FModflowSfrBoundary.UpstreamUnsatSegmentValues.ReplaceATime(OldTime, NewTime);
    FModflowSfrBoundary.DownstreamUnsatSegmentValues.ReplaceATime(OldTime, NewTime);
    FModflowSfrBoundary.TableCollection.ReplaceATime(OldTime, NewTime);
    FModflowSfrBoundary.SegmentFlows.ReplaceATime(OldTime, NewTime);
    FModflowSfrBoundary.EquationValues.ReplaceATime(OldTime, NewTime);
    FModflowSfrBoundary.ParamIcalc.ReplaceATime(OldTime, NewTime);
//    FModflowSfrBoundary.EquationValues.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowStrBoundary <> nil then
  begin
    FModflowStrBoundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowStrBoundary.Parameters.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowWellBoundary <> nil then
  begin
    FModflowWellBoundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowWellBoundary.Parameters.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowUzfBoundary <> nil then
  begin
    FModflowUzfBoundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowUzfBoundary.EvapotranspirationDemand.ReplaceATime(OldTime, NewTime);
    FModflowUzfBoundary.ExtinctionDepth.ReplaceATime(OldTime, NewTime);
    FModflowUzfBoundary.WaterContent.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowMnw2Boundary <> nil then
  begin
    FModflowMnw2Boundary.Values.ReplaceATime(OldTime, NewTime);
    FModflowMnw2Boundary.TimeValues.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpWellBoundary <> nil then
  begin
    FFmpWellBoundary.Values.ReplaceATime(OldTime, NewTime);
    FFmpWellBoundary.Parameters.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpPrecipBoundary <> nil then
  begin
    FFmpPrecipBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpRefEvapBoundary <> nil then
  begin
    FFmpRefEvapBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpCropIDBoundary <> nil then
  begin
    FFmpCropIDBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpFarmIDBoundary <> nil then
  begin
    FFmpFarmIDBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FCfpRchFraction <> nil then
  begin
    FCfpRchFraction.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FSwrRain <> nil then
  begin
    FSwrRain.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FSwrEvap <> nil then
  begin
    FSwrEvap.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FSwrLatInflow <> nil then
  begin
    FSwrLatInflow.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FSwrStage <> nil then
  begin
    FSwrStage.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FSwrDirectRunoff <> nil then
  begin
    FSwrDirectRunoff.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FSwrReaches <> nil then
  begin
    FSwrReaches.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowMnw1Boundary <> nil then
  begin
    FModflowMnw1Boundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dmsConcBoundary <> nil then
  begin
    FMt3dmsConcBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowRipBoundary <> nil then
  begin
    FModflowRipBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

//  if FMt3dmsConcBoundary <> nil then
//  begin
//    FMt3dmsConcBoundary.Values.ReplaceATime(OldTime, NewTime);
//  end;

  if FMt3dUztRechConc <> nil then
  begin
    FMt3dUztRechConc.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dUztSatEtConcBoundary <> nil then
  begin
    FMt3dUztSatEtConcBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dUztUnsatEtConcBoundary <> nil then
  begin
    FMt3dUztUnsatEtConcBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dUzSsmSinkConcBoundary <> nil then
  begin
    FMt3dUzSsmSinkConcBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dLktConcBoundary <> nil then
  begin
    FMt3dLktConcBoundary.Values.ReplaceATime(OldTime, NewTime);
    FMt3dLktConcBoundary.RunoffConcentration.ReplaceATime(OldTime, NewTime);
  end;

  if FMt3dSftConcBoundary <> nil then
  begin
    FMt3dSftConcBoundary.Values.ReplaceATime(OldTime, NewTime);
    FMt3dSftConcBoundary.Precipitation.ReplaceATime(OldTime, NewTime);
    FMt3dSftConcBoundary.RunOff.ReplaceATime(OldTime, NewTime);
    FMt3dSftConcBoundary.ConstConc.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowSfr6Boundary <> nil then
  begin
    FModflowSfr6Boundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowMawBoundary <> nil then
  begin
    FModflowMawBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowLak6 <> nil then
  begin
    FModflowLak6.Values.ReplaceATime(OldTime, NewTime);
    for OutletIndex := 0 to FModflowLak6.Outlets.Count - 1 do
    begin
      Outlet := FModflowLak6.Outlets[OutletIndex].Outlet;
      Outlet.LakeTimes.ReplaceATime(OldTime, NewTime)
    end;
  end;

  if FModflowMvr <> nil then
  begin
    FModflowMvr.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowUzfMf6Boundary <> nil then
  begin
    FModflowUzfMf6Boundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowHfbBoundary <> nil then
  begin
    FModflowHfbBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FModflowCSub <> nil then
  begin
    FModflowCSub.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FGwtCncBoundary <> nil then
  begin
    FGwtCncBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FGwtSrcBoundary <> nil then
  begin
    FGwtSrcBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4EfficiencyBoundary <> nil then
  begin
    FFmp4EfficiencyBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4EfficiencyImprovementBoundary <> nil then
  begin
    FFmp4EfficiencyImprovementBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4BareRunoffFractionBoundary <> nil then
  begin
    FFmp4BareRunoffFractionBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4BarePrecipitationConsumptionFractionBoundary <> nil then
  begin
    FFmp4BarePrecipitationConsumptionFractionBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4BareEvap <> nil then
  begin
    FFmp4BareEvap.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4DirectRechargeBoundary <> nil then
  begin
    FFmp4DirectRechargeBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4PrecipPotConsumptionBoundary <> nil then
  begin
    FFmp4PrecipPotConsumptionBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4NrdInfilLocationBoundary <> nil then
  begin
    FFmp4NrdInfilLocationBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4LandUseAreaFractionBoundary <> nil then
  begin
    FFmp4LandUseAreaFractionBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4MultLandUseAreaFractionBoundary <> nil then
  begin
    FFmp4MultLandUseAreaFractionBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4CropCoefficientBoundary <> nil then
  begin
    FFmp4CropCoefficientBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpMultCropCoefficientBoundary <> nil then
  begin
    FFmpMultCropCoefficientBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4ConsumptiveUseBoundary <> nil then
  begin
    FFmp4ConsumptiveUseBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpMultConsumptiveUseBoundary <> nil then
  begin
    FFmpMultConsumptiveUseBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4IrrigationBoundary <> nil then
  begin
    FFmp4IrrigationBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpMultIrrigationBoundary <> nil then
  begin
    FFmpMultIrrigationBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4RootDepthBoundary <> nil then
  begin
    FFmp4RootDepthBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpMultRootDepthBoundary <> nil then
  begin
    FFmpMultRootDepthBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4TranspirationFractionBoundary <> nil then
  begin
    FFmp4TranspirationFractionBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpMultTranspirationFractionBoundary <> nil then
  begin
    FFmpMultTranspirationFractionBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4EvaporationIrrigationFractionBoundary <> nil then
  begin
    FFmp4EvaporationIrrigationFractionBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpMultEvaporationIrrigationFractionBoundary <> nil then
  begin
    FFmpMultEvaporationIrrigationFractionBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4FractionOfPrecipToSurfaceWaterBoundary <> nil then
  begin
    FFmp4FractionOfPrecipToSurfaceWaterBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpMultFractionOfPrecipToSurfaceWaterBoundary <> nil then
  begin
    FFmpMultFractionOfPrecipToSurfaceWaterBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4FractionOfIrrigToSurfaceWaterBoundary <> nil then
  begin
    FFmp4FractionOfIrrigToSurfaceWaterBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpMultFractionOfIrrigToSurfaceWaterBoundary <> nil then
  begin
    FFmpMultFractionOfIrrigToSurfaceWaterBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4AddedDemandBoundary <> nil then
  begin
    FFmp4AddedDemandBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpMultAddedDemandBoundary <> nil then
  begin
    FFmpMultAddedDemandBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4CropHasSalinityDemandBoundary <> nil then
  begin
    FFmp4CropHasSalinityDemandBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmpMultCropHasSalinityDemandBoundary <> nil then
  begin
    FFmpMultCropHasSalinityDemandBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FFmp4AddedDemandRunoffSplitBoundary <> nil then
  begin
    FFmp4AddedDemandRunoffSplitBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FTvkBoundary <> nil then
  begin
    FTvkBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  if FTvsBoundary <> nil then
  begin
    FTvsBoundary.Values.ReplaceATime(OldTime, NewTime);
  end;

  Invalidate;
end;

procedure TModflowBoundaries.ReplaceGUID;
begin
  if ModflowSfrBoundary <> nil then
  begin
    ModflowSfrBoundary.ReplaceGUID;
  end;
  if ModflowMnw2Boundary <> nil then
  begin
    ModflowMnw2Boundary.ReplaceGUID;
  end;
  if ModflowLakBoundary <> nil then
  begin
    ModflowLakBoundary.ReplaceGUID;
  end;
  if ModflowSubObservations <> nil then
  begin
    ModflowSubObservations.ReplaceGUID;
  end;
  if ModflowSwtObservations <> nil then
  begin
    ModflowSwtObservations.ReplaceGUID;
  end;
  if Modflow6Obs <> nil then
  begin
    Modflow6Obs.ReplaceGUID;
  end;
  if ModflowHeadObservations <> nil then
  begin
    ModflowHeadObservations.ReplaceGUID;
  end;
end;

procedure TModflowBoundaries.StopTalkingToAnyone;
begin
  if FModflowChdBoundary <> nil then
  begin
    FModflowChdBoundary.StopTalkingToAnyone;
  end;

  if FModflowEtsBoundary <> nil then
  begin
    FModflowEtsBoundary.StopTalkingToAnyone;
  end;

  if FModflowEvtBoundary <> nil then
  begin
    FModflowEvtBoundary.StopTalkingToAnyone;
  end;

  if FModflowDrnBoundary <> nil then
  begin
    FModflowDrnBoundary.StopTalkingToAnyone;
  end;

  if FModflowDrtBoundary <> nil then
  begin
    FModflowDrtBoundary.StopTalkingToAnyone;
  end;

  if FModflowGhbBoundary <> nil then
  begin
    FModflowGhbBoundary.StopTalkingToAnyone;
  end;

  if FModflowLakBoundary <> nil then
  begin
    FModflowLakBoundary.StopTalkingToAnyone;
  end;

  if FModflowRchBoundary <> nil then
  begin
    FModflowRchBoundary.StopTalkingToAnyone;
  end;

  if FModflowResBoundary <> nil then
  begin
    FModflowResBoundary.StopTalkingToAnyone;
  end;

  if FModflowRivBoundary <> nil then
  begin
    FModflowRivBoundary.StopTalkingToAnyone;
  end;

  if FModflowSfrBoundary <> nil then
  begin
    FModflowSfrBoundary.StopTalkingToAnyone;
  end;

  if FModflowStrBoundary <> nil then
  begin
    FModflowStrBoundary.StopTalkingToAnyone;
  end;

  if FModflowWellBoundary <> nil then
  begin
    FModflowWellBoundary.StopTalkingToAnyone;
  end;

  if FModflowUzfBoundary <> nil then
  begin
    FModflowUzfBoundary.StopTalkingToAnyone;
  end;

  if FModflowHeadObservations <> nil then
  begin
    FModflowHeadObservations.StopTalkingToAnyone;
  end;

  if FModflowHfbBoundary <> nil then
  begin
    FModflowHfbBoundary.StopTalkingToAnyone;
  end;

//  if FModflowGage <> nil then
//  begin
//    FModflowGage.StopTalkingToAnyone;
//  end;

{$IFDEF MNW2}
  if FModflowMnw1Boundary <> nil then
  begin
    FModflowMnw1Boundary.StopTalkingToAnyone;
  end;
{$ENDIF}

  if FModflowMnw2Boundary <> nil then
  begin
    FModflowMnw2Boundary.StopTalkingToAnyone;
  end;

  if FModflowHydmodData <> nil then
  begin
    FModflowHydmodData.StopTalkingToAnyone;
  end;

  if FMt3dmsConcBoundary <> nil then
  begin
    FMt3dmsConcBoundary.StopTalkingToAnyone;
  end;

  if FMt3dmsTransObservations <> nil then
  begin
    FMt3dmsTransObservations.StopTalkingToAnyone;
  end;

  if FModflowFhbHeadBoundary <> nil then
  begin
    FModflowFhbHeadBoundary.StopTalkingToAnyone;
  end;

  if FModflowFhbFlowBoundary <> nil then
  begin
    FModflowFhbFlowBoundary.StopTalkingToAnyone;
  end;

  if FFmpWellBoundary <> nil then
  begin
    FFmpWellBoundary.StopTalkingToAnyone;
  end;

  if FFmpPrecipBoundary <> nil then
  begin
    FFmpPrecipBoundary.StopTalkingToAnyone;
  end;

  if FFmpRefEvapBoundary <> nil then
  begin
    FFmpRefEvapBoundary.StopTalkingToAnyone;
  end;

  if FFmpRefEvapBoundary <> nil then
  begin
    FFmpRefEvapBoundary.StopTalkingToAnyone;
  end;

  if FFmpCropIDBoundary <> nil then
  begin
    FFmpCropIDBoundary.StopTalkingToAnyone;
  end;

  if FFmpFarmIDBoundary <> nil then
  begin
    FFmpFarmIDBoundary.StopTalkingToAnyone;
  end;

  if FCfpPipes <> nil then
  begin
    FCfpPipes.StopTalkingToAnyone;
  end;

  if FCfpFixedHeads <> nil then
  begin
    FCfpFixedHeads.StopTalkingToAnyone;
  end;

  if FCfpRchFraction <> nil then
  begin
    FCfpRchFraction.StopTalkingToAnyone;
  end;

  if FSwrRain <> nil then
  begin
    FSwrRain.StopTalkingToAnyone;
  end;

  if FSwrEvap <> nil then
  begin
    FSwrEvap.StopTalkingToAnyone;
  end;

  if FSwrLatInflow <> nil then
  begin
    FSwrLatInflow.StopTalkingToAnyone;
  end;

  if FSwrStage <> nil then
  begin
    FSwrStage.StopTalkingToAnyone;
  end;

  if FSwrDirectRunoff <> nil then
  begin
    FSwrDirectRunoff.StopTalkingToAnyone;
  end;

  if FSwrReaches <> nil then
  begin
    FSwrReaches.StopTalkingToAnyone;
  end;

  if FModflowSwiObsBoundary <> nil then
  begin
    FModflowSwiObsBoundary.StopTalkingToAnyone;
  end;

  if FModflowRipBoundary <> nil then
  begin
    FModflowRipBoundary.StopTalkingToAnyone;
  end;

  if FMt3dUztRechConc <> nil then
  begin
    FMt3dUztRechConc.StopTalkingToAnyone;
  end;

  if FMt3dUztSatEtConcBoundary <> nil then
  begin
    FMt3dUztSatEtConcBoundary.StopTalkingToAnyone;
  end;

  if FMt3dUztUnsatEtConcBoundary <> nil then
  begin
    FMt3dUztUnsatEtConcBoundary.StopTalkingToAnyone;
  end;

  if FMt3dUzSsmSinkConcBoundary <> nil then
  begin
    FMt3dUzSsmSinkConcBoundary.StopTalkingToAnyone;
  end;

  if FMt3dLktConcBoundary <> nil then
  begin
    FMt3dLktConcBoundary.StopTalkingToAnyone;
  end;

  if FModflowSfr6Boundary <> nil then
  begin
    FModflowSfr6Boundary.StopTalkingToAnyone;
  end;

  if FModflowMawBoundary <> nil then
  begin
    FModflowMawBoundary.StopTalkingToAnyone;
  end;

  if FModflowLak6 <> nil then
  begin
    FModflowLak6.StopTalkingToAnyone;
  end;

  if FModflowMvr <> nil then
  begin
    FModflowMvr.StopTalkingToAnyone;
  end;

  if FModflowUzfMf6Boundary <> nil then
  begin
    FModflowUzfMf6Boundary.StopTalkingToAnyone;
  end;

  if FMt3dSftConcBoundary <> nil then
  begin
    FMt3dSftConcBoundary.StopTalkingToAnyone;
  end;

  if FModflowCSub <> nil then
  begin
    FModflowCSub.StopTalkingToAnyone;
  end;

  if FModflowSubObservations <> nil then
  begin
//    FSubObservations.StopTalkingToAnyone;
  end;

  if FModflowSwtObservations <> nil then
  begin
//    FSubObservations.StopTalkingToAnyone;
  end;

  if GwtCncBoundary <> nil then
  begin
    FGwtCncBoundary.StopTalkingToAnyone;
  end;

  if GwtSrcBoundary <> nil then
  begin
    FGwtSrcBoundary.StopTalkingToAnyone;
  end;

  if FFmp4EfficiencyBoundary <> nil then
  begin
    FFmp4EfficiencyBoundary.StopTalkingToAnyone;
  end;

  if FFmp4EfficiencyImprovementBoundary <> nil then
  begin
    FFmp4EfficiencyImprovementBoundary.StopTalkingToAnyone;
  end;

  if FFmp4BareRunoffFractionBoundary <> nil then
  begin
    FFmp4BareRunoffFractionBoundary.StopTalkingToAnyone;
  end;

  if FFmp4BarePrecipitationConsumptionFractionBoundary <> nil then
  begin
    FFmp4BarePrecipitationConsumptionFractionBoundary.StopTalkingToAnyone;
  end;

  if FFmp4BareEvap <> nil then
  begin
    FFmp4BareEvap.StopTalkingToAnyone;
  end;

  if FFmp4DirectRechargeBoundary <> nil then
  begin
    FFmp4DirectRechargeBoundary.StopTalkingToAnyone;
  end;

  if FFmp4PrecipPotConsumptionBoundary <> nil then
  begin
    FFmp4PrecipPotConsumptionBoundary.StopTalkingToAnyone;
  end;

  if FFmp4NrdInfilLocationBoundary <> nil then
  begin
    FFmp4NrdInfilLocationBoundary.StopTalkingToAnyone;
  end;

  if FFmp4LandUseAreaFractionBoundary <> nil then
  begin
    FFmp4LandUseAreaFractionBoundary.StopTalkingToAnyone;
  end;

  if FFmp4MultLandUseAreaFractionBoundary <> nil then
  begin
    FFmp4MultLandUseAreaFractionBoundary.StopTalkingToAnyone;
  end;

  if FFmp4CropCoefficientBoundary <> nil then
  begin
    FFmp4CropCoefficientBoundary.StopTalkingToAnyone;
  end;

  if FFmpMultCropCoefficientBoundary <> nil then
  begin
    FFmpMultCropCoefficientBoundary.StopTalkingToAnyone;
  end;

  if FFmp4ConsumptiveUseBoundary <> nil then
  begin
    FFmp4ConsumptiveUseBoundary.StopTalkingToAnyone;
  end;

  if FFmpMultConsumptiveUseBoundary <> nil then
  begin
    FFmpMultConsumptiveUseBoundary.StopTalkingToAnyone;
  end;

  if FFmp4IrrigationBoundary <> nil then
  begin
    FFmp4IrrigationBoundary.StopTalkingToAnyone;
  end;

  if FFmpMultIrrigationBoundary <> nil then
  begin
    FFmpMultIrrigationBoundary.StopTalkingToAnyone;
  end;

  if FFmp4RootDepthBoundary <> nil then
  begin
    FFmp4RootDepthBoundary.StopTalkingToAnyone;
  end;

  if FFmpMultRootDepthBoundary <> nil then
  begin
    FFmpMultRootDepthBoundary.StopTalkingToAnyone;
  end;

  if FFmp4TranspirationFractionBoundary <> nil then
  begin
    FFmp4TranspirationFractionBoundary.StopTalkingToAnyone;
  end;

  if FFmpMultTranspirationFractionBoundary <> nil then
  begin
    FFmpMultTranspirationFractionBoundary.StopTalkingToAnyone;
  end;

  if FFmp4EvaporationIrrigationFractionBoundary <> nil then
  begin
    FFmp4EvaporationIrrigationFractionBoundary.StopTalkingToAnyone;
  end;

  if FFmpMultEvaporationIrrigationFractionBoundary <> nil then
  begin
    FFmpMultEvaporationIrrigationFractionBoundary.StopTalkingToAnyone;
  end;

  if FFmp4FractionOfPrecipToSurfaceWaterBoundary <> nil then
  begin
    FFmp4FractionOfPrecipToSurfaceWaterBoundary.StopTalkingToAnyone;
  end;

  if FFmpMultFractionOfPrecipToSurfaceWaterBoundary <> nil then
  begin
    FFmpMultFractionOfPrecipToSurfaceWaterBoundary.StopTalkingToAnyone;
  end;

  if FFmp4FractionOfIrrigToSurfaceWaterBoundary <> nil then
  begin
    FFmp4FractionOfIrrigToSurfaceWaterBoundary.StopTalkingToAnyone;
  end;

  if FFmpMultFractionOfIrrigToSurfaceWaterBoundary <> nil then
  begin
    FFmpMultFractionOfIrrigToSurfaceWaterBoundary.StopTalkingToAnyone;
  end;

  if FFmp4AddedDemandBoundary <> nil then
  begin
    FFmp4AddedDemandBoundary.StopTalkingToAnyone;
  end;

  if FFmpMultAddedDemandBoundary <> nil then
  begin
    FFmpMultAddedDemandBoundary.StopTalkingToAnyone;
  end;

  if FFmp4CropHasSalinityDemandBoundary <> nil then
  begin
    FFmp4CropHasSalinityDemandBoundary.StopTalkingToAnyone;
  end;

  if FFmpMultCropHasSalinityDemandBoundary <> nil then
  begin
    FFmpMultCropHasSalinityDemandBoundary.StopTalkingToAnyone;
  end;

  if FFmp4AddedDemandRunoffSplitBoundary <> nil then
  begin
    FFmp4AddedDemandRunoffSplitBoundary.StopTalkingToAnyone;
  end;

  if FTvkBoundary <> nil then
  begin
    FTvkBoundary.StopTalkingToAnyone;
  end;

  if FTvsBoundary <> nil then
  begin
    FTvsBoundary.StopTalkingToAnyone;
  end;

end;

function TModflowBoundaries.UsesAnMt3dTime(ATime: Double): Boolean;
begin
  Result := False;

  if FMt3dmsConcBoundary <> nil then
  begin
    Result := FMt3dmsConcBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dUztRechConc <> nil then
  begin
    Result := FMt3dUztRechConc.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dUztSatEtConcBoundary <> nil then
  begin
    Result := FMt3dUztSatEtConcBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dUztUnsatEtConcBoundary <> nil then
  begin
    Result := FMt3dUztUnsatEtConcBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dUzSsmSinkConcBoundary <> nil then
  begin
    Result := FMt3dUzSsmSinkConcBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dLktConcBoundary <> nil then
  begin
    Result := FMt3dLktConcBoundary.Values.UsesATime(ATime)
     or FMt3dLktConcBoundary.RunoffConcentration.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dSftConcBoundary <> nil then
  begin
    Result := FMt3dSftConcBoundary.Values.UsesATime(ATime)
     or FMt3dSftConcBoundary.Precipitation.UsesATime(ATime)
     or FMt3dSftConcBoundary.RunOff.UsesATime(ATime)
     or FMt3dSftConcBoundary.ConstConc.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

end;

function TModflowBoundaries.UsesATime(ATime: Double): Boolean;
begin
  Result := False;
  if FModflowChdBoundary <> nil then
  begin
    Result := FModflowChdBoundary.Values.UsesATime(ATime)
      or FModflowChdBoundary.Parameters.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowEtsBoundary <> nil then
  begin
    Result := FModflowEtsBoundary.Values.UsesATime(ATime)
      or FModflowEtsBoundary.Parameters.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowEvtBoundary <> nil then
  begin
    Result := FModflowEvtBoundary.Values.UsesATime(ATime)
      or FModflowEvtBoundary.Parameters.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowDrnBoundary <> nil then
  begin
    Result := FModflowDrnBoundary.Values.UsesATime(ATime)
      or FModflowDrnBoundary.Parameters.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowDrtBoundary <> nil then
  begin
    Result := FModflowDrtBoundary.Values.UsesATime(ATime)
      or FModflowDrtBoundary.Parameters.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowGhbBoundary <> nil then
  begin
    Result := FModflowGhbBoundary.Values.UsesATime(ATime)
      or FModflowGhbBoundary.Parameters.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowLakBoundary <> nil then
  begin
    Result := FModflowLakBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowRchBoundary <> nil then
  begin
    Result := FModflowRchBoundary.Values.UsesATime(ATime)
      or FModflowRchBoundary.Parameters.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowResBoundary <> nil then
  begin
    Result := FModflowResBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowRivBoundary <> nil then
  begin
    Result := FModflowRivBoundary.Values.UsesATime(ATime)
      or FModflowRivBoundary.Parameters.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowSfrBoundary <> nil then
  begin
    Result := FModflowSfrBoundary.ParamIcalc.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowStrBoundary <> nil then
  begin
    Result := FModflowStrBoundary.Values.UsesATime(ATime)
      or FModflowStrBoundary.Parameters.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowWellBoundary <> nil then
  begin
    Result := FModflowWellBoundary.Values.UsesATime(ATime)
      or FModflowWellBoundary.Parameters.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowUzfBoundary <> nil then
  begin
    Result := FModflowUzfBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowMnw2Boundary <> nil then
  begin
    Result := FModflowMnw2Boundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpWellBoundary <> nil then
  begin
    Result := FFmpWellBoundary.Values.UsesATime(ATime)
      or FFmpWellBoundary.Parameters.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpPrecipBoundary <> nil then
  begin
    Result := FFmpPrecipBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpRefEvapBoundary <> nil then
  begin
    Result := FFmpRefEvapBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpCropIDBoundary <> nil then
  begin
    Result := FFmpCropIDBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpFarmIDBoundary <> nil then
  begin
    Result := FFmpFarmIDBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FCfpRchFraction <> nil then
  begin
    Result := FCfpRchFraction.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FSwrRain <> nil then
  begin
    Result := FSwrRain.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FSwrEvap <> nil then
  begin
    Result := FSwrEvap.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FSwrLatInflow <> nil then
  begin
    Result := FSwrLatInflow.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FSwrStage <> nil then
  begin
    Result := FSwrStage.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FSwrDirectRunoff <> nil then
  begin
    Result := FSwrDirectRunoff.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FSwrReaches <> nil then
  begin
    Result := FSwrReaches.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowMnw1Boundary <> nil then
  begin
    Result := FModflowMnw1Boundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowRipBoundary <> nil then
  begin
    Result := FModflowRipBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dmsConcBoundary <> nil then
  begin
    Result := FMt3dmsConcBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dUztRechConc <> nil then
  begin
    Result := FMt3dUztRechConc.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dUztSatEtConcBoundary <> nil then
  begin
    Result := FMt3dUztSatEtConcBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dUztUnsatEtConcBoundary <> nil then
  begin
    Result := FMt3dUztUnsatEtConcBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dUzSsmSinkConcBoundary <> nil then
  begin
    Result := FMt3dUzSsmSinkConcBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dLktConcBoundary <> nil then
  begin
    Result := FMt3dLktConcBoundary.Values.UsesATime(ATime)
     or FMt3dLktConcBoundary.RunoffConcentration.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FMt3dSftConcBoundary <> nil then
  begin
    Result := FMt3dSftConcBoundary.Values.UsesATime(ATime)
     or FMt3dSftConcBoundary.Precipitation.UsesATime(ATime)
     or FMt3dSftConcBoundary.RunOff.UsesATime(ATime)
     or FMt3dSftConcBoundary.ConstConc.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowSfr6Boundary <> nil then
  begin
    Result := FModflowSfr6Boundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;


  if FModflowMawBoundary <> nil then
  begin
    Result := FModflowMawBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowLak6 <> nil then
  begin
    Result := FModflowLak6.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowMvr <> nil then
  begin
    Result := FModflowMvr.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowUzfMf6Boundary <> nil then
  begin
    Result := FModflowUzfMf6Boundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowHfbBoundary <> nil then
  begin
    Result := FModflowHfbBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FModflowCSub <> nil then
  begin
    Result := FModflowCSub.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FGwtCncBoundary <> nil then
  begin
    Result := FGwtCncBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FGwtSrcBoundary <> nil then
  begin
    Result := FGwtSrcBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4EfficiencyBoundary <> nil then
  begin
    Result := FFmp4EfficiencyBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4EfficiencyImprovementBoundary <> nil then
  begin
    Result := FFmp4EfficiencyImprovementBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4BareRunoffFractionBoundary <> nil then
  begin
    Result := FFmp4BareRunoffFractionBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4BarePrecipitationConsumptionFractionBoundary <> nil then
  begin
    Result := FFmp4BarePrecipitationConsumptionFractionBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4BareEvap <> nil then
  begin
    Result := FFmp4BareEvap.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4DirectRechargeBoundary <> nil then
  begin
    Result := FFmp4DirectRechargeBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4PrecipPotConsumptionBoundary <> nil then
  begin
    Result := FFmp4PrecipPotConsumptionBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4NrdInfilLocationBoundary <> nil then
  begin
    Result := FFmp4NrdInfilLocationBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4LandUseAreaFractionBoundary <> nil then
  begin
    Result := FFmp4LandUseAreaFractionBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4MultLandUseAreaFractionBoundary <> nil then
  begin
    Result := FFmp4MultLandUseAreaFractionBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4CropCoefficientBoundary <> nil then
  begin
    Result := FFmp4CropCoefficientBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpMultCropCoefficientBoundary <> nil then
  begin
    Result := FFmpMultCropCoefficientBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4ConsumptiveUseBoundary <> nil then
  begin
    Result := FFmp4ConsumptiveUseBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpMultConsumptiveUseBoundary <> nil then
  begin
    Result := FFmpMultConsumptiveUseBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4IrrigationBoundary <> nil then
  begin
    Result := FFmp4IrrigationBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpMultIrrigationBoundary <> nil then
  begin
    Result := FFmpMultIrrigationBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4RootDepthBoundary <> nil then
  begin
    Result := FFmp4RootDepthBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpMultRootDepthBoundary <> nil then
  begin
    Result := FFmpMultRootDepthBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4TranspirationFractionBoundary <> nil then
  begin
    Result := FFmp4TranspirationFractionBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpMultTranspirationFractionBoundary <> nil then
  begin
    Result := FFmpMultTranspirationFractionBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4EvaporationIrrigationFractionBoundary <> nil then
  begin
    Result := FFmp4EvaporationIrrigationFractionBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpMultEvaporationIrrigationFractionBoundary <> nil then
  begin
    Result := FFmpMultEvaporationIrrigationFractionBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4FractionOfPrecipToSurfaceWaterBoundary <> nil then
  begin
    Result := FFmp4FractionOfPrecipToSurfaceWaterBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpMultFractionOfPrecipToSurfaceWaterBoundary <> nil then
  begin
    Result := FFmpMultFractionOfPrecipToSurfaceWaterBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4FractionOfIrrigToSurfaceWaterBoundary <> nil then
  begin
    Result := FFmp4FractionOfIrrigToSurfaceWaterBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpMultFractionOfIrrigToSurfaceWaterBoundary <> nil then
  begin
    Result := FFmpMultFractionOfIrrigToSurfaceWaterBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4AddedDemandBoundary <> nil then
  begin
    Result := FFmp4AddedDemandBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpMultAddedDemandBoundary <> nil then
  begin
    Result := FFmpMultAddedDemandBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4CropHasSalinityDemandBoundary <> nil then
  begin
    Result := FFmp4CropHasSalinityDemandBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmpMultCropHasSalinityDemandBoundary <> nil then
  begin
    Result := FFmpMultCropHasSalinityDemandBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FFmp4AddedDemandRunoffSplitBoundary <> nil then
  begin
    Result := FFmp4AddedDemandRunoffSplitBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FTvkBoundary <> nil then
  begin
    Result := FTvkBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

  if FTvsBoundary <> nil then
  begin
    Result := FTvsBoundary.Values.UsesATime(ATime);
    if Result then
    begin
      Exit;
    end;
  end;

end;

{ TSelectedCells }

procedure TSelectedCells.Clear;
begin
  SetExtents(0,0,0);
end;

function TSelectedCells.GetHasCells: boolean;
begin
  result := (FLayerCount > 0) and (FRowCount > 0) and (FColCount > 0);
end;

function TSelectedCells.GetSelected(Layer, Row, Col: integer): boolean;
begin
  ValidateIndicies(Col, Row, Layer);
  result := FSelected[Layer, Row, Col];
end;

procedure TSelectedCells.SetExtents(LayerCount, RowCount, ColCount: integer);
var
  LayerIndex: Integer;
  RowIndex: Integer;
  ColIndex: Integer;
begin
  if (LayerCount<0) or (RowCount < 0) or (ColCount < 0) then
  begin
    SetLength(FSelected, 0, 0, 0);
    FLayerCount := LayerCount;
    FRowCount := RowCount;
    FColCount := ColCount;
  end
  else
  begin
    if (LayerCount <> FLayerCount)
      or (RowCount <> FRowCount)
      or (ColCount <> FColCount) then
    begin
      SetLength(FSelected, LayerCount, RowCount, ColCount);
      FLayerCount := LayerCount;
      FRowCount := RowCount;
      FColCount := ColCount;
    end;
    for LayerIndex := 0 to FLayerCount - 1 do
    begin
      for RowIndex := 0 to FRowCount - 1 do
      begin
        for ColIndex := 0 to FColCount - 1 do
        begin
          FSelected[LayerIndex, RowIndex, ColIndex] := false;
        end;
      end;
    end;
  end;
end;

procedure TSelectedCells.ValidateIndicies(Col: Integer; Row: Integer; Layer: Integer);
begin
  Assert(Layer >= 0);
  Assert(Row >= 0);
  Assert(Col >= 0);
  Assert(Layer < FLayerCount);
  Assert(Row < FRowCount);
  Assert(Col < FColCount);
end;

procedure TSelectedCells.SetSelected(Layer, Row, Col: integer;
  const Value: boolean);
begin
  ValidateIndicies(Col, Row, Layer);
  FSelected[Layer, Row, Col] := Value;
end;

{ TLineSegment }

function TLineSegment.IsNextSegment(Seg: TLineSegment): boolean;
begin
  result := (Point2.x = Seg.Point1.x) and (Point2.y = Seg.Point1.y)
end;

//{ TCellAssignment }
//
//procedure TCellAssignment.Assign(Cell: TCellAssignment);
//begin
//  FLayer := Cell.FLayer;
//  FRow := Cell.FRow;
//  FColumn := Cell.FColumn;
//  FSegment := Cell.FSegment;
//  FSection := Cell.FSection;
//  FAnnotation := Cell.FAnnotation;
//  FAssignmentMethod := Cell.FAssignmentMethod;
//  FLgrEdge := Cell.FLgrEdge;
//  FSutraX := Cell.FSutraX;
//  FSutraY := Cell.FSutraY;
//  FSutraZ := Cell.FSutraZ;
//end;
//
//constructor TCellAssignment.Create(ALayer, ARow, ACol: integer;
//      ASegment: TCellElementSegment; ASection: integer;
//      const AnAnnotation: string; AnAssignmentMethod: TAssignmentMethod);
//begin
//  FLayer := ALayer;
//  FRow := ARow;
//  FColumn := ACol;
//  FSegment := ASegment;
//  FSection := ASection;
//  FAnnotation := AnAnnotation;
//  FAssignmentMethod := AnAssignmentMethod;
//  if ASegment <> nil then
//  begin
//    FScreenObject := ASegment.FScreenObject;
//    FLgrEdge := ASegment.LgrEdge;
//  end
//  else
//  begin
//    FLgrEdge := False;
//    FScreenObject := nil;
//  end;
//end;
//
//constructor TCellAssignment.CreateFromCell(Cell: TCellAssignment);
//begin
//  Assign(Cell);
//end;
//
//constructor TCellAssignment.CreateFromStream(Stream: TDecompressionStream;
//  const EncloseAnnotation, IntersectAnnotation: string);
//begin
//  Restore(Stream, EncloseAnnotation, IntersectAnnotation);
//end;
//
//destructor TCellAssignment.Destroy;
//begin
//  FOwnedSegment.Free;
//  inherited;
//end;
//
//function TCellAssignment.GetCell: TCellLocation;
//begin
//  result.Layer := Layer;
//  result.Row := Row;
//  result.Column := Column;
//  result.Section := Section;
//end;
//
//function TCellAssignment.GetSection: integer;
//begin
//  if Segment = nil then
//  begin
//    result := FSection;
//  end
//  else
//  begin
//    result := Segment.SectionIndex;
//  end;
//end;
//
//procedure TCellAssignment.Restore(Stream: TDecompressionStream;
//  const EncloseAnnotation, IntersectAnnotation: string);
//var
//  ReadSegment: boolean;
//begin
//  Stream.Read(FAssignmentMethod, SizeOf(FAssignmentMethod));
//  case FAssignmentMethod of
//    amEnclose: FAnnotation := EncloseAnnotation;
//    amIntersect: FAnnotation := IntersectAnnotation;
//    else Assert(False);
//  end;
//  Stream.Read(ReadSegment, SizeOf(ReadSegment));
//  if ReadSegment then
//  begin
//    FOwnedSegment.Free;
//    FOwnedSegment := TCellElementSegment.Create(FScreenObject);
//    FOwnedSegment.Restore(Stream);
//    FSegment := FOwnedSegment;
//  end
//  else
//  begin
//    FSegment := nil;
//  end;
//  FLayer := ReadCompInt(Stream);
//  FSection := ReadCompInt(Stream);
//  FRow := ReadCompInt(Stream);
//  FColumn := ReadCompInt(Stream);
//  FLgrEdge := ReadCompBoolean(Stream);
//  FSutraX := ReadCompReal(Stream);
//  FSutraY := ReadCompReal(Stream);
//  FSutraZ := ReadCompReal(Stream);
//end;
//
//procedure TCellAssignment.Store(Stream: TStream);
//var
//  StoreSegment: boolean;
//begin
//  Stream.Write(FAssignmentMethod, SizeOf(FAssignmentMethod));
//  StoreSegment := FSegment <> nil;
//  Stream.Write(StoreSegment, SizeOf(StoreSegment));
//  if StoreSegment then
//  begin
//    FSegment.Store(Stream);
//  end;
//  WriteCompInt(Stream, FLayer);
//  WriteCompInt(Stream, FSection);
//  WriteCompInt(Stream, FRow);
//  WriteCompInt(Stream, FColumn);
//  WriteCompBoolean(Stream, FLgrEdge);
//  WriteCompReal(Stream, FSutraX);
//  WriteCompReal(Stream, FSutraY);
//  WriteCompReal(Stream, FSutraZ);
//end;

{ TCellList }

procedure TCellAssignmentList.Add(Item: TCellAssignment);
var
  PriorItem: TCellAssignment;
begin
  if FList.Count > 0 then
  begin
    PriorItem := FList[Count-1];
    if (PriorItem.Layer = Item.Layer)
      and (PriorItem.Row = Item.Row)
      and (PriorItem.Column = Item.Column)
      and (PriorItem.Section = Item.Section)
      and (PriorItem.AssignmentMethod = Item.AssignmentMethod)
      and (PriorItem.Annotation = Item.Annotation)
      then
    begin
      FList.Delete(Count-1);
    end;
  end;
  FList.Add(Item);
end;

procedure TCellAssignmentList.Assign(CachedList: TCellAssignmentList;
  const EncloseAnnotation, IntersectAnnotation: string);
begin
  Assert(Count = 0);
  FCached := CachedList.FCached;
  FCleared := CachedList.FCleared;
  FMemoryStream := CachedList.FMemoryStream;
  try
    Restore(EncloseAnnotation, IntersectAnnotation);
  finally
    FCached := False;
    FCleared := False;
    FMemoryStream := nil;
  end;
end;

procedure TCellAssignmentList.AssignCellLocationList(
  CellLocationList: TCellLocationList);
var
  CellIndex: Integer;
begin
  CellLocationList.Clear;
  CellLocationList.Capacity := Count;
  for CellIndex := 0 to Count -1 do
  begin
    CellLocationList.Add(Items[CellIndex].Cell);
  end;
end;

procedure TCellAssignmentList.Cache;
var
  Compressor: TCompressionStream;
  Index: Integer;
  TempStream: TMemoryStream;
begin
  if not FCached then
  begin
    if FMemoryStream = nil then
    begin
      FMemoryStream := TMemoryStream.Create;
    end;
    TempStream := TMemoryStream.Create;
    Compressor := TCompressionStream.Create(ZLib.clDefault, FMemoryStream);
    try
      FMemoryStream.Position := 0;
      WriteCompInt(TempStream, Count);
      for Index := 0 to Count - 1 do
      begin
        Items[Index].Store(TempStream);
      end;
      Compressor.CopyFrom(TempStream)
    finally
      Compressor.Free;
      TempStream.Free;
    end;
    FCached := True;
  end;
  FList.Clear;
  FCleared := True;
end;

procedure TCellAssignmentList.Clear;
begin
  FList.Clear;
  FCached := False;
  FreeAndNil(FMemoryStream);
  FCleared := False;
end;

constructor TCellAssignmentList.Create;
begin
  FList := TObjectList.Create;
end;

procedure TCellAssignmentList.Delete(Index: integer);
begin
  FList.Delete(Index);
end;

destructor TCellAssignmentList.Destroy;
begin
  FMemoryStream.Free;
  FList.Free;
  inherited;
end;

function TCellAssignmentList.GetCount: integer;
begin
  result := FList.Count;
end;

function TCellAssignmentList.GetItem(Index: integer): TCellAssignment;
begin
  result := FList[Index];
end;

procedure TCellAssignmentList.Restore(const EncloseAnnotation, IntersectAnnotation: string);
var
  DecompressionStream: TDecompressionStream;
  NewCount: integer;
  Index: Integer;
  NewItem: TCellAssignment;
begin
  Assert(FMemoryStream <> nil);
  Assert(FCached);
  Assert(FCleared);
  FMemoryStream.Position := 0;
  DecompressionStream := TDecompressionStream.Create(FMemoryStream);
  try
    NewCount := ReadCompInt(DecompressionStream);
    FList.Capacity := NewCount;
    for Index := 0 to NewCount - 1 do
    begin
      NewItem := TCellAssignment.CreateFromStream(DecompressionStream,
        EncloseAnnotation, IntersectAnnotation);
      Add(NewItem);
    end;
  finally
    DecompressionStream.Free;
    FCleared := False;
  end;
end;

procedure SelectAScreenObject(ScreenObject: TScreenObject);
var
  AScreenObject: TScreenObject;
  Index: Integer;
  UndoChangeSelection: TUndoChangeSelection;
begin
  UndoChangeSelection := TUndoChangeSelection.Create;
  for Index := 0 to frmGoPhast.PhastModel.ScreenObjectCount - 1 do
  begin
    AScreenObject := frmGoPhast.PhastModel.ScreenObjects[Index];
    AScreenObject.Selected := AScreenObject = ScreenObject;
  end;
  UndoChangeSelection.SetPostSelection;
  if UndoChangeSelection.SelectionChanged then
  begin
    frmGoPhast.UndoStack.Submit(UndoChangeSelection);
  end
  else
  begin
    UndoChangeSelection.Free;
  end;
end;

procedure DeselectAScreenObject(ScreenObject: TScreenObject);
var
  UndoChangeSelection: TUndoChangeSelection;
begin
  UndoChangeSelection := TUndoChangeSelection.Create;
  ScreenObject.Selected := False;
  UndoChangeSelection.SetPostSelection;
  if UndoChangeSelection.SelectionChanged then
  begin
    frmGoPhast.UndoStack.Submit(UndoChangeSelection);
  end
  else
  begin
    UndoChangeSelection.Free;
  end;
end;

procedure AddAScreenObjectToSelection(ScreenObject: TScreenObject);
var
  AScreenObject: TScreenObject;
  Index: Integer;
  UndoChangeSelection: TUndoChangeSelection;
begin
  if ScreenObject.Selected then
  begin
    Exit;
  end;
  UndoChangeSelection := TUndoChangeSelection.Create;
  for Index := 0 to frmGoPhast.PhastModel.ScreenObjectCount - 1 do
  begin
    AScreenObject := frmGoPhast.PhastModel.ScreenObjects[Index];
    if AScreenObject.ViewDirection <> ScreenObject.ViewDirection then
    begin
      AScreenObject.Selected := False;
    end;
  end;
  ScreenObject.Selected := True;
  UndoChangeSelection.SetPostSelection;
  if UndoChangeSelection.SelectionChanged then
  begin
    frmGoPhast.UndoStack.Submit(UndoChangeSelection);
  end
  else
  begin
    UndoChangeSelection.Free;
  end;
end;


procedure SelectMultipleScreenObjects(ScreenObjects: TScreenObjectList);
var
  AScreenObject: TScreenObject;
  Index: Integer;
  UndoChangeSelection: TUndoChangeSelection;
begin
  UndoChangeSelection := TUndoChangeSelection.Create;
  for Index := 0 to frmGoPhast.PhastModel.ScreenObjectCount - 1 do
  begin
    AScreenObject := frmGoPhast.PhastModel.ScreenObjects[Index];
    AScreenObject.Selected := False;
  end;
  for Index := 0 to ScreenObjects.Count - 1 do
  begin
    AScreenObject := ScreenObjects[Index];
    AScreenObject.Selected := True;
  end;

  UndoChangeSelection.SetPostSelection;
  if UndoChangeSelection.SelectionChanged then
  begin
    frmGoPhast.UndoStack.Submit(UndoChangeSelection);
  end
  else
  begin
    UndoChangeSelection.Free;
  end;
end;

procedure HideMultipleScreenObjects(ScreenObjects: TScreenObjectList);
var
  AScreenObject: TScreenObject;
  Index: Integer;
  UndoChangeSelection: TUndoChangeSelection;
begin
  UndoChangeSelection := TUndoChangeSelection.Create;
  for Index := 0 to ScreenObjects.Count - 1 do
  begin
    AScreenObject := ScreenObjects[Index];
    AScreenObject.Visible := False;
  end;

  UndoChangeSelection.SetPostSelection;
  if UndoChangeSelection.SelectionChanged then
  begin
    frmGoPhast.UndoStack.Submit(UndoChangeSelection);
  end
  else
  begin
    UndoChangeSelection.Free;
  end;
end;

{ TScreenObjectClipboard }

constructor TScreenObjectClipboard.Create(AOwner: TComponent);
begin
  inherited;
  FScreenObjects := TScreenObjectCollection.Create(AOwner as TBaseModel);
end;

destructor TScreenObjectClipboard.Destroy;
begin
  FScreenObjects.Free;
  inherited;
end;

procedure TScreenObjectClipboard.SetScreenObjects(
  const Value: TScreenObjectCollection);
begin
  FScreenObjects.Assign(Value);
end;

procedure TScreenObjectClipboard.UpdateModel(Model: TBaseModel);
begin
  Assert((Model = nil) or (Model is TPhastModel));
  FScreenObjects.FModel := Model;
end;

{ TCachedCells }

constructor TCachedCells.Create;
begin
  FCachedLists := TCMList.Create;
end;

destructor TCachedCells.Destroy;
begin
  FCachedLists.Free;
  inherited;
end;

procedure TCachedCells.Invalidate;
begin
  FCachedLists.Invalidate;
end;

function TCachedCells.RestoreFromCache(CellList: TCellAssignmentList;
  EvalAt: TEvaluatedAt; Orientation: TDataSetOrientation;
  AssignmentLocation: TAssignmentLocation; const EncloseAnnotation,
  IntersectAnnotation: string; AModel: TBaseModel): boolean;
var
  CachedList: TCellListsModelAssociation;
begin
  FCachedLists.GetCachedLists(AModel, CachedList);
  result := (CachedList.FCachedLists[AssignmentLocation] <> nil) and (FEvalAt = EvalAt)
    and (FOrientation = Orientation);
//    and (FAssignmentLocation = AssignmentLocation);
  if result then
  begin
    CellList.Assign(CachedList.FCachedLists[AssignmentLocation],
      EncloseAnnotation, IntersectAnnotation);
  end;
end;

procedure TCachedCells.UpdateCache(CellList: TCellAssignmentList;
  EvalAt: TEvaluatedAt; Orientation: TDataSetOrientation;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
var
  Index: Integer;
  Cell: TCellAssignment;
  CachedList: TCellListsModelAssociation;
begin
  FCachedLists.GetCachedLists(AModel, CachedList);
  CachedList.FCachedLists[AssignmentLocation].Free;
  CachedList.FCachedLists[AssignmentLocation] := TCellAssignmentList.Create;
  FEvalAt := EvalAt;
  FOrientation := Orientation;
  CachedList.FCachedLists[AssignmentLocation].FList.Capacity := CellList.Count;
  for Index := 0 to CellList.Count - 1 do
  begin
    Cell := CellList[Index];
    CachedList.FCachedLists[AssignmentLocation].Add(TCellAssignment.CreateFromCell(Cell));
  end;
  CachedList.FCachedLists[AssignmentLocation].Cache;
end;

function FindIntersectionPoints(Poly1, Poly2: TSubPolygon;
  var Intersections: TIntersectionArray;
  var Count: integer): boolean;
  function SimpleIntersection: boolean;
  var
    Index1: Integer;
    Index2: Integer;
  begin
    result := False;
    for Index1 := Poly1.Start to Poly1.Count - 1 do
    begin
      for Index2 := Poly2.Start to Poly2.Count - 1 do
      begin
        if Intersect(Poly1.Points[Index1],
          Poly1.Points[Index1+1],
          Poly2.Points[Index2],
          Poly2.Points[Index2+1]) then
        begin
          result := True;

          if Length(Intersections) = Count then
          begin
            if Length(Intersections) = 0 then
            begin
              SetLength(Intersections, 4);
            end
            else
            begin
              SetLength(Intersections, Count*2);
            end;
          end;

          Intersections[Count].Point :=
            IntersectionPoint(Poly1.Points[Index1],Poly1.Points[Index1+1],
            Poly2.Points[Index2],Poly2.Points[Index2+1]);

          Intersections[Count].Location1.Position := Index1+1;
          Intersections[Count].Location1.New := False;
          if IsEqual(Poly1.Points[Index1+1],Intersections[Count].Point) then
          begin
            Poly1.Points[Index1+1] := Intersections[Count].Point;
            Intersections[Count].Location1.New := True;
          end
          else if IsEqual(Poly1.Points[Index1],Intersections[Count].Point) then
          begin
            Poly1.Points[Index1] := Intersections[Count].Point;
            Intersections[Count].Location1.New := True;
            Intersections[Count].Location1.Position := Index1;
          end;

          Intersections[Count].Location2.Position := Index2+1;
          Intersections[Count].Location2.New := False;
          if IsEqual(Poly2.Points[Index2+1],Intersections[Count].Point) then
          begin
            Poly2.Points[Index2+1] := Intersections[Count].Point;
            Intersections[Count].Location2.New := True;
          end
          else if IsEqual(Poly2.Points[Index2],Intersections[Count].Point) then
          begin
            Poly2.Points[Index2] := Intersections[Count].Point;
            Intersections[Count].Location2.New := True;
            Intersections[Count].Location2.Position := Index2;
          end;
          
          Inc(Count);
        end;
      end;
    end;
  end;
begin
  result := False;
  if ((Poly1.MinX <= Poly2.MaxX) and (Poly1.MaxX >= Poly2.MinX)) or
    ((Poly2.MinX <= Poly1.MaxX) and (Poly2.MaxX >= Poly1.MinX)) then
  begin
    if ((Poly1.MinY <= Poly2.MaxY) and (Poly1.MaxY >= Poly2.MinY)) or
      ((Poly2.MinY <= Poly1.MaxY) and (Poly2.MaxY >= Poly1.MinY)) then
    begin
      if Poly1.Count > Poly2.Count then
      begin
        if Poly1.SubPolygon1 <> nil then
        begin
          result := FindIntersectionPoints(Poly1.SubPolygon1, Poly2,
            Intersections, Count)
            or FindIntersectionPoints(Poly1.SubPolygon2, Poly2,
            Intersections, Count)
        end
        else
        begin
          Assert(Poly2.SubPolygon1 = nil);
          result := SimpleIntersection;
        end;
      end
      else
      begin
        if Poly2.SubPolygon1 <> nil then
        begin
          result := FindIntersectionPoints(Poly1, Poly2.SubPolygon1,
            Intersections, Count)
            or FindIntersectionPoints(Poly1, Poly2.SubPolygon2,
            Intersections, Count)
        end
        else
        begin
          Assert(Poly1.SubPolygon1 = nil);
          result := SimpleIntersection;
        end;
      end;
    end;
  end;
end;

function TCustomInterpolatedBoundary.BoundaryDataSetFormula(DataSetName: string): string;
var
  BoundaryPosition: Integer;
  LocalModel: TPhastModel;
  DataArray: TDataArray;
begin
  LocalModel := (Model as TPhastModel);
  BoundaryPosition := LocalModel.DataArrayManager.IndexOfBoundaryDataSet(DataSetName);
  DataArray := LocalModel.DataArrayManager.BoundaryDataSets[BoundaryPosition];
  BoundaryPosition := ScreenObject.IndexOfBoundaryDataSet(DataArray);
  result := ScreenObject.BoundaryDataSetFormulas[BoundaryPosition];
end;

{ TCellElementLeaf }

constructor TCellElementLeaf.Create(Segment: TCellElementSegment;
  ViewDirection: TViewDirection);
var
  FirstPoint: TPoint2D;
  SecondPoint: TPoint2D;
begin
  FSegment := Segment;
  FirstPoint := Segment.FirstPointRealCoord(ViewDirection);
  SecondPoint := Segment.SecondPointRealCoord(ViewDirection);
  FX1 := Min(FirstPoint.x, SecondPoint.x);
  FX2 := Max(FirstPoint.x, SecondPoint.x);
  FY1 := Min(FirstPoint.y, SecondPoint.y);
  FY2 := Max(FirstPoint.y, SecondPoint.y);
end;

function TCellElementLeaf.GetCoordinate(Depth: integer): double;
begin
  case Depth of
    0:  result := FX1;
    1:  result := FX2;
    2:  result := FY1;
    3:  result := FY2;
    else
    begin
      result := 0;
      Assert(False);
    end;
  end;
end;

{ TCellElementLeafList }

function TCellElementLeafList.CoordinateCount: integer;
begin
  result := 4;
end;

constructor TCellElementLeafList.Create;
begin
  inherited;
  OwnsObjects := True;
end;

{ TPointValue }

procedure TPointValue.Assign(Source: TPersistent);
var
  AnotherPointValue: TPointValue;
begin
  // if Assign is updated, update IsSame too.
  if Source is TPointValue then
  begin
    AnotherPointValue := TPointValue(Source);
    Name := AnotherPointValue.Name;
    Value := AnotherPointValue.Value;
  end;
  inherited;
end;

function TPointValue.GetValue: double;
begin
  result := Min(FValue,  1.78E308);
  result := Max(result, -1.78E308);
end;

procedure TPointValue.InvalidateSwrReach;
var
  LocalModel: TCustomModel;
  SwrReachNumberArray: TDataArray;
begin
  LocalModel := Model as TCustomModel;
  if LocalModel <> nil then
  begin
    SwrReachNumberArray := LocalModel.DataArrayManager.
      GetDataSetByName(KSwrReach);
    if SwrReachNumberArray <> nil then
    begin
      SwrReachNumberArray.Invalidate;
    end;
  end;
end;

function TPointValue.IsSame(AnotherItem: TOrderedItem): boolean;
var
  AnotherPointValue: TPointValue;
begin
  result := AnotherItem is TPointValue;
  if result then
  begin
    AnotherPointValue := TPointValue(AnotherItem);
    result := (AnsiCompareText(Name, AnotherPointValue.Name) = 0)
      and (Value = AnotherPointValue.Value);
  end;
end;

procedure TPointValue.SetName(const Value: string);
begin
  if FName <> Value then
  begin
    if (AnsiCompareText(FName, KReachString) = 0)
      or (AnsiCompareText(Value, KReachString) = 0) then
    begin
      InvalidateSwrReach;
    end;
  end;
  SetCaseInsensitiveStringProperty(FName, Value);
end;

procedure TPointValue.SetValue(const Value: double);
begin
  if FValue <> Value then
  begin
    if (AnsiCompareText(FName, KReachString) = 0) then
    begin
      InvalidateSwrReach;
    end;
  end;
  SetRealProperty(FValue, Value);
end;

{ TPointValues }

function TPointValues.Add: TPointValue;
begin
  result := inherited Add as TPointValue;
end;

constructor TPointValues.Create(Model: IModelForTOrderedCollection);
begin
  inherited Create(TPointValue, Model);
end;

function TPointValues.GetItems(Index: Integer): TPointValue;
begin
  result := inherited Items[Index] as TPointValue;
end;

procedure TPointValues.SetItems(Index: Integer; const Value: TPointValue);
begin
  inherited Items[Index] := Value;
end;

{ TPointValuesItem }

procedure TPointValuesItem.Assign(Source: TPersistent);
var
  SourceValues: TPointValuesItem;
begin
  // if Assign is updated, update IsSame too.
  if Source is TPointValuesItem then
  begin
    SourceValues := TPointValuesItem(Source);
    Position := SourceValues.Position;
    Values := SourceValues.Values;
  end;
  inherited;
end;

constructor TPointValuesItem.Create(Collection: TCollection);
begin
  inherited;
  FValues:= TPointValues.Create(Model as TCustomModel);
end;

destructor TPointValuesItem.Destroy;
begin
  FValues.Free;
  if Collection <> nil then
  begin
    (Collection as TPointPositionValues).FItemArray := nil;
  end;
  inherited;
end;

function TPointValuesItem.GetValue(Index: integer): double;
begin
  result := (Values.Items[Index] as TPointValue).Value;
end;

function TPointValuesItem.IndexOfName(AName: string): integer;
var
  Item: TPointValue;
  Index: integer;
begin
  result := -1;
  for Index := 0 to Values.Count - 1 do
  begin
    Item := Values.Items[Index] as TPointValue;
    if AnsiCompareText(Item.Name, AName) = 0 then
    begin
      result := Index;
      Exit;
    end;
  end;
end;

function TPointValuesItem.IsSame(AnotherItem: TOrderedItem): boolean;
var
  SourceValues: TPointValuesItem;
begin
  result := AnotherItem is TPointValuesItem;
  if result then
  begin
    SourceValues := TPointValuesItem(AnotherItem);
    result := (Position = SourceValues.Position)
      and Values.IsSame(SourceValues.Values);
  end;
end;

procedure TPointValuesItem.SetPosition(const Value: integer);
begin
  SetIntegerProperty(FPosition, Value);
end;

procedure TPointValuesItem.SetValue(Index: integer; const Value: double);
begin
  (Values.Items[Index] as TPointValue).Value := Value;
end;

procedure TPointValuesItem.SetValues(const Value: TPointValues);
begin
  FValues.Assign(Value);
end;

{ TPointPositionValues }

function TPointPositionValues.Add: TPointValuesItem;
begin
  result := inherited Add as TPointValuesItem;
  FItemArray := nil;
end;

constructor TPointPositionValues.Create(Model: IModelForTOrderedCollection);
begin
  inherited Create(TPointValuesItem, Model);
end;

function TPointPositionValues.GetItem(Index: Integer): TPointValuesItem;
begin
  result := inherited Items[Index] as TPointValuesItem;
end;

function TPointPositionValues.GetItemByPosition(
  APosition: integer): TPointValuesItem;
var
  PositionInItems: Integer;
begin
  PositionInItems := IndexOfPosition(APosition);
  if PositionInItems >= 0 then
  begin
    result := Items[PositionInItems] as TPointValuesItem;
  end
  else
  begin
    result := nil;
  end;
end;

function TPointPositionValues.IndexOfPosition(APosition: integer): integer;
var
  Index: Integer;
  Item: TPointValuesItem;
begin
  Assert(APosition >= 0);
  result := -1;
  if not Assigned(FItemArray) and (Count > 0) then
  begin
    Sort;
    Item := Items[Count-1] as TPointValuesItem;
    SetLength(FItemArray, Item.Position + 1);
    for Index := 0 to Length(FItemArray) -1 do
    begin
      FItemArray[Index] := nil;
    end;
    for Index := 0 to Count - 1 do
    begin
      Item := Items[Index] as TPointValuesItem;
      Assert(Item.Position >= 0);
      Assert(Item.Position < Length(FItemArray));
      // FItemArray[Item.Position] should be nil but due to a bug it might not
      // be nil.
//      Assert(FItemArray[Item.Position] = nil);
      FItemArray[Item.Position] := Item;
    end;
  end;
  if APosition < Length(FItemArray) then
  begin
    if FItemArray[APosition] <> nil then
    begin
      Item := FItemArray[APosition] as TPointValuesItem;
      result := Item.Index;
    end;
  end;
  
{  for Index := 0 to Count - 1 do
  begin
    Item := Items[Index] as TPointValuesItem;
    if Item.Position = APosition then
    begin
      result := Index;
      Exit;
    end;
  end;}
end;

procedure TPointPositionValues.RemoveUnusedItems;
var
  ItemIndex: Integer;
  AnItem: TPointValuesItem;
begin
  for ItemIndex := Count - 1 downto 0 do
  begin
    AnItem := Items[ItemIndex];
    if AnItem.Values.Count = 0 then
    begin
      AnItem.Free;
    end;
  end;
end;

function ComparePointValuesItems(Item1, Item2: Pointer): Integer;
var
  Pv1, Pv2: TPointValuesItem;
begin
  Pv1 := Item1;
  Pv2 := Item2;
  result := Pv1.Position - Pv2.Position;
end;

procedure TPointPositionValues.SetItem(Index: Integer;
  const Value: TPointValuesItem);
begin
  inherited Items[Index] := Value;
  FItemArray := nil;
end;

procedure TPointPositionValues.Sort;
var
  List: TList;
  Index: Integer;
  PVItem: TPointValuesItem;
begin
  List := TList.Create;
  try
    List.Capacity := Count;
    for Index := 0 to Count - 1 do
    begin
      List.Add(Items[Index])
    end;
    List.Sort(ComparePointValuesItems);
    for Index := 0 to List.Count - 1 do
    begin
      PVItem := List[Index];
      PVItem.Index := Index;
    end;
  finally
    List.Free;
  end;
  FItemArray := nil;
end;

{ TModflowLGRDelegate }

constructor TModflowLGRDelegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msModflowLGR;
end;

{ TLinkedChildModelItem }

//procedure TLinkedChildModelItem.Assign(Source: TPersistent);
//begin
//  if Source is TLinkedChildModelItem then
//  begin
//    ChildModelName := TLinkedChildModelItem(Source).ChildModelName;
//  end
//  else
//  begin
//    inherited;
//  end;
//end;
//
//function TLinkedChildModelItem.GetChildModel: TObject;
//var
//  ChildIndex: Integer;
//  Item: TChildModelItem;
//begin
//  if FChildModelName = '' then
//  begin
//    FChildModel := nil;
//  end
//  else
//  begin
//    if FChildModel = nil then
//    begin
//      if frmGoPhast.PhastModel <> nil then
//      begin
//        for ChildIndex := 0 to frmGoPhast.PhastModel.ChildModels.Count - 1 do
//        begin
//          Item := frmGoPhast.PhastModel.ChildModels[ChildIndex];
//          if (Item.ChildModel as TChildModel).ModelName = FChildModelName then
//          begin
//            FChildModel := Item.ChildModel;
//            break;
//          end;
//        end;
//      end;
//    end;
//  end;
//  result := FChildModel;
//end;

//function TLinkedChildModelItem.GetChildModelName: string;
//begin
//  if FChildModel <> nil then
//  begin
//    result := (FChildModel as TChildModel).ModelName
//  end
//  else
//  begin
//    result := FChildModelName;
//  end;
//end;
//
//function TLinkedChildModelItem.ScreenObject: TScreenObject;
//begin
//  result := (Collection as TLinkedChildModelCollection).FScreenObject;
//end;
//
//procedure TLinkedChildModelItem.SetChildModel(const Value: TObject);
//begin
//  FChildModel := Value;
//  if FChildModel <> nil then
//  begin
//    FChildModelName := (FChildModel as TChildModel).ModelName;
//  end
//  else
//  begin
//    FChildModelName := '';
//  end;
//end;
//
//procedure TLinkedChildModelItem.SetChildModelName(const Value: string);
//var
//  AnObject: TObject;
//  AChildModel: TChildModel;
//begin
//  FChildModelName := Value;
//  // GetChildModel sets FChildModel;
//  AnObject := GetChildModel;
//  if (AnObject <> nil) and (Model <> nil) then
//  begin
//    AChildModel := AnObject as TChildModel;
//    AChildModel.HorizontalPositionScreenObject := ScreenObject;
//  end;
//end;

{ TLinkedChildModelCollection }

//constructor TLinkedChildModelCollection.Create(Model: TComponent; Parent: TScreenObject);
//begin
//  inherited Create(TLinkedChildModelItem, Model);
//  FScreenObject := Parent;
//end;
//
//function TLinkedChildModelCollection.GetItem(
//  Index: integer): TLinkedChildModelItem;
//begin
//  result := inherited Items[Index] as TLinkedChildModelItem;
//end;
//
//procedure TLinkedChildModelCollection.SetItem(Index: integer;
//  const Value: TLinkedChildModelItem);
//begin
//  inherited Items[Index] := Value;
//end;

{ TAssociateList }

function TAssociateList.Count: integer;
begin
  result := FList.Count;
end;

constructor TAssociateList.Create(ScreenObject: TScreenObject);
begin
  FList := TObjectList.Create;
  FScreenObject := ScreenObject;
  FCachedValue := nil;
end;

destructor TAssociateList.Destroy;
begin
  FList.Free;
  inherited;
end;

function TAssociateList.GetItem(Index: integer): TCellElementSegmentList;
begin
  result := FList[Index];
end;

function TAssociateList.GetSegmentList(Model: TBaseModel): TCellElementSegmentList;
var
  Index: Integer;
  ASegmentList: TCellElementSegmentList;
begin
  if (FCachedValue <> nil) and (FCachedValue.FModel = Model) then
  begin
    result := FCachedValue;
  end
  else
  begin
    result := nil;
    try
      for Index := 0 to FList.Count - 1 do
      begin
        ASegmentList := FList[Index];
        if ASegmentList.FModel = Model then
        begin
          result := ASegmentList;
          break;
        end;
      end;
      if result = nil then
      begin
        result := TCellElementSegmentList.Create(Model, FScreenObject);
        FList.Add(result);
      end;
    finally
      FCachedValue := result;
    end;
  end;
end;

procedure TAssociateList.InvalidateAll;
var
  Index: Integer;
  SegList: TCellElementSegmentList;
begin
  for Index := 0 to FList.Count - 1 do
  begin
    SegList := FList[Index];
    SegList.UpToDate := False;
  end;
end;

{ TCMList }

constructor TCMList.Create;
begin
  inherited;
  FList := TObjectList.Create;
end;

destructor TCMList.Destroy;
begin
  FList.Free;
  inherited;
end;

procedure TCMList.GetCachedLists(Model: TBaseModel; var result: TCellListsModelAssociation);
var
  Index: Integer;
  Assoc: TCellListsModelAssociation;
begin
  Assert(Model <> nil);
  if Model = FCachedModel then
  begin
    result := FCachedResult;
    Exit;
  end;
  FCachedResult := nil;
  for Index := 0 to FList.Count - 1 do
  begin
    Assoc := FList[Index];
    if Assoc.FModel = Model then
    begin
      FCachedModel := Model;
      FCachedResult := Assoc;
      break;
    end;
  end;
  if FCachedResult = nil then
  begin
    FCachedResult := TCellListsModelAssociation.Create(Model);
    FList.Add(FCachedResult);
    FCachedModel := Model;
  end;
  result := FCachedResult;
end;

procedure TCMList.Invalidate;
begin
  FList.Clear;
  FCachedModel := nil;
  FCachedResult := nil;
end;

{ TCellListsModelAssociation }

constructor TCellListsModelAssociation.Create(Model: TBaseModel);
begin
  FModel := Model;
end;

destructor TCellListsModelAssociation.Destroy;
var
  Index: TAssignmentLocation;
begin
  for Index := Low(TAssignmentLocation) to High(TAssignmentLocation) do
  begin
    FCachedLists[Index].Free;
  end;
  inherited;
end;

{ TUsedWithModel }

procedure TUsedWithModelItem.Assign(Source: TPersistent);
begin
  if Source is TUsedWithModelItem then
  begin
    ModelName := TUsedWithModelItem(Source).ModelName;
  end
  else
  begin
    inherited;
  end;
end;

function TUsedWithModelItem.GetModelName: string;
begin
  if FUsedModel = nil then
  begin
    result := FModelName;
  end
  else
  begin
    if FUsedModel is TChildModel then
    begin
      result := TChildModel(FUsedModel).ModelName;
    end
    else
    begin
      result := StrParentModel;
    end;
  end;
end;

function TUsedWithModelItem.GetUsedModel: TBaseModel;
var
  Index : integer;
  ChildModel: TChildModel;
begin
  result := FUsedModel;
  if result = nil then
  begin
    if FModelName = StrParentModel then
    begin
      result := frmGoPhast.PhastModel;
    end
    else
    begin
      for Index := 0 to frmGoPhast.PhastModel.ChildModels.Count - 1 do
      begin
        ChildModel := frmGoPhast.PhastModel.ChildModels[Index].ChildModel;
        if ChildModel <> nil then
        begin
          if ChildModel.ModelName = FModelName then
          begin
            result := ChildModel;
            break;
          end;
        end;
      end;
    end;
    FUsedModel := result;
  end;
end;

function TUsedWithModelItem.Model: TBaseModel;
begin
  result := (Collection as TUsedWithModelCollection).Model;
end;

procedure TUsedWithModelItem.SetUsedModel(const Value: TBaseModel);
var
  NewModelName: string;
begin
  Assert(Value is TCustomModel);
  FUsedModel := Value;
  NewModelName :=   GetModelName;
  if FModelName <> NewModelName then
  begin
    FModelName := NewModelName;
    InvalidateModel;
  end;
end;

procedure TUsedWithModelItem.SetModelName(const Value: string);
var
  LocalModel: TPhastModel;
  ChildIndex: Integer;
  ChildModel: TChildModel;
begin
  if FModelName <> Value then
  begin
    FModelName := Value;
    InvalidateModel;
    LocalModel := Model as TPhastModel;
    if LocalModel <> nil then
    begin
      if Value = StrParentModel then
      begin
        FUsedModel := LocalModel
      end
      else
      begin
        for ChildIndex := 0 to LocalModel.ChildModels.Count - 1 do
        begin
          ChildModel := LocalModel.ChildModels[ChildIndex].ChildModel;
          if ChildModel <> nil then
          begin
            if FModelName = ChildModel.ModelName then
            begin
              FUsedModel := ChildModel;
              Exit;
            end;
          end;
        end;
        if not (csReading in LocalModel.ComponentState) then
        begin
          Assert(False);
        end;
      end;
    end;
  end;
end;

{ TUsedWithModelCollection }

procedure TUsedWithModelCollection.AddModel(AModel: TBaseModel);
var
  Index: Integer;
  AnItem: TUsedWithModelItem;
begin
  for Index := 0 to Count - 1 do
  begin
    AnItem := Items[Index] as TUsedWithModelItem;
    Assert(AnItem.UsedModel <> nil);
    if AnItem.UsedModel = AModel then
    begin
      Exit;
    end;
  end;
  AnItem := Add as TUsedWithModelItem;
  AnItem.UsedModel := AModel;
end;

procedure TUsedWithModelCollection.Assign(Source: TPersistent);
begin
  inherited;
  if Source is TUsedWithModelCollection then
  begin
    UsedWithAllModels := TUsedWithModelCollection(Source).UsedWithAllModels;
  end;
end;

constructor TUsedWithModelCollection.Create(Model: TBaseModel);
var
  InvalidateModelEvent: TNotifyEvent;
begin
  FModel := Model;
  if Model = nil then
  begin
    InvalidateModelEvent := nil;
  end
  else
  begin
    InvalidateModelEvent := Model.DoInvalidate;
  end;
  inherited Create(TUsedWithModelItem, InvalidateModelEvent);
  FUsedWithAllModels := True;
end;

function TUsedWithModelCollection.GetItem(Index: Integer): TUsedWithModelItem;
begin
  result := inherited Items[Index] as TUsedWithModelItem;
end;

procedure TUsedWithModelCollection.RemoveModel(AModel: TBaseModel);
var
  Index: Integer;
  AnItem: TUsedWithModelItem;
begin
  for Index := 0 to Count - 1 do
  begin
    AnItem := Items[Index] as TUsedWithModelItem;
    Assert(AnItem.UsedModel <> nil);
    if AnItem.UsedModel = AModel then
    begin
      Delete(Index);
      Exit;
    end;
  end;
end;

procedure TUsedWithModelCollection.SetItem(Index: Integer;
  const Value: TUsedWithModelItem);
begin
  inherited Items[Index] := Value;
end;

procedure TUsedWithModelCollection.SetUsedWithAllModels(const Value: boolean);
begin
  if FUsedWithAllModels <> Value then
  begin
    FUsedWithAllModels := Value;
    InvalidateModel;
  end;
end;

function TUsedWithModelCollection.UsesModel(AModel: TBaseModel): boolean;
var
  Index: Integer;
  AnItem: TUsedWithModelItem;
begin
  result := UsedWithAllModels or not frmGoPhast.PhastModel.LgrUsed;
  if not result then
  begin
    for Index := 0 to Count - 1 do
    begin
      AnItem := Items[Index] as TUsedWithModelItem;
      if AnItem.UsedModel = AModel then
      begin
        result := True;
        Exit;
      end;
    end;
  end;
end;

{ TTempSeg }

procedure TTempSeg.Assign(Source: TTempSeg);
begin
  FSeg := Source.FSeg;
end;

{ TModflowNWTDelegate }

constructor TModflowNWTDelegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msModflowNWT;
end;

{ TSutraDelegate }

function TCustomMeshDelegate.AssignElevations(const ColIndex, RowIndex,
  LayerIndex: integer; AModel: TBaseModel): boolean;
begin
  // merge this with modflow delegate function
  result := True;
  case FScreenObject.ElevationCount of
    ecZero:
      begin
        FScreenObject.FTopElevation := 0;
        FScreenObject.FBottomElevation := 0;
      end;
    ecOne:
      begin
        if not FScreenObject.IsHigher3DElevationAssigned(
          ColIndex, RowIndex, LayerIndex, AModel) then
        begin
          result := False;
        end;
        if result then
        begin
          FScreenObject.FTopElevation := FScreenObject.
            Higher3DElevations[AModel][LayerIndex, RowIndex, ColIndex];
          FScreenObject.FBottomElevation := FScreenObject.FTopElevation;
        end;
      end;
    ecTwo:
      begin
        if not FScreenObject.IsHigher3DElevationAssigned(
          ColIndex, RowIndex, LayerIndex, AModel) then
        begin
          result := False;
        end;
        if result then
        begin
          FScreenObject.FTopElevation := FScreenObject.
            Higher3DElevations[AModel][LayerIndex, RowIndex, ColIndex];
          FScreenObject.FBottomElevation := FScreenObject.
            Lower3DElevations[AModel][LayerIndex, RowIndex, ColIndex];
        end;
      end;
    else Assert(False);
  end;

end;

procedure TCustomMeshDelegate.AssignSelectedCells(AModel: TBaseModel);
var
  CellList: TCellAssignmentList;
  Index: Integer;
  Cell: TCellAssignment;
  Mesh: IMesh3D;
//  Mesh: TSutraMesh3D;
begin
  Mesh := (AModel as TCustomModel).Mesh3D;
  CellList := TCellAssignmentList.Create;
  try
    case FScreenObject.EvaluatedAt of
      eaBlocks:
        begin
          FSelectedCells.SetExtents(Mesh.LayerCount-1,
            1, Mesh.Mesh2DI.ElementCount);
        end;
      eaNodes:
        begin
          FSelectedCells.SetExtents(Mesh.LayerCount,
            1, Mesh.Mesh2DI.NodeCount);
        end;
      else Assert(False);
    end;
    GetCellsToAssign('', nil, FScreenObject.EvaluatedAt, CellList, alAll,
      AModel);
    for Index := 0 to CellList.Count - 1 do
    begin
      Cell := CellList[Index];
      FSelectedCells[Cell.Layer, Cell.Row, Cell.Column] := True;
    end;

  finally
    CellList.Free;
  end;
end;

procedure TCustomMeshDelegate.AssignValuesToFrontDataSet(const DataSet: TDataArray;
  OtherData: TObject; AModel: TBaseModel; UseLgrEdgeCells: TLgrCellTreatment;
  AssignmentLocation: TAssignmentLocation);
var
  DataSetFunction: string;
  Compiler: TRbwParser;
  Expression: TExpression;
  UsedVariables: TStringList;
  CellList: TCellAssignmentList;
  CellAssignment: TCellAssignment;
  AssignmentIndex: Integer;
  LocalModel: TCustomModel;
  DataObject: TModflowDataObject;
  NewFormula: string;
//  UsedFunction: string;
//  UsedExpression: TExpression;
//  VariablesForUsedExpression: TStringList;
begin
  LocalModel := AModel as TCustomModel;
  if (LocalModel.ModelSelection in SutraSelection)
    and (LocalModel.SutraMesh.MeshType in [mt2D, mtProfile]) then
  begin
    Exit;
  end;
  CellList := TCellAssignmentList.Create;
  try
    Assert(DataSet <> nil);
    Assert(AssignmentLocation = alAll);
    if not (DataSet.Orientation = dso3D) then
    begin
      FScreenObject.RemoveDataSet(DataSet);
      Exit;
    end;
    // DataSetUsed doesn't test for transient data sets.
//    if DataSetUsed(DataSet, OtherData, AModel) then
    begin
      UsedVariables := TStringList.Create;
      try
        try
          InitializeExpression(Compiler, DataSetFunction,
            Expression, DataSet,
            OtherData, LocalModel);
        except on EInvalidDataType do
          begin
            if OtherData = nil then
            begin
              raise;
            end
            else
            begin
              DataObject := OtherData as TModflowDataObject;
              NewFormula := '';
              case DataSet.DataType of
                rdtDouble:
                  begin
                    NewFormula := '0.';
                  end;
                rdtInteger:
                  begin
                    NewFormula := '0';
                  end;
                rdtBoolean:
                  begin
                    NewFormula := 'False';
                  end;
                rdtString:
                  begin
                    NewFormula := '""';
                  end;
                else Assert(False);
              end;
              frmFormulaErrors.AddFormulaError(FScreenObject.Name,
                DataObject.AlternateName, DataObject.DataSetFunction,
                Format(Str0sTreatedAs1s, [DataObject.DataSetFunction, NewFormula]));
              DataObject.DataSetFunction := NewFormula;
              InitializeExpression(Compiler, DataSetFunction,
                Expression, DataSet,
                OtherData, AModel);
            end;
          end;
        end;

        InitializeVariables(UsedVariables, DataSet, Expression, Compiler);

        GetCellsToAssign(DataSetFunction,
          OtherData,
          FScreenObject.EvaluatedAt,
          CellList,
          AssignmentLocation,
          AModel);

        ShowWarningNoCells(CellList);
        FScreenObject.UpdateImportedValues(DataSet);
        for AssignmentIndex := 0 to CellList.Count - 1 do
        begin
          CellAssignment := CellList[AssignmentIndex];
          UpdateCurrentSegment(CellAssignment.Segment);
          UpdateCurrentSection(CellAssignment.Section);
          AssignCellValue(UsedVariables, DataSet, CellAssignment.Layer,
            CellAssignment.Row, CellAssignment.Column, Compiler,
            CellAssignment.Annotation, Expression, OtherData,
            CellAssignment.Section, False);
        end;
      finally
        UsedVariables.Free;
        (AModel as TCustomModel).DataArrayManager.CacheDataArrays;
      end;
    end;
  finally
    CellList.Free;
  end;
end;

procedure TCustomMeshDelegate.AssignValuesToSideDataSet(const DataSet: TDataArray;
  OtherData: TObject; AModel: TBaseModel; UseLgrEdgeCells: TLgrCellTreatment;
  AssignmentLocation: TAssignmentLocation);
begin
  Assert(False);
end;

procedure TCustomMeshDelegate.AssignValuesToTopDataSet(const DataSet: TDataArray;
  OtherData: TObject; AModel: TBaseModel; UseLgrEdgeCells: TLgrCellTreatment;
  AssignmentLocation: TAssignmentLocation);
var
  DataSetFunction: string;
  Compiler: TRbwParser;
  Expression: TExpression;
  UsedVariables: TStringList;
  CellList: TCellAssignmentList;
  CellAssignment: TCellAssignment;
  AssignmentIndex: Integer;
  DataObject: TModflowDataObject;
  NewFormula: string;
//  UsedFunction: string;
//  UsedExpression: TExpression;
//  VariablesForUsedExpression: TStringList;
begin
  CellList := TCellAssignmentList.Create;
  try
    Assert(DataSet <> nil);
    Assert(AssignmentLocation = alAll);
    if not (DataSet.Orientation in [dsoTop, dso3D]) then
    begin
      FScreenObject.RemoveDataSet(DataSet);
      Exit;
    end;
    // DataSetUsed doesn't test for transient data sets.
//    if DataSetUsed(DataSet, OtherData, AModel) then
    begin
      UsedVariables := TStringList.Create;
//      VariablesForUsedExpression := TStringList.Create;
      try
        try
          InitializeExpression(Compiler, DataSetFunction,
            Expression, DataSet,
            OtherData, AModel);
        except on EInvalidDataType do
          begin
            if OtherData = nil then
            begin
              raise;
            end
            else
            begin
              DataObject := OtherData as TModflowDataObject;
              NewFormula := '';
              case DataSet.DataType of
                rdtDouble:
                  begin
                    NewFormula := '0.';
                  end;
                rdtInteger:
                  begin
                    NewFormula := '0';
                  end;
                rdtBoolean:
                  begin
                    NewFormula := 'False';
                  end;
                rdtString:
                  begin
                    NewFormula := '""';
                  end;
                else Assert(False);
              end;
              frmFormulaErrors.AddFormulaError(FScreenObject.Name,
                DataObject.AlternateName, DataObject.DataSetFunction,
                Format(Str0sTreatedAs1s, [DataObject.DataSetFunction, NewFormula]));
              DataObject.DataSetFunction := NewFormula;
              InitializeExpression(Compiler, DataSetFunction,
                Expression, DataSet,
                OtherData, AModel);
            end;
          end;
        end;

        InitializeVariables(UsedVariables, DataSet, Expression, Compiler);

        GetCellsToAssign(DataSetFunction,
          OtherData,
          FScreenObject.EvaluatedAt,
          CellList,
          AssignmentLocation,
          AModel);

        ShowWarningNoCells(CellList);
        FScreenObject.UpdateImportedValues(DataSet);
        for AssignmentIndex := 0 to CellList.Count - 1 do
        begin
          CellAssignment := CellList[AssignmentIndex];
          UpdateCurrentSegment(CellAssignment.Segment);
          UpdateCurrentSection(CellAssignment.Section);
          AssignCellValue(UsedVariables, DataSet, CellAssignment.Layer,
            CellAssignment.Row, CellAssignment.Column, Compiler,
            CellAssignment.Annotation, Expression, OtherData,
            CellAssignment.Section, False);
        end;
      finally
        UsedVariables.Free;
        (AModel as TCustomModel).DataArrayManager.CacheDataArrays;
      end;
    end;
  finally
    CellList.Free;
  end;
end;

constructor TSutra22Delegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msSutra22;
end;

procedure TCustomMeshDelegate.GetCellsToAssign(const DataSetFunction: string;
  OtherData: TObject; const EvaluatedAt: TEvaluatedAt;
  CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
  AModel: TBaseModel);
var
  Mesh: IMesh3D;
//  UsedFunction: string;
//  Compiler: TRbwParser;
//  UsedExpression: TExpression;
//  NameToDisplay: string;
//  VariablesForUsedExpression: TStringList;
//  CellIndex: Integer;
//  ACell: TCellAssignment;
begin
  Assert(not FScreenObject.Deleted);
  Mesh := (AModel as TCustomModel).Mesh3D;
  Assert(CellList.Count = 0);
  if (Mesh.Mesh2DI.NodeCount <= 0) or (Mesh.Mesh2DI.ElementCount <= 0)
    then
  begin
    Exit;
  end;
  case FScreenObject.ViewDirection of
    vdTop: GetTopCellsToAssign(DataSetFunction, OtherData,
      nil, CellList, AssignmentLocation, AModel);
    vdFront: GetFrontCellsToAssign(DataSetFunction, OtherData,
      nil, CellList, AssignmentLocation, AModel);
    vdSide: GetSideCellsToAssign(DataSetFunction, OtherData,
      nil, CellList, AssignmentLocation, AModel);
    else Assert(False);
  end;

  {if OtherData is TSutraDataObject then
  begin
    UsedFunction := TSutraDataObject(OtherData).UsedFunction;
    if UsedFunction <> 'True' then
    begin
      Compiler := GetCompiler(dso3D);
      try
        Compiler.Compile(UsedFunction);
      except on E: ERbwParserError do
        begin
          NameToDisplay := TSutraDataObject(OtherData).AlternateName;
          frmFormulaErrors.AddFormulaError(FScreenObject.Name,
            'Used', UsedFunction, StrInvalidFormula);
          UsedFunction := 'True';
          Compiler.Compile(UsedFunction);
        end;
      end;
      UsedExpression := Compiler.CurrentExpression;
      if UsedExpression.ResultType <> rdtBoolean then
      begin
        NameToDisplay := TSutraDataObject(OtherData).AlternateName;
//        MessageDlg(Format(StrThereIsAnErrorInUsed,
//          [FScreenObject.Name, NameToDisplay]), mtError, [mbOK], 0);
//        raise EInvalidDataType.Create  (Format(StrThereIsAnErrorInUsed,
//          [FScreenObject.Name, NameToDisplay]), UsedExpression.Decompile);
        frmFormulaErrors.AddFormulaError(FScreenObject.Name, 'Used',
          UsedExpression.Decompile,
          StrTheFormulaForUse);
        UsedFunction := 'True';
        Compiler.Compile(UsedFunction);
        UsedExpression := Compiler.CurrentExpression;
      end;

      VariablesForUsedExpression := TStringList.Create;
      try
        FScreenObject.InitilizeVariablesWithNilDataSet(UsedExpression,
          AModel, nil, VariablesForUsedExpression, Compiler);

        UpdateCurrentModel(AModel);
        UpdateCurrentScreenObject(FScreenObject);
        for CellIndex := CellList.Count - 1 downto 0 do
        begin
          ACell := CellList[CellIndex];
          UpdateGlobalLocations(ACell.Column, ACell.Row, ACell.Layer,
            EvaluatedAt, AModel);
          UpdateCurrentSegment(ACell.Segment);
          FScreenObject.UpdateVariables(VariablesForUsedExpression, nil,
             ACell.Layer, ACell.Row, ACell.Column,
            Compiler, EvaluatedAt, AModel);
          UsedExpression.Evaluate;
          if not UsedExpression.BooleanResult then
          begin
            CellList.Delete(CellIndex);
          end;
        end;
      finally
        VariablesForUsedExpression.Free;
      end;
    end;
  end;}
end;

procedure TCustomMeshDelegate.GetFrontCellsToAssign(const DataSetFunction: string;
  OtherData: TObject; const DataSet: TDataArray; CellList: TCellAssignmentList;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
const
  Zero: NativeInt = 0;
var
  EvaluatedAt: TEvaluatedAt;
  Orientation: TDataSetOrientation;
//  Mesh: TSutraMesh3D;
  IAnnotation: string;
  EAnnotation: string;
//  LayerLimit: Integer;
//  ColLimit: Integer;
  LayerIndex: Integer;
  ColIndex: Integer;
//  Element3D: TSutraElement3D;
//  Node3D: TSutraNode3D;
//  CenterPoint: TPoint3D;
  SectionIndex: Integer;
//  PointDistance: Extended;
//  RotatedX: Extended;
  RotatedY: Extended;
  Limits: TLimitsArray;
  UpperLimit: Double;
  LowerLimit: Double;
  AssignmentMethod: TAssignmentMethod;
  Annotation: string;
  Segments: TCellElementSegmentList;
  ASegment: TCellElementSegment;
  SelectX: Double;
  SelectY: Double;
  SegmentIndex: NativeInt;
//  PointAngle: Extended;
  ACellAssignment: TCellAssignment;
  Block: T2DBlock;
  Points: TQuadPointInRegionArray;
  Locations: TRbwQuadTree;
  StoredPoint: TStoredNodeOrElement;
  index: integer;
  Mesh: IMesh3D;
  PointIndex: Integer;
  UsedCells: array of array of array of Boolean;
  LocalModel: TCustomModel;
  CellIndex: Integer;
  ACell: TCellAssignment;
  PositionCount: NativeInt;
  procedure GetCellBounds(LayerIndex,ColIndex: integer);
  begin
    UpperLimit := Limits[LayerIndex,ColIndex].UpperLimit;
    LowerLimit := Limits[LayerIndex,ColIndex].LowerLimit;
  end;
  function ElevationOK: boolean;
  begin
    result := False;
    case FScreenObject.ElevationCount of
      ecZero:
        begin
          result := True;
        end;
      ecOne:
        begin
          result := (FScreenObject.TopElevation >= LowerLimit)
            and (FScreenObject.BottomElevation <= UpperLimit);
        end;
      ecTwo:
        begin
          result := (FScreenObject.TopElevation > RotatedY)
            and (FScreenObject.BottomElevation < RotatedY);
        end;
      else Assert(False);
    end;

  end;
  function SegmentOK(ASegment: TCellElementSegment): boolean;
  var
    TopSeg: TSegment2D;
    Element2D: IElement2D;
    Node2D: INode2D;
    IntSectSeg: TSegment2D;
    IntSectSegArray: TSegment2DArray;
    TopPolygon: TPolygon2D;
    PointIndex: Integer;
    TempPoints: TRealPointArray;
    NodeCellOutline: TVertexArray;
    NodeIndex: Integer;
    CellOutline: TGpcPolygonClass;
    AVertex: Tgpc_vertex;
    TopPoly: TGpcPolygonClass;
    IntersectArea: double;
    IntersectionContours: TGpcPolygonClass;
    ContourIndex: Integer;
    procedure RotatePoint(var APoint: TPoint2D);
    var
      temp: TPoint2D;
      Angle: Double;
    begin
      Angle := FScreenObject.SutraAngle;
      if (Angle <> 0) then
      begin
        temp.X := Cos(Angle) * APoint.X - Sin(Angle) * APoint.Y;
        temp.Y := Sin(Angle) * APoint.X + Cos(Angle) * APoint.Y;
        APoint := temp;
      end;
    end;
  begin
    result := False;
    case FScreenObject.ElevationCount of
      ecZero: ;  // do nothing
      ecOne:
        begin
          TopSeg[1].x := ASegment.X1;
          TopSeg[1].y := FScreenObject.FTopElevation;
          TopSeg[2].x := ASegment.X2;
          TopSeg[2].y := TopSeg[1].y;

          RotatePoint(TopSeg[1]);
          RotatePoint(TopSeg[2]);

          case FScreenObject.EvaluatedAt of
            eaBlocks:
              begin
                Element2D := Mesh.Mesh2DI.ElementsI2D[ASegment.Col];
                if not Element2D.Intersection(TopSeg, IntSectSeg) then
                begin
                  Exit;
                end;
              end;
            eaNodes:
              begin
                Node2D := Mesh.Mesh2DI.NodesI2D[ASegment.Col];
                if not Node2D.CellIntersection(TopSeg, IntSectSegArray) then
                begin
                  Exit;
                end;
              end;
            else
              Assert(False);
          end;
        end;
      ecTwo:
        begin
          if ASegment.X1 = ASegment.X2 then
          begin
            TopSeg[1].x := ASegment.X1;
            TopSeg[1].y := FScreenObject.FTopElevation;
            TopSeg[2].x := ASegment.X2;
            TopSeg[2].y := FScreenObject.FBottomElevation;

            RotatePoint(TopSeg[1]);
            RotatePoint(TopSeg[2]);

            case FScreenObject.EvaluatedAt of
              eaBlocks:
                begin
                  Element2D := Mesh.Mesh2DI.ElementsI2D[ASegment.Col];
                  if not Element2D.Intersection(TopSeg, IntSectSeg) then
                  begin
                    Exit;
                  end;
                end;
              eaNodes:
                begin
                  Node2D := Mesh.Mesh2DI.NodesI2D[ASegment.Col];
                  if not Node2D.CellIntersection(TopSeg, IntSectSegArray) then
                  begin
                    Exit;
                  end;
                end;
              else
                Assert(False);
            end;
          end
          else
          begin
            SetLength(TopPolygon, 4);
            TopPolygon[0].x := ASegment.x1;
            TopPolygon[0].y := FScreenObject.FTopElevation;
            TopPolygon[1].x := ASegment.x2;
            TopPolygon[1].y := FScreenObject.FTopElevation;
            TopPolygon[2].x := ASegment.x2;
            TopPolygon[2].y := FScreenObject.FBottomElevation;
            TopPolygon[3].x := ASegment.x1;
            TopPolygon[3].y := FScreenObject.FBottomElevation;
            for PointIndex := 0 to Length(TopPolygon) - 1 do
            begin
              RotatePoint(TopPolygon[PointIndex]);
            end;

            case FScreenObject.EvaluatedAt of
              eaBlocks:
                begin
                  Element2D := Mesh.Mesh2DI.ElementsI2D[ASegment.Col];
//                  Assert(Element2D.NodeCount = 4);
                  SetLength(TempPoints,Element2D.NodeCount);
                  for NodeIndex := 0 to Element2D.NodeCount - 1 do
                  begin
                    TempPoints[NodeIndex] :=
                      Element2D.Nodes[NodeIndex].Location;
                  end;
                end;
              eaNodes:
                begin
                  Node2D := Mesh.Mesh2DI.NodesI2D[ASegment.Col];
                  (Node2D as TSutraNode2D).GetCellOutline(NodeCellOutline);
                  SetLength(TempPoints, Length(NodeCellOutline));
                  for NodeIndex := 0 to Length(NodeCellOutline) - 1 do
                  begin
                    TempPoints[NodeIndex] := NodeCellOutline[NodeIndex];
                  end;
                end;
              else Assert(False);
            end;

            CellOutline := TGpcPolygonClass.Create;
            TopPoly := TGpcPolygonClass.Create;
            try
              CellOutline.NumberOfContours := 1;
              CellOutline.VertexCount[0] := Length(TempPoints);
              for PointIndex := 0 to Length(TempPoints) - 1 do
              begin
                AVertex.x := TempPoints[PointIndex].x;
                AVertex.y := TempPoints[PointIndex].y;
                CellOutline.Vertices[0,PointIndex] := AVertex;
              end;

              TopPoly.NumberOfContours := 1;
              TopPoly.VertexCount[0] := Length(TopPolygon);
              for PointIndex := 0 to Length(TopPolygon) - 1 do
              begin
                AVertex.x := TopPolygon[PointIndex].x;
                AVertex.y := TopPolygon[PointIndex].y;
                TopPoly.Vertices[0,PointIndex] := AVertex;
              end;


              IntersectionContours := TGpcPolygonClass.CreateFromOperation(
                GPC_INT, CellOutline, TopPoly);
              try
                IntersectArea := 0.;
                for ContourIndex := 0 to IntersectionContours.NumberOfContours - 1 do
                begin
                  if IntersectionContours.Holes[ContourIndex] then
                  begin
                    IntersectArea := IntersectArea
                      - Abs(IntersectionContours.ContourArea(ContourIndex));
                  end
                  else
                  begin
                    IntersectArea := IntersectArea
                      + Abs(IntersectionContours.ContourArea(ContourIndex));
                  end;
                end;
                if IntersectArea = 0 then
                begin
                  Exit;
                end;
              finally
                IntersectionContours.Free;
              end;
            finally
              CellOutline.Free;
              TopPoly.Free;
            end
          end;
        end;
      else Assert(False);
    end;
    result := True;
  end;
begin
  Assert(CellList.Count = 0);
  if DataSet = nil then
  begin
    EvaluatedAt := FScreenObject.EvaluatedAt;
    Orientation := dso3D;
  end
  else
  begin
    EvaluatedAt := DataSet.EvaluatedAt;
    Orientation := DataSet.Orientation;
  end;
  LocalModel := AModel as TCustomModel;
  Mesh :=  LocalModel.Mesh3D;
  Assert(CellList.Count = 0);
  if (Mesh.Mesh2DI.NodeCount <= 0)
    or (Mesh.LayerCount <=0) then
  begin
    Exit;
  end;
  IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
  EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
  if FScreenObject.RestoreCellsFromCache(CellList, EvaluatedAt,
    Orientation, AssignmentLocation, EAnnotation, IAnnotation, AModel) then
  begin
    Exit;
  end;
  Mesh.FrontPolygons(FScreenObject.SutraAngle, EvaluatedAt, Limits);
  try
    UpdateCurrentScreenObject(FScreenObject);

    if (FScreenObject.SetValuesOfEnclosedCells
      or (FScreenObject.SetValuesOfIntersectedCells
      and (FScreenObject.ElevationCount <> ecZero)))
      and FScreenObject.Closed then
    begin
      Locations := nil;
      case EvaluatedAt of
        eaBlocks: Locations := Mesh.
          ElementCenters[FScreenObject.SutraAngle];
        eaNodes: Locations := (Mesh as TSutraMesh3d).Nodes.
          NodeLocations[FScreenObject.SutraAngle];
        else Assert(False);
      end;

      Block.XMin := FScreenObject.MinX;
      Block.XMax := FScreenObject.MaxX;
      Block.YMin := FScreenObject.MinY;
      Block.YMax := FScreenObject.MaxY;
      Locations.FindPointsInBlock(Block,Points);
      for index := 0 to Length(Points) - 1 do
      begin
        if FScreenObject.IsPointInside(
          Points[index].X, Points[index].Y, SectionIndex) then
        begin
          for PointIndex := 0 to Length(Points[index].Data) -1 do
          begin
            StoredPoint := Points[index].Data[PointIndex];
            LayerIndex := StoredPoint.Layer;
            ColIndex := StoredPoint.Col;
            RotatedY := StoredPoint.Y;
            if Orientation = dso3D then
            begin
              if not AssignElevations(ColIndex, 0, LayerIndex, AModel) then
              begin
                Continue;
              end;

              if (FScreenObject.ElevationCount = ecTwo)
                and not FScreenObject.SetValuesOfEnclosedCells then
              begin
                GetCellBounds(LayerIndex,ColIndex);
                if not (((UpperLimit >= FScreenObject.FTopElevation)
                  and (LowerLimit <= FScreenObject.FTopElevation))
                  or ((UpperLimit >= FScreenObject.FBottomElevation)
                  and (LowerLimit <= FScreenObject.FBottomElevation))) then
                begin
                  Continue;
                end;
              end
              else
              begin
                GetCellBounds(LayerIndex,ColIndex);
                if not ElevationOk then
                begin
                  if not (FScreenObject.SetValuesOfIntersectedCells
                  and (((UpperLimit >= FScreenObject.FTopElevation)
                  and (LowerLimit <= FScreenObject.FTopElevation))
                  or ((UpperLimit >= FScreenObject.FBottomElevation)
                  and (LowerLimit <= FScreenObject.FBottomElevation)))) then
                  begin
                    Continue;
                  end;
                end;
              end;

              if FScreenObject.SetValuesOfIntersectedCells
                and (FScreenObject.ElevationCount <> ecZero) then
              begin
                AssignmentMethod := amIntersect;
                if IAnnotation = '' then
                begin
                  IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
                end;
                Annotation := IAnnotation;
              end
              else
              begin
                AssignmentMethod := amEnclose;
                if EAnnotation = '' then
                begin
                  EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
                end;
                Annotation := EAnnotation;
              end;
              UpdateCurrentSection(SectionIndex);
              CellList.Add(TCellAssignment.Create(LayerIndex, 0, ColIndex,
                nil, SectionIndex, Annotation, AssignmentMethod));
            end
          end;
        end;
      end;

    end;
    if FScreenObject.SetValuesOfIntersectedCells then
    begin
      if FScreenObject.SetValuesOfEnclosedCells then
      begin
        if LocalModel.ModelSelection in SutraSelection then
        begin
          case EvaluatedAt of
            eaBlocks:
              begin
                SetLength(UsedCells, LocalModel.LayerCount+1, LocalModel.RowCount+1,
                  LocalModel.ColumnCount + 1);
              end;
            eaNodes:
              begin
                SetLength(UsedCells, LocalModel.LayerCount+1, LocalModel.RowCount+1,
                  LocalModel.Mesh3D.Mesh2DI.NodeCount + 1);
              end;
          end;
        end
        else
        begin
          SetLength(UsedCells, LocalModel.LayerCount+1, LocalModel.RowCount+1,
            LocalModel.ColumnCount + 1);
        end;
        for CellIndex := 0 to CellList.Count - 1 do
        begin
          ACell := CellList[CellIndex];
          UsedCells[ACell.Layer, ACell.Row, ACell.Column] := True;
        end;
      end;
      Segments := FScreenObject.Segments[AModel];
      SelectX := 0;
      SelectY := 0;
      case AssignmentLocation of
        alAll:
          begin
          end;
        alFirstVertex:
          begin
            if Segments.Count > 0 then
            begin
              ASegment := Segments[Zero];
              SelectX := ASegment.X1;
              SelectY := ASegment.Y1;
            end
            else
            begin
              SelectX := 0;
              SelectY := 0;
            end;
          end;
        alLastVertex:
          begin
            if Segments.Count > 0 then
            begin
              PositionCount := Segments.Count -1;
              ASegment := Segments[PositionCount];
              SelectX := ASegment.X2;
              SelectY := ASegment.Y2;
            end
            else
            begin
              SelectX := 0;
              SelectY := 0;
            end;
          end;
      else
        Assert(False);
      end;

      for SegmentIndex := 0 to Segments.Count - 1 do
      begin
        ASegment := Segments[SegmentIndex];
        case AssignmentLocation of
          alAll:
            begin
            end;
          alFirstVertex:
            begin
              if (SelectX <> ASegment.X1) or (SelectY <> ASegment.Y1) then
              begin
                Continue;
              end;
            end;
          alLastVertex:
            begin
              if (SelectX <> ASegment.X2) or (SelectY <> ASegment.Y2) then
              begin
                Continue;
              end;
            end;
        else
          Assert(False);
        end;

        if Orientation = dso3D then
        begin
          UpdateCurrentSegment(ASegment);
          if not AssignElevations(ASegment.Col, ASegment.Row,
            ASegment.Layer, AModel) then
          begin
            Continue;
          end;

          if not SegmentOK(ASegment) then
          begin
            Continue;
          end;

          UpdateCurrentSegment(ASegment);
          if IAnnotation = '' then
          begin
            IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
          end;
          Annotation := IAnnotation;
          if Orientation = dso3D then
          begin
            ACellAssignment := TCellAssignment.Create(ASegment.Layer, ASegment.Row,
              ASegment.Col, ASegment, ASegment.SectionIndex, Annotation,
              amIntersect);
//            CellList.Add(ACellAssignment);
          end
          else
          begin
            ACellAssignment := TCellAssignment.Create(0, ASegment.Row,
              ASegment.Col, ASegment, ASegment.SectionIndex, Annotation,
              amIntersect);
//            CellList.Add(ACellAssignment);
          end;
          ACellAssignment.SutraX := (ASegment.X1 + ASegment.X2)/2;
          ACellAssignment.SutraZ := (ASegment.Y1 + ASegment.Y2)/2;
          case FScreenObject.ElevationCount of
            ecZero:
              begin
                ACellAssignment.SutraY := 0;
              end;
            ecOne:
              begin
                ACellAssignment.SutraY := FScreenObject.FTopElevation;
              end;
            ecTwo:
              begin
                ACellAssignment.SutraY := (FScreenObject.FTopElevation
                  + FScreenObject.FBottomElevation)/2;
              end;
          end;
          if FScreenObject.SetValuesOfEnclosedCells then
          begin
            if UsedCells[ACellAssignment.Layer, ACellAssignment.Row, ACellAssignment.Column]
              and FScreenObject.SectionClosed[ASegment.SectionIndex] then
            begin
              ACellAssignment.Free;
            end
            else
            begin
              CellList.Add(ACellAssignment);
              UsedCells[ACellAssignment.Layer, ACellAssignment.Row, ACellAssignment.Column] := True;
            end;
          end
          else
          begin
            CellList.Add(ACellAssignment);
          end;
        end
      end;
    end;
  finally
    FScreenObject.CacheElevationArrays;
    FScreenObject.UpdateCellCache(CellList, EvaluatedAt, Orientation,
      AssignmentLocation, AModel);
  end;
end;

procedure TCustomMeshDelegate.GetSideCellsToAssign(const DataSetFunction: string;
  OtherData: TObject; const DataSet: TDataArray; CellList: TCellAssignmentList;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
begin
  Assert(False);
end;

procedure TCustomMeshDelegate.GetTopCellsToAssign(const DataSetFunction: string;
  OtherData: TObject; const DataSet: TDataArray; CellList: TCellAssignmentList;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
var
  LayerLimit: Integer;
  EAnnotation: string;
  IAnnotation: string;
  ASegment: TCellElementSegment;
  SegmentIndex: NativeInt;
  PriorRow: Integer;
  PriorCol: Integer;
  Annotation: string;
  ElevationIndex: Integer;
  LastElevationIndex: Integer;
  FirstElevationIndex: Integer;
  SectionIndex: Integer;
  ColIndex: Integer;
  Mesh: IMesh3D;
  LowerBound: Double;
  UpperBound: Double;
  Middle: double;
//  APoint: TPoint2D;
  EvalAt: TEvaluatedAt;
  Orientation: TDataSetOrientation;
  AssignmentMethod: TAssignmentMethod;
//  Limit: Integer;
  Element3D: IElement3D;
  Node3D: INode3D;
  Node2: INode3D;
  ACell: TCellAssignment;
  LayerIndex: Integer;
  Intersected: Boolean;
  PriorLayer: Integer;
  Locations: TRbwQuadTree;
  Block: T2DBlock;
  Points: TQuadPointInRegionArray;
  PointIndex: Integer;
  Element2D: IElement2D;
  Node2D: INode2D;
  AnObject: TInterfacedPhastCollectionItem;
  ObjectIndex: Integer;
  UsedCells: array of array of array of Boolean;
  LocalModel: TCustomModel;
  CellIndex: Integer;
//  ACell: TCellAssignment;
begin
  if DataSet = nil then
  begin
    EvalAt := FScreenObject.EvaluatedAt;
    Orientation := dso3D;
  end
  else
  begin
    if FScreenObject.EvaluatedAt <> DataSet.EvaluatedAt then
    begin
      Exit;
    end;
    EvalAt := DataSet.EvaluatedAt;
    Orientation := DataSet.Orientation;
  end;
  Assert(CellList <> nil);
  Assert(CellList.Count = 0);
  LocalModel := AModel as TCustomModel;
  Mesh := LocalModel.Mesh3D;
  IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
  EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
  UpdateCurrentScreenObject(FScreenObject);
  LayerLimit := -1;
  if FScreenObject.RestoreCellsFromCache(CellList, EvalAt,
    Orientation, AssignmentLocation, EAnnotation, IAnnotation, AModel) then
  begin
    Exit;
  end;
  try
    case EvalAt of
      eaBlocks:
        begin
          LayerLimit := Mesh.LayerCount - 1;
        end;
      eaNodes:
        begin
          LayerLimit := Mesh.LayerCount;
        end;
    else
      Assert(False);
    end;
    if (FScreenObject.SetValuesOfEnclosedCells
      or (FScreenObject.SetValuesOfIntersectedCells
      and (FScreenObject.ElevationCount <> ecZero)))
      and FScreenObject.Closed then
    begin
      Locations := nil;
      case EvalAt of
        eaBlocks:
          begin
            Locations := Mesh.Mesh2DI.ElementCenters;
          end;
        eaNodes:
          begin
            Locations := Mesh.Mesh2DI.NodesLocations;
          end;
        else Assert(False);
      end;

      Block.XMin := FScreenObject.MinX;
      Block.XMax := FScreenObject.MaxX;
      Block.YMin := FScreenObject.MinY;
      Block.YMax := FScreenObject.MaxY;

      Locations.FindPointsInBlock(Block, Points);
      for PointIndex := 0 to Length(Points) - 1 do
      begin
        if FScreenObject.IsPointInside(Points[PointIndex].X,
          Points[PointIndex].Y, SectionIndex) then
        begin
          for ObjectIndex := 0 to Length(Points[PointIndex].Data) -1 do
          begin
            ColIndex := -1;
            case EvalAt of
              eaBlocks:
                begin
                  AnObject := Points[PointIndex].Data[ObjectIndex];
                  Element2D := AnObject as IElement2D;
                  ColIndex := Element2D.ElementNumber;
                end;
              eaNodes:
                begin
                  AnObject := Points[PointIndex].Data[ObjectIndex];
                  Node2D := AnObject as INode2D;
                  ColIndex := Node2D.NodeNumber;
                end;
              else Assert(False);
            end;
            OtherIndex(0, ColIndex, FirstElevationIndex,
              LastElevationIndex, DataSet, AModel);
            if (FirstElevationIndex >= 0)
              and (LastElevationIndex <= LayerLimit) then
            begin
              for ElevationIndex := FirstElevationIndex to LastElevationIndex do
              begin
                case FScreenObject.ElevationCount of
                  ecZero: ; // do nothing
                  ecOne:
                    begin
                      if Mesh.Is3DMesh then
                      begin
                        FScreenObject.FTopElevation :=
                          FScreenObject.Higher3DElevations[AModel][
                            ElevationIndex, 0, ColIndex];
                        FScreenObject.FBottomElevation :=
                          FScreenObject.TopElevation
                      end;
                    end;
                  ecTwo:
                    begin
                      if Mesh.Is3DMesh then
                      begin
                        FScreenObject.FTopElevation :=
                          FScreenObject.Higher3DElevations[AModel][
                            ElevationIndex, 0, ColIndex];
                        FScreenObject.FBottomElevation :=
                          FScreenObject.Lower3DElevations[AModel][
                            ElevationIndex, 0, ColIndex];
                      end;
                    end;
                  else Assert(False);
                end;

                if not FScreenObject.SetValuesOfEnclosedCells then
                begin
                  AssignmentMethod := amIntersect;
                  if IAnnotation = '' then
                  begin
                    IAnnotation := IntersectAnnotation(
                      DataSetFunction, OtherData);
                  end;
                  Annotation := IAnnotation;
                end
                else
                begin
                  AssignmentMethod := amEnclose;
                  if EAnnotation = '' then
                  begin
                    EAnnotation := EncloseAnnotation(DataSetFunction, OtherData);
                  end;
                  Annotation := EAnnotation;
                end;
                UpdateCurrentSection(SectionIndex);

                UpperBound := 0;
                LowerBound := 0;
                if (FScreenObject.ElevationCount in [ecOne, ecTwo])
                  and (Mesh.Is3DMesh) then
                begin
                  Mesh.CheckUpdateElevations;
                  case EvalAt of
                    eaBlocks:
                      begin
                        Element3D := Mesh.ElementArrayI[ElevationIndex, ColIndex];
                        UpperBound := Element3D.UpperElevation;
                        LowerBound := Element3D.LowerElevation;
                      end;
                    eaNodes:
                      begin
                        Node3D := Mesh.NodeArrayI[ElevationIndex, ColIndex];
                        UpperBound := Node3D.Top;
                        LowerBound := Node3D.Bottom;
                      end;
                  else
                    Assert(False);
                  end;
                end;

                case Mesh.Is3DMesh of
                  False:
                    begin
                      CellList.Add(TCellAssignment.Create(ElevationIndex,
                        0, ColIndex, nil, SectionIndex, Annotation,
                        AssignmentMethod));
                    end;
                  True:
                    begin
                      case FScreenObject.ElevationCount of
                        ecZero:
                          begin
                            CellList.Add(TCellAssignment.Create(ElevationIndex,
                              0, ColIndex, nil, SectionIndex, Annotation,
                              AssignmentMethod));
                          end;
                        ecOne:
                          begin
                            if (Orientation = dsoTop) or
                              ((FScreenObject.TopElevation >= LowerBound)
                              and ((FScreenObject.BottomElevation < UpperBound))
                              or ((FScreenObject.BottomElevation = UpperBound)
                              and (ElevationIndex = LayerLimit))
                              or ((FScreenObject.TopElevation = UpperBound)
                              and (ElevationIndex = 0))) then
                            begin
                              CellList.Add(TCellAssignment.Create(ElevationIndex,
                                0, ColIndex, nil, SectionIndex, Annotation,
                                AssignmentMethod));
                            end;
                          end;
                        ecTwo:
                          begin
                            if not FScreenObject.SetValuesOfEnclosedCells then
                            begin
                              if (Orientation = dsoTop)
                                or ((UpperBound >= FScreenObject.TopElevation)
                                and (LowerBound <= FScreenObject.TopElevation))
                                or ((UpperBound >= FScreenObject.BottomElevation)
                                and (LowerBound <= FScreenObject.BottomElevation)) then
                              begin
                                CellList.Add(TCellAssignment.Create(ElevationIndex,
                                  0, ColIndex, nil, SectionIndex, Annotation,
                                  AssignmentMethod));
                              end;
                            end
                            else
                            begin
                              case FScreenObject.EvaluatedAt of
                                eaBlocks:
                                  begin
                                    Middle := (LowerBound + UpperBound)/2;
                                    if (Orientation = dsoTop) or
                                      ((FScreenObject.TopElevation >= Middle)
                                      and (FScreenObject.BottomElevation <= Middle)) then
                                    begin
                                      CellList.Add(TCellAssignment.Create(
                                        ElevationIndex, 0,
                                        ColIndex, nil, SectionIndex, Annotation,
                                        AssignmentMethod));
                                    end
                                    else if FScreenObject.SetValuesOfIntersectedCells then
                                    begin
                                      if (Orientation = dsoTop)
                                        or ((UpperBound >= FScreenObject.TopElevation)
                                        and (LowerBound <= FScreenObject.TopElevation))
                                        or ((UpperBound >= FScreenObject.BottomElevation)
                                        and (LowerBound <= FScreenObject.BottomElevation)) then
                                      begin
                                        CellList.Add(TCellAssignment.Create(ElevationIndex,
                                          0, ColIndex, nil, SectionIndex, Annotation,
                                          AssignmentMethod));
                                      end;
                                    end;
                                  end;
                                eaNodes:
                                  begin
                                    if (Orientation = dsoTop) or
                                      ((FScreenObject.TopElevation >= LowerBound)
                                      and (FScreenObject.BottomElevation <= UpperBound))
                                      then
                                    begin
                                      CellList.Add(TCellAssignment.Create(
                                        ElevationIndex, 0,
                                        ColIndex, nil, SectionIndex, Annotation,
                                        AssignmentMethod));
                                    end;
                                  end;
                                else Assert(False);
                              end;
                            end;
                          end;
                        else Assert(False);
                      end;
                    end
                  else Assert(False);
                end;
              end;
            end;
          end;
        end
      end;

    end;
    if FScreenObject.SetValuesOfIntersectedCells then
    begin
      if FScreenObject.SetValuesOfEnclosedCells then
      begin
        if LocalModel.ModelSelection in SutraSelection then
        begin
          case EvalAt of
            eaBlocks:
              begin
                SetLength(UsedCells, LocalModel.LayerCount+1, LocalModel.RowCount+1,
                  LocalModel.ColumnCount + 1);
              end;
            eaNodes:
              begin
                SetLength(UsedCells, LocalModel.LayerCount+1, LocalModel.RowCount+1,
                  LocalModel.Mesh3D.Mesh2DI.NodeCount + 1);
              end;
          end;
        end
        else
        begin
          SetLength(UsedCells, LocalModel.LayerCount+1, LocalModel.RowCount+1,
            LocalModel.ColumnCount + 1);
        end;
        for CellIndex := 0 to CellList.Count - 1 do
        begin
          ACell := CellList[CellIndex];
          UsedCells[ACell.Layer, ACell.Row, ACell.Column] := True;
        end;
      end;
      PriorCol := -1;
      PriorRow := -1;
      PriorLayer := -1;
      FirstElevationIndex := 0;
      LastElevationIndex := -1;
      for SegmentIndex := 0 to FScreenObject.Segments[AModel].Count - 1 do
      begin
        ASegment := FScreenObject.Segments[AModel][SegmentIndex];
        if (ASegment.Col <> PriorCol) or (ASegment.Row <> PriorRow)
          or (ASegment.Layer <> PriorLayer) then
        begin
          UpdateCurrentSegment(ASegment);
          OtherIndex(ASegment.Row, ASegment.Col, FirstElevationIndex,
            LastElevationIndex, DataSet, AModel);
          PriorCol := ASegment.Col;
          PriorRow := ASegment.Row;
          PriorLayer := ASegment.Layer;
        end;
        if (FirstElevationIndex >= 0)
          and (LastElevationIndex <= LayerLimit)
          and ((Orientation = dsoTop)
            or (ASegment.Layer >= FirstElevationIndex)
              and (ASegment.Layer <= LastElevationIndex)) then
        begin
          LayerIndex := ASegment.Layer;
//          for LayerIndex := FirstElevationIndex to LastElevationIndex do
          begin
            UpdateCurrentSegment(ASegment);
            if IAnnotation = '' then
            begin
              IAnnotation := IntersectAnnotation(DataSetFunction, OtherData);
            end;
            Annotation := IAnnotation;

            UpperBound := 0;
            LowerBound := 0;
            if Mesh.Is3DMesh then
            begin
              case FScreenObject.ElevationCount of
                ecZero: ; // do nothing
                ecOne:
                  begin
                    FScreenObject.FTopElevation :=
                      FScreenObject.Higher3DElevations[AModel][
                        ASegment.Layer, ASegment.Row, ASegment.Col];
                    FScreenObject.FBottomElevation :=
                      FScreenObject.TopElevation
                  end;
                ecTwo:
                  begin
                    FScreenObject.FTopElevation :=
                      FScreenObject.Higher3DElevations[AModel][
                        ASegment.Layer, ASegment.Row, ASegment.Col];
                    FScreenObject.FBottomElevation :=
                      FScreenObject.Lower3DElevations[AModel][
                        ASegment.Layer, ASegment.Row, ASegment.Col];
                  end;
                else Assert(False);
              end;
              UpperBound := 0;
              LowerBound := 0;
              if FScreenObject.ElevationCount in [ecOne, ecTwo] then
              begin
                case EvalAt of
                  eaBlocks:
                    begin
                      Element3D := Mesh.ElementArrayI[LayerIndex, ASegment.Col];
                      if not Element3D.Active then
                      begin
                        Continue;
                      end;
                      UpperBound := Element3D.UpperElevation;
                      LowerBound := Element3D.LowerElevation;
                    end;
                  eaNodes:
                    begin
                      Node3D := Mesh.NodeArrayI[LayerIndex, ASegment.Col];
                      if not Node3D.Active then
                      begin
                        Continue;
                      end;
                      UpperBound := Node3D.Top;
                      LowerBound := Node3D.Bottom;
                    end;
                else
                  Assert(False);
                end;
              end;
            end;
            ACell := nil;
            case Mesh.Is3DMesh of
              False:
                begin
                  ACell := TCellAssignment.Create(ASegment.Layer,
                    ASegment.Row, ASegment.Col, ASegment,
                    ASegment.SectionIndex, Annotation, amIntersect);
//                  CellList.Add(ACell);
                  ACell.SutraX := (ASegment.X1 + ASegment.X2)/2;
                  ACell.SutraY := (ASegment.Y1 + ASegment.Y2)/2;
                  ACell.SutraZ :=0;
                end;
              True:
                begin
                  case FScreenObject.ElevationCount of
                    ecZero:
                      begin
                        ACell := TCellAssignment.Create(LayerIndex,
                          ASegment.Row, ASegment.Col, ASegment,
                          ASegment.SectionIndex, Annotation, amIntersect);
//                        CellList.Add(ACell);
                        ACell.SutraX := (ASegment.X1 + ASegment.X2)/2;
                        ACell.SutraY := (ASegment.Y1 + ASegment.Y2)/2;
                        ACell.SutraZ :=0;
                      end;
                    ecOne:
                      begin
                        case FScreenObject.EvaluatedAt of
                          eaBlocks:
                            begin
                              if (Orientation = dsoTop) or
                                (((FScreenObject.TopElevation >= LowerBound)
                                and (FScreenObject.BottomElevation < UpperBound))
                                or  ((FScreenObject.BottomElevation = UpperBound)
                                and (LayerIndex = 0))) then
                              begin
                                ACell := TCellAssignment.Create(LayerIndex,
                                  ASegment.Row, ASegment.Col, ASegment,
                                  ASegment.SectionIndex, Annotation, amIntersect);
//                                CellList.Add(ACell);
                                ACell.SutraX := (ASegment.X1 + ASegment.X2)/
                                  2;
                                ACell.SutraY := (ASegment.Y1 + ASegment.Y2)/
                                  2;
                                ACell.SutraZ :=FScreenObject.FTopElevation;
                              end;
                            end;
                          eaNodes:
                            begin
                              Intersected := False;
                              if Orientation = dsoTop then
                              begin
                                Intersected := True;
                              end
                              else if (FScreenObject.TopElevation >= LowerBound) then
                              begin
                                if (FScreenObject.BottomElevation < UpperBound) then
                                begin
                                  Intersected := True;
                                end
                                else if (FScreenObject.BottomElevation = UpperBound) then
                                begin
                                  if (LayerIndex = 0) then
                                  begin
                                    Intersected := True;
                                  end
                                  else
                                  begin
                                    Node2 := Mesh.NodeArrayI[LayerIndex-1, ASegment.Col];
                                    if not Node2.Active then
                                    begin
                                      Intersected := True;
                                    end;
                                  end;
                                end;
                              end;
                              if Intersected then
                              begin
                                ACell := TCellAssignment.Create(LayerIndex,
                                  ASegment.Row, ASegment.Col, ASegment,
                                  ASegment.SectionIndex, Annotation, amIntersect);
//                                CellList.Add(ACell);
                                ACell.SutraX := (ASegment.X1 + ASegment.X2)/
                                  2;
                                ACell.SutraY := (ASegment.Y1 + ASegment.Y2)/
                                  2;
                                ACell.SutraZ :=FScreenObject.FTopElevation;
                              end;
                            end;
                          else Assert(False);
                        end;
                      end;
                    ecTwo:
                      begin
                        case FScreenObject.EvaluatedAt of
                          eaBlocks:
                            begin
                              Middle := (LowerBound + UpperBound)/2;
//                              if (Orientation = dsoTop) or
//                                ((FScreenObject.TopElevation >= Middle)
//                                and (FScreenObject.BottomElevation <= Middle)) then
                              if (Orientation = dsoTop) or
                                ((FScreenObject.TopElevation >= LowerBound)
                                and (FScreenObject.BottomElevation <= UpperBound)) then
                              begin
                                ACell := TCellAssignment.Create(LayerIndex,
                                  ASegment.Row, ASegment.Col, ASegment,
                                  ASegment.SectionIndex, Annotation, amIntersect);
//                                CellList.Add(ACell);
                                ACell.SutraX := (ASegment.X1 + ASegment.X2)/
                                  2;
                                ACell.SutraY := (ASegment.Y1 + ASegment.Y2)/
                                  2;
                                ACell.SutraZ := Middle;
                              end;
                            end;
                          eaNodes:
                            begin
                              if (Orientation = dsoTop) or
                                ((FScreenObject.TopElevation >= LowerBound)
                                and (FScreenObject.BottomElevation <= UpperBound)) then
                              begin
                                ACell := TCellAssignment.Create(LayerIndex,
                                  ASegment.Row, ASegment.Col, ASegment,
                                  ASegment.SectionIndex, Annotation, amIntersect);
//                                CellList.Add(ACell);
                                ACell.SutraX := (ASegment.X1 + ASegment.X2)/
                                  2;
                                ACell.SutraY := (ASegment.Y1 + ASegment.Y2)/
                                  2;
                                ACell.SutraZ := (FScreenObject.FTopElevation
                                  + FScreenObject.FBottomElevation)/2;
                              end;
                            end;
                          else Assert(False);
                        end;
                      end;
                    else Assert(False);
                  end;
                end;
              else Assert(False);
            end;
            if ACell <> nil then
            begin
              if FScreenObject.SetValuesOfEnclosedCells then
              begin
                if UsedCells[ACell.Layer, ACell.Row, ACell.Column]
                  and FScreenObject.SectionClosed[ASegment.SectionIndex] then
                begin
                  ACell.Free;
                end
                else
                begin
                  CellList.Add(ACell);
                  UsedCells[ACell.Layer, ACell.Row, ACell.Column] := True;
                end;
              end
              else
              begin
                CellList.Add(ACell);
              end;
            end;
          end
        end;
      end;
    end;
  finally
    FScreenObject.UpdateCellCache(CellList, EvalAt,
      Orientation, AssignmentLocation, AModel);
  end;
end;

procedure TCustomMeshDelegate.InitializeExpression(out Compiler: TRbwParser;
  out DataSetFunction: string; out Expression: TExpression;
  const DataSet: TDataArray; const OtherData: TObject; AModel: TBaseModel);
var
  DataObject: TModflowDataObject;
  ResultTypeOK: Boolean;
  NameToDisplay: string;
  TypeToCheck: TRbwDataType;
begin
  if OtherData = nil then
  begin
    inherited;
  end
  else
  begin
    DataObject := OtherData as TModflowDataObject;
    Compiler := DataObject.Compiler;
    DataSetFunction := DataObject.DataSetFunction;

    try
      Compiler.Compile(DataSetFunction);
    except on E: ERbwParserError do
      begin
        if DataSet <> nil then
        begin
          NameToDisplay := DataSet.Name;
          frmFormulaErrors.AddFormulaError(FScreenObject.Name,
            NameToDisplay, DataSetFunction, StrInvalidFormula);
        end
        else
        begin
          NameToDisplay := DataObject.AlternateName;
          frmFormulaErrors.AddFormulaError(FScreenObject.Name,
            NameToDisplay, DataSetFunction, StrInvalidFormula);
        end;
        DataSetFunction := '0';
        Compiler.Compile(DataSetFunction);
      end;
    end;
    Expression := Compiler.CurrentExpression;
    if DataSet <> nil then
    begin
      TypeToCheck := DataSet.Datatype;
    end
    else
    begin
      TypeToCheck := DataObject.AlternateDataType;
    end;
    ResultTypeOK := (Expression.ResultType = TypeToCheck)
      or ((Expression.ResultType = rdtInteger)
      and (TypeToCheck = rdtDouble));
    if not ResultTypeOK then
    begin
      raise EInvalidDataType.Create(Format(StrTheFormula0sIn,
        [Expression.Decompile, FScreenObject.Name]), Expression.Decompile);
//      raise EInvalidDataType.Create(StrInvalidDataType, Expression.Decompile);
    end;

  end;
end;

procedure TCustomMeshDelegate.ShowWarningNoCells(CellList: TCellAssignmentList);
var
  WarningMessage: string;
begin
  if (CellList.Count = 0) and
    (FScreenObject.SetValuesOfEnclosedCells
    or FScreenObject.SetValuesOfIntersectedCells) then
  begin
    case FScreenObject.EvaluatedAt of
      eaBlocks:
        begin
          WarningMessage := Format(StrTheFollowingObject, [StrElements]);
        end;
      eaNodes:
        begin
          WarningMessage := Format(StrTheFollowingObject, [StrNodes]);
        end;
    else
      Assert(False);
    end;
    frmErrorsAndWarnings.AddWarning(frmGoPhast.PhastModel, WarningMessage,
      FScreenObject.Name, FScreenObject);
  end;
end;

procedure TCustomMeshDelegate.OtherIndex(const LayerOrRow, RowOrColumn: integer;
  out First, Last: integer; const DataSet: TDataArray; AModel: TBaseModel);
var
  Mesh: IMesh3D;
//var
//  Mesh: TSutraMesh3D;
begin
  if (DataSet <> nil) and (DataSet.Orientation <> dso3D) then
  begin
    First := 0;
    Last := 0;
  end
  else
  begin
    case FScreenObject.ElevationCount of
      ecZero:
        begin
          First := 0;
          Last := 0;
        end;
      ecOne, ecTwo:
        begin
          First := 0;
          Mesh := (FModel as TCustomModel).Mesh3D;
          if not Mesh.Is3DMesh then
          begin
            Last := 0;
          end
          else
          begin
            case FScreenObject.ViewDirection of
              vdTop:
                begin
                  case FScreenObject.EvaluatedAt of
                    eaBlocks: Last := Mesh.LayerCount-1;
                    eaNodes: Last := Mesh.LayerCount;
                    else Assert(False);
                  end;
                end;
              vdFront:
                begin
                  Assert(False);
                end;
              vdSide:
                begin
                  Assert(False);
                end;
              else Assert(False);
            end;
          end;
        end;
    else
      Assert(False);
    end;
  end;
end;

function Intersect(const Segment: TSegment2D; const Polygon: TPolygon2D;
  out IntersectArray: TSegment2DArray): Boolean; overload;
var
  PointList: TVertexList;
  NodelIndex: Integer;
  PriorIndex: Integer;
  IntersectPoint: TPoint2D;
  PointIndex: Integer;
  IntersectIndex: integer;
  APoint: TPoint2D;
begin
  result := False;
  try
    PointList := TVertexList.Create;
    try
      PointList.Capacity := Length(Polygon) + 2;
      if ModelMuseUtilities.PointInConcavePolygon(Segment[1], Polygon) then
      begin
        PointList.Add(Segment[1]);
      end;
      if ModelMuseUtilities.PointInConcavePolygon(Segment[2], Polygon) then
      begin
        PointList.Add(Segment[2]);
      end;
      PriorIndex := Length(Polygon) - 1;
      for NodelIndex := 0 to Length(Polygon) - 1 do
      begin
        if Intersect(Segment,
          EquateSegment(Polygon[NodelIndex], Polygon[PriorIndex]),
          IntersectPoint.x, IntersectPoint.y) then
        begin
          PointList.Add(IntersectPoint);
        end;
        PriorIndex := NodelIndex
      end;

      if PointList.Count > 1 then
      begin
        if Segment[2].x >= Segment[1].x then
        begin
          if Segment[2].y >= Segment[1].y then
          begin
            PointList.Sort(TPoint2DComparer.Construct(ComparePointRightUp));
          end
          else
          begin
            PointList.Sort(TPoint2DComparer.Construct(ComparePointRightDown));
          end;
        end
        else
        begin
          if Segment[2].y >= Segment[1].y then
          begin
            PointList.Sort(TPoint2DComparer.Construct(ComparePointLeftUp));
          end
          else
          begin
            PointList.Sort(TPoint2DComparer.Construct(ComparePointLeftDown));
          end;
        end;
      end;
      for PointIndex := PointList.Count-2 downto 0 do
      begin
        if IsEqual(PointList[PointIndex],
          PointList[PointIndex+1], Epsilon) then
        begin
          PointList.Delete(PointIndex);
        end;
      end;
      if PointList.Count = 1 then
      begin
        PointList.Add(PointList[0]);
      end;

      if PointList.Count > 0 then
      begin
        SetLength(IntersectArray, PointList.Count-1);
      end
      else
      begin
        SetLength(IntersectArray, 0);
        result := False;
        Exit;
      end;
      IntersectIndex := 0;
      for PointIndex := 0 to PointList.Count - 2 do
      begin
        APoint.x := (PointList[PointIndex].x
          + PointList[PointIndex+1].x)/2;
        APoint.y := (PointList[PointIndex].y
          + PointList[PointIndex+1].y)/2;
        if ModelMuseUtilities.PointInConcavePolygon(APoint, Polygon) then
        begin
          IntersectArray[IntersectIndex] :=
            EquateSegment(PointList[PointIndex],
            PointList[PointIndex+1]);
          Inc(IntersectIndex);
        end;
      end;
      SetLength(IntersectArray, IntersectIndex);
      result := IntersectIndex > 0;

    finally
      PointList.Free;
    end;
  finally
    if result then
    begin
      for IntersectIndex := 0 to Length(IntersectArray) - 1 do
      begin
        UpdateSegmentOrientation(Segment, IntersectArray[IntersectIndex]);
      end;
    end;
  end;
end;

procedure TCustomMeshDelegate.UpdateFrontSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
var
  Mesh: IMesh3D;
//  Polygons: TCellElementPolygons2D;
  VertexIndex: Integer;
//  EndSection: Boolean;
  SectionIndex: integer;
  IncrementedSectionIndex: Boolean;
  APoint: TPoint2D;
//  LayerCount: integer;
//  ColCount: integer;
  LayerIndex: integer;
  ColIndex: integer;
  ASegment: TCellElementSegment;
  Segment2D: TSegment2D;
  Segments2D: TSegment2DArray;
//  Seg: TSegment2D;
  InterSectIndex: Integer;
//  Limits: TLimitsArray;
  PriorVertex: Integer;
  StartPos: TEdgePosition;
  EndPos: TEdgePosition;
  IntersectSeg: TSegment2D;
  IntervalTree: TRbwIntervalTree;
  PointArray: TOneDRealArray;
  AList: TList;
  ObjectIndex: integer;
  PolyObject: TFrontPolygon;
  RangeTree: TRbwRangeTree;
  SearchIntervals: TSearchArray;
  Limits: TGridLimit;
  EpsilonX: double;
  EpsilonY: double;
  procedure CreateSegment(Point1, Point2: TPoint2D);
  begin

    ASegment := TCellElementSegment.Create(FScreenObject);
    ASegment.StartPosition := StartPos;
    ASegment.EndPosition := EndPos;
    ASegment.X1 := Point1.X;
    ASegment.X2 := Point2.X;
    ASegment.Y1 := Point1.Y;
    ASegment.Y2 := Point2.Y;
    ASegment.Col := ColIndex;
    ASegment.Row := 0;
    ASegment.Layer := LayerIndex;
    ASegment.VertexIndex := PriorVertex;
    if IncrementedSectionIndex then
    begin
      ASegment.SectionIndex := SectionIndex-1;
    end
    else
    begin
      ASegment.SectionIndex := SectionIndex;
    end;
    FScreenObject.FSegments.Add(ASegment);
  end;
  procedure SortSegments;
  var
    SegIndex: NativeInt;
  begin
    FScreenObject.FSegments.Sort(CompareFrontSegments);
    for SegIndex := 0 to FScreenObject.FSegments.Count - 1 do
    begin
      FScreenObject.FSegments[SegIndex].PositionInSegmentList := SegIndex;
    end;
  end;
begin
  Assert(FScreenObject.ViewDirection = vdFront);
  Mesh := (AModel as TCustomModel).Mesh3D;
  FScreenObject.FSegments.Clear;
  SectionIndex := 0;
  IntervalTree := nil;
  RangeTree := nil;
  if Mesh <> nil then
  begin
    SetLength(PointArray,2);
//    Polygons:= Mesh.FrontPolygons(FScreenObject.SutraAngle,
//      FScreenObject.EvaluatedAt, Limits);
//    LayerCount := Length(Polygons);
//    ColCount := Length(Polygons[0]);
    for VertexIndex := 0 to FScreenObject.Count - 1 do
    begin
//      EndSection := False;
      APoint := FScreenObject.Points[VertexIndex];
      if (SectionIndex < FScreenObject.SectionCount)
        and (FScreenObject.SectionLength[SectionIndex] = 1) then
      begin
        StartPos := epFirst;
        EndPos := epLast;
        IncrementedSectionIndex := False;
        PriorVertex := VertexIndex;
        PointArray[0] := APoint.x;
        PointArray[1] := APoint.y;

        if IntervalTree = nil then
        begin
          IntervalTree := Mesh.IntervalTree[FScreenObject.EvaluatedAt,
            FScreenObject.SutraAngle];
        end;
        AList := TList.Create;
        try
          IntervalTree.FindContainingObjects(PointArray, AList);
          for ObjectIndex := 0 to AList.Count - 1 do
          begin
            PolyObject := AList[ObjectIndex];
            if ModelMuseUtilities.PointInConcavePolygon(APoint, PolyObject.Polygon) then
            begin
              ColIndex := PolyObject.Col;
              LayerIndex := PolyObject.Layer;
              CreateSegment(APoint, APoint);
            end;
          end;
        finally
          AList.Free;
        end;

//        for LayerIndex := 0 to LayerCount - 1 do
//        begin
//          for ColIndex := 0 to ColCount - 1 do
//          begin
//            if PointInConcavePolygon(APoint, Polygons[LayerIndex, ColIndex]) then
//            begin
//              CreateSegment(APoint, APoint);
//            end;
//          end;
//        end;
        Inc(SectionIndex);
      end
      else
      begin
        // get a line segment and identify the cells along it.
        if (VertexIndex = FScreenObject.SectionStart[SectionIndex])  then
        begin
          Continue;
        end;
        PriorVertex := VertexIndex-1;
        IncrementedSectionIndex := False;
        if (VertexIndex = FScreenObject.SectionEnd[SectionIndex]) then
        begin
          Inc(SectionIndex);
  //        EndSection := True;
          IncrementedSectionIndex := True;
        end;
        Segments2D := nil;
        Segment2D[2] := APoint;
        Segment2D[1] := FScreenObject.Points[VertexIndex-1];

        Limits := Mesh.MeshLimits(vdFront, FScreenObject.SutraAngle);
        EpsilonX := (Limits.MaxX - Limits.MinX)/1e8;
        EpsilonY := (Limits.MaxZ - Limits.MinZ)/1e8;

        if RangeTree = nil then
        begin
          RangeTree := Mesh.RangeTree[FScreenObject.EvaluatedAt,
            FScreenObject.SutraAngle];
          SetLength(SearchIntervals, 4);
          SearchIntervals[0].LowerBoundary := RangeTree.Min(0)-EpsilonX;
          SearchIntervals[1].UpperBoundary := RangeTree.Max(1)+EpsilonX;
          SearchIntervals[2].LowerBoundary := RangeTree.Min(2)-EpsilonY;
          SearchIntervals[3].UpperBoundary := RangeTree.Max(3)+EpsilonY;
        end;
        SearchIntervals[0].UpperBoundary :=
          Max(Segment2D[1].x, Segment2D[2].x)+EpsilonX;
        SearchIntervals[1].LowerBoundary :=
          Min(Segment2D[1].x, Segment2D[2].x)-EpsilonX;
        SearchIntervals[2].UpperBoundary :=
          Max(Segment2D[1].y, Segment2D[2].y)+EpsilonY;
        SearchIntervals[3].LowerBoundary :=
          Min(Segment2D[1].y, Segment2D[2].y)-EpsilonY;

        AList := RangeTree.Search(SearchIntervals);
        for ObjectIndex := 0 to AList.Count - 1 do
        begin
          PolyObject := AList[ObjectIndex];
          if Intersect(Segment2D, PolyObject.Polygon, Segments2D) then
          begin
            ColIndex := PolyObject.Col;
            LayerIndex := PolyObject.Layer;
            for InterSectIndex := 0 to Length(Segments2D) -1 do
            begin
              IntersectSeg := Segments2D[InterSectIndex];
              if (IntersectSeg[1].x = Segment2D[1].x)
                and (IntersectSeg[1].y = Segment2D[1].y) then
              begin
                StartPos := epFirst;
              end
              else
              begin
                StartPos := epMiddle;
              end;
              if (IntersectSeg[2].x = Segment2D[2].x)
                and (IntersectSeg[2].y = Segment2D[2].y) then
              begin
                EndPos := epLast;
              end
              else
              begin
                EndPos := epMiddle;
              end;
              CreateSegment(IntersectSeg[1], IntersectSeg[2]);
            end;
          end;
        end;


      end;
    end;

    SortSegments;
    FScreenObject.EliminateShortSegments(AModel);

    FScreenObject.FSegments.UpToDate := True;
  end;
end;

procedure TCustomMeshDelegate.UpdateSideSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
begin
  Assert(False);
end;

{ TModflowLGR2Delegate }

constructor TModflowLGR2Delegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msModflowLGR2;
end;

{ TModflowFmpDelegate }

constructor TModflowFmpDelegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msModflowFmp;
end;

{ TModflowCfpDelegate }

constructor TModflowCfpDelegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msModflowCfp;
end;

{ TFootprintDelegate }

procedure TFootprintDelegate.AssignValuesToFrontDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation);
begin
// do nothing
end;

procedure TFootprintDelegate.AssignValuesToSideDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation);
begin
// do nothing
end;

procedure TFootprintDelegate.AssignValuesToTopDataSet(const DataSet: TDataArray;
  OtherData: TObject; AModel: TBaseModel; UseLgrEdgeCells: TLgrCellTreatment;
  AssignmentLocation: TAssignmentLocation = alAll);
begin
  AssignValuesToDataSet(DataSet, OtherData, AModel,
    lctUse, alAll);
end;

function TFootprintDelegate.ElevationOk(const Grid: TCustomModelGrid;
  const PerpendicularIndex, ColIndex, RowIndex: integer): boolean;
begin
  result := True;
end;

procedure TFootprintDelegate.GetFrontCellsToAssign(
  const DataSetFunction: string; OtherData: TObject; const DataSet: TDataArray;
  CellList: TCellAssignmentList; AssignmentLocation: TAssignmentLocation;
  AModel: TBaseModel);
begin
// do nothing
end;

procedure TFootprintDelegate.GetSideCellsToAssign(const DataSetFunction: string;
  OtherData: TObject; const DataSet: TDataArray; CellList: TCellAssignmentList;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
begin
// do nothing
end;

procedure TFootprintDelegate.UpdateFrontSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
begin
// do nothing
end;

procedure TFootprintDelegate.UpdateSideSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
begin
// do nothing
end;

{ TModflow6Delegate }

procedure TModflow6Delegate.AssignSelectedCells(AModel: TBaseModel);
begin
  SubDelegate(AModel).AssignSelectedCells(AModel);
end;

procedure TModflow6Delegate.AssignValuesToFrontDataSet(
  const DataSet: TDataArray; OtherData: TObject; AModel: TBaseModel;
  UseLgrEdgeCells: TLgrCellTreatment; AssignmentLocation: TAssignmentLocation);
begin
  SubDelegate(AModel).AssignValuesToFrontDataSet(
    DataSet, OtherData, AModel, UseLgrEdgeCells, AssignmentLocation);
end;

procedure TModflow6Delegate.AssignValuesToSideDataSet(const DataSet: TDataArray;
  OtherData: TObject; AModel: TBaseModel; UseLgrEdgeCells: TLgrCellTreatment;
  AssignmentLocation: TAssignmentLocation);
begin
  SubDelegate(AModel).AssignValuesToSideDataSet(DataSet,
    OtherData, AModel, UseLgrEdgeCells, AssignmentLocation);
end;

procedure TModflow6Delegate.AssignValuesToTopDataSet(const DataSet: TDataArray;
  OtherData: TObject; AModel: TBaseModel; UseLgrEdgeCells: TLgrCellTreatment;
  AssignmentLocation: TAssignmentLocation);
begin
  SubDelegate(AModel).AssignValuesToTopDataSet(DataSet,
    OtherData, AModel, UseLgrEdgeCells, AssignmentLocation);
end;

constructor TModflow6Delegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msModflow2015;
  FDisvDelegate := TDisvDelegate.Create(ScreenObject);
  FDisvDelegate.FModelSelection := msModflow2015;
  FDisDelegate := TModflowDelegate.Create(ScreenObject);
  FDisDelegate.FModelSelection := msModflow2015;
end;

destructor TModflow6Delegate.Destroy;
begin
  FDisDelegate.Free;
  FDisvDelegate.Free;
  inherited;
end;

procedure TModflow6Delegate.GetFrontCellsToAssign(const DataSetFunction: string;
  OtherData: TObject; const DataSet: TDataArray; CellList: TCellAssignmentList;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
begin
  Subdelegate(AModel).GetFrontCellsToAssign(DataSetFunction, OtherData, DataSet, CellList,
    AssignmentLocation, AModel);
end;

procedure TModflow6Delegate.GetSideCellsToAssign(const DataSetFunction: string;
  OtherData: TObject; const DataSet: TDataArray; CellList: TCellAssignmentList;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
begin
  Subdelegate(AModel).GetSideCellsToAssign(DataSetFunction,
    OtherData, DataSet, CellList, AssignmentLocation, AModel);
end;

procedure TModflow6Delegate.GetTopCellsToAssign(const DataSetFunction: string;
  OtherData: TObject; const DataSet: TDataArray; CellList: TCellAssignmentList;
  AssignmentLocation: TAssignmentLocation; AModel: TBaseModel);
begin
  Subdelegate(AModel).GetTopCellsToAssign(DataSetFunction,
    OtherData, DataSet, CellList, AssignmentLocation, AModel);	
end;

procedure TModflow6Delegate.InitializeExpression(out Compiler: TRbwParser;
  out DataSetFunction: string;
  out Expression: TExpression;
  const DataSet: TDataArray; const OtherData: TObject; AModel: TBaseModel);
begin
  Subdelegate(AModel).InitializeExpression(Compiler,
    DataSetFunction, Expression, DataSet, OtherData, AModel);
end;

procedure TModflow6Delegate.OtherIndex(const LayerOrRow, RowOrColumn: integer;
  out First, Last: integer; const DataSet: TDataArray; AModel: TBaseModel);
begin
  Subdelegate(AModel).OtherIndex(LayerOrRow, RowOrColumn,
    First, Last, DataSet, AModel);
 end;

function TModflow6Delegate.Subdelegate(
  AModel: TBaseModel): TCustomScreenObjectDelegate;
var
  LocalModel: TCustomModel;
  Disv: TModflowDisvGrid;
begin
  LocalModel := AModel as TCustomModel;
  if LocalModel.DisvUsed then
  begin
    Disv := LocalModel.DisvGrid;
    if Disv.AssigningQuadRefinement then
    begin
      result := FDisDelegate;
    end
    else
    begin
      result := FDisvDelegate;
    end;
  end
  else
  begin
    result := FDisDelegate;
  end;
  FSelectedCells := result.SelectedCells;
end;

procedure TModflow6Delegate.UpdateFrontSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
begin
  Subdelegate(AModel).UpdateFrontSegments(AModel, EvaluatedAt);
end;

procedure TModflow6Delegate.UpdateSideSegments(AModel: TBaseModel;
  const EvaluatedAt: TEvaluatedAt);
begin
  Subdelegate(AModel).UpdateSideSegments(AModel, EvaluatedAt);
end;

{ TSutra30Delegate }

constructor TSutra30Delegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msSutra30;
end;

{ TEdgePoint }

function TEdgePoint.Distance(AnotherPoint: TEdgePoint): double;
begin
  result := Sqrt(Sqr(X-AnotherPoint.X) + Sqr(Y-AnotherPoint.Y));
end;

{ TDisvDelegate }

constructor TDisvDelegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FSelectedCells := TSelectedCells.Create;
end;

destructor TDisvDelegate.Destroy;
begin
  FSelectedCells.Free;
  inherited;
end;

procedure TDisvDelegate.InitializeExpression(out Compiler: TRbwParser;
  out DataSetFunction: string; out Expression: TExpression;
  const DataSet: TDataArray; const OtherData: TObject; AModel: TBaseModel);
var
  DataObject: TModflowDataObject;
  ResultTypeOK: Boolean;
  NameToDisplay: string;
  TypeToCheck: TRbwDataType;
begin
  if OtherData = nil then
  begin
    inherited;
  end
  else
  begin
    DataObject := OtherData as TModflowDataObject;
    Compiler := DataObject.Compiler;
    DataSetFunction := DataObject.DataSetFunction;

    try
      Compiler.Compile(DataSetFunction);
    except on E: ERbwParserError do
      begin
        if DataSet <> nil then
        begin
          NameToDisplay := DataSet.Name;
          frmFormulaErrors.AddFormulaError(FScreenObject.Name,
            NameToDisplay, DataSetFunction, StrInvalidFormula);
        end
        else
        begin
          NameToDisplay := DataObject.AlternateName;
          frmFormulaErrors.AddFormulaError(FScreenObject.Name,
            NameToDisplay, DataSetFunction, StrInvalidFormula);
        end;
        DataSetFunction := '0';
        Compiler.Compile(DataSetFunction);
      end;
    end;
    Expression := Compiler.CurrentExpression;
    if DataSet <> nil then
    begin
      TypeToCheck := DataSet.Datatype;
    end
    else
    begin
      TypeToCheck := DataObject.AlternateDataType;
    end;
    ResultTypeOK := (Expression.ResultType = TypeToCheck)
      or ((Expression.ResultType = rdtInteger)
      and (TypeToCheck = rdtDouble));
    if not ResultTypeOK then
    begin
      raise EInvalidDataType.Create(Format(StrTheFormula0sIn,
        [Expression.Decompile, FScreenObject.Name]), Expression.Decompile);
//      raise EInvalidDataType.Create(StrInvalidDataType, Expression.Decompile);
    end;
  end;
end;

{ TPointItem }

//function TPointItem.GetPoint2D: TPoint2D;
//begin
//  result := EquatePoint(X, Y);
//end;
//
//procedure TPointItem.SetPoint2D(const Value: TPoint2D);
//begin
//  X := Value.x;
//  Y := Value.y;
//end;

{ TSutra40Delegate }

constructor TSutra40Delegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msSutra40;
end;

{ TModflowFmp4Delegate }

constructor TModflowFmp4Delegate.Create(ScreenObject: TScreenObject);
begin
  inherited;
  FModelSelection := msModflowOwhm2;
end;

initialization
  RegisterClass(TScreenObject);
  RegisterClass(TPhastDelegate);
  RegisterClass(TModflowDelegate);
  RegisterClass(TModflowLGRDelegate);
  RegisterClass(TModflowLGR2Delegate);
  RegisterClass(TModflowNWTDelegate);
  RegisterClass(TModflowFmpDelegate);
  RegisterClass(TModflowCfpDelegate);
  RegisterClass(TSutra22Delegate);
  RegisterClass(TSutra30Delegate);
  RegisterClass(TSutra40Delegate);
  RegisterClass(TFootprintDelegate);
  RegisterClass(TMultiValueScreenObject);
  RegisterClass(TScreenObjectClipboard);
  RegisterClass(TModflow6Delegate);
  RegisterClass(TModflowFmp4Delegate);

end.





